# RestServer
> RestServer作为整个系统的一个入口,要建立任何连接的时候都要先通过RestServer的servers接口来获得负载较小的服务器进行连接.RestServer的默认端口是9900,可以根据实际需求进行更改

## 相关接口
> RestServer 里面的接口URL最后面都要带上一个token,这个token是通过XTEA算法加密的一个字符串.

1. /push/{token}
    - 描述
        - 推送消息,可以向指定的别名进行推送,也可以向指定的频道进行推送. 
    - 使用
        - 请求方式
            - POST
        - 参数
        ```
        //指定频道推送
        { "t":6, "method":"publish", "topic":["频道"], "msg":"消息内容","opts":{ "time_to_live":<number> }, "num":"" }
        //指定别名推送
        { "t":6, "method":"publish_to_alias", "alias":["别名"],"msg":"消息内容", "opts":{ "time_to_live":<number> }, "num":"" }
        ```
        - 返回数据
            - 成功
            
                ```
                    {"t":-6,"num":<number>}
                ```
            - 失败
            
                ```
                {"t":0,"error":"error Message","num":<number>}
                ```
2. /info/{token}
    - 描述
        - 获取整个集群的信息 
    - 使用 
        - 请求方式
            - GET 
        - 参数
            - {token} 
        - 返回数据
        ```
        //返回整个集群的连接数量
        {
            "10.0.0.215":{"webSocketSize":0,"channelSize":0,"onlineAllSize":0,"socketIOSize":0},
            "10.0.0.214":{"webSocketSize":0,"channelSize":0,"onlineAllSize":1,"socketIOSize":1}
        }
        ```
3. /info/servers/{token}
    - 描述
        - 通过负载均衡返回负载最小的服务器 
    - 使用
        - 请求方式
            - GET 
        - 参数
            - {token} 
        - 返回数据
        ```
        //返回负载最小的服务器IP地址
        {
            "service":{
                        "rest":9900,
                        "webSocket":9000,
                        "socket":9906,
                        "push":9800
                        },
            "host":"10.0.0.215"
        }
        ```
4. /info/status/{alias}/{token}
    - 描述
        - 返回别名的一个状态,以及别名订阅的频道
    - 使用
        - 请求方式
            - GET 
        - 参数
            -  {alias}/{token}
        - 返回数据
        ```
        {"list":["m_2","c_2"],"status":"online"}
        ```
5. /info/allChannelAlias/{pageStr}/{token}
    - 描述
        - 返回所有Channel有多少个别名 
    - 使用
        - 请求方式
            - GET 
        - 参数
            -  {pageStr}/{token}
        - 返回数据
        ```
        //总数以及别名列表
        {"total":0,"list":[]}
        ```
6. /info/allSocketIOAlias/{pageStr}/{token}
    - 描述
        - 返回所有SocketIO有多少个别名
    - 使用
        - 请求方式
            - GET
        - 参数
            -  {pageStr}/{token}
        - 返回参数
        ```
        //返回总数以及别名列表
        {"total":1,"list":["test"]}
        ```
---        
# SocketIoServer
> 用于SocketIo,主要有heartbeat、register、get_topic、pull、push_c、do_push、connect、disconnect、info_status这几个事件.注意如果是第一次连接,会推送之前离线的消息。默认端口是9906.

## 相关事件说明

1. heartbeat 事件
    - 描述
        - 连接服务器之后发送心跳,用于表示该连接是存活的,在做任何操作之前都应该发送心跳,以便于确认连接是可用的. 
    - 使用
        - 发送数据
        ```
        //t  表示心跳类型
        //alias  表示别名
        {'t': 1,'alias': alias}
        ```
        - 返回数据
        ```
        //t  表示回复心跳类型
        //alias  表示别名
        {'t': -1,'alias': alias}
        ```
        - 触发事件 heartbeat_c
2. register 事件
    - 描述
        - 用于订阅一些频道
    - 使用
        - 发送数据
        ```
        { "t":2, "topic":["频道"], "num":"" }
        //或者
        { "t":2, "topic":["频道"],"info":{"communityId":"小区id","name":"设备名称"},"num":"通信码，推荐使用时间戳" }
        ```
        - 返回数据
        ```
        //成功
        { "t":-2, "num":"" }
        //失败
        { "t":0, "error":"错误信息", "num":"" }
        ```
        - 触发事件 register_c
3. get_topic 事件
    - 描述
        - 用于获取已经订阅的频道
    - 使用
        - 发送数据
        ```
        { "t":3, "num":"" }
        ```
        - 返回数据
        ```
        { "t":-3, "num":"", "topic":[""] }
        ```
        - 触发事件 get_topic_c
4. pull 事件
    - 描述
        - 用于拉取消息
    - 使用
        - 发送数据
        ```
        { "t":4, "num":"" }
        //或者
        {'t': 4, 'alias': alias, 'num':num}
        ```
        - 返回数据
        ```
        { "t":-4, "msg":["消息内容"], "num":"" }
        ```
        - 触发事件 pull_c
5. push_c 事件
    - 描述
        - 用于应答推送事件
    - 使用
        - 发送数据
        ```
        {'t':-5,'alias':alias,'mid':mid}
        ```
        - 返回数据
        ```
        null
        //或者
        { "t":0, "error":"错误信息", "num":"" }
        ```
        - 触发事件 无
6. do_push 事件
    - 描述
        - 主动推送消息
    - 使用
        -  发送数据
        ```
        {'t':6, 'method':'publish', 'topic': [''], 'msg': msg, 'opts':opts, 'num': num}
        //或者
        {'t':6, 'method':'publish_to_alias', 'alias': [''], 'msg': msg, 'opts':opts, 'num': num}
        ```
        -  返回数据
        ```
        //成功
        {'t':-6,'num':num}
        //失败
        {'t':0,'error':'Error Message','num':'num'}
        ```
        - 触发事件 do_push_c
7. connect 事件
    - 描述
        - 连接服务器
    - 使用
        - 发送数据
        ```
         {'alias':alias}
        ```
        - 返回数据 无
        - 触发事件 connect_c
8. disconnect 事件
    - 描述
        - 断开服务器连接
    - 使用
        - 发送数据
        ```
        {'alias':alias}
        ```
        - 返回数据 无
        - 触发事件 disconnect
9. info_status 事件
    - 描述
        - 获取别名状态信息
    - 使用
        - 发送数据
        ```
        {'alias': alias}
        ```
        - 返回数据
        ```
        {"alias":"alias",list":["m_2","c_2"],"status":"online"}
        ```
        - 触发事件 info_status_c
---        
# PushServer  
> PushServer 与 socketIO 差不多,主要是根据ype来区分各种功能,这里的type跟上面的t是相对应的,注意发送数据的应该以\n作为结束符,默认端口9800
## 类型说明

1. Type 1 心跳
    - 描述
        - 发送心跳信息,保持连接,在任何操作之前都应该发送心跳来确认服务器是否存活
    - 使用
        - 发送数据
        ```
        { "t":1, "alias":"别名" }
        ```
        - 返回数据
        ```
        { "t":-1 "alias":"别名" }
        ```
2. Type 2 注册
    - 描述
        - 用于订阅一些频道
    - 使用
        - 发送数据
        ```
        { "t":2, "topic":["频道"], "num":"" }
        //或者
        { "t":2, "topic":["频道"],"info":{"communityId":"小区id","name":"设备名称"},"num":"通信码，推荐使用时间戳" }
        ```
        - 返回数据
        ```
        //成功
        { "t":-2, "num":"" }
        //失败
        { "t":0, "error":"错误信息", "num":"" }
        ```
3. Type 3 获取已订阅的频道
    - 描述
        - 获取已订阅频道
    - 使用
        - 发送数据
        ```
        { "t":3, "num":"" }
        ```
        - 返回数据
        ```
        { "t":-3, "num":"", "topic":[""] }
        ```
4. Type 4 拉取消息
    - 描述
        - 拉取消息
    - 使用
        - 发送数据
        ```
        { "t":4, "num":"" }
        ```
        - 返回数据
        ```
        { "t":-4, "msg":["消息内容"], "num":"" }
        ```
5. Type -5 推送消息回复
    - 描述
        - 推送消息回复
    - 使用
        - 发送数据
        ```
        { "t":-5, "mid":"消息id" }
        ```
        - 返回数据
        ```
        null 或 { "t":0, "error":"错误信息", "num":"" }
        ```
6. Type 6 推送消息
    - 描述
        - 发送消息
    - 使用
        - 发送数据
        ```
         { "t":6, "method":"publish", "topic":["频道"], "msg":"消息内容","opts":{ "time_to_live":<number> }, "num":"" }
         //或者
         { "t":6, "method":"publish_to_alias", "alias":["别名"], "msg":"消息内容", "opts":{ "time_to_live":<number> }, "num":"" }
        ```
        - 返回数据
        ```
        //成功
        { "t":-6, "num":"" }
        //失败
        { "t":0, "error":"参数不全" }
        ```
7. Type 7 获取服务器消息
    - 描述
        - 获取服务器信息
    - 使用
        - 发送数据 无
        - 返回数据
        ```
        {
         "One2OneSize":1，
         "One2ManySize":1,
         "Many2ManySize":1,
         "channelSize":1
        }
        ```
8. Type 8  开门指令
    - 描述
    - 使用
        - 发送数据
        ```
        { 
            "r":"xx",
            "u":"xxx"
        }
        ```
        - 返回数据 无
9. Type 9 手机
    - 描述
    - 使用
        - 发送数据
        ```
        { 
            "r":"xx",
            "u":"xxx"
        }
        ```
        - 返回数据 无
10. Type 10 门
    - 描述
    - 使用
        - 发送数据
        ```
        { 
            "r":"xx",
            "u":"xxx"
        }
        ```
        - 返回数据 无
11. Type 11 连接
    - 描述
        - 用于连接服务器的时候发送这个连接消息,然后服务器会推送离线的消息.
    - 使用
        - 发送数据
        ```
        {'t':14,'alias':'xxx'}
        ```
        - 返回数据
        ```
        {'t':-14,'alias':'xxx'}
        ```
---
# WebSocketServer
> 用于建立webSocket连接默认端口是9000.

1. 一对多,抓拍图像
    - 使用
        - 请求方式
            - GET或者POST
        - 参数
        ```
        http://ip:port/r/d
        r:capture-小区id-楼栋门牌-单元门牌
        d:门口机或围墙机值为0，手机值为1
        ```
2. 一对一,对讲
    - 使用
        - 请求方式
            - GET或者POST
        - 参数
        ```
        http://call.zzwtec.com/r/d/device
        r:表示房间号
        d:表示主呼或被呼，主呼是0，被呼是1
        device:表示请求设备的类型，取值有android、ios
        ```
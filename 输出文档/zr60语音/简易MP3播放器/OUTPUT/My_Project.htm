<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\My_Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\My_Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Mon Apr 27 07:56:29 2015
<BR><P>
<H3>Maximum Stack Usage =       2080 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; audio_play &rArr; audio_play_song &rArr; mp3_play_song &rArr; mp3_get_info &rArr; znFAT_Open_File &rArr; znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1eb]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream4_IRQHandler</a> from dma.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from sdio_sdcard.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from timer3.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[65]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[62]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[61]">fputc</a> from usart.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[a2]">mp3_file_seek</a> from mp3play.o(.text) referenced from mp3play.o(.text)
 <LI><a href="#[ab]">mp3_i2s_dma_tx_callback</a> from mp3play.o(.text) referenced from mp3play.o(.text)
 <LI><a href="#[63]">my_mem_init</a> from malloc.o(.text) referenced from malloc.o(.data)
 <LI><a href="#[64]">my_mem_perused</a> from malloc.o(.text) referenced from malloc.o(.data)
 <LI><a href="#[df]">wav_i2s_dma_tx_callback</a> from wavcodec.o(.text) referenced from wavcodec.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[66]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[68]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ed]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ee]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[69]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1ef]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1dd]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1f0]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[73]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[200]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[201]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[202]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[203]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[204]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[205]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[206]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[207]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[208]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[209]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[67]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[20a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[70]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[72]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[20b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[74]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; audio_play &rArr; audio_play_song &rArr; mp3_play_song &rArr; mp3_get_info &rArr; znFAT_Open_File &rArr; znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[20c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1ec]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[77]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[20d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[79]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[20e]"></a>WFI_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[161]"></a>INTX_DISABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[162]"></a>INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[20f]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[7b]"></a>audio_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, audioplayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = audio_start &rArr; I2S_Play_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Play_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[7d]"></a>audio_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, audioplayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = audio_stop &rArr; I2S_Play_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Play_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[7f]"></a>audio_index_show</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, audioplayer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[81]"></a>audio_msg_show</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, audioplayer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh_GRAM
</UL>

<P><STRONG><a name="[84]"></a>audio_play_song</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, audioplayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
<LI>Call Chain = audio_play_song &rArr; mp3_play_song &rArr; mp3_get_info &rArr; znFAT_Open_File &rArr; znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[88]"></a>audio_play</STRONG> (Thumb, 364 bytes, Stack size 528 bytes, audioplayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = audio_play &rArr; audio_play_song &rArr; mp3_play_song &rArr; mp3_get_info &rArr; znFAT_Open_File &rArr; znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unigbk_exchange
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstring2string
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Output_Cfg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_ADDA_Cfg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh_GRAM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_DGRAM
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_song
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>audio_get_tnum</STRONG> (Thumb, 58 bytes, Stack size 280 bytes, audioplayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = audio_get_tnum &rArr; znFAT_Open_File &rArr; znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>mp3_id3v1_decode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mp3play.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mp3_id3v1_decode &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
</UL>

<P><STRONG><a name="[99]"></a>mp3_id3v2_decode</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, mp3play.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mp3_id3v2_decode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
</UL>

<P><STRONG><a name="[9a]"></a>mp3_get_info</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, mp3play.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = mp3_get_info &rArr; znFAT_Open_File &rArr; znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Close_File
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3InitDecoder
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3GetNextFrameInfo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FreeDecoder
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindSyncWord
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3v2_decode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3v1_decode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[af]"></a>mp3_get_curtime</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mp3play.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp3_get_curtime
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[a2]"></a>mp3_file_seek</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mp3play.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mp3_file_seek &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Seek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mp3play.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>mp3_fill_buffer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mp3play.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mp3_fill_buffer &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[ab]"></a>mp3_i2s_dma_tx_callback</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, mp3play.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mp3play.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>mp3_play_song</STRONG> (Thumb, 1388 bytes, Stack size 80 bytes, mp3play.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = mp3_play_song &rArr; mp3_get_info &rArr; znFAT_Open_File &rArr; znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Close_File
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_I2S_Cfg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3InitDecoder
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3GetLastFrameInfo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FreeDecoder
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindSyncWord
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_SamplingRate_Set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_Channel0_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_fill_buffer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_curtime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_song
</UL>

<P><STRONG><a name="[b3]"></a>xmp3_SetBitstreamPointer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bitstream.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackScaleFactors
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackSideInfo
</UL>

<P><STRONG><a name="[b0]"></a>xmp3_GetBits</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bitstream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xmp3_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefillBitstreamCache
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG1
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackScaleFactors
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackSideInfo
</UL>

<P><STRONG><a name="[d7]"></a>xmp3_CalcBitsUsed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bitstream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xmp3_CalcBitsUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackScaleFactors
</UL>

<P><STRONG><a name="[d1]"></a>xmp3_CheckPadBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bitstream.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[cf]"></a>xmp3_UnpackFrameHeader</STRONG> (Thumb, 476 bytes, Stack size 16 bytes, bitstream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xmp3_UnpackFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3GetNextFrameInfo
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[b2]"></a>xmp3_UnpackSideInfo</STRONG> (Thumb, 556 bytes, Stack size 64 bytes, bitstream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xmp3_UnpackSideInfo &rArr; xmp3_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_GetBits
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_SetBitstreamPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[b6]"></a>ClearBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, buffers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_AllocateBuffers
</UL>

<P><STRONG><a name="[b4]"></a>xmp3_FreeBuffers</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, buffers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xmp3_FreeBuffers &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_AllocateBuffers
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FreeDecoder
</UL>

<P><STRONG><a name="[b5]"></a>xmp3_AllocateBuffers</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, buffers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xmp3_AllocateBuffers &rArr; xmp3_FreeBuffers &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FreeBuffers
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBuffer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3InitDecoder
</UL>

<P><STRONG><a name="[b7]"></a>xmp3_FDCT32</STRONG> (Thumb, 3372 bytes, Stack size 120 bytes, dct32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xmp3_FDCT32
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Subband
</UL>

<P><STRONG><a name="[b9]"></a>xmp3_Dequantize</STRONG> (Thumb, 640 bytes, Stack size 80 bytes, dequant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = xmp3_Dequantize &rArr; xmp3_IntensityProcMPEG2
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MidSideProc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_DequantChannel
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLZ
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[ba]"></a>xmp3_DequantChannel</STRONG> (Thumb, 662 bytes, Stack size 104 bytes, dqchan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xmp3_DequantChannel &rArr; DequantBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DequantBlock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLZ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Dequantize
</UL>

<P><STRONG><a name="[c1]"></a>xmp3_DecodeHuffman</STRONG> (Thumb, 538 bytes, Stack size 104 bytes, huffman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xmp3_DecodeHuffman &rArr; DecodeHuffmanPairs
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeHuffmanQuads
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeHuffmanPairs
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[cd]"></a>xmp3_IMDCT</STRONG> (Thumb, 522 bytes, Stack size 80 bytes, imdct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = xmp3_IMDCT &rArr; HybridTransform &rArr; IMDCT36 &rArr; idct9
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiAlias
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[9c]"></a>MP3InitDecoder</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mp3dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MP3InitDecoder &rArr; xmp3_AllocateBuffers &rArr; xmp3_FreeBuffers &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_AllocateBuffers
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[9f]"></a>MP3FreeDecoder</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mp3dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MP3FreeDecoder &rArr; xmp3_FreeBuffers &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FreeBuffers
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[9d]"></a>MP3FindSyncWord</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mp3dec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindFreeSync
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[ad]"></a>MP3GetLastFrameInfo</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mp3dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MP3GetLastFrameInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3GetNextFrameInfo
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[9e]"></a>MP3GetNextFrameInfo</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mp3dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MP3GetNextFrameInfo &rArr; xmp3_UnpackFrameHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackFrameHeader
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3GetLastFrameInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
</UL>

<P><STRONG><a name="[ac]"></a>MP3Decode</STRONG> (Thumb, 804 bytes, Stack size 88 bytes, mp3dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = MP3Decode &rArr; xmp3_IMDCT &rArr; HybridTransform &rArr; IMDCT36 &rArr; idct9
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackScaleFactors
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Subband
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3ClearBadFrame
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindFreeSync
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IMDCT
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_DecodeHuffman
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Dequantize
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackSideInfo
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackFrameHeader
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_CheckPadBit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[d3]"></a>xmp3_UnpackScaleFactors</STRONG> (Thumb, 296 bytes, Stack size 96 bytes, scalfact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xmp3_UnpackScaleFactors &rArr; UnpackSFMPEG2 &rArr; xmp3_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_CalcBitsUsed
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_GetBits
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_SetBitstreamPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[bb]"></a>xmp3_MidSideProc</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, stproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xmp3_MidSideProc
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Dequantize
</UL>

<P><STRONG><a name="[bc]"></a>xmp3_IntensityProcMPEG1</STRONG> (Thumb, 744 bytes, Stack size 128 bytes, stproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xmp3_IntensityProcMPEG1
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Dequantize
</UL>

<P><STRONG><a name="[bd]"></a>xmp3_IntensityProcMPEG2</STRONG> (Thumb, 718 bytes, Stack size 216 bytes, stproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xmp3_IntensityProcMPEG2
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Dequantize
</UL>

<P><STRONG><a name="[d4]"></a>xmp3_Subband</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, subband.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xmp3_Subband &rArr; xmp3_FDCT32
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_PolyphaseStereo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_PolyphaseMono
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FDCT32
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[b8]"></a>xmp3_MULSHIFT32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, asmmisc_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct12
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idct9
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiAlias
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DequantBlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FDCT32
</UL>

<P><STRONG><a name="[c7]"></a>xmp3_FASTABS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, asmmisc_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreqInvertRescale
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MidSideProc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IntensityProcMPEG1
</UL>

<P><STRONG><a name="[d8]"></a>xmp3_PolyphaseStereo</STRONG> (Thumb, 1308 bytes, Stack size 0 bytes, asmpoly_thumb2_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Subband
</UL>

<P><STRONG><a name="[d9]"></a>xmp3_PolyphaseMono</STRONG> (Thumb, 754 bytes, Stack size 0 bytes, asmpoly_thumb2_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Subband
</UL>

<P><STRONG><a name="[da]"></a>wav_decode_init</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, wavcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = wav_decode_init &rArr; znFAT_Open_File &rArr; znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bytes2Value
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Close_File
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[dc]"></a>wav_buffill</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, wavcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wav_buffill &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[df]"></a>wav_i2s_dma_tx_callback</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, wavcodec.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wavcodec.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>wav_get_curtime</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, wavcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wav_get_curtime &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[86]"></a>wav_play_song</STRONG> (Thumb, 608 bytes, Stack size 24 bytes, wavcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = wav_play_song &rArr; wav_decode_init &rArr; znFAT_Open_File &rArr; znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_get_curtime
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_buffill
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Seek
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_I2S_Cfg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_SamplingRate_Set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_Channel0_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_song
</UL>

<P><STRONG><a name="[75]"></a>main</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = main &rArr; audio_play &rArr; audio_play_song &rArr; mp3_play_song &rArr; mp3_get_info &rArr; znFAT_Open_File &rArr; znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_SPKvol_Set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_HPvol_Set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Close_File
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_get_tnum
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Select_Device
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Flush_FS
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[210]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e0]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_Channel0_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[211]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[f5]"></a>ADC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[13d]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
</UL>

<P><STRONG><a name="[213]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
</UL>

<P><STRONG><a name="[214]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
</UL>

<P><STRONG><a name="[215]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>ADC_VBATCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
</UL>

<P><STRONG><a name="[142]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
</UL>

<P><STRONG><a name="[21a]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>ADC_GetMultiModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
</UL>

<P><STRONG><a name="[140]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
</UL>

<P><STRONG><a name="[221]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>ADC_ITConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>ADC_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_Channel0_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[13a]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_Channel0_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_Channel0_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[231]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Play_Stop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Play_Start
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_Channel0_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[232]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[233]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_Channel0_Init
</UL>

<P><STRONG><a name="[188]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_Channel0_Init
</UL>

<P><STRONG><a name="[235]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_Channel0_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[237]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>DMA_ClearFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_Channel0_Init
</UL>

<P><STRONG><a name="[18a]"></a>DMA_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[23a]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[23b]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[23c]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>FSMC_NANDInit</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>FSMC_NANDCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>FSMC_GetECC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>FSMC_ITConfig</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>FSMC_ClearFlag</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>FSMC_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>GPIO_DeInit</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[11c]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRInit_RScan
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRInit_LScan
</UL>

<P><STRONG><a name="[24b]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
</UL>

<P><STRONG><a name="[e6]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRInit_RScan
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRInit_LScan
</UL>

<P><STRONG><a name="[251]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[254]"></a>RCC_DeInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[f9]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[256]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_SamplingRate_Set
</UL>

<P><STRONG><a name="[17d]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_SamplingRate_Set
</UL>

<P><STRONG><a name="[25c]"></a>RCC_PLLSAIConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>RCC_PLLSAICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[266]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>RCC_SAIPLLI2SClkDivConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>RCC_SAIPLLSAIClkDivConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>RCC_SAIBlockACLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>RCC_SAIBlockBCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>RCC_LTDCCLKDivConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>RCC_TIMCLKPresConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_Channel0_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_Channel0_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRInit_RScan
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRInit_LScan
</UL>

<P><STRONG><a name="[270]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[17f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
</UL>

<P><STRONG><a name="[11a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[f8]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[271]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[f6]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
</UL>

<P><STRONG><a name="[273]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>RCC_LSEModeConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>SDIO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[154]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[27d]"></a>SDIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>SDIO_SetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOFF
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[14f]"></a>SDIO_GetPowerState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[147]"></a>SDIO_SendCommand</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[27f]"></a>SDIO_CmdStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>SDIO_GetResponse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>SDIO_DataConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[282]"></a>SDIO_DataStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>SDIO_GetDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>SDIO_GetFIFOCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>SDIO_StartSDIOReadWait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>SDIO_StopSDIOReadWait</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>SDIO_SetSDIOOperation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>SDIO_SendSDIOSuspendCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>SDIO_CommandCompletionCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>SDIO_CEATAITCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>SDIO_SendCEATACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>SDIO_DMACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>SDIO_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[145]"></a>SDIO_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[291]"></a>SDIO_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[293]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>I2S_Init</STRONG> (Thumb, 396 bytes, Stack size 36 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
</UL>

<P><STRONG><a name="[294]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
</UL>

<P><STRONG><a name="[297]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>SPI_TIModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
</UL>

<P><STRONG><a name="[2a3]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[195]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
</UL>

<P><STRONG><a name="[2a8]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
</UL>

<P><STRONG><a name="[2b4]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>TIM_OC3Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[105]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[103]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[101]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[ff]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[2d7]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[2d8]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
</UL>

<P><STRONG><a name="[2e1]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[2e4]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[109]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[10b]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[10d]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[10c]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[10e]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[2e8]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>USART_DeInit</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[110]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[2ee]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[2f1]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2f5]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[302]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[121]"></a>USART_GetITStatus</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[303]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>mymemcpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>

<P><STRONG><a name="[112]"></a>mymemset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[63]"></a>my_mem_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_mem_init &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>my_mem_perused</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[114]"></a>my_mem_malloc</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>

<P><STRONG><a name="[113]"></a>my_mem_free</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[a1]"></a>myfree</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FreeBuffers
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>

<P><STRONG><a name="[8c]"></a>mymalloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_AllocateBuffers
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[115]"></a>myrealloc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, malloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>

<P><STRONG><a name="[e1]"></a>delay_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NACK
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ACK
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitACK
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLCD
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Busy
</UL>

<P><STRONG><a name="[118]"></a>delay_xms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[a5]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_fill_buffer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[304]"></a>GPIO_AF_Set</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>GPIO_Set</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NACK
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ACK
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitACK
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLCD
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Busy
</UL>

<P><STRONG><a name="[7a]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[61]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>uart_init</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>Get_HzMat</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Get_HzMat &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>

<P><STRONG><a name="[124]"></a>Show_Font</STRONG> (Thumb, 172 bytes, Stack size 128 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Show_Font &rArr; Get_HzMat &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[94]"></a>Show_Str</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = Show_Str &rArr; Show_Font &rArr; Get_HzMat &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_DGRAM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[126]"></a>unigbk</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = unigbk &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unigbk_exchange
</UL>

<P><STRONG><a name="[128]"></a>text_chr2hex</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, text.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unigbk_exchange
</UL>

<P><STRONG><a name="[127]"></a>text_hex2chr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, text.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unigbk_exchange
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstring2string
</UL>

<P><STRONG><a name="[8f]"></a>hexstring2string</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hexstring2string
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hex2chr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[90]"></a>unigbk_exchange</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = unigbk_exchange &rArr; unigbk &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hex2chr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_chr2hex
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unigbk
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[129]"></a>char_upper</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, exfuns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
</UL>

<P><STRONG><a name="[85]"></a>f_typetell</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, exfuns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = f_typetell &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_upper
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_song
</UL>

<P><STRONG><a name="[e2]"></a>LED_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>LCD_GPIO_Init</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>ReadByteFromLCD</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lcd12864.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Busy
</UL>

<P><STRONG><a name="[131]"></a>WriteByteToLCD</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, lcd12864.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLCD
</UL>

<P><STRONG><a name="[12c]"></a>LCD_Busy</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Busy &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteFromLCD
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLCD
</UL>

<P><STRONG><a name="[130]"></a>WriteToLCD</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteToLCD &rArr; LCD_Busy &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Busy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteToLCD
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh_GRAM
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[e5]"></a>LCD12864_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD12864_Init &rArr; WriteToLCD &rArr; LCD_Busy &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>LCD_Clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLCD
</UL>

<P><STRONG><a name="[133]"></a>LCD_SetCursor</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[134]"></a>LCD_ShowString</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLCD
</UL>

<P><STRONG><a name="[135]"></a>LCD_SetPoint</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLCD
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteFromLCD
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>

<P><STRONG><a name="[83]"></a>LCD_Refresh_GRAM</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_Refresh_GRAM &rArr; WriteToLCD &rArr; LCD_Busy &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_msg_show
</UL>

<P><STRONG><a name="[93]"></a>LCD_Clear_DGRAM</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lcd12864.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[125]"></a>LCD_DrawPoint</STRONG> (Thumb, 832 bytes, Stack size 24 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>

<P><STRONG><a name="[82]"></a>LCD_ShowChar</STRONG> (Thumb, 182 bytes, Stack size 36 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_msg_show
</UL>

<P><STRONG><a name="[136]"></a>KEYBoard_LRInit_LScan</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEYBoard_LRInit_LScan &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRScan
</UL>

<P><STRONG><a name="[137]"></a>KEYBoard_LRInit_RScan</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEYBoard_LRInit_RScan &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRScan
</UL>

<P><STRONG><a name="[139]"></a>KEYBoard_GetInputVal</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, keyboard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRScan
</UL>

<P><STRONG><a name="[138]"></a>KEYBoard_LRScan</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = KEYBoard_LRScan &rArr; KEYBoard_LRInit_RScan &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_GetInputVal
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRInit_RScan
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRInit_LScan
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>Button_Init</STRONG> (Thumb, 248 bytes, Stack size 112 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Button_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>SDIO_Register_Deinit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sdio_sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[159]"></a>SD_SetDeviceMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdio_sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[158]"></a>SDIO_Clock_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdio_sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[143]"></a>CmdResp1Error</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[146]"></a>FindSCR</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[149]"></a>SDEnWideBus</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[14a]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[14b]"></a>SD_SelectDeselect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[157]"></a>SD_GetCardInfo</STRONG> (Thumb, 806 bytes, Stack size 20 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[14c]"></a>CmdResp2Error</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[14d]"></a>CmdResp6Error</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[14e]"></a>SD_InitializeCards</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[150]"></a>CmdResp3Error</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[151]"></a>CmdResp7Error</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[152]"></a>CmdError</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[153]"></a>SD_PowerON</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_PowerON &rArr; CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[ee]"></a>SD_Init</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Clock_Set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Register_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[15a]"></a>SD_PowerOFF</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
</UL>

<P><STRONG><a name="[15b]"></a>SD_DMA_Config</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[160]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdio_sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[15f]"></a>SD_ReadBlock</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_ReadBlock &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[163]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 756 bytes, Stack size 56 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[164]"></a>IsCardProgramming</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsCardProgramming
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[165]"></a>SD_WriteBlock</STRONG> (Thumb, 914 bytes, Stack size 80 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[166]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 972 bytes, Stack size 72 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[167]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>SD_SendStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[169]"></a>SD_GetState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>

<P><STRONG><a name="[16a]"></a>SD_ReadDisk</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_nSector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>

<P><STRONG><a name="[16b]"></a>SD_WriteDisk</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Clear_nSector
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_nSector
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
</UL>

<P><STRONG><a name="[16c]"></a>WM8978_Write_Reg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wm8978.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM8978_Write_Reg &rArr; IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitACK
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_SPKvol_Set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_HPvol_Set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_I2S_Cfg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Output_Cfg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_ADDA_Cfg
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_EQ5_Set
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_EQ4_Set
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_EQ3_Set
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_EQ2_Set
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_EQ1_Set
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_EQ_3D_Dir
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_3D_Set
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_MIC_Gain
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_LINEIN_Gain
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_AUX_Gain
</UL>

<P><STRONG><a name="[172]"></a>WM8978_Read_Reg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm8978.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_ADDA_Cfg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_EQ1_Set
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_EQ_3D_Dir
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_LINEIN_Gain
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_AUX_Gain
</UL>

<P><STRONG><a name="[e8]"></a>WM8978_Init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, wm8978.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM8978_Init &rArr; WM8978_Write_Reg &rArr; IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>WM8978_ADDA_Cfg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm8978.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM8978_ADDA_Cfg &rArr; WM8978_Write_Reg &rArr; IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Read_Reg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[173]"></a>WM8978_AUX_Gain</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm8978.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM8978_AUX_Gain &rArr; WM8978_Write_Reg &rArr; IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Read_Reg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
</UL>

<P><STRONG><a name="[174]"></a>WM8978_LINEIN_Gain</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm8978.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM8978_LINEIN_Gain &rArr; WM8978_Write_Reg &rArr; IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Read_Reg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
</UL>

<P><STRONG><a name="[8a]"></a>WM8978_Input_Cfg</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wm8978.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WM8978_Input_Cfg &rArr; WM8978_LINEIN_Gain &rArr; WM8978_Write_Reg &rArr; IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_LINEIN_Gain
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_AUX_Gain
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Read_Reg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[8b]"></a>WM8978_Output_Cfg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm8978.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM8978_Output_Cfg &rArr; WM8978_Write_Reg &rArr; IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[175]"></a>WM8978_MIC_Gain</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm8978.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[a7]"></a>WM8978_I2S_Cfg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm8978.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM8978_I2S_Cfg &rArr; WM8978_Write_Reg &rArr; IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[e9]"></a>WM8978_HPvol_Set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm8978.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM8978_HPvol_Set &rArr; WM8978_Write_Reg &rArr; IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>WM8978_SPKvol_Set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm8978.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WM8978_SPKvol_Set &rArr; WM8978_Write_Reg &rArr; IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>WM8978_3D_Set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm8978.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[177]"></a>WM8978_EQ_3D_Dir</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm8978.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Read_Reg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[178]"></a>WM8978_EQ1_Set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm8978.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Read_Reg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[179]"></a>WM8978_EQ2_Set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm8978.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[17a]"></a>WM8978_EQ3_Set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm8978.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[17b]"></a>WM8978_EQ4_Set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm8978.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[17c]"></a>WM8978_EQ5_Set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm8978.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[a9]"></a>I2S2_SamplingRate_Set</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, iis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S2_SamplingRate_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[a8]"></a>I2S2_Init</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, iis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2S2_Init &rArr; I2S_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[7c]"></a>I2S_Play_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S_Play_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start
</UL>

<P><STRONG><a name="[7e]"></a>I2S_Play_Stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S_Play_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop
</UL>

<P><STRONG><a name="[171]"></a>IIC_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[16d]"></a>IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Start &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[170]"></a>IIC_Stop</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitACK
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[16f]"></a>IIC_WaitACK</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[183]"></a>IIC_ACK</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_ACK &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>

<P><STRONG><a name="[184]"></a>IIC_NACK</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_NACK &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>

<P><STRONG><a name="[16e]"></a>IIC_SendByte</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_SendByte &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[185]"></a>IIC_ReadByte</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_ReadByte &rArr; IIC_NACK &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NACK
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ACK
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[186]"></a>DMA2_Stream0_Channel0_Init</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>

<P><STRONG><a name="[aa]"></a>DMA1_Stream4_Channel0_Init</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA1_Stream4_Channel0_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[1c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>AT24CXX_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, at24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AT24CXX_Init &rArr; IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, at24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_ReadByte &rArr; IIC_NACK &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitACK
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
</UL>

<P><STRONG><a name="[18d]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, at24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_WaitACK &rArr; IIC_Stop &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitACK
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
</UL>

<P><STRONG><a name="[18e]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, at24c02.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[18f]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, at24c02.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[ed]"></a>AT24CXX_Check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AT24CXX_Check &rArr; AT24CXX_ReadOneByte &rArr; IIC_ReadByte &rArr; IIC_NACK &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at24c02.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[191]"></a>AT24CXX_Write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at24c02.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[e7]"></a>FSMC_SRAM_Init</STRONG> (Thumb, 694 bytes, Stack size 104 bytes, sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = FSMC_SRAM_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[305]"></a>FSMC_SRAM_WriteBuffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sram.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>FSMC_SRAM_ReadBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sram.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>Timer3_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer3_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM3_IRQHandler &rArr; KEYBoard_LRScan &rArr; KEYBoard_LRInit_RScan &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBoard_LRScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>znFAT_Device_Init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, deviceio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = znFAT_Device_Init &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>znFAT_Device_Read_Sector</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, deviceio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Modify_Data
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_WriteData
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Cluster_Chain
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_File_sClust
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_File_Size
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_File
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_Dir
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Upper_Dir
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Have_Any_SubDir_With_Del_ForeFile
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_FAT_Chain
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_FDI
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Next_Free_Cluster
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_FAT
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next_Cluster
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FSINFO
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Free_Cluster_From_Start
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_FSINFO_Sec
</UL>

<P><STRONG><a name="[19b]"></a>znFAT_Device_Write_Sector</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, deviceio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = znFAT_Device_Write_Sector &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Modify_Data
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_WriteData
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_From_nCluster
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Cluster_Chain
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_File_sClust
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_File_Size
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_File
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_Dir
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Have_Any_SubDir_With_Del_ForeFile
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_FAT_Chain
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_FDI
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_FAT
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FSINFO
</UL>

<P><STRONG><a name="[19c]"></a>znFAT_Device_Read_nSector</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, deviceio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = znFAT_Device_Read_nSector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
</UL>

<P><STRONG><a name="[19d]"></a>znFAT_Device_Write_nSector</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, deviceio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Modify_Data
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_WriteData
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_From_nCluster
</UL>

<P><STRONG><a name="[19e]"></a>znFAT_Device_Clear_nSector</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, deviceio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Cluster
</UL>

<P><STRONG><a name="[1b5]"></a>Memory_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Memory_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Close_File
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_FDI
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Part_Name
</UL>

<P><STRONG><a name="[1a2]"></a>Memory_Compare</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Memory_Compare
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_FDI
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_FSINFO_Sec
</UL>

<P><STRONG><a name="[1a6]"></a>Memory_Copy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Memory_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Modify_Data
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_WriteData
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_From_nCluster
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_FDI
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
</UL>

<P><STRONG><a name="[1c8]"></a>StringCopy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
</UL>

<P><STRONG><a name="[1a8]"></a>StringLen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, znfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_FDI
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oemstr2unistr
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFN_Match
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSubStr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analyse_FDI
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Length
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Lower
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Dot
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Special_Char
</UL>

<P><STRONG><a name="[1b9]"></a>WStringLen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, znfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_LFN_FDI
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFN_Match
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFindSubStr
</UL>

<P><STRONG><a name="[1a0]"></a>PGM_BYTE_FUN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGM2RAM
</UL>

<P><STRONG><a name="[307]"></a>PGM_WORD_FUN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, znfat.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>PGM_DWORD_FUN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, znfat.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>PGM2RAM</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGM_BYTE_FUN
</UL>

<P><STRONG><a name="[f0]"></a>znFAT_Select_Device</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, znfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>Bytes2Value</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, znfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Upper_Dir
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Have_Any_SubDir_With_Del_ForeFile
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_FDI
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_FAT_Chain
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analyse_FDI
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next_Cluster
</UL>

<P><STRONG><a name="[1a1]"></a>Find_FSINFO_Sec</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Find_FSINFO_Sec &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Compare
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Init
</UL>

<P><STRONG><a name="[1a3]"></a>Search_Free_Cluster_From_Start</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Search_Free_Cluster_From_Start &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Init
</UL>

<P><STRONG><a name="[1a4]"></a>Update_FSINFO</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Update_FSINFO &rArr; znFAT_Device_Write_Sector &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Dump_Data
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_From_nCluster
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Cluster_Chain
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_File
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_Dir
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Next_Free_Cluster
</UL>

<P><STRONG><a name="[f1]"></a>znFAT_Init</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = znFAT_Init &rArr; Update_FSINFO &rArr; znFAT_Device_Write_Sector &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bytes2Value
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FSINFO
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Free_Cluster_From_Start
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_FSINFO_Sec
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>Get_Next_Cluster</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bytes2Value
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Seek
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Modify_Data
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_From_nCluster
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Have_Any_SubDir_With_Del_ForeFile
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_FDI
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
</UL>

<P><STRONG><a name="[a3]"></a>znFAT_Seek</STRONG> (Thumb, 718 bytes, Stack size 48 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next_Cluster
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_file_seek
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Modify_Data
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Dump_Data
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_WriteData
</UL>

<P><STRONG><a name="[9b]"></a>znFAT_ReadData</STRONG> (Thumb, 1298 bytes, Stack size 72 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Seek
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next_Cluster
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Copy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_nSector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_buffill
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OEM2UNI
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unigbk
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
</UL>

<P><STRONG><a name="[1c2]"></a>Check_Illegal_Char</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, znfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
</UL>

<P><STRONG><a name="[1a7]"></a>Check_SFN_Special_Char</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Check_SFN_Special_Char
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_LFN
</UL>

<P><STRONG><a name="[1a9]"></a>Check_SFN_Dot</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Check_SFN_Dot
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_LFN
</UL>

<P><STRONG><a name="[1aa]"></a>Check_SFN_Illegal_Lower</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_SFN_Illegal_Lower
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_FDI
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_LFN
</UL>

<P><STRONG><a name="[1ab]"></a>Check_SFN_Illegal_Length</STRONG> (Thumb, 136 bytes, Stack size 28 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Check_SFN_Illegal_Length
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_LFN
</UL>

<P><STRONG><a name="[1ad]"></a>To_File_Name</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = To_File_Name
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analyse_FDI
</UL>

<P><STRONG><a name="[1ac]"></a>Analyse_FDI</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Analyse_FDI &rArr; To_File_Name
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bytes2Value
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;To_File_Name
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
</UL>

<P><STRONG><a name="[1c4]"></a>Is_WildFileName</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, znfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
</UL>

<P><STRONG><a name="[1ae]"></a>FindSubStr</STRONG> (Thumb, 90 bytes, Stack size 28 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FindSubStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFN_Match
</UL>

<P><STRONG><a name="[1af]"></a>SFN_Match</STRONG> (Thumb, 264 bytes, Stack size 52 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SFN_Match &rArr; FindSubStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSubStr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
</UL>

<P><STRONG><a name="[1b0]"></a>Modify_FAT</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Dump_Data
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Cluster_Chain
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_FDI
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
</UL>

<P><STRONG><a name="[1b1]"></a>Clear_Cluster</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Clear_nSector
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_FDI
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
</UL>

<P><STRONG><a name="[1b2]"></a>Update_Next_Free_Cluster</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FSINFO
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Cluster_Chain
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_FDI
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
</UL>

<P><STRONG><a name="[1b3]"></a>Is_LFN</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Is_LFN &rArr; Check_SFN_Illegal_Length
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Length
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Lower
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Dot
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Special_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
</UL>

<P><STRONG><a name="[1b4]"></a>Get_Part_Name</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_Part_Name &rArr; Memory_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
</UL>

<P><STRONG><a name="[1b6]"></a>OEM2UNI</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oemstr2unistr
</UL>

<P><STRONG><a name="[1b7]"></a>oemstr2unistr</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OEM2UNI
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
</UL>

<P><STRONG><a name="[1b8]"></a>WFindSubStr</STRONG> (Thumb, 112 bytes, Stack size 28 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WFindSubStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFN_Match
</UL>

<P><STRONG><a name="[1ba]"></a>LFN_Match</STRONG> (Thumb, 286 bytes, Stack size 236 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LFN_Match &rArr; WFindSubStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFindSubStr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
</UL>

<P><STRONG><a name="[1c0]"></a>Get_Binding_SumChk</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Binding_SumChk
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
</UL>

<P><STRONG><a name="[1bc]"></a>ELFHash</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Short_Name
</UL>

<P><STRONG><a name="[1bd]"></a>Hex2Str_32b</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Short_Name
</UL>

<P><STRONG><a name="[1bb]"></a>Make_Short_Name</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str_32b
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELFHash
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
</UL>

<P><STRONG><a name="[1be]"></a>Fill_LFN_FDI</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
</UL>

<P><STRONG><a name="[1bf]"></a>Register_LFN_FDI</STRONG> (Thumb, 800 bytes, Stack size 344 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_LFN_FDI
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Binding_SumChk
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Part_Name
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Next_Free_Cluster
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Cluster
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_FAT
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next_Cluster
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStringLen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Copy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Compare
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
</UL>

<P><STRONG><a name="[1c1]"></a>Get_Dir_Start_Cluster</STRONG> (Thumb, 492 bytes, Stack size 496 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bytes2Value
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Binding_SumChk
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFN_Match
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oemstr2unistr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Part_Name
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_LFN
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFN_Match
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;To_File_Name
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Length
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Lower
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Dot
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Special_Char
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Illegal_Char
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next_Cluster
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Enter_Dir
</UL>

<P><STRONG><a name="[1c3]"></a>znFAT_Enter_Dir</STRONG> (Thumb, 130 bytes, Stack size 136 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dir_Start_Cluster
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_Dir
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
</UL>

<P><STRONG><a name="[8d]"></a>znFAT_Open_File</STRONG> (Thumb, 640 bytes, Stack size 312 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = znFAT_Open_File &rArr; znFAT_Enter_Dir &rArr; Get_Dir_Start_Cluster &rArr; oemstr2unistr &rArr; OEM2UNI &rArr; znFAT_ReadData &rArr; znFAT_Seek &rArr; Get_Next_Cluster &rArr; znFAT_Device_Read_Sector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Enter_Dir
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Binding_SumChk
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFN_Match
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oemstr2unistr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Part_Name
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_LFN
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFN_Match
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_WildFileName
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analyse_FDI
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;To_File_Name
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Length
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Lower
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Dot
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Special_Char
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Illegal_Char
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next_Cluster
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_get_tnum
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_File
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_Dir
</UL>

<P><STRONG><a name="[1c5]"></a>Fill_FDI</STRONG> (Thumb, 540 bytes, Stack size 64 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Lower
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringLen
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
</UL>

<P><STRONG><a name="[1c6]"></a>Register_FDI</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Next_Free_Cluster
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Cluster
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_FAT
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next_Cluster
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Copy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Compare
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_File
</UL>

<P><STRONG><a name="[1c7]"></a>znFAT_Create_File</STRONG> (Thumb, 390 bytes, Stack size 96 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_FDI
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_FDI
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Enter_Dir
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Short_Name
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oemstr2unistr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_LFN
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analyse_FDI
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Length
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Lower
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Dot
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Special_Char
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Illegal_Char
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCopy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>

<P><STRONG><a name="[1c9]"></a>Create_Dir_In_Cluster</STRONG> (Thumb, 406 bytes, Stack size 288 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_FDI
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_FDI
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_LFN_FDI
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Short_Name
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oemstr2unistr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_LFN
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Next_Free_Cluster
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Cluster
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_FAT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Length
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Illegal_Lower
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Dot
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SFN_Special_Char
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Illegal_Char
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Copy
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Create_Dir
</UL>

<P><STRONG><a name="[1ca]"></a>znFAT_Create_Dir</STRONG> (Thumb, 114 bytes, Stack size 136 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Dir_In_Cluster
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Enter_Dir
</UL>

<P><STRONG><a name="[1cb]"></a>Destroy_FAT_Chain</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bytes2Value
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Dump_Data
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_File
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_FDI
</UL>

<P><STRONG><a name="[1cc]"></a>Destroy_FDI</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bytes2Value
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_FAT_Chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_Dir
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Have_Any_SubDir_With_Del_ForeFile
</UL>

<P><STRONG><a name="[1cd]"></a>Have_Any_SubDir_With_Del_ForeFile</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bytes2Value
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_FDI
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next_Cluster
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_Dir
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Deep_Ahead_Dir
</UL>

<P><STRONG><a name="[1ce]"></a>Enter_Deep_Ahead_Dir</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Have_Any_SubDir_With_Del_ForeFile
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_Dir
</UL>

<P><STRONG><a name="[1cf]"></a>Get_Upper_Dir</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bytes2Value
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_Dir
</UL>

<P><STRONG><a name="[a0]"></a>znFAT_Close_File</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, znfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = znFAT_Close_File &rArr; Memory_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_File
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Delete_Dir
</UL>

<P><STRONG><a name="[1d0]"></a>znFAT_Delete_Dir</STRONG> (Thumb, 188 bytes, Stack size 280 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Close_File
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Upper_Dir
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Deep_Ahead_Dir
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Have_Any_SubDir_With_Del_ForeFile
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_FDI
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FSINFO
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>

<P><STRONG><a name="[1d1]"></a>znFAT_Delete_File</STRONG> (Thumb, 126 bytes, Stack size 280 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Close_File
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Open_File
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_FAT_Chain
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FSINFO
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>

<P><STRONG><a name="[1d2]"></a>Update_File_Size</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Dump_Data
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_WriteData
</UL>

<P><STRONG><a name="[1d3]"></a>Update_File_sClust</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Dump_Data
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_From_nCluster
</UL>

<P><STRONG><a name="[1d4]"></a>Create_Cluster_Chain</STRONG> (Thumb, 1104 bytes, Stack size 56 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Next_Free_Cluster
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_FAT
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FSINFO
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_From_nCluster
</UL>

<P><STRONG><a name="[1d5]"></a>WriteData_From_nCluster</STRONG> (Thumb, 688 bytes, Stack size 56 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Cluster_Chain
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_File_sClust
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next_Cluster
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FSINFO
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Copy
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_nSector
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_WriteData
</UL>

<P><STRONG><a name="[1d6]"></a>znFAT_WriteData</STRONG> (Thumb, 808 bytes, Stack size 32 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Seek
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_From_nCluster
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_File_Size
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Copy
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_nSector
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>

<P><STRONG><a name="[1d7]"></a>znFAT_Dump_Data</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Seek
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_File_sClust
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_File_Size
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_FAT_Chain
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_FAT
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FSINFO
</UL>

<P><STRONG><a name="[1d8]"></a>znFAT_Modify_Data</STRONG> (Thumb, 1534 bytes, Stack size 80 bytes, znfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Seek
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next_Cluster
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Copy
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_nSector
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Write_Sector
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;znFAT_Device_Read_Sector
</UL>

<P><STRONG><a name="[f3]"></a>znFAT_Flush_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, znfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[309]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_get_curtime
</UL>

<P><STRONG><a name="[1d9]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[80]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3v2_decode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_song
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_index_show
</UL>

<P><STRONG><a name="[1dc]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6b]"></a>_printf_int_dec</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[91]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[97]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3v2_decode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3v1_decode
</UL>

<P><STRONG><a name="[92]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[1df]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[30a]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[1e0]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[30b]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[30c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[1e2]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[30f]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3v2_decode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3v1_decode
</UL>

<P><STRONG><a name="[12a]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
</UL>

<P><STRONG><a name="[310]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[315]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1e6]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6d]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[1db]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[316]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1e1]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[318]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1e7]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[1e8]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[71]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[76]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[31c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[31d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[31e]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[31f]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b1]"></a>RefillBitstreamCache</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, bitstream.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_GetBits
</UL>

<P><STRONG><a name="[be]"></a>CLZ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dequant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_Dequantize
</UL>

<P><STRONG><a name="[c0]"></a>CLZ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dqchan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_DequantChannel
</UL>

<P><STRONG><a name="[bf]"></a>DequantBlock</STRONG> (Thumb, 404 bytes, Stack size 80 bytes, dqchan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DequantBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_DequantChannel
</UL>

<P><STRONG><a name="[c2]"></a>DecodeHuffmanPairs</STRONG> (Thumb, 896 bytes, Stack size 80 bytes, huffman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DecodeHuffmanPairs
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_DecodeHuffman
</UL>

<P><STRONG><a name="[c3]"></a>DecodeHuffmanQuads</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, huffman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DecodeHuffmanQuads
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_DecodeHuffman
</UL>

<P><STRONG><a name="[c4]"></a>AntiAlias</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, imdct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AntiAlias
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IMDCT
</UL>

<P><STRONG><a name="[c5]"></a>WinPrevious</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, imdct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WinPrevious
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
</UL>

<P><STRONG><a name="[c6]"></a>FreqInvertRescale</STRONG> (Thumb, 528 bytes, Stack size 72 bytes, imdct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FreqInvertRescale
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
</UL>

<P><STRONG><a name="[c8]"></a>idct9</STRONG> (Thumb, 454 bytes, Stack size 192 bytes, imdct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = idct9
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
</UL>

<P><STRONG><a name="[c9]"></a>IMDCT36</STRONG> (Thumb, 572 bytes, Stack size 240 bytes, imdct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = IMDCT36 &rArr; idct9
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idct9
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreqInvertRescale
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
</UL>

<P><STRONG><a name="[ca]"></a>imdct12</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, imdct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = imdct12
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
</UL>

<P><STRONG><a name="[cb]"></a>IMDCT12x3</STRONG> (Thumb, 486 bytes, Stack size 200 bytes, imdct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = IMDCT12x3 &rArr; FreqInvertRescale
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct12
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreqInvertRescale
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
</UL>

<P><STRONG><a name="[cc]"></a>HybridTransform</STRONG> (Thumb, 380 bytes, Stack size 152 bytes, imdct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = HybridTransform &rArr; IMDCT36 &rArr; idct9
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_FASTABS
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_IMDCT
</UL>

<P><STRONG><a name="[ce]"></a>MP3FindFreeSync</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mp3dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MP3FindFreeSync
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindSyncWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[d0]"></a>MP3ClearBadFrame</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mp3dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MP3ClearBadFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[d5]"></a>UnpackSFMPEG1</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, scalfact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UnpackSFMPEG1 &rArr; xmp3_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_GetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackScaleFactors
</UL>

<P><STRONG><a name="[d6]"></a>UnpackSFMPEG2</STRONG> (Thumb, 682 bytes, Stack size 96 bytes, scalfact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UnpackSFMPEG2 &rArr; xmp3_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_GetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3_UnpackScaleFactors
</UL>

<P><STRONG><a name="[f4]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[106]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[104]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[102]"></a>TI2_Config</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[100]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[62]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

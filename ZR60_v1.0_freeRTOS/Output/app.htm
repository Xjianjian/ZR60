<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Jan 31 17:51:01 2019
<BR><P>
<H3>Maximum Stack Usage =       5272 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ZR60Ctrl_5msTask &rArr; TskZR60Ctrl_MainFunction &rArr; OpenDoor_Ble_MainFunction &rArr; sm3_time_PasswordAuth &rArr; get_sm3_pass &rArr; sm3 &rArr; CF &rArr; P1
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC_IRQHandler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[2e0]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e0]">netconn_drain</a><BR>
 <LI><a href="#[1b9]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b9]">cJSON_Delete</a><BR>
 <LI><a href="#[3b6]">print_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b0]">print_value</a><BR>
 <LI><a href="#[3b2]">print_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b0]">print_value</a><BR>
 <LI><a href="#[35f]">lwip_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35e]">lwip_send</a><BR>
 <LI><a href="#[3a1]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[285]">parse_value</a><BR>
 <LI><a href="#[39f]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[285]">parse_value</a><BR>
 <LI><a href="#[473]">x509_get_name</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[473]">x509_get_name</a><BR>
 <LI><a href="#[417]">x509parse_crt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[417]">x509parse_crt</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">CAN2_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5c]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream3_IRQHandler</a> from bsp_wm8978.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream4_IRQHandler</a> from bsp_wm8978.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">ETH_IRQHandler</a> from stm32f4xx_it.o(i.ETH_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[72]">ETH_link_callback</a> from lan8742a.o(i.ETH_link_callback) referenced from netconf.o(i.LwIP_Init)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from stm32f4xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5e]">FPU_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6d]">Fliter_Task</a> from main.o(i.Fliter_Task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[5d]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[55]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[66]">LowPower_Task</a> from main.o(i.LowPower_Task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[68]">Lwip_app_100msTask</a> from main.o(i.Lwip_app_100msTask) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[6c]">Lwip_app_5msTask</a> from main.o(i.Lwip_app_5msTask) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6f]">MusicPlayer_I2S_DMA_TX_Callback</a> from audioio.o(i.MusicPlayer_I2S_DMA_TX_Callback) referenced from audioio.o(i.InitAudioIO_playconfig)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[74]">NetConnIf_Err</a> from netconnif.o(i.NetConnIf_Err) referenced from netconnif.o(i.NetConnIf_Connect)
 <LI><a href="#[73]">NetConnIf_connected</a> from netconnif.o(i.NetConnIf_connected) referenced from netconnif.o(i.NetConnIf_Connect)
 <LI><a href="#[76]">NetConnIf_poll</a> from netconnif.o(i.NetConnIf_poll) referenced from netconnif.o(i.NetConnIf_connected)
 <LI><a href="#[75]">NetConnIf_recv</a> from netconnif.o(i.NetConnIf_recv) referenced from netconnif.o(i.NetConnIf_connected)
 <LI><a href="#[50]">OTG_FS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9d]">RandVal</a> from tcp_client_shortconnect.o(i.RandVal) referenced from tcp_client_shortconnect.o(i.tcp_ShortConnect_MainFunction)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[60]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[26]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[39]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from stm32f4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from stm32f4xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">USART6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6b]">ZR60Ctrl_10msTask</a> from main.o(i.ZR60Ctrl_10msTask) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[6a]">ZR60Ctrl_5msTask</a> from main.o(i.ZR60Ctrl_5msTask) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[61]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[63]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[64]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[62]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[79]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[79]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[7a]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[7b]">arp_timer</a> from timers.o(i.arp_timer) referenced from timers.o(i.arp_timer)
 <LI><a href="#[7b]">arp_timer</a> from timers.o(i.arp_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[7c]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_start)
 <LI><a href="#[7d]">dhcp_timer_coarse</a> from timers.o(i.dhcp_timer_coarse) referenced from timers.o(i.dhcp_timer_coarse)
 <LI><a href="#[7d]">dhcp_timer_coarse</a> from timers.o(i.dhcp_timer_coarse) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[7e]">dhcp_timer_fine</a> from timers.o(i.dhcp_timer_fine) referenced from timers.o(i.dhcp_timer_fine)
 <LI><a href="#[7e]">dhcp_timer_fine</a> from timers.o(i.dhcp_timer_fine) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[77]">dnsAnalysis_DNSfound</a> from dnsanalysis.o(i.dnsAnalysis_DNSfound) referenced from dnsanalysis.o(i.TskdnsAnalysis_MainFunction)
 <LI><a href="#[7f]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_init)
 <LI><a href="#[80]">dns_timer</a> from timers.o(i.dns_timer) referenced from timers.o(i.dns_timer)
 <LI><a href="#[80]">dns_timer</a> from timers.o(i.dns_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[8e]">do_close</a> from api_msg.o(i.do_close) referenced from api_lib.o(i.netconn_close_shutdown)
 <LI><a href="#[8f]">do_connect</a> from api_msg.o(i.do_connect) referenced from api_lib.o(i.netconn_connect)
 <LI><a href="#[84]">do_connected</a> from api_msg.o(i.do_connected) referenced from api_msg.o(i.do_connect)
 <LI><a href="#[90]">do_delconn</a> from api_msg.o(i.do_delconn) referenced from api_lib.o(i.netconn_delete)
 <LI><a href="#[91]">do_getaddr</a> from api_msg.o(i.do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[92]">do_newconn</a> from api_msg.o(i.do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[93]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_recv_data)
 <LI><a href="#[93]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_recved)
 <LI><a href="#[94]">do_send</a> from api_msg.o(i.do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[95]">do_write</a> from api_msg.o(i.do_write) referenced from api_lib.o(i.netconn_write_partly)
 <LI><a href="#[83]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[83]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[85]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[70]">ethernet_input</a> from etharp.o(i.ethernet_input) referenced from netconf.o(i.LwIP_Init)
 <LI><a href="#[71]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from netconf.o(i.LwIP_Init)
 <LI><a href="#[8d]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_socket)
 <LI><a href="#[78]">fputc</a> from bsp_debug_usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1]">free</a> from mallocr.o(i.__free$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[8a]">http_ConnectErr</a> from http_client_iap.o(i.http_ConnectErr) referenced from http_client_iap.o(i.http_client_iap_connect)
 <LI><a href="#[89]">http_client_connected</a> from http_client_iap.o(i.http_client_connected) referenced from http_client_iap.o(i.http_client_iap_connect)
 <LI><a href="#[88]">http_client_poll</a> from http_client_iap.o(i.http_client_poll) referenced from http_client_iap.o(i.http_client_connected)
 <LI><a href="#[87]">http_client_recv</a> from http_client_iap.o(i.http_client_recv) referenced from http_client_iap.o(i.http_client_connected)
 <LI><a href="#[69]">https_Task</a> from main.o(i.https_Task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[67]">iap_Task</a> from main.o(i.iap_Task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[8c]">ip_reass_timer</a> from timers.o(i.ip_reass_timer) referenced from timers.o(i.ip_reass_timer)
 <LI><a href="#[8c]">ip_reass_timer</a> from timers.o(i.ip_reass_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[8b]">ipfrag_free_pbuf_custom</a> from ip_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip_frag.o(i.ip_frag)
 <LI><a href="#[65]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[86]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[5f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[a8]">md5</a> from md5.o(i.md5) referenced from md_wrap.o(.constdata)
 <LI><a href="#[af]">md5_ctx_alloc</a> from md_wrap.o(i.md5_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[b0]">md5_ctx_free</a> from md_wrap.o(i.md5_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[a9]">md5_file_wrap</a> from md_wrap.o(i.md5_file_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[a7]">md5_finish_wrap</a> from md_wrap.o(i.md5_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[ae]">md5_hmac</a> from md5.o(i.md5_hmac) referenced from md_wrap.o(.constdata)
 <LI><a href="#[ac]">md5_hmac_finish_wrap</a> from md_wrap.o(i.md5_hmac_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[ad]">md5_hmac_reset_wrap</a> from md_wrap.o(i.md5_hmac_reset_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[aa]">md5_hmac_starts_wrap</a> from md_wrap.o(i.md5_hmac_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[ab]">md5_hmac_update_wrap</a> from md_wrap.o(i.md5_hmac_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[a5]">md5_starts_wrap</a> from md_wrap.o(i.md5_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[a6]">md5_update_wrap</a> from md_wrap.o(i.md5_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[9e]">my_debug</a> from tcp_client_shortconnect.o(i.my_debug) referenced from tcp_client_shortconnect.o(i.tcp_ShortConnect_MainFunction)
 <LI><a href="#[a0]">net_recv</a> from net.o(i.net_recv) referenced from tcp_client_shortconnect.o(i.tcp_ShortConnect_MainFunction)
 <LI><a href="#[9f]">net_send</a> from net.o(i.net_send) referenced from tcp_client_shortconnect.o(i.tcp_ShortConnect_MainFunction)
 <LI><a href="#[96]">ntpclient_Rcv_callback</a> from ntpclient.o(i.ntpclient_Rcv_callback) referenced from ntpclient.o(i.ntpclient_connect)
 <LI><a href="#[97]">pbuf_free_ooseq_callback</a> from pbuf.o(i.pbuf_free_ooseq_callback) referenced from pbuf.o(i.pbuf_pool_is_empty)
 <LI><a href="#[82]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[82]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[a4]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[9a]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[2]">realloc</a> from mallocr.o(i.realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[98]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[9b]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[99]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[81]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[81]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[b4]">sha1</a> from sha1.o(i.sha1) referenced from md_wrap.o(.constdata)
 <LI><a href="#[bb]">sha1_ctx_alloc</a> from md_wrap.o(i.sha1_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[bc]">sha1_ctx_free</a> from md_wrap.o(i.sha1_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[b5]">sha1_file_wrap</a> from md_wrap.o(i.sha1_file_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[b3]">sha1_finish_wrap</a> from md_wrap.o(i.sha1_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[ba]">sha1_hmac</a> from sha1.o(i.sha1_hmac) referenced from md_wrap.o(.constdata)
 <LI><a href="#[b8]">sha1_hmac_finish_wrap</a> from md_wrap.o(i.sha1_hmac_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[b9]">sha1_hmac_reset_wrap</a> from md_wrap.o(i.sha1_hmac_reset_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[b6]">sha1_hmac_starts_wrap</a> from md_wrap.o(i.sha1_hmac_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[b7]">sha1_hmac_update_wrap</a> from md_wrap.o(i.sha1_hmac_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[b1]">sha1_starts_wrap</a> from md_wrap.o(i.sha1_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[b2]">sha1_update_wrap</a> from md_wrap.o(i.sha1_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c7]">sha224_ctx_alloc</a> from md_wrap.o(i.sha224_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c8]">sha224_ctx_free</a> from md_wrap.o(i.sha224_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c1]">sha224_file_wrap</a> from md_wrap.o(i.sha224_file_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[bf]">sha224_finish_wrap</a> from md_wrap.o(i.sha224_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c4]">sha224_hmac_finish_wrap</a> from md_wrap.o(i.sha224_hmac_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c5]">sha224_hmac_reset_wrap</a> from md_wrap.o(i.sha224_hmac_reset_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c2]">sha224_hmac_starts_wrap</a> from md_wrap.o(i.sha224_hmac_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c3]">sha224_hmac_update_wrap</a> from md_wrap.o(i.sha224_hmac_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c6]">sha224_hmac_wrap</a> from md_wrap.o(i.sha224_hmac_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[bd]">sha224_starts_wrap</a> from md_wrap.o(i.sha224_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[be]">sha224_update_wrap</a> from md_wrap.o(i.sha224_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c0]">sha224_wrap</a> from md_wrap.o(i.sha224_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[d3]">sha256_ctx_alloc</a> from md_wrap.o(i.sha256_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[d4]">sha256_ctx_free</a> from md_wrap.o(i.sha256_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[cd]">sha256_file_wrap</a> from md_wrap.o(i.sha256_file_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[cb]">sha256_finish_wrap</a> from md_wrap.o(i.sha256_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[d0]">sha256_hmac_finish_wrap</a> from md_wrap.o(i.sha256_hmac_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[d1]">sha256_hmac_reset_wrap</a> from md_wrap.o(i.sha256_hmac_reset_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[ce]">sha256_hmac_starts_wrap</a> from md_wrap.o(i.sha256_hmac_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[cf]">sha256_hmac_update_wrap</a> from md_wrap.o(i.sha256_hmac_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[d2]">sha256_hmac_wrap</a> from md_wrap.o(i.sha256_hmac_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c9]">sha256_starts_wrap</a> from md_wrap.o(i.sha256_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[ca]">sha256_update_wrap</a> from md_wrap.o(i.sha256_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[cc]">sha256_wrap</a> from md_wrap.o(i.sha256_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[df]">sha384_ctx_alloc</a> from md_wrap.o(i.sha384_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e0]">sha384_ctx_free</a> from md_wrap.o(i.sha384_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[d9]">sha384_file_wrap</a> from md_wrap.o(i.sha384_file_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[d7]">sha384_finish_wrap</a> from md_wrap.o(i.sha384_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[dc]">sha384_hmac_finish_wrap</a> from md_wrap.o(i.sha384_hmac_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[dd]">sha384_hmac_reset_wrap</a> from md_wrap.o(i.sha384_hmac_reset_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[da]">sha384_hmac_starts_wrap</a> from md_wrap.o(i.sha384_hmac_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[db]">sha384_hmac_update_wrap</a> from md_wrap.o(i.sha384_hmac_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[de]">sha384_hmac_wrap</a> from md_wrap.o(i.sha384_hmac_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[d5]">sha384_starts_wrap</a> from md_wrap.o(i.sha384_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[d6]">sha384_update_wrap</a> from md_wrap.o(i.sha384_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[d8]">sha384_wrap</a> from md_wrap.o(i.sha384_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[eb]">sha512_ctx_alloc</a> from md_wrap.o(i.sha512_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[ec]">sha512_ctx_free</a> from md_wrap.o(i.sha512_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e5]">sha512_file_wrap</a> from md_wrap.o(i.sha512_file_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e3]">sha512_finish_wrap</a> from md_wrap.o(i.sha512_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e8]">sha512_hmac_finish_wrap</a> from md_wrap.o(i.sha512_hmac_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e9]">sha512_hmac_reset_wrap</a> from md_wrap.o(i.sha512_hmac_reset_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e6]">sha512_hmac_starts_wrap</a> from md_wrap.o(i.sha512_hmac_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e7]">sha512_hmac_update_wrap</a> from md_wrap.o(i.sha512_hmac_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[ea]">sha512_hmac_wrap</a> from md_wrap.o(i.sha512_hmac_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e1]">sha512_starts_wrap</a> from md_wrap.o(i.sha512_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e2]">sha512_update_wrap</a> from md_wrap.o(i.sha512_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e4]">sha512_wrap</a> from md_wrap.o(i.sha512_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[9c]">tcp_client_LngConnect_callback</a> from tcp_client_lngconnect.o(i.tcp_client_LngConnect_callback) referenced from tcp_client_lngconnect.o(i.tcp_LngConnect_Parameter)
 <LI><a href="#[a1]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[a2]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcp_timer_needed)
 <LI><a href="#[a2]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcpip_tcp_timer)
 <LI><a href="#[a3]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[6e]">vTaskFeedDog</a> from main.o(i.vTaskFeedDog) referenced from main.o(i.AppTaskCreate)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[490]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ed]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[491]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[492]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[493]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[494]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[495]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[488]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[487]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[496]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sm3_pass
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[306]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[f3]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>

<P><STRONG><a name="[f7]"></a>strftime</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_strBJtime
</UL>

<P><STRONG><a name="[497]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parameter
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_recv
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_crypt_cbc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_update
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_update
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_time
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[309]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parameter
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMsg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_finished
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_finished
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
</UL>

<P><STRONG><a name="[401]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
</UL>

<P><STRONG><a name="[498]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[499]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_init_sminfo
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_sha1
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_md5
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_starts
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_starts
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_starts
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_starts
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_hash
</UL>

<P><STRONG><a name="[49a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[49b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_Parameter
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_binary
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_get_iv
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_free
</UL>

<P><STRONG><a name="[203]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sm3_pass
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_RcvMsg
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_WX_MainFunction
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Net_MainFunction
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Ble_MainFunction
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_setkey_enc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_setkey_dec
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_read_params
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_enc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_dec
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_starts
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_finish
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_starts
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_finish
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_starts
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_finish
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_dn_gets
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_time
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_name
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_free
</UL>

<P><STRONG><a name="[49c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[30c]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_httpPostRequest
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_Parameter
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_PostRequest
</UL>

<P><STRONG><a name="[318]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_recv
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
</UL>

<P><STRONG><a name="[219]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Rx_BleMsg
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Password_MainFunction
</UL>

<P><STRONG><a name="[17a]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gettcp_LngConnect_WXOpenInfo
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_recv
</UL>

<P><STRONG><a name="[179]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_httpPostRequest
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gettcp_LngConnect_WXOpenInfo
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_PostRequest
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verify
</UL>

<P><STRONG><a name="[21a]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Password_MainFunction
</UL>

<P><STRONG><a name="[301]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_finished
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_revoked
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_dn_gets
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verifycrl
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_sig_alg
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_pubkey
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verify
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[3b8]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>

<P><STRONG><a name="[283]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[3f6]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_finished
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_change_cipher_spec
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_finished
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_change_cipher_spec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flush_output
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_fetch_input
</UL>

<P><STRONG><a name="[fb]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_time
</UL>

<P><STRONG><a name="[fd]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[111]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[103]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[106]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_time_PasswordAuth
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_recv
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gettcp_LngConnect_WXOpenInfo
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gettcp_LngConnect_WXOpenInfo
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gettcp_LngConnect_WXOpenInfo
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b5]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[27c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[264]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[49d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[49e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[49f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_strBJtime
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_time_expired
</UL>

<P><STRONG><a name="[f4]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[fe]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[fc]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[62]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>

<P><STRONG><a name="[108]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[4a0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[109]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[ee]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4a1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4a2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[65]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[114]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[11a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[4a3]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[4a4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4a5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
</UL>

<P><STRONG><a name="[221]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
</UL>

<P><STRONG><a name="[226]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
</UL>

<P><STRONG><a name="[225]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
</UL>

<P><STRONG><a name="[223]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
</UL>

<P><STRONG><a name="[224]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
</UL>

<P><STRONG><a name="[228]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
</UL>

<P><STRONG><a name="[222]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
</UL>

<P><STRONG><a name="[1e2]"></a>BListMng_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, blistmng.o(i.BListMng_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BListMng_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[126]"></a>BListMng_u_ContrastBList</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, blistmng.o(i.BListMng_u_ContrastBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BListMng_u_ContrastBList &rArr; BListMng_BinSearch
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BListMng_BinSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMsg
</UL>

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>CF</STRONG> (Thumb, 632 bytes, Stack size 624 bytes, sm3.o(i.CF))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = CF &rArr; P1
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROTL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P0
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GG
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3
</UL>

<P><STRONG><a name="[320]"></a>CaculateWeekDay</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hym8563.o(i.CaculateWeekDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CaculateWeekDay
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_set_time
</UL>

<P><STRONG><a name="[1a7]"></a>ClrBListCache_Queue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, blistcache.o(i.ClrBListCache_Queue))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskBListMng_MainFunction
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBListCache_Parameter
</UL>

<P><STRONG><a name="[448]"></a>ClrBListMng_ListData</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, blistmng.o(i.ClrBListMng_ListData))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shortConnect_UpdataBList
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_BListUpdata
</UL>

<P><STRONG><a name="[134]"></a>ClrBtnFltr_BtnShrtValid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btnfltr.o(i.ClrBtnFltr_BtnShrtValid))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSet_MainFunction
</UL>

<P><STRONG><a name="[1a9]"></a>ClrUnlockLogCache_Queue</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, unlocklogcache.o(i.ClrUnlockLogCache_Queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClrUnlockLogCache_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUnlockLogCache_Parameter
</UL>

<P><STRONG><a name="[253]"></a>ClrZR60Ctrl_BleCnntTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, zr60_ctrl.o(i.ClrZR60Ctrl_BleCnntTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[258]"></a>ClrZR60Ctrl_BleSt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, zr60_ctrl.o(i.ClrZR60Ctrl_BleSt))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Rx_BleMsg
</UL>

<P><STRONG><a name="[312]"></a>ClrZR60Ctrl_MastCtrlIapSt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, zr60_ctrl.o(i.ClrZR60Ctrl_MastCtrlIapSt))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
</UL>

<P><STRONG><a name="[1b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_wm8978.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_wm8978.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_TX_DMA_Init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Stop
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Play_Stop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Play_Start
</UL>

<P><STRONG><a name="[196]"></a>DMA_DeInit</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_TX_DMA_Init
</UL>

<P><STRONG><a name="[19a]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_TX_DMA_Init
</UL>

<P><STRONG><a name="[199]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_TX_DMA_Init
</UL>

<P><STRONG><a name="[197]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_TX_DMA_Init
</UL>

<P><STRONG><a name="[13b]"></a>DMA_GetITStatus</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>DMA_ITConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_TX_DMA_Init
</UL>

<P><STRONG><a name="[198]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_TX_DMA_Init
</UL>

<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>Debug_USART_Config</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, bsp_debug_usart.o(i.Debug_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Debug_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[146]"></a>ETH_BSP_Config</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lan8742a.o(i.ETH_BSP_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ETH_BSP_Config &rArr; ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[153]"></a>ETH_CheckFrameReceived</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_CheckFrameReceived))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>ETH_CheckLinkStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lan8742a.o(i.ETH_CheckLinkStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ETH_CheckLinkStatus &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[154]"></a>ETH_DMAClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMAClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>ETH_DMAITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMAITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[160]"></a>ETH_DMAReceptionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMAReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[349]"></a>ETH_DMARxDescChainInit</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f429_eth.o(i.ETH_DMARxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[15f]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMATransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[348]"></a>ETH_DMATxDescChainInit</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f429_eth.o(i.ETH_DMATxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMATxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[34a]"></a>ETH_DMATxDescChecksumInsertionConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMATxDescChecksumInsertionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[14d]"></a>ETH_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[150]"></a>ETH_Delay</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, stm32f429_eth.o(i.ETH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
</UL>

<P><STRONG><a name="[14f]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_FlushTransmitFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_FlushTransmitFIFO &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[159]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_GetSoftwareResetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[34b]"></a>ETH_Get_Received_Frame</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f429_eth.o(i.ETH_Get_Received_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_Get_Received_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[4a]"></a>ETH_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ETH_IRQHandler &rArr; LwIP_Pkt_Handle &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearITPendingBit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_CheckFrameReceived
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>ETH_Init</STRONG> (Thumb, 618 bytes, Stack size 56 bytes, stm32f429_eth.o(i.ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[347]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[15c]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_MACReceptionCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_MACReceptionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[15d]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_MACTransmissionCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_MACTransmissionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[34c]"></a>ETH_Prepare_Transmit_Descriptors</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32f429_eth.o(i.ETH_Prepare_Transmit_Descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[149]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f429_eth.o(i.ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_CheckLinkStatus
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskdnsAnalysis_MainFunction
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskdhcpClient_MainFunction
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_u_LedDisplay
</UL>

<P><STRONG><a name="[158]"></a>ETH_SoftwareReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_SoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[15e]"></a>ETH_Start</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stm32f429_eth.o(i.ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_Start &rArr; ETH_MACTransmissionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[161]"></a>ETH_Stop</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stm32f429_eth.o(i.ETH_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_Stop &rArr; ETH_MACTransmissionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
</UL>

<P><STRONG><a name="[15a]"></a>ETH_StructInit</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[157]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f429_eth.o(i.ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[72]"></a>ETH_link_callback</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, lan8742a.o(i.ETH_link_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ETH_link_callback &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Stop
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZR60Ctrl_u_PasswordKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>EXTI_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Config
</UL>

<P><STRONG><a name="[12e]"></a>FF</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sm3.o(i.FF))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF
</UL>

<P><STRONG><a name="[241]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_EraseFlash
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMemIf_MainFunction
</UL>

<P><STRONG><a name="[169]"></a>FLASH_EraseSector</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_flash.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_EraseFlash
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMemIf_MainFunction
</UL>

<P><STRONG><a name="[16c]"></a>FLASH_GetStatus</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1ee]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_wrFlash
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_EraseFlash
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMemIf_MainFunction
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_u_wrFlash
</UL>

<P><STRONG><a name="[16b]"></a>FLASH_ProgramByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_flash.o(i.FLASH_ProgramByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramByte &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_wrFlash
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_u_wrFlash
</UL>

<P><STRONG><a name="[1ed]"></a>FLASH_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_wrFlash
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_EraseFlash
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMemIf_MainFunction
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_u_wrFlash
</UL>

<P><STRONG><a name="[16a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[12f]"></a>GG</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sm3.o(i.GG))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF
</UL>

<P><STRONG><a name="[140]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_FLASH_SPI_disk_initialize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GPIO_Config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuInit_UnusedGPIOConfig
</UL>

<P><STRONG><a name="[141]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_FLASH_SPI_disk_initialize
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GPIO_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[172]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBtnFltrCfg_u_BtnRTSt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSFltrCfg_u_RTSt
</UL>

<P><STRONG><a name="[323]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>

<P><STRONG><a name="[325]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>

<P><STRONG><a name="[244]"></a>GetADFliter_ADFliterResult</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, std_adfliter.o(i.GetADFliter_ADFliterResult))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
</UL>

<P><STRONG><a name="[20a]"></a>GetAudioIO_u_PlaySt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, audioio.o(i.GetAudioIO_u_PlaySt))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMemIf_MainFunction
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Fire_MainFunction
</UL>

<P><STRONG><a name="[23e]"></a>GetBListCache_dw_BlistData</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, blistcache.o(i.GetBListCache_dw_BlistData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetBListCache_dw_BlistData
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskBListMng_MainFunction
</UL>

<P><STRONG><a name="[23d]"></a>GetBListCache_u_BListValidity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, blistcache.o(i.GetBListCache_u_BListValidity))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskBListMng_MainFunction
</UL>

<P><STRONG><a name="[129]"></a>GetBtnFltrCfg_u_BtnRTSt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, btnfltr_cfg.o(i.GetBtnFltrCfg_u_BtnRTSt))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnFltr_FltrDeal
</UL>

<P><STRONG><a name="[133]"></a>GetBtnFltr_u_BtnShrtSt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, btnfltr.o(i.GetBtnFltr_u_BtnShrtSt))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSet_MainFunction
</UL>

<P><STRONG><a name="[173]"></a>GetMemIf_u_CheckSum</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, memif.o(i.GetMemIf_u_CheckSum))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIfCfg_FLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parameter
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZR60Ctrl_parameter
</UL>

<P><STRONG><a name="[175]"></a>GetMemIf_u_DtVild</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memif.o(i.GetMemIf_u_DtVild))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIfCfg_FLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parameter
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZR60Ctrl_parameter
</UL>

<P><STRONG><a name="[23a]"></a>GetMemIf_u_Idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, memif.o(i.GetMemIf_u_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskAudioIO_MainFunction
</UL>

<P><STRONG><a name="[176]"></a>GetPSFltrCfg_u_RTSt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, psfltr_cfg.o(i.GetPSFltrCfg_u_RTSt))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSFltr_FltrDeal
</UL>

<P><STRONG><a name="[209]"></a>GetPSFltr_u_PeriSt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psfltr.o(i.GetPSFltr_u_PeriSt))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Fire_MainFunction
</UL>

<P><STRONG><a name="[42a]"></a>GetStm8_fm17550_iapIdle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm8_fm17550_iap.o(i.GetStm8_fm17550_iapIdle))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[177]"></a>GetTick</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, time_stamp.o(i.GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetTick &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Password_MainFunction
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Ble_MainFunction
</UL>

<P><STRONG><a name="[20f]"></a>GetUartCmn_u_RxMsg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uartcmn.o(i.GetUartCmn_u_RxMsg))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
</UL>

<P><STRONG><a name="[20e]"></a>GetUartCmn_u_RxMsgRenew</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uartcmn.o(i.GetUartCmn_u_RxMsgRenew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUartCmn_u_RxMsgRenew
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
</UL>

<P><STRONG><a name="[20c]"></a>GetUartCmn_u_TxIdle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uartcmn.o(i.GetUartCmn_u_TxIdle))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
</UL>

<P><STRONG><a name="[43d]"></a>GetUnlockLogCache_doorLog</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, unlocklogcache.o(i.GetUnlockLogCache_doorLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetUnlockLogCache_doorLog
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[430]"></a>GetUnlockLogCache_u_LogAvild</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, unlocklogcache.o(i.GetUnlockLogCache_u_LogAvild))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[296]"></a>GetZR60Ctrl_u_CardSetSt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, zr60_ctrl.o(i.GetZR60Ctrl_u_CardSetSt))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMsg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeReadBlock
</UL>

<P><STRONG><a name="[311]"></a>GetZR60Ctrl_u_MastCtrlIapSt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, zr60_ctrl.o(i.GetZR60Ctrl_u_MastCtrlIapSt))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
</UL>

<P><STRONG><a name="[248]"></a>GetdnsAnalysis_ipAddr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dnsanalysis.o(i.GetdnsAnalysis_ipAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
</UL>

<P><STRONG><a name="[247]"></a>GetdnsAnalysis_u_ipValidity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dnsanalysis.o(i.GetdnsAnalysis_u_ipValidity))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
</UL>

<P><STRONG><a name="[429]"></a>Gethttp_CnntTxSt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, http_client_iap.o(i.Gethttp_CnntTxSt))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[204]"></a>Getntpclient_u_NtpCalTimeSt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ntpclient.o(i.Getntpclient_u_NtpCalTimeSt))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Ble_MainFunction
</UL>

<P><STRONG><a name="[215]"></a>Gettcp_LngConnect_PhoneNo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp_client_lngconnect.o(i.Gettcp_LngConnect_PhoneNo))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Net_MainFunction
</UL>

<P><STRONG><a name="[178]"></a>Gettcp_LngConnect_WXOpenInfo</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, tcp_client_lngconnect.o(i.Gettcp_LngConnect_WXOpenInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Gettcp_LngConnect_WXOpenInfo &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_WX_MainFunction
</UL>

<P><STRONG><a name="[316]"></a>Gettcp_shortCnntTxSt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_client_shortconnect.o(i.Gettcp_shortCnntTxSt))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesRead
</UL>

<P><STRONG><a name="[17b]"></a>I2C_BytesRead</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, bsp_i2c_gpio.o(i.I2C_BytesRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_BytesRead &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_i2c_read_regs
</UL>

<P><STRONG><a name="[184]"></a>I2C_BytesWrite</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, bsp_i2c_gpio.o(i.I2C_BytesWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_BytesWrite &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_i2c_set_regs
</UL>

<P><STRONG><a name="[17e]"></a>I2C_CheckEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesWrite
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesRead
</UL>

<P><STRONG><a name="[189]"></a>I2C_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mode_Config
</UL>

<P><STRONG><a name="[185]"></a>I2C_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mode_Config
</UL>

<P><STRONG><a name="[17d]"></a>I2C_GenerateSTART</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesWrite
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesRead
</UL>

<P><STRONG><a name="[183]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesWrite
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesRead
</UL>

<P><STRONG><a name="[17c]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f4xx_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesWrite
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesRead
</UL>

<P><STRONG><a name="[187]"></a>I2C_Init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f4xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mode_Config
</UL>

<P><STRONG><a name="[188]"></a>I2C_Mode_Config</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bsp_i2c_gpio.o(i.I2C_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inithym8563_device
</UL>

<P><STRONG><a name="[181]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesRead
</UL>

<P><STRONG><a name="[17f]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesWrite
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesRead
</UL>

<P><STRONG><a name="[180]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesWrite
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesRead
</UL>

<P><STRONG><a name="[194]"></a>I2S_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.I2S_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sxext_Mode_Config
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_Mode_Config
</UL>

<P><STRONG><a name="[19e]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.I2S_FullDuplexConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2S_FullDuplexConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sxext_Mode_Config
</UL>

<P><STRONG><a name="[18a]"></a>I2S_GPIO_Config</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, bsp_wm8978.o(i.I2S_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2S_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAudioIO_playconfig
</UL>

<P><STRONG><a name="[193]"></a>I2S_Init</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, stm32f4xx_spi.o(i.I2S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_Mode_Config
</UL>

<P><STRONG><a name="[125]"></a>I2S_Play_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_wm8978.o(i.I2S_Play_Start))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioIO_VoicePlaying
</UL>

<P><STRONG><a name="[120]"></a>I2S_Play_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_wm8978.o(i.I2S_Play_Stop))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskAudioIO_MainFunction
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioIO_VoicePlaying
</UL>

<P><STRONG><a name="[18c]"></a>I2S_Stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_wm8978.o(i.I2S_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAudioIO_playconfig
</UL>

<P><STRONG><a name="[18d]"></a>I2Sx_Mode_Config</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, bsp_wm8978.o(i.I2Sx_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2Sx_Mode_Config &rArr; I2S_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SCmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_I2SCLKConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAudioIO_playconfig
</UL>

<P><STRONG><a name="[195]"></a>I2Sx_TX_DMA_Init</STRONG> (Thumb, 214 bytes, Stack size 120 bytes, bsp_wm8978.o(i.I2Sx_TX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = I2Sx_TX_DMA_Init &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAudioIO_playconfig
</UL>

<P><STRONG><a name="[19d]"></a>I2Sxext_Mode_Config</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bsp_wm8978.o(i.I2Sxext_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2Sxext_Mode_Config &rArr; I2S_FullDuplexConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_FullDuplexConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAudioIO_playconfig
</UL>

<P><STRONG><a name="[19f]"></a>IWDG_Config</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_iwdg.o(i.IWDG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskFeedDog
</UL>

<P><STRONG><a name="[1a4]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[466]"></a>IWDG_Feed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_iwdg.o(i.IWDG_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskFeedDog
</UL>

<P><STRONG><a name="[1a3]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[1a1]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[1a2]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[1a0]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[1e3]"></a>InitADFliter_parameter</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, std_adfliter.o(i.InitADFliter_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitADFliter_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1a5]"></a>InitAudioIO_playconfig</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, audioio.o(i.InitAudioIO_playconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = InitAudioIO_playconfig &rArr; I2Sx_TX_DMA_Init &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sxext_Mode_Config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_TX_DMA_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_Mode_Config
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Stop
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1a6]"></a>InitBListCache_Parameter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, blistcache.o(i.InitBListCache_Parameter))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBListCache_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1e0]"></a>InitBtnFltr_Parameter</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, btnfltr.o(i.InitBtnFltr_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitBtnFltr_Parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1e1]"></a>InitPSFltr_Parameter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, psfltr.o(i.InitPSFltr_Parameter))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1e4]"></a>InitSleepMng_parameter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sleepmng.o(i.InitSleepMng_parameter))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1a8]"></a>InitUnlockLogCache_Parameter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, unlocklogcache.o(i.InitUnlockLogCache_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitUnlockLogCache_Parameter &rArr; ClrUnlockLogCache_Queue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrUnlockLogCache_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1aa]"></a>InitZR60Ctrl_parameter</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, zr60_ctrl.o(i.InitZR60Ctrl_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = InitZR60Ctrl_parameter &rArr; hym8563_read_datetime &rArr; hym8563_i2c_read_regs &rArr; Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_init_sminfo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_read_datetime
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMemIf_EEVild
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_WriteEE
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_ReadEE
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMemIf_u_DtVild
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMemIf_u_CheckSum
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartCmn_BluetoothTxMsg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1e8]"></a>InitdhcpClient_parameter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dhcpclient.o(i.InitdhcpClient_parameter))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1e9]"></a>InitdnsAnalysis_parameter</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, dnsanalysis.o(i.InitdnsAnalysis_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitdnsAnalysis_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1af]"></a>Inithym8563_device</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hym8563.o(i.Inithym8563_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_i2c_set_regs
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_i2c_read_regs
</UL>

<P><STRONG><a name="[1eb]"></a>Initntpclient_Pramater</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ntpclient.o(i.Initntpclient_Pramater))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[42d]"></a>Json_DecNumber</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jsonif.o(i.Json_DecNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Json_DecNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
</UL>

<P><STRONG><a name="[1b1]"></a>Json_HexToJson</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, jsonif.o(i.Json_HexToJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Json_HexToJson &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_Parameter
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[212]"></a>Json_HexToStr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, jsonif.o(i.Json_HexToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Json_HexToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_Parameter
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
</UL>

<P><STRONG><a name="[1ba]"></a>Key_Config</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, bsp_exti.o(i.Key_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Key_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1bd]"></a>LED_GPIO_Config</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, bsp_led.o(i.LED_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LED_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1bf]"></a>LwIP_DHCP_Process_Handle</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, netconf.o(i.LwIP_DHCP_Process_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = LwIP_DHCP_Process_Handle &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[1c1]"></a>LwIP_Init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, netconf.o(i.LwIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_callback
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1c9]"></a>LwIP_Periodic_Handle</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, netconf.o(i.LwIP_Periodic_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = LwIP_Periodic_Handle &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_CheckLinkStatus
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_app_5msTask
</UL>

<P><STRONG><a name="[152]"></a>LwIP_Pkt_Handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netconf.o(i.LwIP_Pkt_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LwIP_Pkt_Handle &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>Mcu_Init</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, mcu_init.o(i.Mcu_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Mcu_Init &rArr; LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_FLASH_SPI_disk_initialize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_Parameter
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAudioIO_playconfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Config
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitdnsAnalysis_parameter
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parameter
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBtnFltr_Parameter
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_Parameter
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm8_fm17550_iap_parameter
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_parameter
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitdhcpClient_parameter
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initntpclient_Pramater
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZR60Ctrl_parameter
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUnlockLogCache_Parameter
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSleepMng_parameter
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPSFltr_Parameter
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBListCache_Parameter
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADFliter_parameter
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BListMng_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuInit_UnusedGPIOConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuInit_RSTtype
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>MemIfCfg_FLASH_ReadByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, memif_cfg.o(i.MemIfCfg_FLASH_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_ReadEE
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMemIf_u_DtVild
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMemIf_u_CheckSum
</UL>

<P><STRONG><a name="[1df]"></a>MemIf_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, memif.o(i.MemIf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemIf_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1ab]"></a>MemIf_ReadEE</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, memif.o(i.MemIf_ReadEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemIf_ReadEE
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIfCfg_FLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parameter
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZR60Ctrl_parameter
</UL>

<P><STRONG><a name="[136]"></a>MemIf_WriteEE</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, memif.o(i.MemIf_WriteEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemIf_WriteEE
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSet_MainFunction
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZR60Ctrl_parameter
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>MngADFliter_mainFunction</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, std_adfliter.o(i.MngADFliter_mainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MngADFliter_mainFunction &rArr; ADFliter_ADFliterDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADFliter_FliterArrayFill
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADFliter_ADFliterDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fliter_Task
</UL>

<P><STRONG><a name="[6f]"></a>MusicPlayer_I2S_DMA_TX_Callback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, audioio.o(i.MusicPlayer_I2S_DMA_TX_Callback))
<BR>[Address Reference Count : 1]<UL><LI> audioio.o(i.InitAudioIO_playconfig)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_TX_DMA_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[1d8]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1f1]"></a>NetConnIf_Connect</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, netconnif.o(i.NetConnIf_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = NetConnIf_Connect &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
</UL>

<P><STRONG><a name="[427]"></a>NetConnIf_ConnectStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, netconnif.o(i.NetConnIf_ConnectStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
</UL>

<P><STRONG><a name="[1e5]"></a>NetConnIf_Parameter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netconnif.o(i.NetConnIf_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NetConnIf_Parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[428]"></a>NetConnIf_RemoteConnectClose</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, netconnif.o(i.NetConnIf_RemoteConnectClose))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
</UL>

<P><STRONG><a name="[1fc]"></a>NetConnIf_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netconnif.o(i.NetConnIf_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NetConnIf_disconnect &rArr; NetConnIf_connection_close
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_connection_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
</UL>

<P><STRONG><a name="[42b]"></a>NetConnIf_rxConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, netconnif.o(i.NetConnIf_rxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NetConnIf_rxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_Parameter
</UL>

<P><STRONG><a name="[200]"></a>NetConnIf_sendMsg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, netconnif.o(i.NetConnIf_sendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = NetConnIf_sendMsg &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
</UL>

<P><STRONG><a name="[130]"></a>P0</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, sm3.o(i.P0))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = P0
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROTL
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF
</UL>

<P><STRONG><a name="[12c]"></a>P1</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, sm3.o(i.P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = P1
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROTL
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF
</UL>

<P><STRONG><a name="[13e]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_FLASH_SPI_disk_initialize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_TX_DMA_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GPIO_Config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[14e]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>

<P><STRONG><a name="[36a]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[191]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_Mode_Config
</UL>

<P><STRONG><a name="[186]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
</UL>

<P><STRONG><a name="[13f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_FLASH_SPI_disk_initialize
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[230]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[1d5]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuInit_RSTtype
</UL>

<P><STRONG><a name="[156]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[190]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_Mode_Config
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuInit_RSTtype
</UL>

<P><STRONG><a name="[18e]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_I2SCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_Mode_Config
</UL>

<P><STRONG><a name="[18f]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PLLI2SCmd))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_Mode_Config
</UL>

<P><STRONG><a name="[36b]"></a>RNG_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21d]"></a>RNG_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandVal
</UL>

<P><STRONG><a name="[21e]"></a>RNG_GetRandomNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_GetRandomNumber))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandVal
</UL>

<P><STRONG><a name="[12b]"></a>ROTL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sm3.o(i.ROTL))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF
</UL>

<P><STRONG><a name="[1dc]"></a>Rheostat_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_adc.o(i.Rheostat_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Rheostat_Init &rArr; Rheostat_ADC_Mode_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_ADC_Mode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[237]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_FLASH_SPI_disk_initialize
</UL>

<P><STRONG><a name="[21f]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fatfs_flash_spi.o(i.SPI_FLASH_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AudioIOPlayFile
</UL>

<P><STRONG><a name="[22a]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fatfs_flash_spi.o(i.SPI_FLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_FLASH_SPI_disk_status
</UL>

<P><STRONG><a name="[229]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fatfs_flash_spi.o(i.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WrInProgStatus
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>

<P><STRONG><a name="[22e]"></a>SPI_FLASH_WrInProgStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fatfs_flash_spi.o(i.SPI_FLASH_WrInProgStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_WrInProgStatus &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskAudioIO_MainFunction
</UL>

<P><STRONG><a name="[22f]"></a>SPI_Flash_WAKEUP</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fatfs_flash_spi.o(i.SPI_Flash_WAKEUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Flash_WAKEUP &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_FLASH_SPI_disk_initialize
</UL>

<P><STRONG><a name="[19c]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_TX_DMA_Init
</UL>

<P><STRONG><a name="[192]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Sx_Mode_Config
</UL>

<P><STRONG><a name="[22b]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[22d]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[22c]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[236]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_FLASH_SPI_disk_initialize
</UL>

<P><STRONG><a name="[151]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_ETH_MediaInterfaceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[1bb]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Config
</UL>

<P><STRONG><a name="[135]"></a>SetAudioIO_PlayFile</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, audioio.o(i.SetAudioIO_PlayFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = SetAudioIO_PlayFile &rArr; AudioIO_VoicePlaying &rArr; wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioIO_VoicePlaying
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_TonesPlay
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_WX_MainFunction
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Password_MainFunction
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Net_MainFunction
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Fire_MainFunction
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Ble_MainFunction
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSet_MainFunction
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMsg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeReadBlock
</UL>

<P><STRONG><a name="[1ae]"></a>SetMemIf_EEVild</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, memif.o(i.SetMemIf_EEVild))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parameter
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZR60Ctrl_parameter
</UL>

<P><STRONG><a name="[1ac]"></a>SetUartCmn_BluetoothTxMsg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uartcmn.o(i.SetUartCmn_BluetoothTxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetUartCmn_BluetoothTxMsg &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Ble_MainFunction
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZR60Ctrl_parameter
</UL>

<P><STRONG><a name="[231]"></a>SetUartCmn_TxMsg</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uartcmn.o(i.SetUartCmn_TxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetUartCmn_TxMsg &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setreadcard_Key
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setreadcard_AutoSearchCard
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBlock
</UL>

<P><STRONG><a name="[167]"></a>SetZR60Ctrl_u_PasswordKey</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, zr60_ctrl.o(i.SetZR60Ctrl_u_PasswordKey))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[24b]"></a>SetdnsAnalysis_ipUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dnsanalysis.o(i.SetdnsAnalysis_ipUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
</UL>

<P><STRONG><a name="[213]"></a>Setreadcard_AutoSearchCard</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, readcard.o(i.Setreadcard_AutoSearchCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Setreadcard_AutoSearchCard &rArr; SetUartCmn_TxMsg &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartCmn_TxMsg
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCommandsBBC
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
</UL>

<P><STRONG><a name="[20d]"></a>Setreadcard_Key</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, readcard.o(i.Setreadcard_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Setreadcard_Key &rArr; SetUartCmn_TxMsg &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartCmn_TxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
</UL>

<P><STRONG><a name="[211]"></a>Setstm8_fm17550_SlaveReplySt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm8_fm17550_iap.o(i.Setstm8_fm17550_SlaveReplySt))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
</UL>

<P><STRONG><a name="[139]"></a>Settcp_client_DeviceInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp_client_shortconnect.o(i.Settcp_client_DeviceInit))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSet_MainFunction
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>T</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sm3.o(i.T))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF
</UL>

<P><STRONG><a name="[1dd]"></a>TM_FATFS_FLASH_SPI_disk_initialize</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, fatfs_flash_spi.o(i.TM_FATFS_FLASH_SPI_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TM_FATFS_FLASH_SPI_disk_initialize &rArr; TM_FATFS_FLASH_SPI_disk_status &rArr; SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_FLASH_SPI_disk_status
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[238]"></a>TM_FATFS_FLASH_SPI_disk_status</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fatfs_flash_spi.o(i.TM_FATFS_FLASH_SPI_disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TM_FATFS_FLASH_SPI_disk_status &rArr; SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_FLASH_SPI_disk_initialize
</UL>

<P><STRONG><a name="[239]"></a>TskAudioIO_MainFunction</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, audioio.o(i.TskAudioIO_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = TskAudioIO_MainFunction &rArr; AudioIO_VoicePlaying &rArr; wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WrInProgStatus
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMemIf_u_Idle
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AudioIOPlayFile
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioIO_VoicePlaying
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_PowerDown
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Play_Stop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_5msTask
</UL>

<P><STRONG><a name="[23c]"></a>TskBListMng_MainFunction</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, blistmng.o(i.TskBListMng_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TskBListMng_MainFunction &rArr; BListMng_BinSearch
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_BListUpdataSt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BListMng_BinSearch
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBListCache_u_BListValidity
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBListCache_dw_BlistData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBListCache_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_10msTask
</UL>

<P><STRONG><a name="[16e]"></a>TskBtnFltr_MainFunction</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btnfltr.o(i.TskBtnFltr_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TskBtnFltr_MainFunction &rArr; BtnFltr_FltrDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnFltr_FltrDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fliter_Task
</UL>

<P><STRONG><a name="[240]"></a>TskMemIf_MainFunction</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, memif.o(i.TskMemIf_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TskMemIf_MainFunction &rArr; MemIf_u_wrFlash &rArr; FLASH_ProgramByte &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAudioIO_u_PlaySt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_u_wrFlash
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_10msTask
</UL>

<P><STRONG><a name="[16f]"></a>TskPSFltr_MainFunction</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psfltr.o(i.TskPSFltr_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TskPSFltr_MainFunction &rArr; PSFltr_FltrDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSFltr_FltrDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fliter_Task
</UL>

<P><STRONG><a name="[1be]"></a>TskSleepMng_MainFunction</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sleepmng.o(i.TskSleepMng_MainFunction))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Task
</UL>

<P><STRONG><a name="[242]"></a>TskZR60Ctrl_MainFunction</STRONG> (Thumb, 394 bytes, Stack size 72 bytes, zr60_ctrl.o(i.TskZR60Ctrl_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 5272<LI>Call Chain = TskZR60Ctrl_MainFunction &rArr; OpenDoor_Ble_MainFunction &rArr; sm3_time_PasswordAuth &rArr; get_sm3_pass &rArr; sm3 &rArr; CF &rArr; P1
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_read_datetime
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBtnFltr_u_BtnShrtSt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBtnFltr_BtnShrtValid
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_w_CalPosDifference
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_u_LedDisplay
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_WX_MainFunction
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Password_MainFunction
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Net_MainFunction
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Fire_MainFunction
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Ble_MainFunction
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSet_MainFunction
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADFliter_ADFliterResult
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_5msTask
</UL>

<P><STRONG><a name="[1d2]"></a>TskdhcpClient_MainFunction</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dhcpclient.o(i.TskdhcpClient_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TskdhcpClient_MainFunction &rArr; ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_app_5msTask
</UL>

<P><STRONG><a name="[1d3]"></a>TskdnsAnalysis_MainFunction</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, dnsanalysis.o(i.TskdnsAnalysis_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = TskdnsAnalysis_MainFunction &rArr; dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_app_5msTask
</UL>

<P><STRONG><a name="[1d1]"></a>Tskntpclient_MainFunction</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, ntpclient.o(i.Tskntpclient_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Tskntpclient_MainFunction &rArr; ntpclient_Send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_timeCalibration
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_strBJtime
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetdnsAnalysis_ipUpdate
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetdnsAnalysis_u_ipValidity
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetdnsAnalysis_ipAddr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_connect
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_Send
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_Release
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_app_100msTask
</UL>

<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stm32f4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART5_IRQHandler &rArr; UartCmn_Rx_BleMsg &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Tx_BluetoothMsg
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Rx_BleMsg
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrZR60Ctrl_BleCnntTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d9]"></a>USART3_Config</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, usart3.o(i.USART3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART3_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; UartCmn_Rx_Msg
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Tx_Msg
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Rx_Msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1da]"></a>USART4_Config</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, usart4.o(i.USART4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART4_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1db]"></a>USART5_Config</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, usart5.o(i.USART5_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART5_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[252]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[24f]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Fire_MainFunction
</UL>

<P><STRONG><a name="[251]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Rx_Msg
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Rx_BleMsg
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[24e]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartCmn_TxMsg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Tx_Msg
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Tx_BluetoothMsg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartCmn_BluetoothTxMsg
</UL>

<P><STRONG><a name="[142]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
</UL>

<P><STRONG><a name="[250]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Rx_Msg
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Rx_BleMsg
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[259]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Tx_Msg
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmn_Tx_BluetoothMsg
</UL>

<P><STRONG><a name="[254]"></a>UartCmn_Rx_BleMsg</STRONG> (Thumb, 742 bytes, Stack size 24 bytes, uartcmn.o(i.UartCmn_Rx_BleMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartCmn_Rx_BleMsg &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrZR60Ctrl_BleSt
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[256]"></a>UartCmn_Rx_Msg</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, uartcmn.o(i.UartCmn_Rx_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartCmn_Rx_Msg
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[255]"></a>UartCmn_Tx_BluetoothMsg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uartcmn.o(i.UartCmn_Tx_BluetoothMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartCmn_Tx_BluetoothMsg &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[257]"></a>UartCmn_Tx_Msg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uartcmn.o(i.UartCmn_Tx_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartCmn_Tx_Msg &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[440]"></a>WrBListCache_BListQueue</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, blistcache.o(i.WrBListCache_BListQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WrBListCache_BListQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
</UL>

<P><STRONG><a name="[25b]"></a>WrUnlockLogCache_Queue</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, unlocklogcache.o(i.WrUnlockLogCache_Queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WrUnlockLogCache_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_u_RecordUnlockInfo
</UL>

<P><STRONG><a name="[132]"></a>ZR60Ctrl_u_ArrayCmp</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, zr60_ctrl.o(i.ZR60Ctrl_u_ArrayCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ZR60Ctrl_u_ArrayCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSet_MainFunction
</UL>

<P><STRONG><a name="[25c]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a6]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[13a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_init_sminfo
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_set_time
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_timeCalibration
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_strBJtime
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_time_PasswordAuth
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_httpPostRequest
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_SendMsg
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_RcvMsg
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settcp_shortConnect_UpdataBLTime
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_Connect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_Parameter
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gettcp_LngConnect_WXOpenInfo
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskAudioIO_MainFunction
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskdnsAnalysis_MainFunction
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsAnalysis_DNSfound
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parameter
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_recv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_connected
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_Err
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_parameter
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_connect
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_recv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_poll
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connection_close
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connected
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_PostRequest
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_ConnectErr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_connect
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_Send
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_Release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_Rcv_callback
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMemIf_MainFunction
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_u_wrFlash
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskFeedDog
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_TonesPlay
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_WX_MainFunction
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Password_MainFunction
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Net_MainFunction
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Fire_MainFunction
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Ble_MainFunction
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSet_MainFunction
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMsg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeReadBlock
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZR60Ctrl_parameter
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuInit_RSTtype
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a7]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4a8]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[25e]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a9]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[28f]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_cert_info
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_mpi
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_crt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_buf
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_serial_gets
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_dn_gets
</UL>

<P><STRONG><a name="[4aa]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[4ab]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[25f]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4ac]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3b4]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shortConnect_HexIPtoStr
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_httpPostRequest
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_Parameter
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[4ad]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[4ae]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[260]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4af]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4b0]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4b1]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[28d]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_is_blocking
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[4b2]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gettcp_LngConnect_WXOpenInfo
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_free
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_ctx_free
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_ctx_free
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_free
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[261]"></a>__hardfp_strtod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[0]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gettcp_LngConnect_WXOpenInfo
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_init
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_ctx_alloc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_alloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_ctx_alloc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_name
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_sequence_of
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[4b3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4b4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4b5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[104]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[26b]"></a>aes_crypt_cbc</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, aes.o(i.aes_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = aes_crypt_cbc &rArr; aes_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[26c]"></a>aes_crypt_ecb</STRONG> (Thumb, 1742 bytes, Stack size 40 bytes, aes.o(i.aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc
</UL>

<P><STRONG><a name="[26d]"></a>aes_setkey_dec</STRONG> (Thumb, 212 bytes, Stack size 320 bytes, aes.o(i.aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 2428<LI>Call Chain = aes_setkey_dec &rArr; aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[26e]"></a>aes_setkey_enc</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, aes.o(i.aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2108<LI>Call Chain = aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_gen_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
</UL>

<P><STRONG><a name="[3fa]"></a>arc4_crypt</STRONG> (Thumb, 74 bytes, Stack size 28 bytes, arc4.o(i.arc4_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arc4_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[3ff]"></a>arc4_setup</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, arc4.o(i.arc4_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arc4_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
</UL>

<P><STRONG><a name="[3af]"></a>base64_decode</STRONG> (Thumb, 264 bytes, Stack size 28 bytes, base64.o(i.base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
</UL>

<P><STRONG><a name="[31c]"></a>bcd2bin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hym8563.o(i.bcd2bin))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_read_datetime
</UL>

<P><STRONG><a name="[321]"></a>bin2bcd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hym8563.o(i.bin2bcd))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_set_time
</UL>

<P><STRONG><a name="[1b7]"></a>cJSON_AddItemToArray</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cjson.o(i.cJSON_AddItemToArray))
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
</UL>

<P><STRONG><a name="[1b6]"></a>cJSON_AddItemToObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cjson.o(i.cJSON_AddItemToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_AddItemToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
</UL>

<P><STRONG><a name="[1b3]"></a>cJSON_AddNumberToObject</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, cjson.o(i.cJSON_AddNumberToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cJSON_AddNumberToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
</UL>

<P><STRONG><a name="[1b4]"></a>cJSON_AddStringToObject</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cjson.o(i.cJSON_AddStringToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cJSON_AddStringToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
</UL>

<P><STRONG><a name="[1b5]"></a>cJSON_CreateArray</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cjson.o(i.cJSON_CreateArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_CreateArray &rArr; cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
</UL>

<P><STRONG><a name="[279]"></a>cJSON_CreateNumber</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, cjson.o(i.cJSON_CreateNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_CreateNumber &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>

<P><STRONG><a name="[1b2]"></a>cJSON_CreateObject</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cjson.o(i.cJSON_CreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_CreateObject &rArr; cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
</UL>

<P><STRONG><a name="[27a]"></a>cJSON_CreateString</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cjson.o(i.cJSON_CreateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cJSON_CreateString &rArr; cJSON_strdup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
</UL>

<P><STRONG><a name="[1b9]"></a>cJSON_Delete</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cjson.o(i.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[27d]"></a>cJSON_GetArrayItem</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cjson.o(i.cJSON_GetArrayItem))
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_array_item
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
</UL>

<P><STRONG><a name="[43e]"></a>cJSON_GetArraySize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cjson.o(i.cJSON_GetArraySize))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
</UL>

<P><STRONG><a name="[27f]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(i.cJSON_GetObjectItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_GetObjectItem &rArr; get_object_item &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
</UL>

<P><STRONG><a name="[281]"></a>cJSON_Parse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cjson.o(i.cJSON_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
</UL>

<P><STRONG><a name="[282]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, cjson.o(i.cJSON_ParseWithOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[1b8]"></a>cJSON_PrintUnformatted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cjson.o(i.cJSON_PrintUnformatted))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
</UL>

<P><STRONG><a name="[287]"></a>camellia_crypt_cbc</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, camellia.o(i.camellia_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = camellia_crypt_cbc &rArr; camellia_crypt_ecb &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_crypt_ecb
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[288]"></a>camellia_crypt_ecb</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, camellia.o(i.camellia_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = camellia_crypt_ecb &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_feistel
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_crypt_cbc
</UL>

<P><STRONG><a name="[28a]"></a>camellia_setkey_dec</STRONG> (Thumb, 138 bytes, Stack size 288 bytes, camellia.o(i.camellia_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = camellia_setkey_dec &rArr; camellia_setkey_enc &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_setkey_enc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
</UL>

<P><STRONG><a name="[28b]"></a>camellia_setkey_enc</STRONG> (Thumb, 1036 bytes, Stack size 296 bytes, camellia.o(i.camellia_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = camellia_setkey_enc &rArr; camellia_feistel
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_feistel
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_setkey_dec
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
</UL>

<P><STRONG><a name="[3f3]"></a>check_passwd</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, time_stamp.o(i.check_passwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_passwd
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_time_PasswordAuth
</UL>

<P><STRONG><a name="[28c]"></a>debug_fmt</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, debug.o(i.debug_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = debug_fmt &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_finished
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_change_cipher_spec
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_finished
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_change_cipher_spec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flush_output
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_fetch_input
</UL>

<P><STRONG><a name="[28e]"></a>debug_print_buf</STRONG> (Thumb, 182 bytes, Stack size 576 bytes, debug.o(i.debug_print_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[290]"></a>debug_print_crt</STRONG> (Thumb, 194 bytes, Stack size 2184 bytes, debug.o(i.debug_print_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2792<LI>Call Chain = debug_print_crt &rArr; debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_cert_info
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_mpi
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate
</UL>

<P><STRONG><a name="[292]"></a>debug_print_mpi</STRONG> (Thumb, 364 bytes, Stack size 576 bytes, debug.o(i.debug_print_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_crt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[293]"></a>debug_print_msg</STRONG> (Thumb, 58 bytes, Stack size 536 bytes, debug.o(i.debug_print_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = debug_print_msg &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_finished
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_change_cipher_spec
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_finished
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_change_cipher_spec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flush_output
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_fetch_input
</UL>

<P><STRONG><a name="[294]"></a>debug_print_ret</STRONG> (Thumb, 64 bytes, Stack size 552 bytes, debug.o(i.debug_print_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_finished
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_change_cipher_spec
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_finished
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_change_cipher_spec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flush_output
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_fetch_input
</UL>

<P><STRONG><a name="[298]"></a>des3_crypt_cbc</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, des.o(i.des3_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = des3_crypt_cbc &rArr; des3_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
</UL>

<P><STRONG><a name="[299]"></a>des3_crypt_ecb</STRONG> (Thumb, 916 bytes, Stack size 36 bytes, des.o(i.des3_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = des3_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_cbc
</UL>

<P><STRONG><a name="[29c]"></a>des3_set3key_dec</STRONG> (Thumb, 30 bytes, Stack size 392 bytes, des.o(i.des3_set3key_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = des3_set3key_dec &rArr; des3_set3key &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
</UL>

<P><STRONG><a name="[29d]"></a>des3_set3key_enc</STRONG> (Thumb, 30 bytes, Stack size 392 bytes, des.o(i.des3_set3key_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = des3_set3key_enc &rArr; des3_set3key &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
</UL>

<P><STRONG><a name="[29e]"></a>des_crypt_cbc</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, des.o(i.des_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = des_crypt_cbc &rArr; des_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
</UL>

<P><STRONG><a name="[29f]"></a>des_crypt_ecb</STRONG> (Thumb, 460 bytes, Stack size 36 bytes, des.o(i.des_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = des_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt_cbc
</UL>

<P><STRONG><a name="[2a0]"></a>des_setkey_dec</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, des.o(i.des_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = des_setkey_dec &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
</UL>

<P><STRONG><a name="[2a1]"></a>dhcp_arp_reply</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[1cd]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[1cc]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[2bc]"></a>dhcp_network_changed</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_network_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[2c1]"></a>dhcp_release</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2ab]"></a>dhcp_renew</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[1c0]"></a>dhcp_start</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>

<P><STRONG><a name="[164]"></a>dhcp_stop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_stop &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>

<P><STRONG><a name="[2c8]"></a>dhm_calc_secret</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dhm.o(i.dhm_calc_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = dhm_calc_secret &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_binary
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_size
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[2d2]"></a>dhm_free</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dhm.o(i.dhm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dhm_free &rArr; mpi_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free
</UL>

<P><STRONG><a name="[2d3]"></a>dhm_make_public</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dhm.o(i.dhm_make_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = dhm_make_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_binary
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_r
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_fill_random
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[2d7]"></a>dhm_read_params</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, dhm.o(i.dhm_read_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dhm_read_params &rArr; dhm_check_range &rArr; mpi_sub_int &rArr; mpi_sub_mpi &rArr; mpi_sub_abs &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_size
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_read_bignum
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[246]"></a>dns_gethostbyname</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, dns.o(i.dns_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskdnsAnalysis_MainFunction
</UL>

<P><STRONG><a name="[2dc]"></a>dns_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dns.o(i.dns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dns_init &rArr; ipaddr_addr &rArr; ipaddr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2bb]"></a>dns_setserver</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dns.o(i.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[1ce]"></a>dns_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dns_tmr &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
</UL>

<P><STRONG><a name="[8e]"></a>do_close</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, api_msg.o(i.do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = do_close &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_close_shutdown)
</UL>
<P><STRONG><a name="[8f]"></a>do_connect</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, api_msg.o(i.do_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_connect)
</UL>
<P><STRONG><a name="[90]"></a>do_delconn</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, api_msg.o(i.do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = do_delconn &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[91]"></a>do_getaddr</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, api_msg.o(i.do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_getaddr &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[92]"></a>do_newconn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_msg.o(i.do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[93]"></a>do_recv</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, api_msg.o(i.do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_lib.o(i.netconn_recv_data)
<LI> api_lib.o(i.netconn_recved)
</UL>
<P><STRONG><a name="[94]"></a>do_send</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, api_msg.o(i.do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = do_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[95]"></a>do_write</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, api_msg.o(i.do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_partly)
</UL>
<P><STRONG><a name="[2f5]"></a>etharp_cleanup_netif</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[85]"></a>etharp_output</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[2a9]"></a>etharp_query</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[2fc]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[1cb]"></a>etharp_tmr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[70]"></a>ethernet_input</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[71]"></a>ethernetif_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; ETH_Start &rArr; ETH_MACTransmissionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[1cf]"></a>ethernetif_input</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
</UL>

<P><STRONG><a name="[78]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_debug_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[3f4]"></a>generate_password</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, time_stamp.o(i.generate_password))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = generate_password
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_time_PasswordAuth
</UL>

<P><STRONG><a name="[307]"></a>get_sm3_pass</STRONG> (Thumb, 350 bytes, Stack size 136 bytes, sm3.o(i.get_sm3_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 5016<LI>Call Chain = get_sm3_pass &rArr; sm3 &rArr; CF &rArr; P1
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_time_PasswordAuth
</UL>

<P><STRONG><a name="[210]"></a>handleMsg</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, readcard.o(i.handleMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = handleMsg &rArr; decodeReadBlock &rArr; SetAudioIO_PlayFile &rArr; AudioIO_VoicePlaying &rArr; wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZR60Ctrl_u_CardSetSt
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBlock
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeReadBlock
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BListMng_u_ContrastBList
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
</UL>

<P><STRONG><a name="[30f]"></a>http_client_iap_MainFunction</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, http_client_iap.o(i.http_client_iap_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = http_client_iap_MainFunction &rArr; http_client_iap_connect &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetdnsAnalysis_ipUpdate
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetdnsAnalysis_u_ipValidity
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetdnsAnalysis_ipAddr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAudioIO_u_PlaySt
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gettcp_shortCnntTxSt
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZR60Ctrl_u_MastCtrlIapSt
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrZR60Ctrl_MastCtrlIapSt
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_sendMsg
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_disconnect
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_connect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_wrFlash
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_PostRequest
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Task
</UL>

<P><STRONG><a name="[314]"></a>http_client_iap_connect</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, http_client_iap.o(i.http_client_iap_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = http_client_iap_connect &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
</UL>

<P><STRONG><a name="[310]"></a>http_client_iap_disconnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, http_client_iap.o(i.http_client_iap_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = http_client_iap_disconnect &rArr; http_client_connection_close &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connection_close
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
</UL>

<P><STRONG><a name="[1e7]"></a>http_client_iap_parameter</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, http_client_iap.o(i.http_client_iap_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = http_client_iap_parameter &rArr; http_EraseFlash &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_EraseFlash
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[315]"></a>http_client_iap_sendMsg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, http_client_iap.o(i.http_client_iap_sendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = http_client_iap_sendMsg &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
</UL>

<P><STRONG><a name="[25a]"></a>hym8563_Currenttime</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, hym8563.o(i.hym8563_Currenttime))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hym8563_Currenttime &rArr; hym8563_read_datetime &rArr; hym8563_i2c_read_regs &rArr; Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_read_datetime
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_u_RecordUnlockInfo
</UL>

<P><STRONG><a name="[31a]"></a>hym8563_i2c_read_regs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hym8563.o(i.hym8563_i2c_read_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hym8563_i2c_read_regs &rArr; Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesRead
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inithym8563_device
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_read_datetime
</UL>

<P><STRONG><a name="[31b]"></a>hym8563_i2c_set_regs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hym8563.o(i.hym8563_i2c_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hym8563_i2c_set_regs &rArr; Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BytesWrite
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inithym8563_device
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_set_time
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_timeCalibration
</UL>

<P><STRONG><a name="[1ad]"></a>hym8563_read_datetime</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, hym8563.o(i.hym8563_read_datetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hym8563_read_datetime &rArr; hym8563_i2c_read_regs &rArr; Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_year_days
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_i2c_read_regs
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2bin
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shortConnect_UpdataBList
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settcp_shortConnect_UpdataBLTime
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_Currenttime
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Password_MainFunction
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Ble_MainFunction
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZR60Ctrl_parameter
</UL>

<P><STRONG><a name="[31e]"></a>hym8563_set_time</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, hym8563.o(i.hym8563_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hym8563_set_time &rArr; hym8563_i2c_set_regs &rArr; Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_i2c_set_regs
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_month_days
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaculateWeekDay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_timeCalibration
</UL>

<P><STRONG><a name="[322]"></a>i2c_Ack</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_reg8_recv
</UL>

<P><STRONG><a name="[1b0]"></a>i2c_CfgGpio</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, bsp_i2c_gpio.o(i.i2c_CfgGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_reg8_recv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inithym8563_device
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>

<P><STRONG><a name="[327]"></a>i2c_NAck</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_reg8_recv
</UL>

<P><STRONG><a name="[328]"></a>i2c_ReadByte</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bsp_i2c_gpio.o(i.i2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_reg8_recv
</UL>

<P><STRONG><a name="[329]"></a>i2c_SendByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bsp_i2c_gpio.o(i.i2c_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>

<P><STRONG><a name="[32a]"></a>i2c_Start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_reg8_recv
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>

<P><STRONG><a name="[326]"></a>i2c_Stop</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_reg8_recv
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>

<P><STRONG><a name="[32b]"></a>i2c_WaitAck</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>

<P><STRONG><a name="[217]"></a>i2c_master_reg8_recv</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, bsp_i2c_gpio.o(i.i2c_master_reg8_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = i2c_master_reg8_recv &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Password_MainFunction
</UL>

<P><STRONG><a name="[32d]"></a>icmp_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[32f]"></a>icmp_input</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[334]"></a>icmp_time_exceeded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[332]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[330]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2f9]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[336]"></a>ip_frag</STRONG> (Thumb, 352 bytes, Stack size 88 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[302]"></a>ip_input</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[333]"></a>ip_output</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[331]"></a>ip_output_if</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[33b]"></a>ip_reass</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ip_reass &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[345]"></a>ip_reass_tmr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
</UL>

<P><STRONG><a name="[33f]"></a>ip_route</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[2db]"></a>ipaddr_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ip_addr.o(i.ipaddr_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipaddr_addr &rArr; ipaddr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[346]"></a>ipaddr_aton</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, ip_addr.o(i.ipaddr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipaddr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>

<P><STRONG><a name="[34d]"></a>lwip_close</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sockets.o(i.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_close
</UL>

<P><STRONG><a name="[350]"></a>lwip_connect</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sockets.o(i.lwip_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
</UL>

<P><STRONG><a name="[2ae]"></a>lwip_htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[2dd]"></a>lwip_htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[1c7]"></a>lwip_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lwip_init &rArr; dns_init &rArr; ipaddr_addr &rArr; ipaddr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[2b1]"></a>lwip_ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[337]"></a>lwip_ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[358]"></a>lwip_read</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sockets.o(i.lwip_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
</UL>

<P><STRONG><a name="[359]"></a>lwip_recvfrom</STRONG> (Thumb, 438 bytes, Stack size 80 bytes, sockets.o(i.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
</UL>

<P><STRONG><a name="[35e]"></a>lwip_send</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, sockets.o(i.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[35f]"></a>lwip_sendto</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, sockets.o(i.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + In Cycle
<LI>Call Chain = lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[364]"></a>lwip_shutdown</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sockets.o(i.lwip_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_close
</UL>

<P><STRONG><a name="[366]"></a>lwip_socket</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sockets.o(i.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
</UL>

<P><STRONG><a name="[354]"></a>lwip_socket_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sockets.o(i.lwip_socket_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[369]"></a>lwip_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sockets.o(i.lwip_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lwip_write &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>

<P><STRONG><a name="[5f]"></a>main</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = main &rArr; Mcu_Init &rArr; LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Cmd
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3d1]"></a>md</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, md.o(i.md))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = md
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[a8]"></a>md5</STRONG> (Thumb, 44 bytes, Stack size 224 bytes, md5.o(i.md5))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = md5 &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_starts
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_hash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>md5_file_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_file_wrap))
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[36f]"></a>md5_finish</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, md5.o(i.md5_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish_wrap
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_md5
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_finish
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[ae]"></a>md5_hmac</STRONG> (Thumb, 50 bytes, Stack size 232 bytes, md5.o(i.md5_hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = md5_hmac &rArr; md5_hmac_starts &rArr; md5 &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_update
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_starts
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[372]"></a>md5_hmac_finish</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, md5.o(i.md5_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = md5_hmac_finish &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_finish_wrap
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac
</UL>

<P><STRONG><a name="[373]"></a>md5_hmac_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md5.o(i.md5_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = md5_hmac_reset &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_reset_wrap
</UL>

<P><STRONG><a name="[370]"></a>md5_hmac_starts</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, md5.o(i.md5_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = md5_hmac_starts &rArr; md5 &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_starts_wrap
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac
</UL>

<P><STRONG><a name="[371]"></a>md5_hmac_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md5.o(i.md5_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = md5_hmac_update &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_update_wrap
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac
</UL>

<P><STRONG><a name="[36d]"></a>md5_starts</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, md5.o(i.md5_starts))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts_wrap
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_md5
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_starts
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_reset
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_finish
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[36e]"></a>md5_update</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, md5.o(i.md5_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update_wrap
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_md5
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_update
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_starts
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_reset
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_finish
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[37c]"></a>md_finish</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.md_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[3cf]"></a>md_info_from_type</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, md.o(i.md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[3d0]"></a>md_init_ctx</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(i.md_init_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = md_init_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[37a]"></a>md_starts</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.md_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[37b]"></a>md_update</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.md_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[30e]"></a>mem_free</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connection_close
</UL>

<P><STRONG><a name="[1c2]"></a>mem_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mem_init &rArr; sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[2c7]"></a>mem_malloc</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connected
</UL>

<P><STRONG><a name="[378]"></a>mem_trim</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mem_trim &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[1f6]"></a>memp_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memp.o(i.memp_free))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_Connect
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_connect
</UL>

<P><STRONG><a name="[1c3]"></a>memp_init</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[2ff]"></a>memp_malloc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[37d]"></a>mpi_add_abs</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, bignum.o(i.mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpi_add_abs &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
</UL>

<P><STRONG><a name="[380]"></a>mpi_add_mpi</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bignum.o(i.mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mpi_add_mpi &rArr; mpi_sub_abs &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
</UL>

<P><STRONG><a name="[381]"></a>mpi_cmp_abs</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bignum.o(i.mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[383]"></a>mpi_cmp_int</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, bignum.o(i.mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mpi_cmp_int &rArr; mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[2d0]"></a>mpi_cmp_mpi</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, bignum.o(i.mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_make_public
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
</UL>

<P><STRONG><a name="[37e]"></a>mpi_copy</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bignum.o(i.mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
</UL>

<P><STRONG><a name="[384]"></a>mpi_div_mpi</STRONG> (Thumb, 828 bytes, Stack size 120 bytes, bignum.o(i.mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_r
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_l
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_int
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
</UL>

<P><STRONG><a name="[2c9]"></a>mpi_exp_mod</STRONG> (Thumb, 806 bytes, Stack size 856 bytes, bignum.o(i.mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_l
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_make_public
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_calc_secret
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
</UL>

<P><STRONG><a name="[2d4]"></a>mpi_fill_random</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, bignum.o(i.mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpi_fill_random &rArr; mpi_lset &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_make_public
</UL>

<P><STRONG><a name="[2d1]"></a>mpi_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bignum.o(i.mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_free
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free
</UL>

<P><STRONG><a name="[37f]"></a>mpi_grow</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bignum.o(i.mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_l
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_fill_random
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
</UL>

<P><STRONG><a name="[2cd]"></a>mpi_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bignum.o(i.mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
</UL>

<P><STRONG><a name="[2ce]"></a>mpi_lset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(i.mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mpi_lset &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_fill_random
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
</UL>

<P><STRONG><a name="[389]"></a>mpi_mod_mpi</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bignum.o(i.mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
</UL>

<P><STRONG><a name="[385]"></a>mpi_msb</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bignum.o(i.mpi_msb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpi_msb
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_size
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_l
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pubkey
</UL>

<P><STRONG><a name="[388]"></a>mpi_mul_int</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bignum.o(i.mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[38e]"></a>mpi_mul_mpi</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, bignum.o(i.mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_int
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
</UL>

<P><STRONG><a name="[276]"></a>mpi_read_binary</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bignum.o(i.mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpi_read_binary &rArr; mpi_lset &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_read_bignum
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_mpi
</UL>

<P><STRONG><a name="[386]"></a>mpi_shift_l</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, bignum.o(i.mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpi_shift_l &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[2d5]"></a>mpi_shift_r</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, bignum.o(i.mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_shift_r
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_make_public
</UL>

<P><STRONG><a name="[2cb]"></a>mpi_size</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, bignum.o(i.mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_size &rArr; mpi_msb
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_binary
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_read_params
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_calc_secret
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[382]"></a>mpi_sub_abs</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bignum.o(i.mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpi_sub_abs &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_copy
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
</UL>

<P><STRONG><a name="[2cf]"></a>mpi_sub_int</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bignum.o(i.mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mpi_sub_int &rArr; mpi_sub_mpi &rArr; mpi_sub_abs &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_check_range
</UL>

<P><STRONG><a name="[387]"></a>mpi_sub_mpi</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bignum.o(i.mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mpi_sub_mpi &rArr; mpi_sub_abs &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_int
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
</UL>

<P><STRONG><a name="[2cc]"></a>mpi_write_binary</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bignum.o(i.mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mpi_write_binary &rArr; mpi_size &rArr; mpi_msb
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_size
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_make_public
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_calc_secret
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
</UL>

<P><STRONG><a name="[38f]"></a>net_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net.o(i.net_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = net_close &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[390]"></a>net_connect</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, net.o(i.net_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = net_connect &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[a0]"></a>net_recv</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, net.o(i.net_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = net_recv &rArr; lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_is_blocking
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_client_shortconnect.o(i.tcp_ShortConnect_MainFunction)
</UL>
<P><STRONG><a name="[9f]"></a>net_send</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, net.o(i.net_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = net_send &rArr; lwip_write &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_is_blocking
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_client_shortconnect.o(i.tcp_ShortConnect_MainFunction)
</UL>
<P><STRONG><a name="[34f]"></a>netbuf_delete</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[363]"></a>netbuf_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[361]"></a>netbuf_ref</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[392]"></a>netconn_alloc</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = netconn_alloc &rArr; sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[351]"></a>netconn_connect</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, api_lib.o(i.netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_connect &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[34e]"></a>netconn_delete</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_delete &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[398]"></a>netconn_free</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = netconn_free &rArr; sys_sem_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[35d]"></a>netconn_getaddr</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[367]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[35b]"></a>netconn_recv</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, api_lib.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[35c]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, api_lib.o(i.netconn_recv_tcp_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[35a]"></a>netconn_recved</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, api_lib.o(i.netconn_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_recved &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[362]"></a>netconn_send</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_send &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[365]"></a>netconn_shutdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, api_lib.o(i.netconn_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[360]"></a>netconn_write_partly</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netconn_write_partly &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[1c4]"></a>netif_add</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[353]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[162]"></a>netif_set_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
</UL>

<P><STRONG><a name="[1c5]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[165]"></a>netif_set_down</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2a6]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[2a4]"></a>netif_set_ipaddr</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[1c6]"></a>netif_set_link_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_callback))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[14c]"></a>netif_set_link_down</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_down))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_CheckLinkStatus
</UL>

<P><STRONG><a name="[14b]"></a>netif_set_link_up</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_CheckLinkStatus
</UL>

<P><STRONG><a name="[2a5]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[163]"></a>netif_set_up</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[2ad]"></a>pbuf_alloc</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_Send
</UL>

<P><STRONG><a name="[338]"></a>pbuf_alloced_custom</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[339]"></a>pbuf_cat</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[3a5]"></a>pbuf_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[340]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[2fd]"></a>pbuf_copy</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_copy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2bf]"></a>pbuf_copy_partial</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[1fe]"></a>pbuf_free</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_recv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_recv
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_Send
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_Rcv_callback
</UL>

<P><STRONG><a name="[2f8]"></a>pbuf_header</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[2b4]"></a>pbuf_realloc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[2fe]"></a>pbuf_ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[39e]"></a>pbuf_take</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_take &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_Send
</UL>

<P><STRONG><a name="[3ac]"></a>pem_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pem.o(i.pem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[47e]"></a>pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(i.pem_init))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[3ae]"></a>pem_read_buffer</STRONG> (Thumb, 664 bytes, Stack size 496 bytes, pem.o(i.pem_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 3268<LI>Call Chain = pem_read_buffer &rArr; pem_aes_decrypt &rArr; aes_setkey_dec &rArr; aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_decode
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_dec
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt_cbc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_dec
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_cbc
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_get_iv
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[3c8]"></a>pvPortMalloc</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>

<P><STRONG><a name="[48a]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[48e]"></a>pxPortInitialiseStack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[2e6]"></a>raw_connect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(i.raw_connect))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[33c]"></a>raw_input</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[3a8]"></a>raw_new</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = raw_new &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[3a9]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[2e8]"></a>raw_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, raw.o(i.raw_remove))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[2ec]"></a>raw_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_send))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[2eb]"></a>raw_sendto</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = raw_sendto &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[137]"></a>read_init_sminfo</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, wdata.o(i.read_init_sminfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_init_sminfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdata_HexToChar
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSet_MainFunction
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZR60Ctrl_parameter
</UL>

<P><STRONG><a name="[2]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[3cc]"></a>rsa_check_pubkey</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rsa.o(i.rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_check_pubkey &rArr; mpi_msb
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[3cd]"></a>rsa_free</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, rsa.o(i.rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rsa_free &rArr; mpi_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_free
</UL>

<P><STRONG><a name="[3ce]"></a>rsa_pkcs1_encrypt</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, rsa.o(i.rsa_pkcs1_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = rsa_pkcs1_encrypt &rArr; rsa_private &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_init_ctx
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_info_from_type
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[3d4]"></a>rsa_pkcs1_sign</STRONG> (Thumb, 722 bytes, Stack size 136 bytes, rsa.o(i.rsa_pkcs1_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = rsa_pkcs1_sign &rArr; rsa_private &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_update
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_starts
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_init_ctx
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_info_from_type
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_finish
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[3d5]"></a>rsa_pkcs1_verify</STRONG> (Thumb, 668 bytes, Stack size 1080 bytes, rsa.o(i.rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = rsa_pkcs1_verify &rArr; rsa_private &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_update
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_starts
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_init_ctx
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_info_from_type
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_finish
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_private
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verifycrl
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verify
</UL>

<P><STRONG><a name="[3d2]"></a>rsa_private</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, rsa.o(i.rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = rsa_private &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_binary
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[3d3]"></a>rsa_public</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, rsa.o(i.rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = rsa_public &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_binary
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[31f]"></a>rtc_month_days</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hym8563.o(i.rtc_month_days))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_month_days
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_set_time
</UL>

<P><STRONG><a name="[31d]"></a>rtc_year_days</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hym8563.o(i.rtc_year_days))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_year_days
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_read_datetime
</UL>

<P><STRONG><a name="[32c]"></a>send_byte</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bsp_i2c_gpio.o(i.send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_byte &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_reg8_recv
</UL>

<P><STRONG><a name="[b4]"></a>sha1</STRONG> (Thumb, 44 bytes, Stack size 232 bytes, sha1.o(i.sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_starts
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_hash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>sha1_ctx_alloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sha1_ctx_alloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>sha1_ctx_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sha1_ctx_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>sha1_file_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_file_wrap))
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3d9]"></a>sha1_finish</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sha1.o(i.sha1_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_sha1
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_finish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
</UL>

<P><STRONG><a name="[b3]"></a>sha1_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sha1_finish_wrap &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>sha1_hmac</STRONG> (Thumb, 50 bytes, Stack size 240 bytes, sha1.o(i.sha1_hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_starts
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3dc]"></a>sha1_hmac_finish</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, sha1.o(i.sha1_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sha1_hmac_finish &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_finish_wrap
</UL>

<P><STRONG><a name="[b8]"></a>sha1_hmac_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_hmac_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sha1_hmac_finish_wrap &rArr; sha1_hmac_finish &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3dd]"></a>sha1_hmac_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sha1.o(i.sha1_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sha1_hmac_reset &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_reset_wrap
</UL>

<P><STRONG><a name="[b9]"></a>sha1_hmac_reset_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_hmac_reset_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sha1_hmac_reset_wrap &rArr; sha1_hmac_reset &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3da]"></a>sha1_hmac_starts</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, sha1.o(i.sha1_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_starts_wrap
</UL>

<P><STRONG><a name="[b6]"></a>sha1_hmac_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_hmac_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sha1_hmac_starts_wrap &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3db]"></a>sha1_hmac_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha1.o(i.sha1_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sha1_hmac_update &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_update_wrap
</UL>

<P><STRONG><a name="[b7]"></a>sha1_hmac_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_hmac_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sha1_hmac_update_wrap &rArr; sha1_hmac_update &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3d7]"></a>sha1_starts</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sha1.o(i.sha1_starts))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_init
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_sha1
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_starts
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_reset
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_finish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
</UL>

<P><STRONG><a name="[b1]"></a>sha1_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3d8]"></a>sha1_update</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sha1.o(i.sha1_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_sha1
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_starts
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_reset
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac_finish
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
</UL>

<P><STRONG><a name="[b2]"></a>sha1_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sha1_update_wrap &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3df]"></a>sha2</STRONG> (Thumb, 48 bytes, Stack size 256 bytes, sha2.o(i.sha2))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = sha2 &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_update
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_starts
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_starts
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_hash
</UL>

<P><STRONG><a name="[c7]"></a>sha224_ctx_alloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sha224_ctx_alloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>sha224_ctx_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sha224_ctx_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>sha224_file_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_file_wrap))
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>sha224_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sha224_finish_wrap &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>sha224_hmac_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_hmac_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sha224_hmac_finish_wrap &rArr; sha2_hmac_finish &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>sha224_hmac_reset_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_hmac_reset_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sha224_hmac_reset_wrap &rArr; sha2_hmac_reset &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>sha224_hmac_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_hmac_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = sha224_hmac_starts_wrap &rArr; sha2_hmac_starts &rArr; sha2 &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>sha224_hmac_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_hmac_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = sha224_hmac_update_wrap &rArr; sha2_hmac_update &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>sha224_hmac_wrap</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, md_wrap.o(i.sha224_hmac_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = sha224_hmac_wrap &rArr; sha2_hmac &rArr; sha2_hmac_starts &rArr; sha2 &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>sha224_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>sha224_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = sha224_update_wrap &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>sha224_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = sha224_wrap &rArr; sha2 &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>sha256_ctx_alloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sha256_ctx_alloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>sha256_ctx_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sha256_ctx_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>sha256_file_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_file_wrap))
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>sha256_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sha256_finish_wrap &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>sha256_hmac_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_hmac_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sha256_hmac_finish_wrap &rArr; sha2_hmac_finish &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>sha256_hmac_reset_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_hmac_reset_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sha256_hmac_reset_wrap &rArr; sha2_hmac_reset &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>sha256_hmac_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_hmac_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = sha256_hmac_starts_wrap &rArr; sha2_hmac_starts &rArr; sha2 &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>sha256_hmac_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_hmac_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = sha256_hmac_update_wrap &rArr; sha2_hmac_update &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>sha256_hmac_wrap</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, md_wrap.o(i.sha256_hmac_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = sha256_hmac_wrap &rArr; sha2_hmac &rArr; sha2_hmac_starts &rArr; sha2 &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>sha256_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>sha256_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = sha256_update_wrap &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>sha256_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = sha256_wrap &rArr; sha2 &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3e2]"></a>sha2_finish</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, sha2.o(i.sha2_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_finish
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_finish_wrap
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
</UL>

<P><STRONG><a name="[3e7]"></a>sha2_hmac</STRONG> (Thumb, 52 bytes, Stack size 256 bytes, sha2.o(i.sha2_hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = sha2_hmac &rArr; sha2_hmac_starts &rArr; sha2 &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_update
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_starts
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_hmac_wrap
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_hmac_wrap
</UL>

<P><STRONG><a name="[3e3]"></a>sha2_hmac_finish</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, sha2.o(i.sha2_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sha2_hmac_finish &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_update
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_starts
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_hmac_finish_wrap
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_hmac_finish_wrap
</UL>

<P><STRONG><a name="[3e4]"></a>sha2_hmac_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sha2.o(i.sha2_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sha2_hmac_reset &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_update
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_hmac_reset_wrap
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_hmac_reset_wrap
</UL>

<P><STRONG><a name="[3e5]"></a>sha2_hmac_starts</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, sha2.o(i.sha2_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = sha2_hmac_starts &rArr; sha2 &rArr; sha2_finish &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_update
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_starts
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_hmac_starts_wrap
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_hmac_starts_wrap
</UL>

<P><STRONG><a name="[3e6]"></a>sha2_hmac_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha2.o(i.sha2_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = sha2_hmac_update &rArr; sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_hmac_update_wrap
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_hmac_update_wrap
</UL>

<P><STRONG><a name="[3e0]"></a>sha2_starts</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sha2.o(i.sha2_starts))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_starts
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_reset
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_finish
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
</UL>

<P><STRONG><a name="[3e1]"></a>sha2_update</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sha2.o(i.sha2_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = sha2_update &rArr; sha2_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_process
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_update
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_starts
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_reset
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_hmac_finish
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_finish
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update_wrap
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
</UL>

<P><STRONG><a name="[df]"></a>sha384_ctx_alloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sha384_ctx_alloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>sha384_ctx_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sha384_ctx_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>sha384_file_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_file_wrap))
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>sha384_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = sha384_finish_wrap &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>sha384_hmac_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_hmac_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = sha384_hmac_finish_wrap &rArr; sha4_hmac_finish &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>sha384_hmac_reset_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_hmac_reset_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = sha384_hmac_reset_wrap &rArr; sha4_hmac_reset &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>sha384_hmac_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_hmac_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = sha384_hmac_starts_wrap &rArr; sha4_hmac_starts &rArr; sha4 &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>sha384_hmac_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_hmac_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = sha384_hmac_update_wrap &rArr; sha4_hmac_update &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>sha384_hmac_wrap</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, md_wrap.o(i.sha384_hmac_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = sha384_hmac_wrap &rArr; sha4_hmac &rArr; sha4_hmac_starts &rArr; sha4 &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>sha384_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>sha384_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = sha384_update_wrap &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>sha384_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_wrap))
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3f1]"></a>sha4</STRONG> (Thumb, 50 bytes, Stack size 488 bytes, sha4.o(i.sha4))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = sha4 &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_update
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_starts
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_starts
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_wrap
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_hash
</UL>

<P><STRONG><a name="[3e9]"></a>sha4_finish</STRONG> (Thumb, 756 bytes, Stack size 40 bytes, sha4.o(i.sha4_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_finish
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_finish_wrap
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_finish_wrap
</UL>

<P><STRONG><a name="[3ee]"></a>sha4_hmac</STRONG> (Thumb, 54 bytes, Stack size 488 bytes, sha4.o(i.sha4_hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = sha4_hmac &rArr; sha4_hmac_starts &rArr; sha4 &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_update
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_starts
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_hmac_wrap
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_hmac_wrap
</UL>

<P><STRONG><a name="[3ea]"></a>sha4_hmac_finish</STRONG> (Thumb, 76 bytes, Stack size 88 bytes, sha4.o(i.sha4_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = sha4_hmac_finish &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_update
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_starts
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_hmac_finish_wrap
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_hmac_finish_wrap
</UL>

<P><STRONG><a name="[3eb]"></a>sha4_hmac_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sha4.o(i.sha4_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = sha4_hmac_reset &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_update
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_hmac_reset_wrap
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_hmac_reset_wrap
</UL>

<P><STRONG><a name="[3ec]"></a>sha4_hmac_starts</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, sha4.o(i.sha4_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = sha4_hmac_starts &rArr; sha4 &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_update
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_starts
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_hmac_starts_wrap
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_hmac_starts_wrap
</UL>

<P><STRONG><a name="[3ed]"></a>sha4_hmac_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha4.o(i.sha4_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = sha4_hmac_update &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_hmac_update_wrap
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_hmac_update_wrap
</UL>

<P><STRONG><a name="[3ef]"></a>sha4_starts</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, sha4.o(i.sha4_starts))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_starts
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_reset
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_finish
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_starts_wrap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_starts_wrap
</UL>

<P><STRONG><a name="[3f0]"></a>sha4_update</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, sha4.o(i.sha4_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_process
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_update
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_starts
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_reset
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_finish
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_finish
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_update_wrap
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update_wrap
</UL>

<P><STRONG><a name="[eb]"></a>sha512_ctx_alloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sha512_ctx_alloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>sha512_ctx_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sha512_ctx_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>sha512_file_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_file_wrap))
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>sha512_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = sha512_finish_wrap &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>sha512_hmac_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_hmac_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = sha512_hmac_finish_wrap &rArr; sha4_hmac_finish &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>sha512_hmac_reset_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_hmac_reset_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = sha512_hmac_reset_wrap &rArr; sha4_hmac_reset &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>sha512_hmac_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_hmac_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = sha512_hmac_starts_wrap &rArr; sha4_hmac_starts &rArr; sha4 &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>sha512_hmac_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_hmac_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = sha512_hmac_update_wrap &rArr; sha4_hmac_update &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>sha512_hmac_wrap</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, md_wrap.o(i.sha512_hmac_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = sha512_hmac_wrap &rArr; sha4_hmac &rArr; sha4_hmac_starts &rArr; sha4 &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_hmac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>sha512_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>sha512_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = sha512_update_wrap &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>sha512_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = sha512_wrap &rArr; sha4 &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[308]"></a>sm3</STRONG> (Thumb, 162 bytes, Stack size 4252 bytes, sm3.o(i.sm3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880<LI>Call Chain = sm3 &rArr; CF &rArr; P1
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sm3_pass
</UL>

<P><STRONG><a name="[206]"></a>sm3_time_PasswordAuth</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, time_stamp.o(i.sm3_time_PasswordAuth))
<BR><BR>[Stack]<UL><LI>Max Depth = 5088<LI>Call Chain = sm3_time_PasswordAuth &rArr; get_sm3_pass &rArr; sm3 &rArr; CF &rArr; P1
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_password
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_passwd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sm3_pass
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Password_MainFunction
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Ble_MainFunction
</UL>

<P><STRONG><a name="[3f8]"></a>ssl_calc_verify</STRONG> (Thumb, 328 bytes, Stack size 560 bytes, ssl_tls.o(i.ssl_calc_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = ssl_calc_verify &rArr; debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_buf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[3fd]"></a>ssl_derive_keys</STRONG> (Thumb, 1556 bytes, Stack size 848 bytes, ssl_tls.o(i.ssl_derive_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 3276<LI>Call Chain = ssl_derive_keys &rArr; aes_setkey_dec &rArr; aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_setkey_enc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_setkey_dec
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_setup
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_buf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_enc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_dec
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_ciphersuite
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[402]"></a>ssl_fetch_input</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ssl_tls.o(i.ssl_fetch_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ssl_fetch_input &rArr; debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
</UL>

<P><STRONG><a name="[403]"></a>ssl_flush_output</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_flush_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_flush_output &rArr; debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[404]"></a>ssl_free</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ssl_free &rArr; debug_print_msg &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_free
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_free
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[3fe]"></a>ssl_get_ciphersuite</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_get_ciphersuite))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
</UL>

<P><STRONG><a name="[4b6]"></a>ssl_get_ciphersuite_name</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_get_ciphersuite_name), UNUSED)

<P><STRONG><a name="[406]"></a>ssl_handshake</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 3428<LI>Call Chain = ssl_handshake &rArr; ssl_handshake_client &rArr; ssl_parse_certificate &rArr; x509parse_crt &rArr;  x509parse_crt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read
</UL>

<P><STRONG><a name="[407]"></a>ssl_handshake_client</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_handshake_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 3404<LI>Call Chain = ssl_handshake_client &rArr; ssl_parse_certificate &rArr; x509parse_crt &rArr;  x509parse_crt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_finished
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_change_cipher_spec
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_finished
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_change_cipher_spec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flush_output
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake
</UL>

<P><STRONG><a name="[415]"></a>ssl_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ssl_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[40a]"></a>ssl_parse_certificate</STRONG> (Thumb, 790 bytes, Stack size 40 bytes, ssl_tls.o(i.ssl_parse_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3380<LI>Call Chain = ssl_parse_certificate &rArr; x509parse_crt &rArr;  x509parse_crt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verify
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[413]"></a>ssl_parse_change_cipher_spec</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_parse_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = ssl_parse_change_cipher_spec &rArr; ssl_read_record &rArr; ssl_decrypt_buf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[414]"></a>ssl_parse_finished</STRONG> (Thumb, 348 bytes, Stack size 496 bytes, ssl_tls.o(i.ssl_parse_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = ssl_parse_finished &rArr; ssl_calc_finished &rArr; tls1_prf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[41a]"></a>ssl_read</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ssl_tls.o(i.ssl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 3460<LI>Call Chain = ssl_read &rArr; ssl_handshake &rArr; ssl_handshake_client &rArr; ssl_parse_certificate &rArr; x509parse_crt &rArr;  x509parse_crt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_RcvMsg
</UL>

<P><STRONG><a name="[416]"></a>ssl_read_record</STRONG> (Thumb, 1490 bytes, Stack size 48 bytes, ssl_tls.o(i.ssl_read_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = ssl_read_record &rArr; ssl_decrypt_buf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_buf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_fetch_input
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_finished
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_change_cipher_spec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>

<P><STRONG><a name="[433]"></a>ssl_set_authmode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_set_authmode))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[436]"></a>ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_set_bio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[438]"></a>ssl_set_ciphersuites</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_set_ciphersuites))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[435]"></a>ssl_set_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_set_dbg))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[432]"></a>ssl_set_endpoint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_set_endpoint))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[434]"></a>ssl_set_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_set_rng))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[437]"></a>ssl_set_session</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_set_session))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[41b]"></a>ssl_write</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, ssl_tls.o(i.ssl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 3460<LI>Call Chain = ssl_write &rArr; ssl_handshake &rArr; ssl_handshake_client &rArr; ssl_parse_certificate &rArr; x509parse_crt &rArr;  x509parse_crt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flush_output
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_SendMsg
</UL>

<P><STRONG><a name="[40e]"></a>ssl_write_certificate</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, ssl_tls.o(i.ssl_write_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 2824<LI>Call Chain = ssl_write_certificate &rArr; debug_print_crt &rArr; debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_crt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[411]"></a>ssl_write_change_cipher_spec</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_write_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = ssl_write_change_cipher_spec &rArr; ssl_write_record &rArr; ssl_encrypt_buf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[412]"></a>ssl_write_finished</STRONG> (Thumb, 220 bytes, Stack size 456 bytes, ssl_tls.o(i.ssl_write_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = ssl_write_finished &rArr; ssl_calc_finished &rArr; tls1_prf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[41c]"></a>ssl_write_record</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, ssl_tls.o(i.ssl_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = ssl_write_record &rArr; ssl_encrypt_buf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_buf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flush_output
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_finished
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_change_cipher_spec
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[1e6]"></a>stm8_fm17550_iap_parameter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm8_fm17550_iap.o(i.stm8_fm17550_iap_parameter))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[39d]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[399]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[375]"></a>sys_arch_sem_wait</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>

<P><STRONG><a name="[352]"></a>sys_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[39a]"></a>sys_mbox_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sys_mbox_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[393]"></a>sys_mbox_new</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_mbox_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[422]"></a>sys_mbox_post</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>

<P><STRONG><a name="[395]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[2f2]"></a>sys_mbox_trypost</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[2f1]"></a>sys_mbox_valid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[394]"></a>sys_sem_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sys_sem_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[377]"></a>sys_sem_new</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[39b]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[2e2]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>

<P><STRONG><a name="[2e9]"></a>sys_sem_valid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_valid))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[424]"></a>sys_thread_new</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sys_thread_new &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[270]"></a>sys_timeout</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timers.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[357]"></a>sys_timeouts_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[425]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, timers.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[426]"></a>sys_untimeout</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, timers.o(i.sys_untimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_untimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[1d0]"></a>tcp_LngConnect_MainFunction</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, tcp_client_lngconnect.o(i.tcp_LngConnect_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tcp_LngConnect_MainFunction &rArr; NetConnIf_Connect &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetdnsAnalysis_ipUpdate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_sendMsg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_disconnect
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_RemoteConnectClose
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_ConnectStatus
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_Connect
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gethttp_CnntTxSt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetdnsAnalysis_u_ipValidity
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetdnsAnalysis_ipAddr
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStm8_fm17550_iapIdle
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_app_100msTask
</UL>

<P><STRONG><a name="[138]"></a>tcp_LngConnect_Parameter</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tcp_client_lngconnect.o(i.tcp_LngConnect_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tcp_LngConnect_Parameter &rArr; Json_HexToJson &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_rxConfig
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToStr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSet_MainFunction
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[319]"></a>tcp_ShortConnect_MainFunction</STRONG> (Thumb, 2112 bytes, Stack size 792 bytes, tcp_client_shortconnect.o(i.tcp_ShortConnect_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 4268<LI>Call Chain = tcp_ShortConnect_MainFunction &rArr; tcp_ShortConnect_RcvMsg &rArr; ssl_read &rArr; ssl_handshake &rArr; ssl_handshake_client &rArr; ssl_parse_certificate &rArr; x509parse_crt &rArr;  x509parse_crt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shortConnect_UpdataBList
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shortConnect_HexIPtoStr
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_httpPostRequest
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_SendMsg
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_RcvMsg
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settcp_shortConnect_UpdataBLTime
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToStr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gethttp_CnntTxSt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetdnsAnalysis_u_ipValidity
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetdnsAnalysis_ipAddr
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStm8_fm17550_iapIdle
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_session
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_rng
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_endpoint
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_dbg
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_ciphersuites
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_bio
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_authmode
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_close
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnlockLogCache_u_LogAvild
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnlockLogCache_doorLog
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSFltr_u_PeriSt
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;https_Task
</UL>

<P><STRONG><a name="[1ea]"></a>tcp_ShortConnect_parameter</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, tcp_client_shortconnect.o(i.tcp_ShortConnect_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_ShortConnect_parameter &rArr; Settcp_shortConnect_UpdataBLTime &rArr; hym8563_read_datetime &rArr; hym8563_i2c_read_regs &rArr; Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settcp_shortConnect_UpdataBLTime
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMemIf_EEVild
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_ReadEE
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMemIf_u_DtVild
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMemIf_u_CheckSum
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[441]"></a>tcp_abandon</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[317]"></a>tcp_abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_poll
</UL>

<P><STRONG><a name="[2e3]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[444]"></a>tcp_alloc</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[1f4]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_Connect
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_connection_close
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connection_close
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connected
</UL>

<P><STRONG><a name="[1f3]"></a>tcp_bind</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_Connect
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_connect
</UL>

<P><STRONG><a name="[42e]"></a>tcp_client_BListUpdata</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp_client_shortconnect.o(i.tcp_client_BListUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_client_BListUpdata
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBListMng_ListData
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
</UL>

<P><STRONG><a name="[23f]"></a>tcp_client_BListUpdataSt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp_client_shortconnect.o(i.tcp_client_BListUpdataSt))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskBListMng_MainFunction
</UL>

<P><STRONG><a name="[9c]"></a>tcp_client_LngConnect_callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp_client_lngconnect.o(i.tcp_client_LngConnect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_client_LngConnect_callback &rArr; tcp_LngConnect_parseJson &rArr; Json_HexToJson &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_parseJson
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_client_lngconnect.o(i.tcp_LngConnect_Parameter)
</UL>
<P><STRONG><a name="[1fb]"></a>tcp_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_close))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_connection_close
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connection_close
</UL>

<P><STRONG><a name="[1f5]"></a>tcp_connect</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_Connect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_connect
</UL>

<P><STRONG><a name="[44c]"></a>tcp_eff_send_mss</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[44d]"></a>tcp_enqueue_flags</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[1f7]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_Connect
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_connection_close
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_connect
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connection_close
</UL>

<P><STRONG><a name="[450]"></a>tcp_fasttmr</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[356]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(i.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[33e]"></a>tcp_input</STRONG> (Thumb, 752 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[455]"></a>tcp_keepalive</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[1f2]"></a>tcp_new</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_Connect
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_connect
</UL>

<P><STRONG><a name="[445]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[2ef]"></a>tcp_output</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[44a]"></a>tcp_pcb_purge</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[442]"></a>tcp_pcb_remove</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1fa]"></a>tcp_poll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_connection_close
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_connected
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connection_close
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connected
</UL>

<P><STRONG><a name="[451]"></a>tcp_process_refused_data</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[1f9]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_connection_close
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_connected
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connection_close
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connected
</UL>

<P><STRONG><a name="[a1]"></a>tcp_recv_null</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[1fd]"></a>tcp_recved</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_recv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_recv
</UL>

<P><STRONG><a name="[45d]"></a>tcp_rexmit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[45e]"></a>tcp_rexmit_fast</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[461]"></a>tcp_rexmit_rto</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[443]"></a>tcp_rst</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[460]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[44f]"></a>tcp_seg_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[3a6]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[459]"></a>tcp_send_empty_ack</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[44b]"></a>tcp_send_fin</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[2e4]"></a>tcp_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[2e5]"></a>tcp_shutdown</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[462]"></a>tcp_slowtmr</STRONG> (Thumb, 626 bytes, Stack size 40 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_slowtmr &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[447]"></a>tcp_timer_needed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1ca]"></a>tcp_tmr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[45f]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[201]"></a>tcp_write</STRONG> (Thumb, 738 bytes, Stack size 96 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_sendMsg
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_sendMsg
</UL>

<P><STRONG><a name="[463]"></a>tcp_zero_window_probe</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[397]"></a>tcpip_apimsg</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, tcpip.o(i.tcpip_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[3a7]"></a>tcpip_callback_with_block</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[1c8]"></a>tcpip_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[419]"></a>time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i.time))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_time_expired
</UL>

<P><STRONG><a name="[24d]"></a>timestamp_strBJtime</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, time_stamp.o(i.timestamp_strBJtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = timestamp_strBJtime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
</UL>

<P><STRONG><a name="[205]"></a>timestamp_timeCalibration</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, time_stamp.o(i.timestamp_timeCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = timestamp_timeCalibration &rArr; hym8563_set_time &rArr; hym8563_i2c_set_regs &rArr; Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_set_time
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_i2c_set_regs
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Ble_MainFunction
</UL>

<P><STRONG><a name="[2c4]"></a>udp_bind</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_connect
</UL>

<P><STRONG><a name="[2c5]"></a>udp_connect</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[355]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[33d]"></a>udp_input</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2c3]"></a>udp_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_connect
</UL>

<P><STRONG><a name="[2c6]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_connect
</UL>

<P><STRONG><a name="[2c2]"></a>udp_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, udp.o(i.udp_remove))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_connect
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_Release
</UL>

<P><STRONG><a name="[2ed]"></a>udp_send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udp.o(i.udp_send))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[2df]"></a>udp_sendto</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_Send
</UL>

<P><STRONG><a name="[2b5]"></a>udp_sendto_if</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[3bf]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[41f]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[485]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[482]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>

<P><STRONG><a name="[48d]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[3ba]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[468]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[3be]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[3c0]"></a>vPortExitCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[3c1]"></a>vPortFree</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[486]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[420]"></a>vQueueDelete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[171]"></a>vTaskDelay</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Task
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;https_Task
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_5msTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_10msTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_app_5msTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_app_100msTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Task
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fliter_Task
</UL>

<P><STRONG><a name="[3c7]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[467]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[469]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[46a]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[48b]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[11e]"></a>vTaskStartScheduler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[3bc]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[ef]"></a>vTaskSwitchContext</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[123]"></a>wm8978_CfgAudioIF</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp_wm8978.o(i.wm8978_CfgAudioIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wm8978_CfgAudioIF &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioIO_VoicePlaying
</UL>

<P><STRONG><a name="[122]"></a>wm8978_CfgAudioPath</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, bsp_wm8978.o(i.wm8978_CfgAudioPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioIO_VoicePlaying
</UL>

<P><STRONG><a name="[1de]"></a>wm8978_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_wm8978.o(i.wm8978_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = wm8978_Init &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[23b]"></a>wm8978_PowerDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_wm8978.o(i.wm8978_PowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = wm8978_PowerDown &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskAudioIO_MainFunction
</UL>

<P><STRONG><a name="[46d]"></a>wm8978_Reset</STRONG> (Thumb, 48 bytes, Stack size 128 bytes, bsp_wm8978.o(i.wm8978_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_PowerDown
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioPath
</UL>

<P><STRONG><a name="[124]"></a>wm8978_SetOUT2Volume</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_wm8978.o(i.wm8978_SetOUT2Volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wm8978_SetOUT2Volume &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioIO_VoicePlaying
</UL>

<P><STRONG><a name="[405]"></a>x509_free</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, x509parse.o(i.x509_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_free &rArr; rsa_free &rArr; mpi_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[291]"></a>x509parse_cert_info</STRONG> (Thumb, 454 bytes, Stack size 64 bytes, x509parse.o(i.x509parse_cert_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = x509parse_cert_info &rArr; x509parse_dn_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_serial_gets
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_dn_gets
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_crt
</UL>

<P><STRONG><a name="[417]"></a>x509parse_crt</STRONG> (Thumb, 836 bytes, Stack size 72 bytes, x509parse.o(i.x509parse_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3340 + In Cycle
<LI>Call Chain = x509parse_crt &rArr;  x509parse_crt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_size
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pubkey
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_free
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_time
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_sig_alg
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_sig
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_serial
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_pubkey
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_name
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_alg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_free
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[47d]"></a>x509parse_dn_gets</STRONG> (Thumb, 288 bytes, Stack size 168 bytes, x509parse.o(i.x509parse_dn_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = x509parse_dn_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_cert_info
</UL>

<P><STRONG><a name="[47f]"></a>x509parse_revoked</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, x509parse.o(i.x509parse_revoked))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = x509parse_revoked &rArr; x509parse_time_expired &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_time_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verifycrl
</UL>

<P><STRONG><a name="[47c]"></a>x509parse_serial_gets</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, x509parse.o(i.x509parse_serial_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = x509parse_serial_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_cert_info
</UL>

<P><STRONG><a name="[480]"></a>x509parse_time_expired</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, x509parse.o(i.x509parse_time_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = x509parse_time_expired &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_revoked
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verifycrl
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verify
</UL>

<P><STRONG><a name="[418]"></a>x509parse_verify</STRONG> (Thumb, 434 bytes, Stack size 128 bytes, x509parse.o(i.x509parse_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552<LI>Call Chain = x509parse_verify &rArr; x509parse_verifycrl &rArr; rsa_pkcs1_verify &rArr; rsa_private &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_time_expired
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verifycrl
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate
</UL>

<P><STRONG><a name="[36c]"></a>xEventGroupCreate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event_groups.o(i.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>xEventGroupSetBits</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Task
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_5msTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_10msTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_app_5msTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_app_100msTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Task
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fliter_Task
</UL>

<P><STRONG><a name="[465]"></a>xEventGroupWaitBits</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, event_groups.o(i.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskFeedDog
</UL>

<P><STRONG><a name="[46b]"></a>xPortStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[421]"></a>xQueueGenericCreate</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[41e]"></a>xQueueGenericReceive</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[489]"></a>xQueueGenericReset</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[423]"></a>xQueueGenericSend</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[48c]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[11d]"></a>xTaskGenericCreate</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[41d]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[234]"></a>xTaskIncrementTick</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3c4]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[3c6]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[483]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[3bd]"></a>xTaskResumeAll</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[235]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3cb]"></a>wdata_HexToChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wdata.o(i.wdata_HexToChar))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_init_sminfo
</UL>

<P><STRONG><a name="[324]"></a>i2c_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(i.i2c_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>

<P><STRONG><a name="[46c]"></a>wm8978_WriteReg</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsp_wm8978.o(i.wm8978_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetOUT2Volume
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioPath
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioIF
</UL>

<P><STRONG><a name="[220]"></a>Rheostat_ADC_Mode_Config</STRONG> (Thumb, 186 bytes, Stack size 120 bytes, bsp_adc.o(i.Rheostat_ADC_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Rheostat_ADC_Mode_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rheostat_Init
</UL>

<P><STRONG><a name="[11f]"></a>AudioIO_VoicePlaying</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, audioio.o(i.AudioIO_VoicePlaying))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = AudioIO_VoicePlaying &rArr; wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AudioIOPlayFile
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetOUT2Volume
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioPath
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioIF
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Play_Stop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Play_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskAudioIO_MainFunction
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
</UL>

<P><STRONG><a name="[121]"></a>Read_AudioIOPlayFile</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, audioio.o(i.Read_AudioIOPlayFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Read_AudioIOPlayFile &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskAudioIO_MainFunction
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioIO_VoicePlaying
</UL>

<P><STRONG><a name="[3d6]"></a>is_leap_year</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hym8563.o(i.is_leap_year))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_year_days
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_month_days
</UL>

<P><STRONG><a name="[42c]"></a>tcp_LngConnect_parseJson</STRONG> (Thumb, 616 bytes, Stack size 80 bytes, tcp_client_lngconnect.o(i.tcp_LngConnect_parseJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_LngConnect_parseJson &rArr; Json_HexToJson &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_BListUpdata
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_sendMsg
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToJson
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_DecNumber
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_LngConnect_callback
</UL>

<P><STRONG><a name="[9d]"></a>RandVal</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp_client_shortconnect.o(i.RandVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RandVal
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNumber
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_client_shortconnect.o(i.tcp_ShortConnect_MainFunction)
</UL>
<P><STRONG><a name="[233]"></a>Settcp_shortConnect_UpdataBLTime</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, tcp_client_shortconnect.o(i.Settcp_shortConnect_UpdataBLTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Settcp_shortConnect_UpdataBLTime &rArr; hym8563_read_datetime &rArr; hym8563_i2c_read_regs &rArr; Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_read_datetime
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parameter
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[9e]"></a>my_debug</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_client_shortconnect.o(i.my_debug))
<BR>[Address Reference Count : 1]<UL><LI> tcp_client_shortconnect.o(i.tcp_ShortConnect_MainFunction)
</UL>
<P><STRONG><a name="[43b]"></a>tcp_ShortConnect_RcvMsg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tcp_client_shortconnect.o(i.tcp_ShortConnect_RcvMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 3476<LI>Call Chain = tcp_ShortConnect_RcvMsg &rArr; ssl_read &rArr; ssl_handshake &rArr; ssl_handshake_client &rArr; ssl_parse_certificate &rArr; x509parse_crt &rArr;  x509parse_crt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[43a]"></a>tcp_ShortConnect_SendMsg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcp_client_shortconnect.o(i.tcp_ShortConnect_SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 3468<LI>Call Chain = tcp_ShortConnect_SendMsg &rArr; ssl_write &rArr; ssl_handshake &rArr; ssl_handshake_client &rArr; ssl_parse_certificate &rArr; x509parse_crt &rArr;  x509parse_crt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[43c]"></a>tcp_ShortConnect_parseJson</STRONG> (Thumb, 558 bytes, Stack size 48 bytes, tcp_client_shortconnect.o(i.tcp_ShortConnect_parseJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_ShortConnect_parseJson &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shortConnect_StrToHex
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_DecNumber
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArraySize
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArrayItem
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBListCache_BListQueue
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_WriteEE
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[439]"></a>tcp_client_httpPostRequest</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, tcp_client_shortconnect.o(i.tcp_client_httpPostRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tcp_client_httpPostRequest &rArr; tcp_shortConnect_HexIPtoStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shortConnect_HexIPtoStr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[431]"></a>tcp_shortConnect_HexIPtoStr</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tcp_client_shortconnect.o(i.tcp_shortConnect_HexIPtoStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_shortConnect_HexIPtoStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_httpPostRequest
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[43f]"></a>tcp_shortConnect_StrToHex</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tcp_client_shortconnect.o(i.tcp_shortConnect_StrToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_shortConnect_StrToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_parseJson
</UL>

<P><STRONG><a name="[42f]"></a>tcp_shortConnect_UpdataBList</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, tcp_client_shortconnect.o(i.tcp_shortConnect_UpdataBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_shortConnect_UpdataBList &rArr; hym8563_read_datetime &rArr; hym8563_i2c_read_regs &rArr; Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_read_datetime
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBListMng_ListData
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>

<P><STRONG><a name="[77]"></a>dnsAnalysis_DNSfound</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, dnsanalysis.o(i.dnsAnalysis_DNSfound))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dnsAnalysis_DNSfound &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dnsanalysis.o(i.TskdnsAnalysis_MainFunction)
</UL>
<P><STRONG><a name="[396]"></a>netconn_close_shutdown</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, api_lib.o(i.netconn_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
</UL>

<P><STRONG><a name="[39c]"></a>netconn_recv_data</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[2e1]"></a>do_close_internal</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, api_msg.o(i.do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[84]"></a>do_connected</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, api_msg.o(i.do_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = do_connected &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.do_connect)
</UL>
<P><STRONG><a name="[2ee]"></a>do_writemore</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, api_msg.o(i.do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[83]"></a>err_tcp</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[2e0]"></a>netconn_drain</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[2ea]"></a>pcb_new</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[82]"></a>poll_tcp</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = poll_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[98]"></a>recv_raw</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[9b]"></a>recv_tcp</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[99]"></a>recv_udp</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[81]"></a>sent_tcp</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = sent_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[2e7]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setup_tcp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[368]"></a>alloc_socket</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, sockets.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[8d]"></a>event_callback</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = event_callback &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_socket)
</UL>
<P><STRONG><a name="[305]"></a>get_socket</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sockets.o(i.get_socket))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[a3]"></a>tcpip_thread</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[32e]"></a>icmp_send_response</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[335]"></a>lwip_standard_chksum</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[33a]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[342]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[343]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_reass_dequeue_datagram
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[344]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[341]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[8b]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ip_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(i.ip_frag)
</UL>
<P><STRONG><a name="[2a3]"></a>dhcp_bind</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2a8]"></a>dhcp_check</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2ac]"></a>dhcp_create_msg</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2a2]"></a>dhcp_decline</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[2b6]"></a>dhcp_delete_msg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2b7]"></a>dhcp_discover</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2ba]"></a>dhcp_handle_ack</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2af]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[2b0]"></a>dhcp_option_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[2b2]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2b8]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[2b3]"></a>dhcp_option_trailer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_option_trailer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2be]"></a>dhcp_parse_reply</STRONG> (Thumb, 540 bytes, Stack size 56 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2aa]"></a>dhcp_rebind</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2bd]"></a>dhcp_reboot</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[7c]"></a>dhcp_recv</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[2c0]"></a>dhcp_select</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2a7]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[2b9]"></a>dhcp_timeout</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[2d8]"></a>dns_check_entry</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[2da]"></a>dns_enqueue</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, dns.o(i.dns_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[2de]"></a>dns_parse_name</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dns.o(i.dns_parse_name))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[7f]"></a>dns_recv</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dns_recv &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_parse_name
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_init)
</UL>
<P><STRONG><a name="[2d9]"></a>dns_send</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[376]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[97]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pbuf_free_ooseq_callback &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[3a4]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[449]"></a>tcp_close_shutdown</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
</UL>

<P><STRONG><a name="[446]"></a>tcp_new_port</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[453]"></a>tcp_listen_input</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[458]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_oos_insert_segment &rArr; pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[457]"></a>tcp_parseopt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[454]"></a>tcp_process</STRONG> (Thumb, 804 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[45c]"></a>tcp_receive</STRONG> (Thumb, 1718 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[452]"></a>tcp_timewait_input</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[44e]"></a>tcp_create_segment</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[456]"></a>tcp_output_alloc_header</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[45a]"></a>tcp_output_segment</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[45b]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[7b]"></a>arp_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(i.arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.sys_timeouts_init)
<LI> timers.o(i.arp_timer)
</UL>
<P><STRONG><a name="[7d]"></a>dhcp_timer_coarse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(i.dhcp_timer_coarse))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.sys_timeouts_init)
<LI> timers.o(i.dhcp_timer_coarse)
</UL>
<P><STRONG><a name="[7e]"></a>dhcp_timer_fine</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(i.dhcp_timer_fine))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.sys_timeouts_init)
<LI> timers.o(i.dhcp_timer_fine)
</UL>
<P><STRONG><a name="[80]"></a>dns_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(i.dns_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = dns_timer &rArr; dns_tmr &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.sys_timeouts_init)
<LI> timers.o(i.dns_timer)
</UL>
<P><STRONG><a name="[8c]"></a>ip_reass_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(i.ip_reass_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ip_reass_timer &rArr; ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.sys_timeouts_init)
<LI> timers.o(i.ip_reass_timer)
</UL>
<P><STRONG><a name="[a2]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timers.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.tcp_timer_needed)
<LI> timers.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[2f3]"></a>etharp_arp_input</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[2f7]"></a>etharp_find_entry</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[2f6]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[2fb]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[300]"></a>etharp_raw</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[2fa]"></a>etharp_send_ip</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[2f4]"></a>etharp_update_arp_entry</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[303]"></a>low_level_init</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = low_level_init &rArr; ETH_Start &rArr; ETH_MACTransmissionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChecksumInsertionConfig
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[304]"></a>low_level_input</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Get_Received_Frame
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[86]"></a>low_level_output</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = low_level_output &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Transmit_Descriptors
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[147]"></a>ETH_GPIO_Config</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, lan8742a.o(i.ETH_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ETH_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[148]"></a>ETH_MACDMA_Config</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lan8742a.o(i.ETH_MACDMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[96]"></a>ntpclient_Rcv_callback</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ntpclient.o(i.ntpclient_Rcv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ntpclient_Rcv_callback &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntpclient.o(i.ntpclient_connect)
</UL>
<P><STRONG><a name="[24c]"></a>ntpclient_Release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ntpclient.o(i.ntpclient_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ntpclient_Release &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
</UL>

<P><STRONG><a name="[24a]"></a>ntpclient_Send</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ntpclient.o(i.ntpclient_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ntpclient_Send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
</UL>

<P><STRONG><a name="[249]"></a>ntpclient_connect</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ntpclient.o(i.ntpclient_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ntpclient_connect &rArr; udp_new &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
</UL>

<P><STRONG><a name="[8a]"></a>http_ConnectErr</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, http_client_iap.o(i.http_ConnectErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = http_ConnectErr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_client_iap.o(i.http_client_iap_connect)
</UL>
<P><STRONG><a name="[30a]"></a>http_EraseFlash</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, http_client_iap.o(i.http_EraseFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = http_EraseFlash &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_parameter
</UL>

<P><STRONG><a name="[30b]"></a>http_client_PostRequest</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, http_client_iap.o(i.http_client_PostRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = http_client_PostRequest &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
</UL>

<P><STRONG><a name="[89]"></a>http_client_connected</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, http_client_iap.o(i.http_client_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = http_client_connected &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connection_close
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_client_iap.o(i.http_client_iap_connect)
</UL>
<P><STRONG><a name="[30d]"></a>http_client_connection_close</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, http_client_iap.o(i.http_client_connection_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = http_client_connection_close &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_disconnect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_connected
</UL>

<P><STRONG><a name="[88]"></a>http_client_poll</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, http_client_iap.o(i.http_client_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = http_client_poll &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_client_iap.o(i.http_client_connected)
</UL>
<P><STRONG><a name="[87]"></a>http_client_recv</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, http_client_iap.o(i.http_client_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = http_client_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_wrFlash
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_client_iap.o(i.http_client_connected)
</UL>
<P><STRONG><a name="[313]"></a>http_wrFlash</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, http_client_iap.o(i.http_wrFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = http_wrFlash &rArr; FLASH_ProgramByte &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_recv
</UL>

<P><STRONG><a name="[74]"></a>NetConnIf_Err</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, netconnif.o(i.NetConnIf_Err))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NetConnIf_Err &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconnif.o(i.NetConnIf_Connect)
</UL>
<P><STRONG><a name="[73]"></a>NetConnIf_connected</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, netconnif.o(i.NetConnIf_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NetConnIf_connected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_connection_close
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconnif.o(i.NetConnIf_Connect)
</UL>
<P><STRONG><a name="[1f8]"></a>NetConnIf_connection_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, netconnif.o(i.NetConnIf_connection_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NetConnIf_connection_close
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_disconnect
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnIf_connected
</UL>

<P><STRONG><a name="[76]"></a>NetConnIf_poll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, netconnif.o(i.NetConnIf_poll))
<BR>[Address Reference Count : 1]<UL><LI> netconnif.o(i.NetConnIf_connected)
</UL>
<P><STRONG><a name="[75]"></a>NetConnIf_recv</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, netconnif.o(i.NetConnIf_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = NetConnIf_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconnif.o(i.NetConnIf_connected)
</UL>
<P><STRONG><a name="[128]"></a>BtnFltr_FltrDeal</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, btnfltr.o(i.BtnFltr_FltrDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BtnFltr_FltrDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBtnFltrCfg_u_BtnRTSt
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskBtnFltr_MainFunction
</UL>

<P><STRONG><a name="[1ec]"></a>MemIf_u_wrFlash</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, memif.o(i.MemIf_u_wrFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemIf_u_wrFlash &rArr; FLASH_ProgramByte &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMemIf_MainFunction
</UL>

<P><STRONG><a name="[26a]"></a>add_item_to_array</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cjson.o(i.add_item_to_array))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[268]"></a>add_item_to_object</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cjson.o(i.add_item_to_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = add_item_to_object &rArr; cJSON_strdup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
</UL>

<P><STRONG><a name="[284]"></a>buffer_skip_whitespace</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cjson.o(i.buffer_skip_whitespace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[27b]"></a>cJSON_New_Item</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cjson.o(i.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[269]"></a>cJSON_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cjson.o(i.cJSON_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cJSON_strdup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[2f0]"></a>ensure</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, cjson.o(i.ensure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ensure &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
</UL>

<P><STRONG><a name="[27e]"></a>get_array_item</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cjson.o(i.get_array_item))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArrayItem
</UL>

<P><STRONG><a name="[280]"></a>get_object_item</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cjson.o(i.get_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_object_item &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[39f]"></a>parse_array</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, cjson.o(i.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[464]"></a>parse_hex4</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cjson.o(i.parse_hex4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>

<P><STRONG><a name="[3a0]"></a>parse_number</STRONG> (Thumb, 240 bytes, Stack size 96 bytes, cjson.o(i.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[3a1]"></a>parse_object</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, cjson.o(i.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[3a2]"></a>parse_string</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, cjson.o(i.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = parse_string &rArr; utf16_literal_to_utf8 &rArr; parse_hex4
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[285]"></a>parse_value</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, cjson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[286]"></a>print</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, cjson.o(i.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
</UL>

<P><STRONG><a name="[3b2]"></a>print_array</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, cjson.o(i.print_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = print_array &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[3b3]"></a>print_number</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, cjson.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[3b6]"></a>print_object</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, cjson.o(i.print_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[3b7]"></a>print_string_ptr</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, cjson.o(i.print_string_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = print_string_ptr &rArr; ensure &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[3b0]"></a>print_value</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, cjson.o(i.print_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[3b1]"></a>update_offset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cjson.o(i.update_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[3a3]"></a>utf16_literal_to_utf8</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, cjson.o(i.utf16_literal_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = utf16_literal_to_utf8 &rArr; parse_hex4
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[1d4]"></a>McuInit_RSTtype</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, mcu_init.o(i.McuInit_RSTtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = McuInit_RSTtype &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1d6]"></a>McuInit_UnusedGPIOConfig</STRONG> (Thumb, 810 bytes, Stack size 48 bytes, mcu_init.o(i.McuInit_UnusedGPIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = McuInit_UnusedGPIOConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[1f0]"></a>ADFliter_ADFliterDeal</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, std_adfliter.o(i.ADFliter_ADFliterDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADFliter_ADFliterDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MngADFliter_mainFunction
</UL>

<P><STRONG><a name="[1ef]"></a>ADFliter_FliterArrayFill</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, std_adfliter.o(i.ADFliter_FliterArrayFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADFliter_FliterArrayFill
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MngADFliter_mainFunction
</UL>

<P><STRONG><a name="[21c]"></a>PSFltr_FltrDeal</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, psfltr.o(i.PSFltr_FltrDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PSFltr_FltrDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSFltrCfg_u_RTSt
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskPSFltr_MainFunction
</UL>

<P><STRONG><a name="[127]"></a>BListMng_BinSearch</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, blistmng.o(i.BListMng_BinSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BListMng_BinSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskBListMng_MainFunction
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BListMng_u_ContrastBList
</UL>

<P><STRONG><a name="[232]"></a>calcCommandsBBC</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, readcard.o(i.calcCommandsBBC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calcCommandsBBC
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setreadcard_AutoSearchCard
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBlock
</UL>

<P><STRONG><a name="[295]"></a>decodeReadBlock</STRONG> (Thumb, 690 bytes, Stack size 56 bytes, readcard.o(i.decodeReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = decodeReadBlock &rArr; SetAudioIO_PlayFile &rArr; AudioIO_VoicePlaying &rArr; wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZR60Ctrl_u_CardSetSt
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMsg
</UL>

<P><STRONG><a name="[297]"></a>readBlock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, readcard.o(i.readBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readBlock &rArr; SetUartCmn_TxMsg &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartCmn_TxMsg
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCommandsBBC
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMsg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeReadBlock
</UL>

<P><STRONG><a name="[131]"></a>CardSet_MainFunction</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, zr60_ctrl.o(i.CardSet_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = CardSet_MainFunction &rArr; tcp_LngConnect_Parameter &rArr; Json_HexToJson &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_init_sminfo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_Parameter
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemIf_WriteEE
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settcp_client_DeviceInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBtnFltr_u_BtnShrtSt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBtnFltr_BtnShrtValid
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_u_ArrayCmp
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
</UL>

<P><STRONG><a name="[202]"></a>OpenDoor_Ble_MainFunction</STRONG> (Thumb, 494 bytes, Stack size 112 bytes, zr60_ctrl.o(i.OpenDoor_Ble_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 5200<LI>Call Chain = OpenDoor_Ble_MainFunction &rArr; sm3_time_PasswordAuth &rArr; get_sm3_pass &rArr; sm3 &rArr; CF &rArr; P1
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_timeCalibration
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_time_PasswordAuth
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_read_datetime
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getntpclient_u_NtpCalTimeSt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartCmn_BluetoothTxMsg
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_u_RecordUnlockInfo
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
</UL>

<P><STRONG><a name="[208]"></a>OpenDoor_Fire_MainFunction</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, zr60_ctrl.o(i.OpenDoor_Fire_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = OpenDoor_Fire_MainFunction &rArr; SetAudioIO_PlayFile &rArr; AudioIO_VoicePlaying &rArr; wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAudioIO_u_PlaySt
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSFltr_u_PeriSt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
</UL>

<P><STRONG><a name="[20b]"></a>OpenDoor_IC_MainFunction</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, zr60_ctrl.o(i.OpenDoor_IC_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = OpenDoor_IC_MainFunction &rArr; handleMsg &rArr; decodeReadBlock &rArr; SetAudioIO_PlayFile &rArr; AudioIO_VoicePlaying &rArr; wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Json_HexToStr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setstm8_fm17550_SlaveReplySt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartCmn_u_TxIdle
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartCmn_u_RxMsgRenew
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartCmn_u_RxMsg
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_u_RecordUnlockInfo
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMsg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setreadcard_Key
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setreadcard_AutoSearchCard
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
</UL>

<P><STRONG><a name="[214]"></a>OpenDoor_Net_MainFunction</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, zr60_ctrl.o(i.OpenDoor_Net_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = OpenDoor_Net_MainFunction &rArr; SetAudioIO_PlayFile &rArr; AudioIO_VoicePlaying &rArr; wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gettcp_LngConnect_PhoneNo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_u_RecordUnlockInfo
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
</UL>

<P><STRONG><a name="[216]"></a>OpenDoor_Password_MainFunction</STRONG> (Thumb, 372 bytes, Stack size 64 bytes, zr60_ctrl.o(i.OpenDoor_Password_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 5152<LI>Call Chain = OpenDoor_Password_MainFunction &rArr; sm3_time_PasswordAuth &rArr; get_sm3_pass &rArr; sm3 &rArr; CF &rArr; P1
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_reg8_recv
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm3_time_PasswordAuth
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_read_datetime
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_u_RecordUnlockInfo
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_TonesPlay
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
</UL>

<P><STRONG><a name="[21b]"></a>OpenDoor_WX_MainFunction</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, zr60_ctrl.o(i.OpenDoor_WX_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = OpenDoor_WX_MainFunction &rArr; SetAudioIO_PlayFile &rArr; AudioIO_VoicePlaying &rArr; wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gettcp_LngConnect_WXOpenInfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZR60Ctrl_u_RecordUnlockInfo
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
</UL>

<P><STRONG><a name="[218]"></a>ZR60Ctrl_TonesPlay</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, zr60_ctrl.o(i.ZR60Ctrl_TonesPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ZR60Ctrl_TonesPlay &rArr; SetAudioIO_PlayFile &rArr; AudioIO_VoicePlaying &rArr; wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_CfgGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAudioIO_PlayFile
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Password_MainFunction
</UL>

<P><STRONG><a name="[243]"></a>ZR60Ctrl_u_LedDisplay</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, zr60_ctrl.o(i.ZR60Ctrl_u_LedDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ZR60Ctrl_u_LedDisplay &rArr; ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
</UL>

<P><STRONG><a name="[207]"></a>ZR60Ctrl_u_RecordUnlockInfo</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, zr60_ctrl.o(i.ZR60Ctrl_u_RecordUnlockInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ZR60Ctrl_u_RecordUnlockInfo &rArr; hym8563_Currenttime &rArr; hym8563_read_datetime &rArr; hym8563_i2c_read_regs &rArr; Inithym8563_device &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hym8563_Currenttime
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrUnlockLogCache_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_WX_MainFunction
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Password_MainFunction
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Net_MainFunction
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_IC_MainFunction
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDoor_Ble_MainFunction
</UL>

<P><STRONG><a name="[245]"></a>ZR60Ctrl_w_CalPosDifference</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, zr60_ctrl.o(i.ZR60Ctrl_w_CalPosDifference))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
</UL>

<P><STRONG><a name="[11c]"></a>AppTaskCreate</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, main.o(i.AppTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AppTaskCreate &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>Fliter_Task</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.Fliter_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Fliter_Task &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskBtnFltr_MainFunction
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskPSFltr_MainFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MngADFliter_mainFunction
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[66]"></a>LowPower_Task</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.LowPower_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LowPower_Task &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSleepMng_MainFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[68]"></a>Lwip_app_100msTask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.Lwip_app_100msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = Lwip_app_100msTask &rArr; tcp_LngConnect_MainFunction &rArr; NetConnIf_Connect &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_LngConnect_MainFunction
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tskntpclient_MainFunction
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[6c]"></a>Lwip_app_5msTask</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.Lwip_app_5msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Lwip_app_5msTask &rArr; TskdnsAnalysis_MainFunction &rArr; dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskdnsAnalysis_MainFunction
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskdhcpClient_MainFunction
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[6b]"></a>ZR60Ctrl_10msTask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.ZR60Ctrl_10msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ZR60Ctrl_10msTask &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMemIf_MainFunction
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskBListMng_MainFunction
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[6a]"></a>ZR60Ctrl_5msTask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.ZR60Ctrl_5msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 5272<LI>Call Chain = ZR60Ctrl_5msTask &rArr; TskZR60Ctrl_MainFunction &rArr; OpenDoor_Ble_MainFunction &rArr; sm3_time_PasswordAuth &rArr; get_sm3_pass &rArr; sm3 &rArr; CF &rArr; P1
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskAudioIO_MainFunction
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskZR60Ctrl_MainFunction
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[69]"></a>https_Task</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.https_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 4268<LI>Call Chain = https_Task &rArr; tcp_ShortConnect_MainFunction &rArr; tcp_ShortConnect_RcvMsg &rArr; ssl_read &rArr; ssl_handshake &rArr; ssl_handshake_client &rArr; ssl_parse_certificate &rArr; x509parse_crt &rArr;  x509parse_crt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ShortConnect_MainFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[67]"></a>iap_Task</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.iap_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = iap_Task &rArr; http_client_iap_MainFunction &rArr; http_client_iap_connect &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_iap_MainFunction
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[6e]"></a>vTaskFeedDog</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i.vTaskFeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskFeedDog &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[9a]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[3c2]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3c3]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[3c5]"></a>prvUnlockQueue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3b9]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[3bb]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[a4]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[48f]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[484]"></a>prvTestWaitCondition</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, event_groups.o(i.prvTestWaitCondition))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[3c9]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[3ca]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[26f]"></a>aes_gen_tables</STRONG> (Thumb, 428 bytes, Stack size 2084 bytes, aes.o(i.aes_gen_tables))
<BR><BR>[Stack]<UL><LI>Max Depth = 2084<LI>Call Chain = aes_gen_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc
</UL>

<P><STRONG><a name="[38a]"></a>mpi_montmul</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[38b]"></a>mpi_montred</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
</UL>

<P><STRONG><a name="[38c]"></a>mpi_mul_hlp</STRONG> (Thumb, 2626 bytes, Stack size 36 bytes, bignum.o(i.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_mpi
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[38d]"></a>mpi_sub_hlp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[289]"></a>camellia_feistel</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, camellia.o(i.camellia_feistel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = camellia_feistel
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_setkey_enc
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_crypt_ecb
</UL>

<P><STRONG><a name="[29a]"></a>des3_set3key</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, des.o(i.des3_set3key))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = des3_set3key &rArr; des_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_enc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key_dec
</UL>

<P><STRONG><a name="[29b]"></a>des_setkey</STRONG> (Thumb, 798 bytes, Stack size 36 bytes, des.o(i.des_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = des_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_set3key
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_setkey_dec
</UL>

<P><STRONG><a name="[2ca]"></a>dhm_check_range</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, dhm.o(i.dhm_check_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dhm_check_range &rArr; mpi_sub_int &rArr; mpi_sub_mpi &rArr; mpi_sub_abs &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_int
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_free
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_read_params
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_make_public
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_calc_secret
</UL>

<P><STRONG><a name="[2d6]"></a>dhm_read_bignum</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhm.o(i.dhm_read_bignum))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dhm_read_bignum &rArr; mpi_read_binary &rArr; mpi_lset &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_read_params
</UL>

<P><STRONG><a name="[af]"></a>md5_ctx_alloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.md5_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = md5_ctx_alloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>md5_ctx_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = md5_ctx_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>md5_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = md5_finish_wrap &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>md5_hmac_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_hmac_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = md5_hmac_finish_wrap &rArr; md5_hmac_finish &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>md5_hmac_reset_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_hmac_reset_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = md5_hmac_reset_wrap &rArr; md5_hmac_reset &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>md5_hmac_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_hmac_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = md5_hmac_starts_wrap &rArr; md5_hmac_starts &rArr; md5 &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>md5_hmac_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_hmac_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = md5_hmac_update_wrap &rArr; md5_hmac_update &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>md5_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>md5_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = md5_update_wrap &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[374]"></a>md5_process</STRONG> (Thumb, 1782 bytes, Stack size 88 bytes, md5.o(i.md5_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
</UL>

<P><STRONG><a name="[391]"></a>net_is_blocking</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net.o(i.net_is_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_is_blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
</UL>

<P><STRONG><a name="[3aa]"></a>pem_aes_decrypt</STRONG> (Thumb, 74 bytes, Stack size 344 bytes, pem.o(i.pem_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2772<LI>Call Chain = pem_aes_decrypt &rArr; aes_setkey_dec &rArr; aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
</UL>

<P><STRONG><a name="[3ad]"></a>pem_get_iv</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, pem.o(i.pem_get_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pem_get_iv
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
</UL>

<P><STRONG><a name="[3ab]"></a>pem_pbkdf1</STRONG> (Thumb, 152 bytes, Stack size 256 bytes, pem.o(i.pem_pbkdf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pem_pbkdf1 &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_read_buffer
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[379]"></a>mgf_mask</STRONG> (Thumb, 124 bytes, Stack size 104 bytes, rsa.o(i.mgf_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mgf_mask &rArr; md_update
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_update
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_starts
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[3de]"></a>sha1_process</STRONG> (Thumb, 5036 bytes, Stack size 144 bytes, sha1.o(i.sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
</UL>

<P><STRONG><a name="[3e8]"></a>sha2_process</STRONG> (Thumb, 7422 bytes, Stack size 180 bytes, sha2.o(i.sha2_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = sha2_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2_update
</UL>

<P><STRONG><a name="[3f2]"></a>sha4_process</STRONG> (Thumb, 2630 bytes, Stack size 816 bytes, sha4.o(i.sha4_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = sha4_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4_update
</UL>

<P><STRONG><a name="[40c]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_certificate_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = ssl_parse_certificate_request &rArr; ssl_read_record &rArr; ssl_decrypt_buf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[409]"></a>ssl_parse_server_hello</STRONG> (Thumb, 826 bytes, Stack size 48 bytes, ssl_cli.o(i.ssl_parse_server_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 3324<LI>Call Chain = ssl_parse_server_hello &rArr; ssl_derive_keys &rArr; aes_setkey_dec &rArr; aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_buf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[40d]"></a>ssl_parse_server_hello_done</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_server_hello_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = ssl_parse_server_hello_done &rArr; ssl_read_record &rArr; ssl_decrypt_buf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[40b]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 664 bytes, Stack size 504 bytes, ssl_cli.o(i.ssl_parse_server_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 2832<LI>Call Chain = ssl_parse_server_key_exchange &rArr; rsa_pkcs1_verify &rArr; rsa_private &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_read_params
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_mpi
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_buf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[410]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, ssl_cli.o(i.ssl_write_certificate_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = ssl_write_certificate_verify &rArr; rsa_pkcs1_sign &rArr; rsa_private &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_sign
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[408]"></a>ssl_write_client_hello</STRONG> (Thumb, 796 bytes, Stack size 48 bytes, ssl_cli.o(i.ssl_write_client_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ssl_write_client_hello &rArr; ssl_write_record &rArr; ssl_encrypt_buf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_buf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[40f]"></a>ssl_write_client_key_exchange</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_client_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 3316<LI>Call Chain = ssl_write_client_key_exchange &rArr; ssl_derive_keys &rArr; aes_setkey_dec &rArr; aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_make_public
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhm_calc_secret
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_ret
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_mpi
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_encrypt
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_client
</UL>

<P><STRONG><a name="[3f5]"></a>ssl_calc_finished</STRONG> (Thumb, 498 bytes, Stack size 128 bytes, ssl_tls.o(i.ssl_calc_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = ssl_calc_finished &rArr; tls1_prf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_buf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_finished
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_finished
</UL>

<P><STRONG><a name="[3f9]"></a>ssl_decrypt_buf</STRONG> (Thumb, 798 bytes, Stack size 64 bytes, ssl_tls.o(i.ssl_decrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ssl_decrypt_buf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_crypt_cbc
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_crypt
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_buf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_cbc
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_sha1
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_md5
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_record
</UL>

<P><STRONG><a name="[400]"></a>ssl_encrypt_buf</STRONG> (Thumb, 694 bytes, Stack size 40 bytes, ssl_tls.o(i.ssl_encrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = ssl_encrypt_buf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_crypt_cbc
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_crypt
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_msg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_buf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fmt
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3_crypt_cbc
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_sha1
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac_md5
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_record
</UL>

<P><STRONG><a name="[3fc]"></a>ssl_mac_md5</STRONG> (Thumb, 158 bytes, Stack size 296 bytes, ssl_tls.o(i.ssl_mac_md5))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ssl_mac_md5 &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[3fb]"></a>ssl_mac_sha1</STRONG> (Thumb, 158 bytes, Stack size 288 bytes, ssl_tls.o(i.ssl_mac_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ssl_mac_sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[3f7]"></a>tls1_prf</STRONG> (Thumb, 348 bytes, Stack size 208 bytes, ssl_tls.o(i.tls1_prf))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = tls1_prf &rArr; sha1_hmac &rArr; sha1_hmac_starts &rArr; sha1 &rArr; sha1_finish &rArr; sha1_update &rArr; sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hmac
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hmac
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_derive_keys
</UL>

<P><STRONG><a name="[271]"></a>asn1_get_bitstring</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, x509parse.o(i.asn1_get_bitstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = asn1_get_bitstring &rArr; asn1_get_tag &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[273]"></a>asn1_get_bool</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, x509parse.o(i.asn1_get_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = asn1_get_bool &rArr; asn1_get_tag &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[274]"></a>asn1_get_int</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, x509parse.o(i.asn1_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = asn1_get_int &rArr; asn1_get_tag &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[278]"></a>asn1_get_len</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, x509parse.o(i.asn1_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_time
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_serial
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
</UL>

<P><STRONG><a name="[275]"></a>asn1_get_mpi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, x509parse.o(i.asn1_get_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = asn1_get_mpi &rArr; mpi_read_binary &rArr; mpi_lset &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_read_binary
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_pubkey
</UL>

<P><STRONG><a name="[277]"></a>asn1_get_sequence_of</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, x509parse.o(i.asn1_get_sequence_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = asn1_get_sequence_of &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[272]"></a>asn1_get_tag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x509parse.o(i.asn1_get_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = asn1_get_tag &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_sig
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_pubkey
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_name
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_alg
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_sequence_of
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_mpi
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_int
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_bool
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_bitstring
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[46e]"></a>x509_get_alg</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, x509parse.o(i.x509_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_alg &rArr; asn1_get_tag &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_pubkey
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[46f]"></a>x509_get_attr_type_value</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, x509parse.o(i.x509_get_attr_type_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_attr_type_value &rArr; asn1_get_tag &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_name
</UL>

<P><STRONG><a name="[470]"></a>x509_get_basic_constraints</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, x509parse.o(i.x509_get_basic_constraints))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_basic_constraints &rArr; asn1_get_int &rArr; asn1_get_tag &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_int
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[471]"></a>x509_get_crt_ext</STRONG> (Thumb, 486 bytes, Stack size 72 bytes, x509parse.o(i.x509_get_crt_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = x509_get_crt_ext &rArr; asn1_get_sequence_of &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_sequence_of
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_bool
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[472]"></a>x509_get_ext</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, x509parse.o(i.x509_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_get_ext &rArr; asn1_get_tag &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[473]"></a>x509_get_name</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, x509parse.o(i.x509_get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = x509_get_name &rArr;  x509_get_name (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_name
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_name
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[474]"></a>x509_get_pubkey</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, x509parse.o(i.x509_get_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = x509_get_pubkey &rArr; asn1_get_mpi &rArr; mpi_read_binary &rArr; mpi_lset &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_alg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[475]"></a>x509_get_serial</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, x509parse.o(i.x509_get_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = x509_get_serial &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[476]"></a>x509_get_sig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, x509parse.o(i.x509_get_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_get_sig &rArr; asn1_get_tag &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[477]"></a>x509_get_sig_alg</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, x509parse.o(i.x509_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = x509_get_sig_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[478]"></a>x509_get_time</STRONG> (Thumb, 234 bytes, Stack size 120 bytes, x509parse.o(i.x509_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = x509_get_time &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_len
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[479]"></a>x509_get_uid</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, x509parse.o(i.x509_get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_get_uid &rArr; asn1_get_tag &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[47a]"></a>x509_get_version</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, x509parse.o(i.x509_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_version &rArr; asn1_get_int &rArr; asn1_get_tag &rArr; asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_tag
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_crt
</UL>

<P><STRONG><a name="[47b]"></a>x509_hash</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, x509parse.o(i.x509_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = x509_hash &rArr; sha4 &rArr; sha4_finish &rArr; sha4_update &rArr; sha4_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha4
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verifycrl
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verify
</UL>

<P><STRONG><a name="[481]"></a>x509parse_verifycrl</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, x509parse.o(i.x509parse_verifycrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424<LI>Call Chain = x509parse_verifycrl &rArr; rsa_pkcs1_verify &rArr; rsa_private &rArr; mpi_exp_mod &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_mul_int &rArr; mpi_mul_mpi &rArr; mpi_copy &rArr; mpi_grow &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_pkcs1_verify
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_time_expired
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_revoked
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509parse_verify
</UL>

<P><STRONG><a name="[f5]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[f6]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[263]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25d]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[266]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[265]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[79]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0vsnprintf)
<LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[7a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[262]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ff]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[64]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[110]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

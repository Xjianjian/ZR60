; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\ntpclient.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\ntpclient.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\ntpclient.crf ..\..\Lwip\App\ntpclient.c]
                          THUMB

                          AREA ||i.Getntpclient_dw_NetTimestamp||, CODE, READONLY, ALIGN=2

                  Getntpclient_dw_NetTimestamp PROC
;;;352    ******************************************************/
;;;353    uint32 Getntpclient_dw_NetTimestamp(void)
000000  4802              LDR      r0,|L1.12|
;;;354    {
;;;355    	Sentpclient_u_TSUpdateFlg = 0U;
000002  2100              MOVS     r1,#0
000004  7001              STRB     r1,[r0,#0]
;;;356    	return SeTransmit_dw_Timestamp;
000006  6900              LDR      r0,[r0,#0x10]  ; SeTransmit_dw_Timestamp
;;;357    }
000008  4770              BX       lr
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      ||.data||

                          AREA ||i.Getntpclient_u_TSUpdate||, CODE, READONLY, ALIGN=2

                  Getntpclient_u_TSUpdate PROC
;;;336    ******************************************************/
;;;337    uint8 Getntpclient_u_TSUpdate(void)
000000  4801              LDR      r0,|L2.8|
;;;338    {
;;;339    	return Sentpclient_u_TSUpdateFlg;
000002  7800              LDRB     r0,[r0,#0]  ; Sentpclient_u_TSUpdateFlg
;;;340    }
000004  4770              BX       lr
;;;341    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.data||

                          AREA ||i.Initntpclient_Pramater||, CODE, READONLY, ALIGN=2

                  Initntpclient_Pramater PROC
;;;64     ******************************************************/
;;;65     void Initntpclient_Pramater(void)
000000  4906              LDR      r1,|L3.28|
;;;66     {
;;;67     	Sentpclient_dw_TskTimer = NTPCLIENT_TSK_PERIOD - 18000U;
000002  4805              LDR      r0,|L3.24|
;;;68     	Sentpclient_dw_Timeout = 0U;
;;;69     	ntpclient.SubsIndex = 0U;
000004  4a06              LDR      r2,|L3.32|
000006  6088              STR      r0,[r1,#8]            ;68  ; Sentpclient_dw_TskTimer
000008  2000              MOVS     r0,#0                 ;68
00000a  60c8              STR      r0,[r1,#0xc]  ; Sentpclient_dw_Timeout
00000c  7010              STRB     r0,[r2,#0]
;;;70     	ntpclient.TxBusyFlag = 0U;
00000e  7310              STRB     r0,[r2,#0xc]
;;;71     	ntpclient.echoFlag = 0U;
000010  7350              STRB     r0,[r2,#0xd]
;;;72     	SeTransmit_dw_Timestamp = 0U; //Time at the server when the response left for the client
;;;73     	Sentpclient_u_TSUpdateFlg = 0U;//时间戳更新标志
000012  6108              STR      r0,[r1,#0x10]  ; SeTransmit_dw_Timestamp
000014  7008              STRB     r0,[r1,#0]
;;;74     }
000016  4770              BX       lr
;;;75     
                          ENDP

                  |L3.24|
                          DCD      0x000b2b60
                  |L3.28|
                          DCD      ||.data||
                  |L3.32|
                          DCD      ||.bss||+0x30

                          AREA ||i.Tskntpclient_MainFunction||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_u
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  Tskntpclient_MainFunction PROC
;;;87     ******************************************************/
;;;88     void Tskntpclient_MainFunction(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;89     {
000002  b085              SUB      sp,sp,#0x14
;;;90     	char Le_u_i;
;;;91     	char Le_u_timeString[15] = {0};
000004  2500              MOVS     r5,#0
000006  9501              STR      r5,[sp,#4]
000008  9502              STR      r5,[sp,#8]
00000a  9503              STR      r5,[sp,#0xc]
;;;92     	if(0 == GET_PHY_LINK_STATUS())/* Get Ethernet link status*/
00000c  2101              MOVS     r1,#1
00000e  4628              MOV      r0,r5
000010  9504              STR      r5,[sp,#0x10]
000012  f7fffffe          BL       ETH_ReadPHYRegister
;;;93     	{
;;;94     		Sentpclient_dw_TskTimer = NTPCLIENT_TSK_PERIOD;
000016  4946              LDR      r1,|L4.304|
000018  4c46              LDR      r4,|L4.308|
00001a  0740              LSLS     r0,r0,#29             ;92
00001c  d403              BMI      |L4.38|
00001e  e9c41502          STRD     r1,r5,[r4,#8]         ;92
                  |L4.34|
;;;95     		Sentpclient_dw_Timeout = 0U;
;;;96     		return;
;;;97     	}
;;;98     	
;;;99     	if((Sentpclient_dw_TskTimer >= NTPCLIENT_TSK_PERIOD)&&(0U == ntpclient.TxBusyFlag))
;;;100    	{
;;;101    		if(DHCP_ADDRESS_ASSIGNED == NTP_DHCP_STATE)
;;;102    		{	
;;;103    			if(1U == GetdnsAnalysis_u_ipValidity(ntpclient_sever[ntpclient.SubsIndex]))
;;;104    			{//当前ntp服务器域名解析成功
;;;105    				ntpclient.SrcIP.addr = IPaddress;
;;;106    				GetdnsAnalysis_ipAddr(ntpclient_sever[Le_u_i],(struct ip_addr*)(&ntpclient.remoteIP.addr));//获取ntp服务器ip
;;;107    				USART_PRINTF_D("ntp服务器 %d ip地址：\n",ntpclient.SubsIndex);
;;;108    				USART_PRINTF_IP("%u.%u.%u.%u\n",(uint8_t)ntpclient.remoteIP.addr, \
;;;109    								(uint8_t)(ntpclient.remoteIP.addr >> 8),	\
;;;110    								(uint8_t)(ntpclient.remoteIP.addr >> 16),	\
;;;111    								(uint8_t)(ntpclient.remoteIP.addr >> 24));
;;;112    				if(1U == ntpclient_connect(ntpclient.SrcIP,ntpclient.remoteIP,NTPCLIENT_SRC_PORT,NTPCLIENT_REMOTE_PORT))
;;;113    				{//创建连接，发送ntp协议报文
;;;114    					memset(&(packet.li_vn_mode), 0, NTP_PKT_LEN);
;;;115    					packet.li_vn_mode = NTP_LI_NO_WARNING|NTP_VERSION|NTP_MODE_CLIENT;
;;;116    					ntpclient_Send((char*)(&(packet.li_vn_mode)),NTP_PKT_LEN);
;;;117    					ntpclient.TxBusyFlag = 1U;
;;;118    					ntpclient.echoFlag = 1U;
;;;119    					Sentpclient_dw_Timeout = 0U;
;;;120    				}
;;;121    			}
;;;122    			else
;;;123    			{
;;;124    				ntpclient.SubsIndex++;//当前ntp服务器响应超时，下次访问下一个ntp服务器
;;;125    			}
;;;126    		}
;;;127    	}
;;;128    	else
;;;129    	{
;;;130    		Sentpclient_dw_TskTimer++;
;;;131    	}
;;;132    	
;;;133    	if(1U == ntpclient.echoFlag)
;;;134    	{//等待回应
;;;135    		Sentpclient_dw_Timeout++;
;;;136    		if(Sentpclient_dw_Timeout >= NTP_CONNECT_TIMEOUT)
;;;137    		{//响应超时
;;;138    			Sentpclient_dw_Timeout = 0U;
;;;139    			ntpclient.TxBusyFlag = 0U;
;;;140    			ntpclient.echoFlag = 0U;
;;;141    			USART_PRINTF_D("ntp服务器 %d 响应超时",ntpclient.SubsIndex);
;;;142    			SetdnsAnalysis_ipUpdate(ntpclient_sever[ntpclient.SubsIndex]);//更新ip
;;;143    			ntpclient.SubsIndex++;//当前ntp服务器响应超时，下次访问下一个ntp服务器
;;;144    			ntpclient_Release();
;;;145    		}
;;;146    	}
;;;147    	else
;;;148    	{
;;;149    		if(2U == ntpclient.echoFlag)
;;;150    		{//收到回应
;;;151    			Sentpclient_dw_Timeout = 0U;
;;;152    			ntpclient.TxBusyFlag = 0U;
;;;153    			ntpclient.echoFlag = 0U;
;;;154    			ntpclient_Release();
;;;155    			Sentpclient_dw_TskTimer = 0U;
;;;156    		}
;;;157    	}
;;;158    	
;;;159    	if(NTPCLIENT_SEVER_NUM == ntpclient.SubsIndex)
;;;160    	{
;;;161    		ntpclient.SubsIndex = 0U;
;;;162    		Sentpclient_dw_TskTimer = 0U;//清任务计时器，避免频繁请求
;;;163    	}
;;;164    	
;;;165    	/* 校准时钟芯片时间 */
;;;166    	if(1U == Sentpclient_u_TSUpdateFlg)
;;;167    	{
;;;168    		USART_PRINTF_S("\n\r网络同步更新时钟芯片时间");
;;;169    		Sentpclient_u_TSUpdateFlg = 0U;
;;;170    		timestamp_strBJtime(SeTransmit_dw_Timestamp,Le_u_timeString);//时间戳转换为北京时间（字符串格式）
;;;171    		timestamp_timeCalibration(Le_u_timeString,TIME_STAMP_BJT);//校准时钟芯片时间	
;;;172    	}
;;;173    }
000022  b005              ADD      sp,sp,#0x14
000024  bdf0              POP      {r4-r7,pc}
                  |L4.38|
000026  4f43              LDR      r7,|L4.308|
000028  68a0              LDR      r0,[r4,#8]            ;99  ; Sentpclient_dw_TskTimer
00002a  3714              ADDS     r7,r7,#0x14           ;103
00002c  4e42              LDR      r6,|L4.312|
00002e  4288              CMP      r0,r1                 ;99
000030  d301              BCC      |L4.54|
000032  7b31              LDRB     r1,[r6,#0xc]          ;99  ; ntpclient
000034  b139              CBZ      r1,|L4.70|
                  |L4.54|
000036  1c40              ADDS     r0,r0,#1              ;99
000038  60a0              STR      r0,[r4,#8]            ;130  ; Sentpclient_dw_TskTimer
                  |L4.58|
00003a  7b70              LDRB     r0,[r6,#0xd]          ;133  ; ntpclient
00003c  2801              CMP      r0,#1                 ;133
00003e  d044              BEQ      |L4.202|
000040  2802              CMP      r0,#2                 ;149
000042  d059              BEQ      |L4.248|
000044  e05e              B        |L4.260|
                  |L4.70|
000046  483d              LDR      r0,|L4.316|
000048  7800              LDRB     r0,[r0,#0]            ;101  ; DHCP_state
00004a  2803              CMP      r0,#3                 ;101
00004c  d1f5              BNE      |L4.58|
00004e  7830              LDRB     r0,[r6,#0]            ;103  ; ntpclient
000050  5c38              LDRB     r0,[r7,r0]            ;103
000052  f7fffffe          BL       GetdnsAnalysis_u_ipValidity
000056  2801              CMP      r0,#1                 ;103
000058  d003              BEQ      |L4.98|
00005a  7830              LDRB     r0,[r6,#0]            ;124  ; ntpclient
00005c  1c40              ADDS     r0,r0,#1              ;124
00005e  7030              STRB     r0,[r6,#0]            ;124
000060  e7eb              B        |L4.58|
                  |L4.98|
000062  4837              LDR      r0,|L4.320|
000064  4934              LDR      r1,|L4.312|
000066  6800              LDR      r0,[r0,#0]            ;105  ; IPaddress
000068  6070              STR      r0,[r6,#4]            ;106  ; ntpclient
00006a  f8170008          LDRB     r0,[r7,r8]            ;106
00006e  3108              ADDS     r1,r1,#8              ;106
000070  f7fffffe          BL       GetdnsAnalysis_ipAddr
000074  7831              LDRB     r1,[r6,#0]            ;107  ; ntpclient
000076  a033              ADR      r0,|L4.324|
000078  f7fffffe          BL       __2printf
00007c  68b0              LDR      r0,[r6,#8]            ;108  ; ntpclient
00007e  0e01              LSRS     r1,r0,#24             ;108
000080  9100              STR      r1,[sp,#0]            ;108
000082  f3c04307          UBFX     r3,r0,#16,#8          ;108
000086  f3c02207          UBFX     r2,r0,#8,#8           ;108
00008a  b2c1              UXTB     r1,r0                 ;108
00008c  a033              ADR      r0,|L4.348|
00008e  f7fffffe          BL       __2printf
000092  4829              LDR      r0,|L4.312|
000094  237b              MOVS     r3,#0x7b              ;112
000096  3830              SUBS     r0,r0,#0x30           ;112
000098  2200              MOVS     r2,#0                 ;112
00009a  6b81              LDR      r1,[r0,#0x38]         ;112  ; ntpclient
00009c  6b40              LDR      r0,[r0,#0x34]         ;112  ; ntpclient
00009e  f7fffffe          BL       ntpclient_connect
0000a2  2801              CMP      r0,#1                 ;112
0000a4  d1c9              BNE      |L4.58|
0000a6  4824              LDR      r0,|L4.312|
0000a8  2130              MOVS     r1,#0x30              ;114
0000aa  3830              SUBS     r0,r0,#0x30           ;114
0000ac  f7fffffe          BL       __aeabi_memclr4
0000b0  4921              LDR      r1,|L4.312|
0000b2  2023              MOVS     r0,#0x23              ;115
0000b4  3930              SUBS     r1,r1,#0x30           ;115
0000b6  7008              STRB     r0,[r1,#0]            ;115
0000b8  481f              LDR      r0,|L4.312|
0000ba  2130              MOVS     r1,#0x30              ;116
0000bc  3830              SUBS     r0,r0,#0x30           ;116
0000be  f7fffffe          BL       ntpclient_Send
0000c2  2001              MOVS     r0,#1                 ;117
0000c4  7330              STRB     r0,[r6,#0xc]          ;117
0000c6  7370              STRB     r0,[r6,#0xd]          ;118
0000c8  60e5              STR      r5,[r4,#0xc]          ;119  ; Sentpclient_dw_Timeout
                  |L4.202|
0000ca  68e0              LDR      r0,[r4,#0xc]          ;135  ; Sentpclient_dw_Timeout
0000cc  1c40              ADDS     r0,r0,#1              ;135
0000ce  60e0              STR      r0,[r4,#0xc]          ;136  ; Sentpclient_dw_Timeout
0000d0  f5b07ffa          CMP      r0,#0x1f4             ;136
0000d4  d316              BCC      |L4.260|
0000d6  60e5              STR      r5,[r4,#0xc]          ;139  ; Sentpclient_dw_Timeout
0000d8  7335              STRB     r5,[r6,#0xc]          ;139
0000da  7375              STRB     r5,[r6,#0xd]          ;140
0000dc  7831              LDRB     r1,[r6,#0]            ;141  ; ntpclient
0000de  a023              ADR      r0,|L4.364|
0000e0  f7fffffe          BL       __2printf
0000e4  7830              LDRB     r0,[r6,#0]            ;142  ; ntpclient
0000e6  5c38              LDRB     r0,[r7,r0]            ;142
0000e8  f7fffffe          BL       SetdnsAnalysis_ipUpdate
0000ec  7830              LDRB     r0,[r6,#0]            ;143  ; ntpclient
0000ee  1c40              ADDS     r0,r0,#1              ;143
0000f0  7030              STRB     r0,[r6,#0]            ;143
0000f2  f7fffffe          BL       ntpclient_Release
0000f6  e005              B        |L4.260|
                  |L4.248|
0000f8  60e5              STR      r5,[r4,#0xc]          ;152  ; Sentpclient_dw_Timeout
0000fa  7335              STRB     r5,[r6,#0xc]          ;152
0000fc  7375              STRB     r5,[r6,#0xd]          ;153
0000fe  f7fffffe          BL       ntpclient_Release
000102  60a5              STR      r5,[r4,#8]            ;155  ; Sentpclient_dw_TskTimer
                  |L4.260|
000104  7830              LDRB     r0,[r6,#0]            ;159  ; ntpclient
000106  2806              CMP      r0,#6                 ;159
000108  d101              BNE      |L4.270|
00010a  7035              STRB     r5,[r6,#0]            ;161
00010c  60a5              STR      r5,[r4,#8]            ;162  ; Sentpclient_dw_TskTimer
                  |L4.270|
00010e  7820              LDRB     r0,[r4,#0]            ;166  ; Sentpclient_u_TSUpdateFlg
000110  2801              CMP      r0,#1                 ;166
000112  d186              BNE      |L4.34|
000114  a11b              ADR      r1,|L4.388|
000116  a022              ADR      r0,|L4.416|
000118  f7fffffe          BL       __2printf
00011c  7025              STRB     r5,[r4,#0]            ;169
00011e  a901              ADD      r1,sp,#4              ;170
000120  6920              LDR      r0,[r4,#0x10]         ;170  ; SeTransmit_dw_Timestamp
000122  f7fffffe          BL       timestamp_strBJtime
000126  2100              MOVS     r1,#0                 ;171
000128  a801              ADD      r0,sp,#4              ;171
00012a  f7fffffe          BL       timestamp_timeCalibration
00012e  e778              B        |L4.34|
;;;174    
                          ENDP

                  |L4.304|
                          DCD      0x000b71b0
                  |L4.308|
                          DCD      ||.data||
                  |L4.312|
                          DCD      ||.bss||+0x30
                  |L4.316|
                          DCD      DHCP_state
                  |L4.320|
                          DCD      IPaddress
                  |L4.324|
000144  6e7470b7          DCB      "ntp",183,254,206,241,198,247," %d ip",181,216,214,183,163
000148  fecef1c6
00014c  f7202564
000150  206970b5
000154  d8d6b7a3
000158  ba0a00            DCB      186,"\n",0
00015b  00                DCB      0
                  |L4.348|
00015c  25752e25          DCB      "%u.%u.%u.%u\n",0
000160  752e2575
000164  2e25750a
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L4.364|
00016c  6e7470b7          DCB      "ntp",183,254,206,241,198,247," %d ",207,236,211,166,179
000170  fecef1c6
000174  f7202564
000178  20cfecd3
00017c  a6b3    
00017e  accab100          DCB      172,202,177,0
000182  00                DCB      0
000183  00                DCB      0
                  |L4.388|
000184  0a0dcdf8          DCB      "\n\r",205,248,194,231,205,172,178,189,184,252,208,194,202
000188  c2e7cdac
00018c  b2bdb8fc
000190  d0c2ca  
000193  b1d6d3d0          DCB      177,214,211,208,190,198,172,202,177,188,228,0
000197  bec6acca
00019b  b1bce400
00019f  00                DCB      0
                  |L4.416|
0001a0  25730a00          DCB      "%s\n",0

                          AREA ||i.ntpclient_Rcv_callback||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_u
                  ntpclient_Rcv_callback PROC
;;;232    ******************************************************/
;;;233    static void ntpclient_Rcv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
000000  b510              PUSH     {r4,lr}
;;;234    {	
000002  0014              MOVS     r4,r2
000004  d02c              BEQ      |L5.96|
;;;235    	//char Le_u_arg = *((char*)arg);
;;;236    	if(p !=NULL)
;;;237    	{
;;;238    		//check ntp packet
;;;239    		if((p->len==NTP_PKT_LEN) &&(upcb->remote_port == NTPCLIENT_REMOTE_PORT))
000006  8960              LDRH     r0,[r4,#0xa]
000008  2830              CMP      r0,#0x30
00000a  d124              BNE      |L5.86|
00000c  8a88              LDRH     r0,[r1,#0x14]
00000e  287b              CMP      r0,#0x7b
000010  d121              BNE      |L5.86|
;;;240    		{
;;;241    			ntpclient.echoFlag = 2U;
000012  4814              LDR      r0,|L5.100|
000014  2102              MOVS     r1,#2
000016  7341              STRB     r1,[r0,#0xd]
;;;242    			USART_PRINTF_D("\n\r收到ntp服务器 %d 响应\n",ntpclient.SubsIndex);
000018  7801              LDRB     r1,[r0,#0]  ; ntpclient
00001a  a013              ADR      r0,|L5.104|
00001c  f7fffffe          BL       __2printf
;;;243    			if(((((char*)p->payload)[0]& NTP_MODE_MASK) == NTP_MODE_SERVER)|| ((((char*)p->payload)[0] & NTP_MODE_MASK) == NTP_MODE_BROADCAST))
000020  6860              LDR      r0,[r4,#4]
;;;244    			{
;;;245    				// extract time from packet
;;;246    				//Receive_Timestamp = ((uint32_t)(((char*)p->payload)[RECEIVE_TS_OFFSET]) << 24) | ((uint32_t)(((char*)p->payload)[RECEIVE_TS_OFFSET+1]) <<16) |   \
;;;247    				((uint32_t)(((char*)p->payload)[RECEIVE_TS_OFFSET+2]) << 8) | (uint32_t)(((char*)p->payload)[RECEIVE_TS_OFFSET+3]);
;;;248    				SeTransmit_dw_Timestamp = ((uint32_t)(((char*)p->payload)[TRANSMIT_TS_OFFSET]) << 24) | ((uint32_t)(((char*)p->payload)[TRANSMIT_TS_OFFSET+1]) << 16) | \
000022  4a18              LDR      r2,|L5.132|
000024  7801              LDRB     r1,[r0,#0]            ;243
000026  f0010107          AND      r1,r1,#7              ;243
00002a  2904              CMP      r1,#4                 ;243
00002c  d001              BEQ      |L5.50|
00002e  2905              CMP      r1,#5                 ;243
000030  d107              BNE      |L5.66|
                  |L5.50|
000032  6a81              LDR      r1,[r0,#0x28]
000034  f890002b          LDRB     r0,[r0,#0x2b]
000038  ba09              REV      r1,r1
00003a  f02101ff          BIC      r1,r1,#0xff
00003e  4301              ORRS     r1,r1,r0
000040  6111              STR      r1,[r2,#0x10]  ; SeTransmit_dw_Timestamp
                  |L5.66|
;;;249    										  ((uint32_t)(((char*)p->payload)[TRANSMIT_TS_OFFSET+2]) << 8) | (uint32_t)(((char*)p->payload)[TRANSMIT_TS_OFFSET+3]);
;;;250    			}
;;;251    			//minus the difference value of 1900 epoch and 1970 epoch
;;;252    			SeTransmit_dw_Timestamp = SeTransmit_dw_Timestamp - DIFF_SEC_1900_1970;
000042  4911              LDR      r1,|L5.136|
000044  6910              LDR      r0,[r2,#0x10]  ; SeTransmit_dw_Timestamp
000046  1841              ADDS     r1,r0,r1
;;;253    			Sentpclient_u_TSUpdateFlg = 1U;
000048  f04f0001          MOV      r0,#1
00004c  6111              STR      r1,[r2,#0x10]  ; SeTransmit_dw_Timestamp
00004e  7010              STRB     r0,[r2,#0]
;;;254    			//consider the time zone
;;;255    			//Transmit_Timestamp += SEC_TIME_ZONE;
;;;256    			//USART_PRINTF_D("\n\r收到Receive_Timestamp == %lu\n",Receive_Timestamp);
;;;257    			USART_PRINTF_D("\n\r ntp服务器获取的时间戳为 %lu\n",SeTransmit_dw_Timestamp);
000050  a00e              ADR      r0,|L5.140|
000052  f7fffffe          BL       __2printf
                  |L5.86|
;;;258    		}
;;;259    		pbuf_free(p);
000056  4620              MOV      r0,r4
000058  e8bd4010          POP      {r4,lr}
00005c  f7ffbffe          B.W      pbuf_free
                  |L5.96|
;;;260    	}
;;;261    }
000060  bd10              POP      {r4,pc}
;;;262    
                          ENDP

000062  0000              DCW      0x0000
                  |L5.100|
                          DCD      ||.bss||+0x30
                  |L5.104|
000068  0a0dcad5          DCB      "\n\r",202,213,181,189,"ntp",183,254,206,241,198,247," %"
00006c  b5bd6e74
000070  70b7fece
000074  f1c6f720
000078  25      
000079  6420cfec          DCB      "d ",207,236,211,166,"\n",0
00007d  d3a60a00
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L5.132|
                          DCD      ||.data||
                  |L5.136|
                          DCD      0x7c558180
                  |L5.140|
00008c  0a0d206e          DCB      "\n\r ntp",183,254,206,241,198,247,187,241,200,161,181,196
000090  7470b7fe
000094  cef1c6f7
000098  bbf1c8a1
00009c  b5c4    
00009e  cab1bce4          DCB      202,177,188,228,180,193,206,170," %lu\n",0
0000a2  b4c1ceaa
0000a6  20256c75
0000aa  0a00    

                          AREA ||i.ntpclient_Release||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  ntpclient_Release PROC
;;;302    ******************************************************/
;;;303    void ntpclient_Release(void)
000000  b510              PUSH     {r4,lr}
;;;304    {
;;;305    	USART_PRINTF_S("\n\rDisconnect to UDP echo server\n");
000002  a105              ADR      r1,|L6.24|
000004  a00d              ADR      r0,|L6.60|
000006  f7fffffe          BL       __2printf
;;;306    	 /* free the UDP connection, so we can accept new clients */
;;;307    	udp_remove(ntpclient_upcb);
00000a  480d              LDR      r0,|L6.64|
00000c  6840              LDR      r0,[r0,#4]  ; ntpclient_upcb
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      udp_remove
;;;308    }
;;;309    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
000018  0a0d4469          DCB      "\n\rDisconnect to UDP echo server\n",0
00001c  73636f6e
000020  6e656374
000024  20746f20
000028  55445020
00002c  6563686f
000030  20736572
000034  7665720a
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0
                  |L6.60|
00003c  25730a00          DCB      "%s\n",0
                  |L6.64|
                          DCD      ||.data||

                          AREA ||i.ntpclient_Send||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  ntpclient_Send PROC
;;;274    ******************************************************/
;;;275    void ntpclient_Send(char *data,uint16_t Lng)
000000  b570              PUSH     {r4-r6,lr}
;;;276    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;277    	struct pbuf *p;
;;;278    	
;;;279    	p = pbuf_alloc(PBUF_RAW,Lng, PBUF_RAM);//申请发送数据缓冲区/* allocate pbuf from pool*/	
000006  2200              MOVS     r2,#0
000008  2003              MOVS     r0,#3
00000a  f7fffffe          BL       pbuf_alloc
00000e  0004              MOVS     r4,r0
;;;280    	if(p != NULL)
000010  d013              BEQ      |L7.58|
;;;281    	{
;;;282    		pbuf_take(p,data, Lng); /* copy data to pbuf *///待发送数据载入p->payload 	
000012  462a              MOV      r2,r5
000014  4631              MOV      r1,r6
000016  f7fffffe          BL       pbuf_take
;;;283    		udp_sendto(ntpclient_upcb, p, &ntpclient.remoteIP,NTPCLIENT_REMOTE_PORT);/* send udp data */
00001a  480c              LDR      r0,|L7.76|
00001c  237b              MOVS     r3,#0x7b
00001e  4a0a              LDR      r2,|L7.72|
000020  4621              MOV      r1,r4
000022  6840              LDR      r0,[r0,#4]  ; ntpclient_upcb
000024  f7fffffe          BL       udp_sendto
;;;284    		USART_PRINTF_S("\n\r发送ntp报文\n");
000028  a109              ADR      r1,|L7.80|
00002a  480d              LDR      r0,|L7.96|
00002c  f7fffffe          BL       __2printf
;;;285    		pbuf_free(p); /* free pbuf */
000030  4620              MOV      r0,r4
000032  e8bd4070          POP      {r4-r6,lr}
000036  f7ffbffe          B.W      pbuf_free
                  |L7.58|
;;;286    	}
;;;287    	else
;;;288    	{		  
;;;289    		USART_PRINTF_S("\n\rcan not allocate send pbuf");
00003a  e8bd4070          POP      {r4-r6,lr}
00003e  a109              ADR      r1,|L7.100|
000040  4807              LDR      r0,|L7.96|
000042  f7ffbffe          B.W      __2printf
;;;290    	}
;;;291    }
;;;292    /******************************************************
                          ENDP

000046  0000              DCW      0x0000
                  |L7.72|
                          DCD      ||.bss||+0x38
                  |L7.76|
                          DCD      ||.data||
                  |L7.80|
000050  0a0db7a2          DCB      "\n\r",183,162,203,205,"ntp",177,168,206,196,"\n",0
000054  cbcd6e74
000058  70b1a8ce
00005c  c40a00  
00005f  00                DCB      0
                  |L7.96|
                          DCD      ||i.ntpclient_Release||+0x3c
                  |L7.100|
000064  0a0d6361          DCB      "\n\rcan not allocate send pbuf",0
000068  6e206e6f
00006c  7420616c
000070  6c6f6361
000074  74652073
000078  656e6420
00007c  70627566
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0

                          AREA ||i.ntpclient_breakTimer||, CODE, READONLY, ALIGN=2

                  ntpclient_breakTimer PROC
;;;320    ******************************************************/
;;;321    void ntpclient_breakTimer(void)
000000  4802              LDR      r0,|L8.12|
;;;322    {
;;;323    	Sentpclient_dw_Timeout++;
000002  68c1              LDR      r1,[r0,#0xc]  ; Sentpclient_dw_Timeout
000004  1c49              ADDS     r1,r1,#1
000006  60c1              STR      r1,[r0,#0xc]  ; Sentpclient_dw_Timeout
;;;324    }
000008  4770              BX       lr
;;;325    
                          ENDP

00000a  0000              DCW      0x0000
                  |L8.12|
                          DCD      ||.data||

                          AREA ||i.ntpclient_connect||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  ntpclient_connect PROC
;;;185    ******************************************************/
;;;186    uint8 ntpclient_connect(struct ip_addr SrcIPaddr,struct ip_addr DestIPaddr,uint16 udp_LocalPort,uint16 udp_RemotePort)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;187    {
000004  461e              MOV      r6,r3
000006  4615              MOV      r5,r2
000008  460f              MOV      r7,r1
;;;188       err_t err;
;;;189       uint8 Le_u_Ok = 0;
00000a  2400              MOVS     r4,#0
;;;190       
;;;191       ntpclient_upcb = udp_new();
00000c  f7fffffe          BL       udp_new
000010  4b10              LDR      r3,|L9.84|
;;;192       if (NULL != ntpclient_upcb)
000012  6058              STR      r0,[r3,#4]  ; ntpclient_upcb
000014  b1e0              CBZ      r0,|L9.80|
;;;193       {
;;;194         /* Bind the ntpclient_upcb to the UDP_PORT port */
;;;195         /* Using IP_ADDR_ANY allow the ntpclient_upcb to be used by any local interface */
;;;196          err = udp_bind(ntpclient_upcb, &SrcIPaddr, udp_LocalPort);//绑定本地IP和本地端口号
000016  462a              MOV      r2,r5
000018  4669              MOV      r1,sp
00001a  461d              MOV      r5,r3
00001c  f7fffffe          BL       udp_bind
000020  0001              MOVS     r1,r0
;;;197    	  ip_addr_set(&ntpclient_upcb->remote_ip, &DestIPaddr);
000022  6868              LDR      r0,[r5,#4]  ; ntpclient_upcb
;;;198    	  ntpclient_upcb->remote_port = udp_RemotePort;
000024  6047              STR      r7,[r0,#4]
000026  8286              STRH     r6,[r0,#0x14]
;;;199    	  ntpclient_upcb->flags |= UDP_FLAGS_UNCONNECTED;//PCBk控制块连接标志有效
;;;200          if(err == ERR_OK)
000028  d00b              BEQ      |L9.66|
;;;201          {
;;;202    		/* Set a receive callback for the ntpclient_upcb */
;;;203    		udp_recv(ntpclient_upcb,ntpclient_Rcv_callback,NULL);
;;;204    		Le_u_Ok = 1U;
;;;205    		USART_PRINTF_S("Start the ntp server application");
;;;206          }
;;;207          else
;;;208          {
;;;209            udp_remove(ntpclient_upcb);
00002a  f7fffffe          BL       udp_remove
;;;210    		ntpclient_upcb = NULL;
00002e  2000              MOVS     r0,#0
;;;211            USART_PRINTF_S("can not bind udp pcb");
000030  a109              ADR      r1,|L9.88|
000032  6068              STR      r0,[r5,#4]  ; ntpclient_upcb
                  |L9.52|
000034  a00e              ADR      r0,|L9.112|
000036  f7fffffe          BL       __2printf
;;;212          }
;;;213       }
;;;214       else
;;;215       {
;;;216         USART_PRINTF_S("can not create udp pcb");
;;;217       } 
;;;218    	 return Le_u_Ok;
;;;219    }
00003a  b004              ADD      sp,sp,#0x10
00003c  4620              MOV      r0,r4                 ;218
00003e  e8bd81f0          POP      {r4-r8,pc}
                  |L9.66|
000042  2200              MOVS     r2,#0                 ;203
000044  490b              LDR      r1,|L9.116|
000046  f7fffffe          BL       udp_recv
00004a  2401              MOVS     r4,#1                 ;204
00004c  a10a              ADR      r1,|L9.120|
00004e  e7f1              B        |L9.52|
                  |L9.80|
000050  a112              ADR      r1,|L9.156|
000052  e7ef              B        |L9.52|
;;;220    
                          ENDP

                  |L9.84|
                          DCD      ||.data||
                  |L9.88|
000058  63616e20          DCB      "can not bind udp pcb",0
00005c  6e6f7420
000060  62696e64
000064  20756470
000068  20706362
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L9.112|
000070  25730a00          DCB      "%s\n",0
                  |L9.116|
                          DCD      ntpclient_Rcv_callback
                  |L9.120|
000078  53746172          DCB      "Start the ntp server application",0
00007c  74207468
000080  65206e74
000084  70207365
000088  72766572
00008c  20617070
000090  6c696361
000094  74696f6e
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L9.156|
00009c  63616e20          DCB      "can not create udp pcb",0
0000a0  6e6f7420
0000a4  63726561
0000a8  74652075
0000ac  64702070
0000b0  636200  
0000b3  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  packet
                          %        48
                  ntpclient
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  Sentpclient_u_TSUpdateFlg
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  ntpclient_upcb
                          DCD      0x00000000
                  Sentpclient_dw_TskTimer
                          DCD      0x00000000
                  Sentpclient_dw_Timeout
                          DCD      0x00000000
                  SeTransmit_dw_Timestamp
                          DCD      0x00000000
                  ntpclient_sever
000014  02030405          DCB      0x02,0x03,0x04,0x05
000018  0607              DCB      0x06,0x07

;*** Start embedded assembler ***

#line 1 "..\\..\\Lwip\\App\\ntpclient.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_ntpclient_c_6ae7ebab____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_ntpclient_c_6ae7ebab____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_ntpclient_c_6ae7ebab____REVSH|
#line 153
|__asm___11_ntpclient_c_6ae7ebab____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_ntpclient_c_6ae7ebab____RRX|
#line 328
|__asm___11_ntpclient_c_6ae7ebab____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\bsp_clkconfig.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\bsp_clkconfig.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\bsp_clkconfig.crf ..\..\Complex\rcc\bsp_clkconfig.c]
                          THUMB

                          AREA ||i.HSE_SetSysClock||, CODE, READONLY, ALIGN=2

                  HSE_SetSysClock PROC
;;;47      */
;;;48     void HSE_SetSysClock(uint32_t m, uint32_t n, uint32_t p, uint32_t q)	
000000  b5f8              PUSH     {r3-r7,lr}
;;;49     {
000002  4607              MOV      r7,r0
;;;50       __IO uint32_t HSEStartUpStatus = 0;
000004  2000              MOVS     r0,#0
;;;51       
;;;52       // 使能HSE，开启外部晶振，秉火F407使用 HSE=25M
;;;53       RCC_HSEConfig(RCC_HSE_ON);
000006  9000              STR      r0,[sp,#0]
000008  461c              MOV      r4,r3                 ;49
00000a  4615              MOV      r5,r2                 ;49
00000c  460e              MOV      r6,r1                 ;49
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       RCC_HSEConfig
;;;54     	
;;;55       // 等待HSE启动稳定
;;;56     	HSEStartUpStatus = RCC_WaitForHSEStartUp();
000014  f7fffffe          BL       RCC_WaitForHSEStartUp
;;;57     
;;;58       if (HSEStartUpStatus == SUCCESS)
000018  9000              STR      r0,[sp,#0]
00001a  2801              CMP      r0,#1
00001c  d000              BEQ      |L1.32|
                  |L1.30|
;;;59       {
;;;60         // 调压器电压输出级别配置为1，以便在器件为最大频率
;;;61     		// 工作时使性能和功耗实现平衡
;;;62         RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;63         PWR->CR |= PWR_CR_VOS;
;;;64     		
;;;65     		// HCLK = SYSCLK / 1
;;;66     		RCC_HCLKConfig(RCC_SYSCLK_Div1);
;;;67     		
;;;68     		// PCLK2 = HCLK / 2
;;;69     		RCC_PCLK2Config(RCC_HCLK_Div2);
;;;70     		
;;;71     		// PCLK1 = HCLK / 4
;;;72     		RCC_PCLK1Config(RCC_HCLK_Div4);
;;;73     		
;;;74         // 如果要超频就得在这里下手啦
;;;75     		// 设置PLL来源时钟，设置VCO分频因子m，设置VCO倍频因子n，
;;;76     		//  设置系统时钟分频因子p，设置OTG FS,SDIO,RNG分频因子q
;;;77     		RCC_PLLConfig(RCC_PLLSource_HSE, m, n, p, q);
;;;78     		
;;;79     		// 使能PLL
;;;80     		RCC_PLLCmd(ENABLE);
;;;81       
;;;82     	  // 等待 PLL稳定
;;;83         while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
;;;84         {
;;;85         }   
;;;86     
;;;87     /*-----------------------------------------------------*/
;;;88         //开启 OVER-RIDE模式，以能达到更高频率(F429才有该功能)
;;;89     //    PWR->CR |= PWR_CR_ODEN;
;;;90     //    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;91     //    {
;;;92     //    }
;;;93     //    PWR->CR |= PWR_CR_ODSWEN;
;;;94     //    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;95     //    {
;;;96     //    }      
;;;97         // 配置FLASH预取指,指令缓存,数据缓存和等待状态
;;;98         FLASH->ACR = FLASH_ACR_PRFTEN 
;;;99     		            | FLASH_ACR_ICEN 
;;;100    		            | FLASH_ACR_DCEN 
;;;101    		            | FLASH_ACR_LATENCY_5WS;
;;;102    /*-----------------------------------------------------*/
;;;103    		
;;;104    		// 当PLL稳定之后，把PLL时钟切换为系统时钟SYSCLK
;;;105        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
;;;106    
;;;107        // 读取时钟切换状态位，确保PLLCLK被选为系统时钟
;;;108        while (RCC_GetSYSCLKSource() != 0x08)
;;;109        {
;;;110        }
;;;111      }
;;;112      else
;;;113      { // HSE启动出错处理
;;;114    
;;;115        while (1)
00001e  e7fe              B        |L1.30|
                  |L1.32|
000020  4818              LDR      r0,|L1.132|
000022  6801              LDR      r1,[r0,#0]            ;62
000024  f0415180          ORR      r1,r1,#0x10000000     ;62
000028  6001              STR      r1,[r0,#0]            ;62
00002a  4817              LDR      r0,|L1.136|
00002c  6801              LDR      r1,[r0,#0]            ;63
00002e  f4414140          ORR      r1,r1,#0xc000         ;63
000032  6001              STR      r1,[r0,#0]            ;63
000034  2000              MOVS     r0,#0                 ;66
000036  f7fffffe          BL       RCC_HCLKConfig
00003a  f44f5080          MOV      r0,#0x1000            ;69
00003e  f7fffffe          BL       RCC_PCLK2Config
000042  f44f50a0          MOV      r0,#0x1400            ;72
000046  f7fffffe          BL       RCC_PCLK1Config
00004a  462b              MOV      r3,r5                 ;77
00004c  4632              MOV      r2,r6                 ;77
00004e  4639              MOV      r1,r7                 ;77
000050  f44f0080          MOV      r0,#0x400000          ;77
000054  9400              STR      r4,[sp,#0]            ;77
000056  f7fffffe          BL       RCC_PLLConfig
00005a  2001              MOVS     r0,#1                 ;80
00005c  f7fffffe          BL       RCC_PLLCmd
                  |L1.96|
000060  2039              MOVS     r0,#0x39              ;83
000062  f7fffffe          BL       RCC_GetFlagStatus
000066  2800              CMP      r0,#0                 ;83
000068  d0fa              BEQ      |L1.96|
00006a  4908              LDR      r1,|L1.140|
00006c  f2407005          MOV      r0,#0x705             ;98
000070  6008              STR      r0,[r1,#0]            ;98
000072  2002              MOVS     r0,#2                 ;105
000074  f7fffffe          BL       RCC_SYSCLKConfig
                  |L1.120|
000078  f7fffffe          BL       RCC_GetSYSCLKSource
00007c  2808              CMP      r0,#8                 ;108
00007e  d1fb              BNE      |L1.120|
;;;116        {
;;;117        }
;;;118      }
;;;119    }
000080  bdf8              POP      {r3-r7,pc}
;;;120    
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
                          DCD      0x40023840
                  |L1.136|
                          DCD      0x40007000
                  |L1.140|
                          DCD      0x40023c00

                          AREA ||i.HSI_SetSysClock||, CODE, READONLY, ALIGN=2

                  HSI_SetSysClock PROC
;;;148    
;;;149    void HSI_SetSysClock(uint32_t m, uint32_t n, uint32_t p, uint32_t q)	
000000  b5f8              PUSH     {r3-r7,lr}
;;;150    {
000002  4607              MOV      r7,r0
;;;151      __IO uint32_t HSIStartUpStatus = 0;
000004  2000              MOVS     r0,#0
000006  461c              MOV      r4,r3                 ;150
000008  4615              MOV      r5,r2                 ;150
00000a  460e              MOV      r6,r1                 ;150
;;;152    	
;;;153    	// 把RCC外设初始化成复位状态
;;;154      RCC_DeInit();
00000c  9000              STR      r0,[sp,#0]
00000e  f7fffffe          BL       RCC_DeInit
;;;155      
;;;156      //使能HSI, HSI=16M
;;;157    	RCC_HSICmd(ENABLE);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       RCC_HSICmd
;;;158    	
;;;159      // 等待 HSI 就绪
;;;160    	HSIStartUpStatus = RCC->CR & RCC_CR_HSIRDY;
000018  481c              LDR      r0,|L2.140|
00001a  6800              LDR      r0,[r0,#0]
00001c  f0000002          AND      r0,r0,#2
;;;161    	
;;;162    	// 只有 HSI就绪之后则继续往下执行
;;;163      if (HSIStartUpStatus == RCC_CR_HSIRDY)
000020  9000              STR      r0,[sp,#0]
000022  2802              CMP      r0,#2
000024  d000              BEQ      |L2.40|
                  |L2.38|
;;;164      {
;;;165        // 调压器电压输出级别配置为1，以便在器件为最大频率
;;;166    		// 工作时使性能和功耗实现平衡
;;;167        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;168        PWR->CR |= PWR_CR_VOS;
;;;169    		
;;;170    		// HCLK = SYSCLK / 1
;;;171    		RCC_HCLKConfig(RCC_SYSCLK_Div1);
;;;172    		
;;;173    		// PCLK2 = HCLK / 2
;;;174    		RCC_PCLK2Config(RCC_HCLK_Div2);
;;;175    		
;;;176    		// PCLK1 = HCLK / 4
;;;177    		RCC_PCLK1Config(RCC_HCLK_Div4);
;;;178    		
;;;179        // 如果要超频就得在这里下手啦
;;;180    		// 设置PLL来源时钟，设置VCO分频因子m，设置VCO倍频因子n，
;;;181    		//  设置系统时钟分频因子p，设置OTG FS,SDIO,RNG分频因子q
;;;182    		RCC_PLLConfig(RCC_PLLSource_HSI, m, n, p, q);
;;;183    		
;;;184    		// 使能PLL
;;;185    		RCC_PLLCmd(ENABLE);
;;;186      
;;;187    	  // 等待 PLL稳定
;;;188        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
;;;189        {
;;;190        }   
;;;191    
;;;192    /*-----------------------------------------------------*/
;;;193        //开启 OVER-RIDE模式，以能达到更高频率(F429才有该功能)
;;;194    //    PWR->CR |= PWR_CR_ODEN;
;;;195    //    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;196    //    {
;;;197    //    }
;;;198    //    PWR->CR |= PWR_CR_ODSWEN;
;;;199    //    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;200    //    {
;;;201    //    }      
;;;202        // 配置FLASH预取指,指令缓存,数据缓存和等待状态
;;;203        FLASH->ACR = FLASH_ACR_PRFTEN 
;;;204    		            | FLASH_ACR_ICEN 
;;;205    		            |FLASH_ACR_DCEN 
;;;206    		            |FLASH_ACR_LATENCY_5WS;
;;;207    /*-----------------------------------------------------*/
;;;208    		
;;;209    		// 当PLL稳定之后，把PLL时钟切换为系统时钟SYSCLK
;;;210        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
;;;211    
;;;212        // 读取时钟切换状态位，确保PLLCLK被选为系统时钟
;;;213        while (RCC_GetSYSCLKSource() != 0x08)
;;;214        {
;;;215        }
;;;216      }
;;;217      else
;;;218      { // HSI启动出错处理
;;;219        while (1)
000026  e7fe              B        |L2.38|
                  |L2.40|
000028  4818              LDR      r0,|L2.140|
00002a  3040              ADDS     r0,r0,#0x40           ;167
00002c  6801              LDR      r1,[r0,#0]            ;167
00002e  f0415180          ORR      r1,r1,#0x10000000     ;167
000032  6001              STR      r1,[r0,#0]            ;167
000034  4816              LDR      r0,|L2.144|
000036  6801              LDR      r1,[r0,#0]            ;168
000038  f4414140          ORR      r1,r1,#0xc000         ;168
00003c  6001              STR      r1,[r0,#0]            ;168
00003e  2000              MOVS     r0,#0                 ;171
000040  f7fffffe          BL       RCC_HCLKConfig
000044  f44f5080          MOV      r0,#0x1000            ;174
000048  f7fffffe          BL       RCC_PCLK2Config
00004c  f44f50a0          MOV      r0,#0x1400            ;177
000050  f7fffffe          BL       RCC_PCLK1Config
000054  462b              MOV      r3,r5                 ;182
000056  4632              MOV      r2,r6                 ;182
000058  4639              MOV      r1,r7                 ;182
00005a  2000              MOVS     r0,#0                 ;182
00005c  9400              STR      r4,[sp,#0]            ;182
00005e  f7fffffe          BL       RCC_PLLConfig
000062  2001              MOVS     r0,#1                 ;185
000064  f7fffffe          BL       RCC_PLLCmd
                  |L2.104|
000068  2039              MOVS     r0,#0x39              ;188
00006a  f7fffffe          BL       RCC_GetFlagStatus
00006e  2800              CMP      r0,#0                 ;188
000070  d0fa              BEQ      |L2.104|
000072  4908              LDR      r1,|L2.148|
000074  f2407005          MOV      r0,#0x705             ;203
000078  6008              STR      r0,[r1,#0]            ;203
00007a  2002              MOVS     r0,#2                 ;210
00007c  f7fffffe          BL       RCC_SYSCLKConfig
                  |L2.128|
000080  f7fffffe          BL       RCC_GetSYSCLKSource
000084  2808              CMP      r0,#8                 ;213
000086  d1fb              BNE      |L2.128|
;;;220        {
;;;221        }
;;;222      }
;;;223    }
000088  bdf8              POP      {r3-r7,pc}
;;;224    
                          ENDP

00008a  0000              DCW      0x0000
                  |L2.140|
                          DCD      0x40023800
                  |L2.144|
                          DCD      0x40007000
                  |L2.148|
                          DCD      0x40023c00

                          AREA ||i.MCO1_GPIO_Config||, CODE, READONLY, ALIGN=2

                  MCO1_GPIO_Config PROC
;;;226    // MCO1 PA8 GPIO 初始化
;;;227    void MCO1_GPIO_Config(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;228    {
;;;229      GPIO_InitTypeDef GPIO_InitStructure;
;;;230    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;231      
;;;232      // MCO1 GPIO 配置
;;;233      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
00000a  f44f7080          MOV      r0,#0x100
;;;234      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00000e  9000              STR      r0,[sp,#0]
000010  2003              MOVS     r0,#3
000012  f88d0005          STRB     r0,[sp,#5]
;;;235      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000016  2002              MOVS     r0,#2
000018  f88d0004          STRB     r0,[sp,#4]
;;;236      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00001c  2000              MOVS     r0,#0
00001e  f88d0006          STRB     r0,[sp,#6]
;;;237      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;  
000022  2001              MOVS     r0,#1
000024  f88d0007          STRB     r0,[sp,#7]
;;;238      GPIO_Init(GPIOA, &GPIO_InitStructure); 
000028  4669              MOV      r1,sp
00002a  4802              LDR      r0,|L3.52|
00002c  f7fffffe          BL       GPIO_Init
;;;239    }
000030  bd1c              POP      {r2-r4,pc}
;;;240    
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      0x40020000

                          AREA ||i.MCO2_GPIO_Config||, CODE, READONLY, ALIGN=2

                  MCO2_GPIO_Config PROC
;;;241    // MCO2 PC9 GPIO 初始化
;;;242    void MCO2_GPIO_Config(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;243    {
;;;244      GPIO_InitTypeDef GPIO_InitStructure;
;;;245    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;246      
;;;247      // MCO2 GPIO 配置
;;;248      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
00000a  f44f7000          MOV      r0,#0x200
;;;249      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00000e  9000              STR      r0,[sp,#0]
000010  2003              MOVS     r0,#3
000012  f88d0005          STRB     r0,[sp,#5]
;;;250      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000016  2002              MOVS     r0,#2
000018  f88d0004          STRB     r0,[sp,#4]
;;;251      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00001c  2000              MOVS     r0,#0
00001e  f88d0006          STRB     r0,[sp,#6]
;;;252      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;  
000022  2001              MOVS     r0,#1
000024  f88d0007          STRB     r0,[sp,#7]
;;;253      GPIO_Init(GPIOC, &GPIO_InitStructure);
000028  4669              MOV      r1,sp
00002a  4802              LDR      r0,|L4.52|
00002c  f7fffffe          BL       GPIO_Init
;;;254    }
000030  bd1c              POP      {r2-r4,pc}
;;;255    
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      0x40020800

;*** Start embedded assembler ***

#line 1 "..\\..\\Complex\\rcc\\bsp_clkconfig.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_clkconfig_c_8a2c236f____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_clkconfig_c_8a2c236f____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_clkconfig_c_8a2c236f____REVSH|
#line 153
|__asm___15_bsp_clkconfig_c_8a2c236f____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_clkconfig_c_8a2c236f____RRX|
#line 328
|__asm___15_bsp_clkconfig_c_8a2c236f____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\udp.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\udp.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\udp.crf ..\..\Lwip\lwip-1.4.1\src\core\udp.c]
                          THUMB

                          AREA ||i.udp_bind||, CODE, READONLY, ALIGN=2

                  udp_bind PROC
;;;765    err_t
;;;766    udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;767    {
;;;768      struct udp_pcb *ipcb;
;;;769      u8_t rebind;
;;;770    
;;;771      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
;;;772      ip_addr_debug_print(UDP_DEBUG, ipaddr);
;;;773      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
;;;774    
;;;775      rebind = 0;
;;;776      /* Check for double bind and rebind of the same pcb */
;;;777      for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
000004  f8df90b0          LDR      r9,|L1.184|
000008  4605              MOV      r5,r0                 ;767
00000a  4616              MOV      r6,r2                 ;767
00000c  460f              MOV      r7,r1                 ;767
00000e  2000              MOVS     r0,#0                 ;775
;;;778        /* is this UDP PCB already on active list? */
;;;779        if (pcb == ipcb) {
;;;780          /* pcb may occur at most once in active list */
;;;781          LWIP_ASSERT("rebind == 0", rebind == 0);
;;;782          /* pcb already in list, just rebind */
;;;783          rebind = 1;
;;;784        }
;;;785    
;;;786        /* By default, we don't allow to bind to a port that any other udp
;;;787           PCB is alread bound to, unless *all* PCBs with that port have tha
;;;788           REUSEADDR flag set. */
;;;789    #if SO_REUSE
;;;790        else if (!ip_get_option(pcb, SOF_REUSEADDR) &&
;;;791                 !ip_get_option(ipcb, SOF_REUSEADDR)) {
;;;792    #else /* SO_REUSE */
;;;793        /* port matches that of PCB in list and REUSEADDR not set -> reject */
;;;794        else {
;;;795    #endif /* SO_REUSE */
;;;796          if ((ipcb->local_port == port) &&
;;;797              /* IP address matches, or one is IP_ADDR_ANY? */
;;;798              (ip_addr_isany(&(ipcb->local_ip)) ||
;;;799               ip_addr_isany(ipaddr) ||
;;;800               ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
;;;801            /* other PCB already binds to this local IP and port */
;;;802            LWIP_DEBUGF(UDP_DEBUG,
;;;803                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
;;;804            return ERR_USE;
000010  f06f0b07          MVN      r11,#7
000014  f8d94004          LDR      r4,[r9,#4]            ;767  ; udp_pcbs
000018  e013              B        |L1.66|
                  |L1.26|
00001a  42a5              CMP      r5,r4                 ;779
00001c  d105              BNE      |L1.42|
00001e  b110              CBZ      r0,|L1.38|
000020  a026              ADR      r0,|L1.188|
000022  f7fffffe          BL       __2printf
                  |L1.38|
000026  2001              MOVS     r0,#1                 ;783
000028  e00a              B        |L1.64|
                  |L1.42|
00002a  8a61              LDRH     r1,[r4,#0x12]         ;796
00002c  42b1              CMP      r1,r6                 ;796
00002e  d107              BNE      |L1.64|
000030  b3b4              CBZ      r4,|L1.160|
000032  6821              LDR      r1,[r4,#0]            ;798
000034  b3a1              CBZ      r1,|L1.160|
000036  b39f              CBZ      r7,|L1.160|
000038  683a              LDR      r2,[r7,#0]            ;799
00003a  b38a              CBZ      r2,|L1.160|
00003c  4291              CMP      r1,r2                 ;800
00003e  d030              BEQ      |L1.162|
                  |L1.64|
000040  68e4              LDR      r4,[r4,#0xc]          ;777
                  |L1.66|
000042  2c00              CMP      r4,#0                 ;777
000044  d1e9              BNE      |L1.26|
;;;805          }
;;;806        }
;;;807      }
;;;808    
;;;809      ip_addr_set(&pcb->local_ip, ipaddr);
000046  b11f              CBZ      r7,|L1.80|
000048  6839              LDR      r1,[r7,#0]
                  |L1.74|
;;;810    
;;;811      /* no port specified? */
;;;812      if (port == 0) {
00004a  6029              STR      r1,[r5,#0]
00004c  b116              CBZ      r6,|L1.84|
00004e  e024              B        |L1.154|
                  |L1.80|
000050  2100              MOVS     r1,#0                 ;809
000052  e7fa              B        |L1.74|
                  |L1.84|
000054  f8d94004          LDR      r4,[r9,#4]            ;809
000058  2300              MOVS     r3,#0                 ;809
00005a  f64f77ff          MOV      r7,#0xffff            ;809
00005e  f44f4c40          MOV      r12,#0xc000           ;809
000062  464e              MOV      r6,r9                 ;777
000064  f44f4a80          MOV      r10,#0x4000           ;777
                  |L1.104|
000068  8832              LDRH     r2,[r6,#0]            ;777  ; udp_port
00006a  1c51              ADDS     r1,r2,#1              ;777
00006c  8031              STRH     r1,[r6,#0]            ;777
00006e  42ba              CMP      r2,r7                 ;777
000070  d101              BNE      |L1.118|
000072  f8a6c000          STRH     r12,[r6,#0]           ;777
                  |L1.118|
000076  4621              MOV      r1,r4                 ;777
000078  8832              LDRH     r2,[r6,#0]            ;777
00007a  e00a              B        |L1.146|
                  |L1.124|
00007c  f8b18012          LDRH     r8,[r1,#0x12]         ;777
000080  4590              CMP      r8,r2                 ;777
000082  d105              BNE      |L1.144|
000084  1c5b              ADDS     r3,r3,#1              ;777
000086  b29b              UXTH     r3,r3                 ;777
000088  4553              CMP      r3,r10                ;777
00008a  d3ed              BCC      |L1.104|
00008c  2600              MOVS     r6,#0                 ;777
00008e  e003              B        |L1.152|
                  |L1.144|
000090  68c9              LDR      r1,[r1,#0xc]          ;777
                  |L1.146|
000092  2900              CMP      r1,#0                 ;777
000094  d1f2              BNE      |L1.124|
000096  b296              UXTH     r6,r2                 ;777
                  |L1.152|
;;;813        port = udp_new_port();
;;;814        if (port == 0) {
000098  b116              CBZ      r6,|L1.160|
                  |L1.154|
;;;815          /* no more ports available in local range */
;;;816          LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
;;;817          return ERR_USE;
;;;818        }
;;;819      }
;;;820      pcb->local_port = port;
00009a  826e              STRH     r6,[r5,#0x12]
;;;821      snmp_insert_udpidx_tree(pcb);
;;;822      /* pcb not active yet? */
;;;823      if (rebind == 0) {
00009c  b120              CBZ      r0,|L1.168|
00009e  e008              B        |L1.178|
                  |L1.160|
0000a0  e7ff              B        |L1.162|
                  |L1.162|
0000a2  4658              MOV      r0,r11                ;817
                  |L1.164|
;;;824        /* place the PCB on the active list if not already there */
;;;825        pcb->next = udp_pcbs;
;;;826        udp_pcbs = pcb;
;;;827      }
;;;828      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;829                  ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
;;;830                   ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;831                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
;;;832                   pcb->local_port));
;;;833      return ERR_OK;
;;;834    }
0000a4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.168|
0000a8  f8d91004          LDR      r1,[r9,#4]            ;825  ; udp_pcbs
0000ac  60e9              STR      r1,[r5,#0xc]          ;826
0000ae  f8c95004          STR      r5,[r9,#4]            ;826  ; udp_pcbs
                  |L1.178|
0000b2  2000              MOVS     r0,#0                 ;833
0000b4  e7f6              B        |L1.164|
;;;835    /**
                          ENDP

0000b6  0000              DCW      0x0000
                  |L1.184|
                          DCD      ||.data||
                  |L1.188|
0000bc  72656269          DCB      "rebind == 0",0
0000c0  6e64203d
0000c4  3d203000

                          AREA ||i.udp_connect||, CODE, READONLY, ALIGN=2

                  udp_connect PROC
;;;852    err_t
;;;853    udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
000000  b570              PUSH     {r4-r6,lr}
;;;854    {
000002  4616              MOV      r6,r2
;;;855      struct udp_pcb *ipcb;
;;;856    
;;;857      if (pcb->local_port == 0) {
000004  8a42              LDRH     r2,[r0,#0x12]
000006  460d              MOV      r5,r1                 ;854
000008  4604              MOV      r4,r0                 ;854
00000a  b922              CBNZ     r2,|L2.22|
;;;858        err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
00000c  4601              MOV      r1,r0
00000e  f7fffffe          BL       udp_bind
;;;859        if (err != ERR_OK) {
000012  2800              CMP      r0,#0
000014  d110              BNE      |L2.56|
                  |L2.22|
;;;860          return err;
;;;861        }
;;;862      }
;;;863    
;;;864      ip_addr_set(&pcb->remote_ip, ipaddr);
000016  b155              CBZ      r5,|L2.46|
000018  6828              LDR      r0,[r5,#0]
                  |L2.26|
;;;865      pcb->remote_port = port;
00001a  6060              STR      r0,[r4,#4]
00001c  82a6              STRH     r6,[r4,#0x14]
;;;866      pcb->flags |= UDP_FLAGS_CONNECTED;
00001e  7c20              LDRB     r0,[r4,#0x10]
;;;867    /** TODO: this functionality belongs in upper layers */
;;;868    #ifdef LWIP_UDP_TODO
;;;869      /* Nail down local IP for netconn_addr()/getsockname() */
;;;870      if (ip_addr_isany(&pcb->local_ip) && !ip_addr_isany(&pcb->remote_ip)) {
;;;871        struct netif *netif;
;;;872    
;;;873        if ((netif = ip_route(&(pcb->remote_ip))) == NULL) {
;;;874          LWIP_DEBUGF(UDP_DEBUG, ("udp_connect: No route to 0x%lx\n", pcb->remote_ip.addr));
;;;875          UDP_STATS_INC(udp.rterr);
;;;876          return ERR_RTE;
;;;877        }
;;;878        /** TODO: this will bind the udp pcb locally, to the interface which
;;;879            is used to route output packets to the remote address. However, we
;;;880            might want to accept incoming packets on any interface! */
;;;881        pcb->local_ip = netif->ip_addr;
;;;882      } else if (ip_addr_isany(&pcb->remote_ip)) {
;;;883        pcb->local_ip.addr = 0;
;;;884      }
;;;885    #endif
;;;886      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;887                  ("udp_connect: connected to %"U16_F".%"U16_F".%"U16_F".%"U16_F",port %"U16_F"\n",
;;;888                   ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;889                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
;;;890                   pcb->local_port));
;;;891    
;;;892      /* Insert UDP PCB into the list of active UDP PCBs. */
;;;893      for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
000020  4a09              LDR      r2,|L2.72|
000022  f0400004          ORR      r0,r0,#4              ;866
000026  7420              STRB     r0,[r4,#0x10]         ;866
000028  6850              LDR      r0,[r2,#4]  ; udp_pcbs
00002a  4601              MOV      r1,r0
00002c  e006              B        |L2.60|
                  |L2.46|
00002e  2000              MOVS     r0,#0                 ;864
000030  e7f3              B        |L2.26|
                  |L2.50|
;;;894        if (pcb == ipcb) {
000032  4284              CMP      r4,r0
000034  d101              BNE      |L2.58|
                  |L2.54|
;;;895          /* already on the list, just return */
;;;896          return ERR_OK;
000036  2000              MOVS     r0,#0
                  |L2.56|
;;;897        }
;;;898      }
;;;899      /* PCB not yet on the list, add PCB now */
;;;900      pcb->next = udp_pcbs;
;;;901      udp_pcbs = pcb;
;;;902      return ERR_OK;
;;;903    }
000038  bd70              POP      {r4-r6,pc}
                  |L2.58|
00003a  68c0              LDR      r0,[r0,#0xc]          ;893
                  |L2.60|
00003c  2800              CMP      r0,#0                 ;893
00003e  d1f8              BNE      |L2.50|
000040  60e1              STR      r1,[r4,#0xc]          ;901
000042  6054              STR      r4,[r2,#4]            ;902  ; udp_pcbs
000044  e7f7              B        |L2.54|
;;;904    
                          ENDP

000046  0000              DCW      0x0000
                  |L2.72|
                          DCD      ||.data||

                          AREA ||i.udp_disconnect||, CODE, READONLY, ALIGN=1

                  udp_disconnect PROC
;;;910    void
;;;911    udp_disconnect(struct udp_pcb *pcb)
000000  2100              MOVS     r1,#0
;;;912    {
;;;913      /* reset remote address association */
;;;914      ip_addr_set_any(&pcb->remote_ip);
;;;915      pcb->remote_port = 0;
000002  6041              STR      r1,[r0,#4]
000004  8281              STRH     r1,[r0,#0x14]
;;;916      /* mark PCB as unconnected */
;;;917      pcb->flags &= ~UDP_FLAGS_CONNECTED;
000006  7c01              LDRB     r1,[r0,#0x10]
000008  f0210104          BIC      r1,r1,#4
00000c  7401              STRB     r1,[r0,#0x10]
;;;918    }
00000e  4770              BX       lr
;;;919    
                          ENDP


                          AREA ||i.udp_init||, CODE, READONLY, ALIGN=1

                  udp_init PROC
;;;85     void
;;;86     udp_init(void)
000000  4770              BX       lr
;;;87     {
;;;88     #if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
;;;89       udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
;;;90     #endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
;;;91     }
;;;92     
                          ENDP


                          AREA ||i.udp_input||, CODE, READONLY, ALIGN=2

                  udp_input PROC
;;;150    void
;;;151    udp_input(struct pbuf *p, struct netif *inp)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;152    {
;;;153      struct udp_hdr *udphdr;
;;;154      struct udp_pcb *pcb, *prev;
;;;155      struct udp_pcb *uncon_pcb;
;;;156      struct ip_hdr *iphdr;
;;;157      u16_t src, dest;
;;;158      u8_t local_match;
;;;159      u8_t broadcast;
;;;160    
;;;161      PERF_START;
;;;162    
;;;163      UDP_STATS_INC(udp.recv);
;;;164    
;;;165      iphdr = (struct ip_hdr *)p->payload;
;;;166    
;;;167      /* Check minimum length (IP header + UDP header)
;;;168       * and move payload pointer to UDP header */
;;;169      if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
000004  f8d0a004          LDR      r10,[r0,#4]
000008  4606              MOV      r6,r0                 ;152
00000a  8902              LDRH     r2,[r0,#8]
00000c  f89a0000          LDRB     r0,[r10,#0]
000010  4689              MOV      r9,r1                 ;152
000012  f000000f          AND      r0,r0,#0xf
000016  2108              MOVS     r1,#8
000018  eb010180          ADD      r1,r1,r0,LSL #2
00001c  428a              CMP      r2,r1
00001e  d366              BCC      |L5.238|
000020  0080              LSLS     r0,r0,#2
000022  4241              RSBS     r1,r0,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       pbuf_header
00002a  2800              CMP      r0,#0
00002c  d15f              BNE      |L5.238|
;;;170        /* drop short packets */
;;;171        LWIP_DEBUGF(UDP_DEBUG,
;;;172                    ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
;;;173        UDP_STATS_INC(udp.lenerr);
;;;174        UDP_STATS_INC(udp.drop);
;;;175        snmp_inc_udpinerrors();
;;;176        pbuf_free(p);
;;;177        goto end;
;;;178      }
;;;179    
;;;180      udphdr = (struct udp_hdr *)p->payload;
;;;181    
;;;182      /* is broadcast packet ? */
;;;183      broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
00002e  f8dfb148          LDR      r11,|L5.376|
000032  6874              LDR      r4,[r6,#4]
000034  4649              MOV      r1,r9
000036  f8db0000          LDR      r0,[r11,#0]  ; current_iphdr_dest
00003a  f7fffffe          BL       ip4_addr_isbroadcast
00003e  4605              MOV      r5,r0
;;;184    
;;;185      LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
;;;186    
;;;187      /* convert src and dest ports to host byte order */
;;;188      src = ntohs(udphdr->src);
000040  8820              LDRH     r0,[r4,#0]
000042  f7fffffe          BL       lwip_ntohs
000046  4607              MOV      r7,r0
;;;189      dest = ntohs(udphdr->dest);
000048  8860              LDRH     r0,[r4,#2]
00004a  f7fffffe          BL       lwip_ntohs
;;;190    
;;;191      udp_debug_print(udphdr);
;;;192    
;;;193      /* print the UDP source and destination */
;;;194      LWIP_DEBUGF(UDP_DEBUG,
;;;195                  ("udp (%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F") <-- "
;;;196                   "(%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",
;;;197                   ip4_addr1_16(&iphdr->dest), ip4_addr2_16(&iphdr->dest),
;;;198                   ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
;;;199                   ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
;;;200                   ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));
;;;201    
;;;202    #if LWIP_DHCP
;;;203      pcb = NULL;
00004e  2400              MOVS     r4,#0
;;;204      /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
;;;205         the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
;;;206      if (dest == DHCP_CLIENT_PORT) {
;;;207        /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
;;;208        if (src == DHCP_SERVER_PORT) {
;;;209          if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
;;;210            /* accept the packe if 
;;;211               (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
;;;212               - inp->dhcp->pcb->remote == ANY or iphdr->src */
;;;213            if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
;;;214               ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
000050  f8dfe128          LDR      lr,|L5.380|
000054  4603              MOV      r3,r0                 ;189
000056  2844              CMP      r0,#0x44              ;206
000058  d005              BEQ      |L5.102|
;;;215              pcb = inp->dhcp->pcb;
;;;216            }
;;;217          }
;;;218        }
;;;219      } else
;;;220    #endif /* LWIP_DHCP */
;;;221      {
;;;222        prev = NULL;
;;;223        local_match = 0;
;;;224        uncon_pcb = NULL;
;;;225        /* Iterate through the UDP pcb list for a matching pcb.
;;;226         * 'Perfect match' pcbs (connected to the remote port & ip address) are
;;;227         * preferred. If no perfect match is found, the first unconnected pcb that
;;;228         * matches the local port and ip address gets the datagram. */
;;;229        for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
00005a  4949              LDR      r1,|L5.384|
00005c  2200              MOVS     r2,#0                 ;222
00005e  4610              MOV      r0,r2                 ;224
000060  684c              LDR      r4,[r1,#4]  ; udp_pcbs
000062  9400              STR      r4,[sp,#0]
000064  e048              B        |L5.248|
                  |L5.102|
000066  2f43              CMP      r7,#0x43              ;208
000068  d14a              BNE      |L5.256|
00006a  f8d90024          LDR      r0,[r9,#0x24]         ;209
00006e  b3e8              CBZ      r0,|L5.236|
000070  6840              LDR      r0,[r0,#4]            ;209
000072  b3d8              CBZ      r0,|L5.236|
000074  1d01              ADDS     r1,r0,#4              ;213
000076  d005              BEQ      |L5.132|
000078  6841              LDR      r1,[r0,#4]            ;213
00007a  b119              CBZ      r1,|L5.132|
00007c  f8de2000          LDR      r2,[lr,#0]            ;214  ; current_iphdr_src
000080  4291              CMP      r1,r2                 ;214
000082  d13d              BNE      |L5.256|
                  |L5.132|
000084  4604              MOV      r4,r0                 ;215
000086  e041              B        |L5.268|
                  |L5.136|
;;;230          local_match = 0;
;;;231          /* print the PCB local and remote address */
;;;232          LWIP_DEBUGF(UDP_DEBUG,
;;;233                      ("pcb (%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F") --- "
;;;234                       "(%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",
;;;235                       ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;236                       ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
;;;237                       ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
;;;238                       ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));
;;;239    
;;;240          /* compare PCB local addr+port to UDP destination addr+port */
;;;241          if (pcb->local_port == dest) {
000088  8a61              LDRH     r1,[r4,#0x12]
00008a  4299              CMP      r1,r3
00008c  d132              BNE      |L5.244|
;;;242            if (
00008e  b915              CBNZ     r5,|L5.150|
;;;243               (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
000090  b1a4              CBZ      r4,|L5.188|
000092  6821              LDR      r1,[r4,#0]
000094  b191              CBZ      r1,|L5.188|
                  |L5.150|
;;;244               ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
000096  f8d48000          LDR      r8,[r4,#0]
00009a  f8dbc000          LDR      r12,[r11,#0]  ; current_iphdr_dest
00009e  45e0              CMP      r8,r12
0000a0  d00c              BEQ      |L5.188|
;;;245    #if LWIP_IGMP
;;;246               ip_addr_ismulticast(&current_iphdr_dest) ||
;;;247    #endif /* LWIP_IGMP */
;;;248    #if IP_SOF_BROADCAST_RECV
;;;249                (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
;;;250                 (ip_addr_isany(&pcb->local_ip) ||
;;;251                  ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
;;;252    #else /* IP_SOF_BROADCAST_RECV */
;;;253                (broadcast &&
0000a2  b33d              CBZ      r5,|L5.244|
;;;254                 (ip_addr_isany(&pcb->local_ip) ||
0000a4  b154              CBZ      r4,|L5.188|
0000a6  f1b80f00          CMP      r8,#0
0000aa  d007              BEQ      |L5.188|
;;;255                  ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
0000ac  f8d91008          LDR      r1,[r9,#8]
0000b0  ea080801          AND      r8,r8,r1
0000b4  ea0c0c01          AND      r12,r12,r1
0000b8  45e0              CMP      r8,r12
0000ba  d11b              BNE      |L5.244|
                  |L5.188|
;;;256    #endif /* IP_SOF_BROADCAST_RECV */ 
;;;257              local_match = 1;
;;;258              if ((uncon_pcb == NULL) && 
0000bc  b918              CBNZ     r0,|L5.198|
;;;259                  ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
0000be  7c21              LDRB     r1,[r4,#0x10]
0000c0  0749              LSLS     r1,r1,#29
0000c2  d400              BMI      |L5.198|
;;;260                /* the first unconnected matching PCB */
;;;261                uncon_pcb = pcb;
0000c4  4620              MOV      r0,r4
                  |L5.198|
;;;262              }
;;;263            }
;;;264          }
;;;265          /* compare PCB remote addr+port to UDP source addr+port */
;;;266          if ((local_match != 0) &&
;;;267              (pcb->remote_port == src) &&
0000c6  8aa1              LDRH     r1,[r4,#0x14]
0000c8  42b9              CMP      r1,r7
0000ca  d113              BNE      |L5.244|
;;;268              (ip_addr_isany(&pcb->remote_ip) ||
0000cc  1d21              ADDS     r1,r4,#4
0000ce  d005              BEQ      |L5.220|
0000d0  6861              LDR      r1,[r4,#4]
0000d2  b119              CBZ      r1,|L5.220|
;;;269               ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
0000d4  f8dec000          LDR      r12,[lr,#0]  ; current_iphdr_src
0000d8  4561              CMP      r1,r12
0000da  d10b              BNE      |L5.244|
                  |L5.220|
;;;270            /* the first fully matching PCB */
;;;271            if (prev != NULL) {
0000dc  b12a              CBZ      r2,|L5.234|
;;;272              /* move the pcb to the front of udp_pcbs so that is
;;;273                 found faster next time */
;;;274              prev->next = pcb->next;
0000de  68e1              LDR      r1,[r4,#0xc]
;;;275              pcb->next = udp_pcbs;
0000e0  60d1              STR      r1,[r2,#0xc]
0000e2  4927              LDR      r1,|L5.384|
0000e4  9a00              LDR      r2,[sp,#0]
;;;276              udp_pcbs = pcb;
0000e6  60e2              STR      r2,[r4,#0xc]
0000e8  604c              STR      r4,[r1,#4]  ; udp_pcbs
                  |L5.234|
;;;277            } else {
;;;278              UDP_STATS_INC(udp.cachehit);
;;;279            }
;;;280            break;
;;;281          }
;;;282          prev = pcb;
;;;283        }
;;;284        /* no fully matching pcb found? then look for an unconnected pcb */
;;;285        if (pcb == NULL) {
0000ea  e001              B        |L5.240|
                  |L5.236|
0000ec  e008              B        |L5.256|
                  |L5.238|
0000ee  e016              B        |L5.286|
                  |L5.240|
0000f0  b124              CBZ      r4,|L5.252|
0000f2  e00b              B        |L5.268|
                  |L5.244|
0000f4  4622              MOV      r2,r4                 ;229
0000f6  68e4              LDR      r4,[r4,#0xc]          ;229
                  |L5.248|
0000f8  2c00              CMP      r4,#0                 ;229
0000fa  d1c5              BNE      |L5.136|
                  |L5.252|
;;;286          pcb = uncon_pcb;
0000fc  0004              MOVS     r4,r0
0000fe  d105              BNE      |L5.268|
                  |L5.256|
;;;287        }
;;;288      }
;;;289    
;;;290      /* Check checksum if this is a match or if it was directed at us. */
;;;291      if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
000100  f8d91004          LDR      r1,[r9,#4]
000104  f8db0000          LDR      r0,[r11,#0]  ; current_iphdr_dest
000108  4281              CMP      r1,r0
00010a  d12f              BNE      |L5.364|
                  |L5.268|
;;;292        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
;;;293    #if LWIP_UDPLITE
;;;294        if (IPH_PROTO(iphdr) == IP_PROTO_UDPLITE) {
;;;295          /* Do the UDP Lite checksum */
;;;296    #if CHECKSUM_CHECK_UDP
;;;297          u16_t chklen = ntohs(udphdr->len);
;;;298          if (chklen < sizeof(struct udp_hdr)) {
;;;299            if (chklen == 0) {
;;;300              /* For UDP-Lite, checksum length of 0 means checksum
;;;301                 over the complete packet (See RFC 3828 chap. 3.1) */
;;;302              chklen = p->tot_len;
;;;303            } else {
;;;304              /* At least the UDP-Lite header must be covered by the
;;;305                 checksum! (Again, see RFC 3828 chap. 3.1) */
;;;306              UDP_STATS_INC(udp.chkerr);
;;;307              UDP_STATS_INC(udp.drop);
;;;308              snmp_inc_udpinerrors();
;;;309              pbuf_free(p);
;;;310              goto end;
;;;311            }
;;;312          }
;;;313          if (inet_chksum_pseudo_partial(p, &current_iphdr_src, &current_iphdr_dest,
;;;314                                 IP_PROTO_UDPLITE, p->tot_len, chklen) != 0) {
;;;315           LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;316                       ("udp_input: UDP Lite datagram discarded due to failing checksum\n"));
;;;317            UDP_STATS_INC(udp.chkerr);
;;;318            UDP_STATS_INC(udp.drop);
;;;319            snmp_inc_udpinerrors();
;;;320            pbuf_free(p);
;;;321            goto end;
;;;322          }
;;;323    #endif /* CHECKSUM_CHECK_UDP */
;;;324        } else
;;;325    #endif /* LWIP_UDPLITE */
;;;326        {
;;;327    #if CHECKSUM_CHECK_UDP
;;;328          if (udphdr->chksum != 0) {
;;;329            if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
;;;330                                   IP_PROTO_UDP, p->tot_len) != 0) {
;;;331              LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;332                          ("udp_input: UDP datagram discarded due to failing checksum\n"));
;;;333              UDP_STATS_INC(udp.chkerr);
;;;334              UDP_STATS_INC(udp.drop);
;;;335              snmp_inc_udpinerrors();
;;;336              pbuf_free(p);
;;;337              goto end;
;;;338            }
;;;339          }
;;;340    #endif /* CHECKSUM_CHECK_UDP */
;;;341        }
;;;342        if(pbuf_header(p, -UDP_HLEN)) {
00010c  f06f0107          MVN      r1,#7
000110  4630              MOV      r0,r6
000112  f7fffffe          BL       pbuf_header
000116  b118              CBZ      r0,|L5.288|
;;;343          /* Can we cope with this failing? Just assert for now */
;;;344          LWIP_ASSERT("pbuf_header failed\n", 0);
000118  a01a              ADR      r0,|L5.388|
00011a  f7fffffe          BL       __2printf
                  |L5.286|
;;;345          UDP_STATS_INC(udp.drop);
;;;346          snmp_inc_udpinerrors();
;;;347          pbuf_free(p);
;;;348          goto end;
00011e  e025              B        |L5.364|
                  |L5.288|
;;;349        }
;;;350        if (pcb != NULL) {
000120  b14c              CBZ      r4,|L5.310|
;;;351          snmp_inc_udpindatagrams();
;;;352    #if SO_REUSE && SO_REUSE_RXTOALL
;;;353          if ((broadcast || ip_addr_ismulticast(&current_iphdr_dest)) &&
;;;354              ip_get_option(pcb, SOF_REUSEADDR)) {
;;;355            /* pass broadcast- or multicast packets to all multicast pcbs
;;;356               if SOF_REUSEADDR is set on the first match */
;;;357            struct udp_pcb *mpcb;
;;;358            u8_t p_header_changed = 0;
;;;359            for (mpcb = udp_pcbs; mpcb != NULL; mpcb = mpcb->next) {
;;;360              if (mpcb != pcb) {
;;;361                /* compare PCB local addr+port to UDP destination addr+port */
;;;362                if ((mpcb->local_port == dest) &&
;;;363                    ((!broadcast && ip_addr_isany(&mpcb->local_ip)) ||
;;;364                     ip_addr_cmp(&(mpcb->local_ip), &current_iphdr_dest) ||
;;;365    #if LWIP_IGMP
;;;366                     ip_addr_ismulticast(&current_iphdr_dest) ||
;;;367    #endif /* LWIP_IGMP */
;;;368    #if IP_SOF_BROADCAST_RECV
;;;369                     (broadcast && ip_get_option(mpcb, SOF_BROADCAST)))) {
;;;370    #else  /* IP_SOF_BROADCAST_RECV */
;;;371                     (broadcast))) {
;;;372    #endif /* IP_SOF_BROADCAST_RECV */
;;;373                  /* pass a copy of the packet to all local matches */
;;;374                  if (mpcb->recv != NULL) {
;;;375                    struct pbuf *q;
;;;376                    /* for that, move payload to IP header again */
;;;377                    if (p_header_changed == 0) {
;;;378                      pbuf_header(p, (s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;379                      p_header_changed = 1;
;;;380                    }
;;;381                    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
;;;382                    if (q != NULL) {
;;;383                      err_t err = pbuf_copy(q, p);
;;;384                      if (err == ERR_OK) {
;;;385                        /* move payload to UDP data */
;;;386                        pbuf_header(q, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;387                        mpcb->recv(mpcb->recv_arg, mpcb, q, ip_current_src_addr(), src);
;;;388                      }
;;;389                    }
;;;390                  }
;;;391                }
;;;392              }
;;;393            }
;;;394            if (p_header_changed) {
;;;395              /* and move payload to UDP data again */
;;;396              pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;397            }
;;;398          }
;;;399    #endif /* SO_REUSE && SO_REUSE_RXTOALL */
;;;400          /* callback */
;;;401          if (pcb->recv != NULL) {
000122  69a5              LDR      r5,[r4,#0x18]
000124  b315              CBZ      r5,|L5.364|
;;;402            /* now the recv function is responsible for freeing p */
;;;403            pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
000126  9700              STR      r7,[sp,#0]
000128  4b14              LDR      r3,|L5.380|
00012a  4632              MOV      r2,r6
00012c  4621              MOV      r1,r4
00012e  69e0              LDR      r0,[r4,#0x1c]
000130  47a8              BLX      r5
;;;404          } else {
;;;405            /* no recv function registered? then we have to free the pbuf! */
;;;406            pbuf_free(p);
;;;407            goto end;
;;;408          }
;;;409        } else {
;;;410          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
;;;411    
;;;412    #if LWIP_ICMP
;;;413          /* No match was found, send ICMP destination port unreachable unless
;;;414             destination address was broadcast/multicast. */
;;;415          if (!broadcast &&
;;;416              !ip_addr_ismulticast(&current_iphdr_dest)) {
;;;417            /* move payload pointer back to ip header */
;;;418            pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
;;;419            LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
;;;420            icmp_dest_unreach(p, ICMP_DUR_PORT);
;;;421          }
;;;422    #endif /* LWIP_ICMP */
;;;423          UDP_STATS_INC(udp.proterr);
;;;424          UDP_STATS_INC(udp.drop);
;;;425          snmp_inc_udpnoports();
;;;426          pbuf_free(p);
;;;427        }
;;;428      } else {
;;;429        pbuf_free(p);
;;;430      }
;;;431    end:
;;;432      PERF_STOP("udp_input");
;;;433    }
000132  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.310|
000136  b9cd              CBNZ     r5,|L5.364|
000138  f89b0000          LDRB     r0,[r11,#0]           ;416  ; current_iphdr_dest
00013c  f3c01003          UBFX     r0,r0,#4,#4           ;416
000140  280e              CMP      r0,#0xe               ;416
000142  d013              BEQ      |L5.364|
000144  f89a0000          LDRB     r0,[r10,#0]           ;418
000148  f000010f          AND      r1,r0,#0xf            ;418
00014c  2008              MOVS     r0,#8                 ;418
00014e  eb000181          ADD      r1,r0,r1,LSL #2       ;418
000152  4630              MOV      r0,r6                 ;418
000154  f7fffffe          BL       pbuf_header
000158  6871              LDR      r1,[r6,#4]            ;419
00015a  4551              CMP      r1,r10                ;419
00015c  d002              BEQ      |L5.356|
00015e  a00e              ADR      r0,|L5.408|
000160  f7fffffe          BL       __2printf
                  |L5.356|
000164  2103              MOVS     r1,#3                 ;420
000166  4630              MOV      r0,r6                 ;420
000168  f7fffffe          BL       icmp_dest_unreach
                  |L5.364|
00016c  4630              MOV      r0,r6                 ;429
00016e  e8bd4ff8          POP      {r3-r11,lr}           ;429
000172  f7ffbffe          B.W      pbuf_free
;;;434    
                          ENDP

000176  0000              DCW      0x0000
                  |L5.376|
                          DCD      current_iphdr_dest
                  |L5.380|
                          DCD      current_iphdr_src
                  |L5.384|
                          DCD      ||.data||
                  |L5.388|
000184  70627566          DCB      "pbuf_header failed\n",0
000188  5f686561
00018c  64657220
000190  6661696c
000194  65640a00
                  |L5.408|
000198  702d3e70          DCB      "p->payload == iphdr",0
00019c  61796c6f
0001a0  6164203d
0001a4  3d206970
0001a8  68647200

                          AREA ||i.udp_new||, CODE, READONLY, ALIGN=1

                  udp_new PROC
;;;976    struct udp_pcb *
;;;977    udp_new(void)
000000  b510              PUSH     {r4,lr}
;;;978    {
;;;979      struct udp_pcb *pcb;
;;;980      pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       memp_malloc
000008  0004              MOVS     r4,r0
;;;981      /* could allocate UDP PCB? */
;;;982      if (pcb != NULL) {
00000a  d004              BEQ      |L6.22|
;;;983        /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
;;;984         * which means checksum is generated over the whole datagram per default
;;;985         * (recommended as default by RFC 3828). */
;;;986        /* initialize PCB to all zeroes */
;;;987        memset(pcb, 0, sizeof(struct udp_pcb));
00000c  2120              MOVS     r1,#0x20
00000e  f7fffffe          BL       __aeabi_memclr4
;;;988        pcb->ttl = UDP_TTL;
000012  20ff              MOVS     r0,#0xff
000014  72a0              STRB     r0,[r4,#0xa]
                  |L6.22|
;;;989      }
;;;990      return pcb;
000016  4620              MOV      r0,r4
;;;991    }
000018  bd10              POP      {r4,pc}
;;;992    
                          ENDP


                          AREA ||i.udp_recv||, CODE, READONLY, ALIGN=1

                  udp_recv PROC
;;;929    void
;;;930    udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
000000  e9c01206          STRD     r1,r2,[r0,#0x18]
;;;931    {
;;;932      /* remember recv() callback and user data */
;;;933      pcb->recv = recv;
;;;934      pcb->recv_arg = recv_arg;
;;;935    }
000004  4770              BX       lr
;;;936    
                          ENDP


                          AREA ||i.udp_remove||, CODE, READONLY, ALIGN=2

                  udp_remove PROC
;;;945    void
;;;946    udp_remove(struct udp_pcb *pcb)
000000  4909              LDR      r1,|L8.40|
;;;947    {
;;;948      struct udp_pcb *pcb2;
;;;949    
;;;950      snmp_delete_udpidx_tree(pcb);
;;;951      /* pcb to be removed is first in list? */
;;;952      if (udp_pcbs == pcb) {
000002  684a              LDR      r2,[r1,#4]  ; udp_pcbs
000004  4282              CMP      r2,r0
000006  d109              BNE      |L8.28|
;;;953        /* make list start at 2nd pcb */
;;;954        udp_pcbs = udp_pcbs->next;
000008  68d2              LDR      r2,[r2,#0xc]
00000a  604a              STR      r2,[r1,#4]  ; udp_pcbs
00000c  e008              B        |L8.32|
                  |L8.14|
;;;955        /* pcb not 1st in list */
;;;956      } else {
;;;957        for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
;;;958          /* find pcb in udp_pcbs list */
;;;959          if (pcb2->next != NULL && pcb2->next == pcb) {
00000e  68d1              LDR      r1,[r2,#0xc]
000010  b119              CBZ      r1,|L8.26|
000012  4281              CMP      r1,r0
000014  d101              BNE      |L8.26|
;;;960            /* remove pcb from list */
;;;961            pcb2->next = pcb->next;
000016  68c1              LDR      r1,[r0,#0xc]
000018  60d1              STR      r1,[r2,#0xc]
                  |L8.26|
00001a  460a              MOV      r2,r1                 ;957
                  |L8.28|
00001c  2a00              CMP      r2,#0                 ;957
00001e  d1f6              BNE      |L8.14|
                  |L8.32|
;;;962          }
;;;963        }
;;;964      }
;;;965      memp_free(MEMP_UDP_PCB, pcb);
000020  4601              MOV      r1,r0
000022  2001              MOVS     r0,#1
000024  f7ffbffe          B.W      memp_free
;;;966    }
;;;967    
                          ENDP

                  |L8.40|
                          DCD      ||.data||

                          AREA ||i.udp_send||, CODE, READONLY, ALIGN=1

                  udp_send PROC
;;;453    err_t
;;;454    udp_send(struct udp_pcb *pcb, struct pbuf *p)
000000  8a83              LDRH     r3,[r0,#0x14]
;;;455    {
;;;456      /* send to the packet using remote ip and port stored in the pcb */
;;;457      return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
000002  1d02              ADDS     r2,r0,#4
000004  f7ffbffe          B.W      udp_sendto
;;;458    }
;;;459    
                          ENDP


                          AREA ||i.udp_sendto||, CODE, READONLY, ALIGN=1

                  udp_sendto PROC
;;;490    err_t
;;;491    udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
000000  b5f8              PUSH     {r3-r7,lr}
;;;492      ip_addr_t *dst_ip, u16_t dst_port)
;;;493    {
000002  4607              MOV      r7,r0
000004  461d              MOV      r5,r3
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;494    #if LWIP_CHECKSUM_ON_COPY
;;;495      return udp_sendto_chksum(pcb, p, dst_ip, dst_port, 0, 0);
;;;496    }
;;;497    
;;;498    /** Same as udp_sendto(), but with checksum */
;;;499    err_t
;;;500    udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
;;;501                      u16_t dst_port, u8_t have_chksum, u16_t chksum)
;;;502    {
;;;503    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;504      struct netif *netif;
;;;505    
;;;506      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
;;;507    
;;;508      /* find the outgoing network interface for this packet */
;;;509    #if LWIP_IGMP
;;;510      netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
;;;511    #else
;;;512      netif = ip_route(dst_ip);
00000a  4610              MOV      r0,r2
00000c  f7fffffe          BL       ip_route
;;;513    #endif /* LWIP_IGMP */
;;;514    
;;;515      /* no outgoing network interface could be found? */
;;;516      if (netif == NULL) {
000010  b138              CBZ      r0,|L10.34|
;;;517        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;518          ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
;;;519        UDP_STATS_INC(udp.rterr);
;;;520        return ERR_RTE;
;;;521      }
;;;522    #if LWIP_CHECKSUM_ON_COPY
;;;523      return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
;;;524    #else /* LWIP_CHECKSUM_ON_COPY */
;;;525      return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
000012  9000              STR      r0,[sp,#0]
000014  462b              MOV      r3,r5
000016  4622              MOV      r2,r4
000018  4631              MOV      r1,r6
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       udp_sendto_if
;;;526    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;527    }
000020  bdf8              POP      {r3-r7,pc}
                  |L10.34|
000022  f06f0003          MVN      r0,#3                 ;520
000026  bdf8              POP      {r3-r7,pc}
;;;528    
                          ENDP


                          AREA ||i.udp_sendto_if||, CODE, READONLY, ALIGN=2

                  udp_sendto_if PROC
;;;548    err_t
;;;549    udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;550      ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
;;;551    {
000004  4692              MOV      r10,r2
;;;552    #if LWIP_CHECKSUM_ON_COPY
;;;553      return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, 0, 0);
;;;554    }
;;;555    
;;;556    /** Same as udp_sendto_if(), but with checksum */
;;;557    err_t
;;;558    udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
;;;559                         u16_t dst_port, struct netif *netif, u8_t have_chksum,
;;;560                         u16_t chksum)
;;;561    {
;;;562    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;563      struct udp_hdr *udphdr;
;;;564      ip_addr_t *src_ip;
;;;565      err_t err;
;;;566      struct pbuf *q; /* q will be sent down the stack */
;;;567    
;;;568    #if IP_SOF_BROADCAST
;;;569      /* broadcast filter? */
;;;570      if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(dst_ip, netif)) {
;;;571        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;572          ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
;;;573        return ERR_VAL;
;;;574      }
;;;575    #endif /* IP_SOF_BROADCAST */
;;;576    
;;;577      /* if the PCB is not yet bound to a port, bind it here */
;;;578      if (pcb->local_port == 0) {
000006  8a42              LDRH     r2,[r0,#0x12]
000008  f8dd9030          LDR      r9,[sp,#0x30]         ;551
00000c  4698              MOV      r8,r3                 ;551
00000e  460f              MOV      r7,r1                 ;551
000010  4605              MOV      r5,r0                 ;551
000012  b922              CBNZ     r2,|L11.30|
;;;579        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
;;;580        err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
000014  4601              MOV      r1,r0
000016  f7fffffe          BL       udp_bind
;;;581        if (err != ERR_OK) {
00001a  2800              CMP      r0,#0
00001c  d114              BNE      |L11.72|
                  |L11.30|
;;;582          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
;;;583          return err;
;;;584        }
;;;585      }
;;;586    
;;;587      /* not enough space to add an UDP header to first pbuf in given p chain? */
;;;588      if (pbuf_header(p, UDP_HLEN)) {
00001e  2108              MOVS     r1,#8
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       pbuf_header
000026  b188              CBZ      r0,|L11.76|
;;;589        /* allocate header in a separate new pbuf */
;;;590        q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
000028  2200              MOVS     r2,#0
00002a  2108              MOVS     r1,#8
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       pbuf_alloc
000032  0004              MOVS     r4,r0
;;;591        /* new header pbuf could not be allocated? */
;;;592        if (q == NULL) {
000034  d006              BEQ      |L11.68|
;;;593          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
;;;594          return ERR_MEM;
;;;595        }
;;;596        if (p->tot_len != 0) {
000036  8938              LDRH     r0,[r7,#8]
000038  b148              CBZ      r0,|L11.78|
;;;597          /* chain header q in front of given pbuf p (only if p contains data) */
;;;598          pbuf_chain(q, p);
00003a  4639              MOV      r1,r7
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       pbuf_chain
000042  e004              B        |L11.78|
                  |L11.68|
000044  f04f30ff          MOV      r0,#0xffffffff        ;594
                  |L11.72|
;;;599        }
;;;600        /* first pbuf q points to header pbuf */
;;;601        LWIP_DEBUGF(UDP_DEBUG,
;;;602                    ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
;;;603      } else {
;;;604        /* adding space for header within p succeeded */
;;;605        /* first pbuf q equals given pbuf */
;;;606        q = p;
;;;607        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
;;;608      }
;;;609      LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
;;;610                  (q->len >= sizeof(struct udp_hdr)));
;;;611      /* q now represents the packet to be sent */
;;;612      udphdr = (struct udp_hdr *)q->payload;
;;;613      udphdr->src = htons(pcb->local_port);
;;;614      udphdr->dest = htons(dst_port);
;;;615      /* in UDP, 0 checksum means 'no checksum' */
;;;616      udphdr->chksum = 0x0000; 
;;;617    
;;;618      /* Multicast Loop? */
;;;619    #if LWIP_IGMP
;;;620      if (ip_addr_ismulticast(dst_ip) && ((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0)) {
;;;621        q->flags |= PBUF_FLAG_MCASTLOOP;
;;;622      }
;;;623    #endif /* LWIP_IGMP */
;;;624    
;;;625    
;;;626      /* PCB local address is IP_ANY_ADDR? */
;;;627      if (ip_addr_isany(&pcb->local_ip)) {
;;;628        /* use outgoing network interface IP address as source address */
;;;629        src_ip = &(netif->ip_addr);
;;;630      } else {
;;;631        /* check if UDP PCB local IP address is correct
;;;632         * this could be an old address if netif->ip_addr has changed */
;;;633        if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
;;;634          /* local_ip doesn't match, drop the packet */
;;;635          if (q != p) {
;;;636            /* free the header pbuf */
;;;637            pbuf_free(q);
;;;638            q = NULL;
;;;639            /* p is still referenced by the caller, and will live on */
;;;640          }
;;;641          return ERR_VAL;
;;;642        }
;;;643        /* use UDP PCB local IP address as source address */
;;;644        src_ip = &(pcb->local_ip);
;;;645      }
;;;646    
;;;647      LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
;;;648    
;;;649    #if LWIP_UDPLITE
;;;650      /* UDP Lite protocol? */
;;;651      if (pcb->flags & UDP_FLAGS_UDPLITE) {
;;;652        u16_t chklen, chklen_hdr;
;;;653        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE packet length %"U16_F"\n", q->tot_len));
;;;654        /* set UDP message length in UDP header */
;;;655        chklen_hdr = chklen = pcb->chksum_len_tx;
;;;656        if ((chklen < sizeof(struct udp_hdr)) || (chklen > q->tot_len)) {
;;;657          if (chklen != 0) {
;;;658            LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE pcb->chksum_len is illegal: %"U16_F"\n", chklen));
;;;659          }
;;;660          /* For UDP-Lite, checksum length of 0 means checksum
;;;661             over the complete packet. (See RFC 3828 chap. 3.1)
;;;662             At least the UDP-Lite header must be covered by the
;;;663             checksum, therefore, if chksum_len has an illegal
;;;664             value, we generate the checksum over the complete
;;;665             packet to be safe. */
;;;666          chklen_hdr = 0;
;;;667          chklen = q->tot_len;
;;;668        }
;;;669        udphdr->len = htons(chklen_hdr);
;;;670        /* calculate checksum */
;;;671    #if CHECKSUM_GEN_UDP
;;;672        udphdr->chksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip,
;;;673          IP_PROTO_UDPLITE, q->tot_len,
;;;674    #if !LWIP_CHECKSUM_ON_COPY
;;;675          chklen);
;;;676    #else /* !LWIP_CHECKSUM_ON_COPY */
;;;677          (have_chksum ? UDP_HLEN : chklen));
;;;678        if (have_chksum) {
;;;679          u32_t acc;
;;;680          acc = udphdr->chksum + (u16_t)~(chksum);
;;;681          udphdr->chksum = FOLD_U32T(acc);
;;;682        }
;;;683    #endif /* !LWIP_CHECKSUM_ON_COPY */
;;;684    
;;;685        /* chksum zero must become 0xffff, as zero means 'no checksum' */
;;;686        if (udphdr->chksum == 0x0000) {
;;;687          udphdr->chksum = 0xffff;
;;;688        }
;;;689    #endif /* CHECKSUM_GEN_UDP */
;;;690        /* output to IP */
;;;691        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));
;;;692        NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
;;;693        err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDPLITE, netif);
;;;694        NETIF_SET_HWADDRHINT(netif, NULL);
;;;695      } else
;;;696    #endif /* LWIP_UDPLITE */
;;;697      {      /* UDP */
;;;698        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
;;;699        udphdr->len = htons(q->tot_len);
;;;700        /* calculate checksum */
;;;701    #if CHECKSUM_GEN_UDP
;;;702        if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
;;;703          u16_t udpchksum;
;;;704    #if LWIP_CHECKSUM_ON_COPY
;;;705          if (have_chksum) {
;;;706            u32_t acc;
;;;707            udpchksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip, IP_PROTO_UDP,
;;;708              q->tot_len, UDP_HLEN);
;;;709            acc = udpchksum + (u16_t)~(chksum);
;;;710            udpchksum = FOLD_U32T(acc);
;;;711          } else
;;;712    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;713          {
;;;714            udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
;;;715          }
;;;716    
;;;717          /* chksum zero must become 0xffff, as zero means 'no checksum' */
;;;718          if (udpchksum == 0x0000) {
;;;719            udpchksum = 0xffff;
;;;720          }
;;;721          udphdr->chksum = udpchksum;
;;;722        }
;;;723    #endif /* CHECKSUM_GEN_UDP */
;;;724        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
;;;725        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
;;;726        /* output to IP */
;;;727        NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
;;;728        err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
;;;729        NETIF_SET_HWADDRHINT(netif, NULL);
;;;730      }
;;;731      /* TODO: must this be increased even if error occured? */
;;;732      snmp_inc_udpoutdatagrams();
;;;733    
;;;734      /* did we chain a separate header pbuf earlier? */
;;;735      if (q != p) {
;;;736        /* free the header pbuf */
;;;737        pbuf_free(q);
;;;738        q = NULL;
;;;739        /* p is still referenced by the caller, and will live on */
;;;740      }
;;;741    
;;;742      UDP_STATS_INC(udp.xmit);
;;;743      return err;
;;;744    }
000048  e8bd8ffe          POP      {r1-r11,pc}
                  |L11.76|
00004c  463c              MOV      r4,r7                 ;606
                  |L11.78|
00004e  8960              LDRH     r0,[r4,#0xa]          ;609
000050  2808              CMP      r0,#8                 ;609
000052  d202              BCS      |L11.90|
000054  a01b              ADR      r0,|L11.196|
000056  f7fffffe          BL       __2printf
                  |L11.90|
00005a  8a68              LDRH     r0,[r5,#0x12]         ;613
00005c  6866              LDR      r6,[r4,#4]            ;613
00005e  f7fffffe          BL       lwip_htons
000062  8030              STRH     r0,[r6,#0]            ;613
000064  4640              MOV      r0,r8                 ;614
000066  f7fffffe          BL       lwip_htons
00006a  8070              STRH     r0,[r6,#2]            ;614
00006c  2000              MOVS     r0,#0                 ;616
00006e  80f0              STRH     r0,[r6,#6]            ;616
000070  b16d              CBZ      r5,|L11.142|
000072  6828              LDR      r0,[r5,#0]            ;627
000074  b158              CBZ      r0,|L11.142|
000076  f8d91004          LDR      r1,[r9,#4]            ;633
00007a  4288              CMP      r0,r1                 ;633
00007c  d00a              BEQ      |L11.148|
00007e  42bc              CMP      r4,r7                 ;635
000080  d002              BEQ      |L11.136|
000082  4620              MOV      r0,r4                 ;637
000084  f7fffffe          BL       pbuf_free
                  |L11.136|
000088  f06f0005          MVN      r0,#5                 ;641
00008c  e7dc              B        |L11.72|
                  |L11.142|
00008e  f1090804          ADD      r8,r9,#4              ;629
000092  e000              B        |L11.150|
                  |L11.148|
000094  46a8              MOV      r8,r5                 ;644
                  |L11.150|
000096  8920              LDRH     r0,[r4,#8]            ;699
000098  f7fffffe          BL       lwip_htons
00009c  80b0              STRH     r0,[r6,#4]            ;699
00009e  7a69              LDRB     r1,[r5,#9]            ;728
0000a0  2211              MOVS     r2,#0x11              ;728
0000a2  e88d0206          STM      sp,{r1,r2,r9}         ;728
0000a6  7aab              LDRB     r3,[r5,#0xa]          ;728
0000a8  4652              MOV      r2,r10                ;728
0000aa  4641              MOV      r1,r8                 ;728
0000ac  4620              MOV      r0,r4                 ;728
0000ae  f7fffffe          BL       ip_output_if
0000b2  4605              MOV      r5,r0                 ;728
0000b4  42bc              CMP      r4,r7                 ;735
0000b6  d002              BEQ      |L11.190|
0000b8  4620              MOV      r0,r4                 ;737
0000ba  f7fffffe          BL       pbuf_free
                  |L11.190|
0000be  4628              MOV      r0,r5                 ;743
0000c0  e7c2              B        |L11.72|
;;;745    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L11.196|
0000c4  63686563          DCB      "check that first pbuf can hold struct udp_hdr",0
0000c8  6b207468
0000cc  61742066
0000d0  69727374
0000d4  20706275
0000d8  66206361
0000dc  6e20686f
0000e0  6c642073
0000e4  74727563
0000e8  74207564
0000ec  705f6864
0000f0  7200    
0000f2  00                DCB      0
0000f3  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  udp_port
000000  c000              DCW      0xc000
000002  0000              DCB      0x00,0x00
                  udp_pcbs
                          DCD      0x00000000

; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\hym8563.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\hym8563.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\hym8563.crf ..\..\Complex\hym8563\hym8563.c]
                          THUMB

                          AREA ||i.CaculateWeekDay||, CODE, READONLY, ALIGN=1

                  CaculateWeekDay PROC
;;;80     **/
;;;81     uint8_t CaculateWeekDay(int y,int m, int d)
000000  b510              PUSH     {r4,lr}
;;;82     {
;;;83     	uint8_t iWeek;
;;;84         if(m==1||m==2) 
000002  2901              CMP      r1,#1
000004  d001              BEQ      |L1.10|
000006  2902              CMP      r1,#2
000008  d101              BNE      |L1.14|
                  |L1.10|
00000a  1e40              SUBS     r0,r0,#1
00000c  310c              ADDS     r1,r1,#0xc
                  |L1.14|
;;;85     	{
;;;86             m+=12;
;;;87             y--;
;;;88         }
;;;89     	iWeek=((d+2*m+3*(m+1)/5+y+y/4-y/100+y/400)+1)%7;
00000e  1c4b              ADDS     r3,r1,#1
000010  eb030343          ADD      r3,r3,r3,LSL #1
000014  2405              MOVS     r4,#5
000016  fb93f3f4          SDIV     r3,r3,r4
00001a  eb020141          ADD      r1,r2,r1,LSL #1
00001e  4419              ADD      r1,r1,r3
000020  17c2              ASRS     r2,r0,#31
000022  4401              ADD      r1,r1,r0
000024  eb007292          ADD      r2,r0,r2,LSR #30
000028  eb0101a2          ADD      r1,r1,r2,ASR #2
00002c  2264              MOVS     r2,#0x64
00002e  fb90f2f2          SDIV     r2,r0,r2
000032  1a89              SUBS     r1,r1,r2
000034  f44f72c8          MOV      r2,#0x190
000038  fb90f0f2          SDIV     r0,r0,r2
00003c  4408              ADD      r0,r0,r1
00003e  2107              MOVS     r1,#7
000040  1c40              ADDS     r0,r0,#1
000042  fb90f2f1          SDIV     r2,r0,r1
000046  fb010012          MLS      r0,r1,r2,r0
00004a  b2c0              UXTB     r0,r0
;;;90     		
;;;91     	return iWeek;
;;;92     } 
00004c  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.Inithym8563_device||, CODE, READONLY, ALIGN=1

                  Inithym8563_device PROC
;;;32     /*the init of the hym8563 at first time */
;;;33     void Inithym8563_device(void)   
000000  b510              PUSH     {r4,lr}
;;;34     {
;;;35         i2c_CfgGpio(IIC_HYM8563,I2C_TYPE_HARDWARE);//iic gpio口配置，hym8563采用硬件iic
000002  2102              MOVS     r1,#2
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       i2c_CfgGpio
;;;36     	I2C_Mode_Config(IIC_HYM8563);//配置iic工作模式
00000a  e8bd4010          POP      {r4,lr}
00000e  2000              MOVS     r0,#0
000010  f7ffbffe          B.W      I2C_Mode_Config
;;;37     }
;;;38     
                          ENDP


                          AREA ||i.bcd2bin||, CODE, READONLY, ALIGN=1

                  bcd2bin PROC
;;;72     */
;;;73     uint8_t bcd2bin(uint8_t val)
000000  f000010f          AND      r1,r0,#0xf
;;;74     {
;;;75         return (val & 0x0f) + (val >> 4) * 10;
000004  0900              LSRS     r0,r0,#4
000006  eb000080          ADD      r0,r0,r0,LSL #2
00000a  eb010040          ADD      r0,r1,r0,LSL #1
00000e  b2c0              UXTB     r0,r0
;;;76     }
000010  4770              BX       lr
;;;77     
                          ENDP


                          AREA ||i.bin2bcd||, CODE, READONLY, ALIGN=1

                  bin2bcd PROC
;;;63     */
;;;64     uint8_t bin2bcd(uint8_t val)
000000  210a              MOVS     r1,#0xa
;;;65     {
;;;66         return ((val / 10) << 4) + val % 10;
000002  fbb0f2f1          UDIV     r2,r0,r1
000006  fb010212          MLS      r2,r1,r2,r0
00000a  fbb0f0f1          UDIV     r0,r0,r1
00000e  eb021000          ADD      r0,r2,r0,LSL #4
000012  b2c0              UXTB     r0,r0
;;;67     }
000014  4770              BX       lr
;;;68     
                          ENDP


                          AREA ||i.hym8563_Currenttime||, CODE, READONLY, ALIGN=2

                  hym8563_Currenttime PROC
;;;132    **/
;;;133    void hym8563_Currenttime(uint64_t* time)
000000  b570              PUSH     {r4-r6,lr}
;;;134    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;135    	struct rtc_time Le_h_tm;
;;;136    	(void)hym8563_read_datetime(&Le_h_tm);//获取当前时间
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       hym8563_read_datetime
;;;137    	//tm.tm_year, tm.tm_mon, tm.tm_mday, tm.tm_wday,tm.tm_hour, tm.tm_min, tm.tm_sec);
;;;138    	*time = (uint64_t)(Le_h_tm.tm_year)*10000000000 + (uint64_t)(Le_h_tm.tm_mon)*100000000 + \
00000c  9805              LDR      r0,[sp,#0x14]
00000e  4912              LDR      r1,|L5.88|
000010  17c5              ASRS     r5,r0,#31
000012  fba02601          UMULL    r2,r6,r0,r1
000016  fb056101          MLA      r1,r5,r1,r6
00001a  2302              MOVS     r3,#2
00001c  fb001103          MLA      r1,r0,r3,r1
000020  4b0e              LDR      r3,|L5.92|
000022  9804              LDR      r0,[sp,#0x10]
000024  4e0e              LDR      r6,|L5.96|
000026  fbc02103          SMLAL    r2,r1,r0,r3
00002a  e9dd0502          LDRD     r0,r5,[sp,#8]
00002e  f2427310          MOV      r3,#0x2710
000032  fb803003          SMULL    r3,r0,r0,r3
000036  fbc53006          SMLAL    r3,r0,r5,r6
00003a  18d2              ADDS     r2,r2,r3
00003c  4141              ADCS     r1,r1,r0
00003e  9801              LDR      r0,[sp,#4]
000040  2364              MOVS     r3,#0x64
000042  fbc02103          SMLAL    r2,r1,r0,r3
000046  9800              LDR      r0,[sp,#0]
000048  17c3              ASRS     r3,r0,#31
00004a  1810              ADDS     r0,r2,r0
00004c  4159              ADCS     r1,r1,r3
00004e  e9c40100          STRD     r0,r1,[r4,#0]
;;;139    			(uint64_t)(Le_h_tm.tm_mday)*1000000 + (uint64_t)(Le_h_tm.tm_hour)*10000 + \
;;;140    			(uint64_t)(Le_h_tm.tm_min)*100 + (uint64_t)Le_h_tm.tm_sec;
;;;141    }
000052  b00a              ADD      sp,sp,#0x28
000054  bd70              POP      {r4-r6,pc}
;;;142    
                          ENDP

000056  0000              DCW      0x0000
                  |L5.88|
                          DCD      0x540be400
                  |L5.92|
                          DCD      0x05f5e100
                  |L5.96|
                          DCD      0x000f4240

                          AREA ||i.hym8563_i2c_read_regs||, CODE, READONLY, ALIGN=1

                  hym8563_i2c_read_regs PROC
;;;118    **/
;;;119    uint8_t hym8563_i2c_read_regs(u8 regAddr, u8 *buf, u8 len)
000000  b570              PUSH     {r4-r6,lr}
;;;120    {
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;121    	u8 ret;
;;;122    	
;;;123    	Inithym8563_device();
000008  f7fffffe          BL       Inithym8563_device
;;;124    	ret = I2C_BytesRead(IIC_HYM8563,regAddr,buf,len);
00000c  4623              MOV      r3,r4
00000e  462a              MOV      r2,r5
000010  4631              MOV      r1,r6
000012  e8bd4070          POP      {r4-r6,lr}
000016  2000              MOVS     r0,#0
000018  f7ffbffe          B.W      I2C_BytesRead
;;;125    	return ret;
;;;126    }
;;;127    
                          ENDP


                          AREA ||i.hym8563_i2c_set_regs||, CODE, READONLY, ALIGN=1

                  hym8563_i2c_set_regs PROC
;;;101    **/
;;;102    uint8_t hym8563_i2c_set_regs(u8 reg, u8 *buf, u8 len)
000000  b570              PUSH     {r4-r6,lr}
;;;103    {
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;104    	u8 ret;
;;;105    	
;;;106    	Inithym8563_device();
000008  f7fffffe          BL       Inithym8563_device
;;;107    	ret = I2C_BytesWrite(IIC_HYM8563,reg,buf,len);
00000c  4623              MOV      r3,r4
00000e  462a              MOV      r2,r5
000010  4631              MOV      r1,r6
000012  e8bd4070          POP      {r4-r6,lr}
000016  2000              MOVS     r0,#0
000018  f7ffbffe          B.W      I2C_BytesWrite
;;;108    	return ret;
;;;109    }
;;;110    
                          ENDP


                          AREA ||i.hym8563_read_datetime||, CODE, READONLY, ALIGN=1

                  hym8563_read_datetime PROC
;;;147    **/
;;;148    uint8_t hym8563_read_datetime(struct rtc_time *tm)
000000  b57c              PUSH     {r2-r6,lr}
;;;149    {
;;;150    	u8 ret;
;;;151    	u8 regsData[HYM8563_RTC_SECTION_LEN] = {0};//定义存放日期时间的数组
000002  2500              MOVS     r5,#0
000004  4604              MOV      r4,r0                 ;149
000006  9500              STR      r5,[sp,#0]
;;;152    
;;;153    	ret = hym8563_i2c_read_regs(RTC_SEC, regsData, HYM8563_RTC_SECTION_LEN);//读取日期时间，数据寄存器起始地址RTC_SEC
000008  2207              MOVS     r2,#7
00000a  4669              MOV      r1,sp
00000c  2002              MOVS     r0,#2
00000e  9501              STR      r5,[sp,#4]
000010  f7fffffe          BL       hym8563_i2c_read_regs
000014  4606              MOV      r6,r0
;;;154    
;;;155    	tm->tm_sec = bcd2bin(regsData[0x00] & 0x7F);
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f000007f          AND      r0,r0,#0x7f
00001e  f7fffffe          BL       bcd2bin
;;;156    	tm->tm_min = bcd2bin(regsData[0x01] & 0x7F);
000022  6020              STR      r0,[r4,#0]
000024  f89d0001          LDRB     r0,[sp,#1]
000028  f000007f          AND      r0,r0,#0x7f
00002c  f7fffffe          BL       bcd2bin
;;;157    	tm->tm_hour = bcd2bin(regsData[0x02] & 0x3F);
000030  6060              STR      r0,[r4,#4]
000032  f89d0002          LDRB     r0,[sp,#2]
000036  f000003f          AND      r0,r0,#0x3f
00003a  f7fffffe          BL       bcd2bin
;;;158    	tm->tm_mday = bcd2bin(regsData[0x03] & 0x3F);
00003e  60a0              STR      r0,[r4,#8]
000040  f89d0003          LDRB     r0,[sp,#3]
000044  f000003f          AND      r0,r0,#0x3f
000048  f7fffffe          BL       bcd2bin
;;;159    	tm->tm_wday = bcd2bin(regsData[0x04] & 0x07);	
00004c  60e0              STR      r0,[r4,#0xc]
00004e  f89d0004          LDRB     r0,[sp,#4]
000052  f0000007          AND      r0,r0,#7
000056  f7fffffe          BL       bcd2bin
;;;160    	
;;;161    	tm->tm_mon = bcd2bin(regsData[0x05] & 0x1F); 
00005a  61a0              STR      r0,[r4,#0x18]
00005c  f89d0005          LDRB     r0,[sp,#5]
000060  f000001f          AND      r0,r0,#0x1f
000064  f7fffffe          BL       bcd2bin
;;;162    	
;;;163    	tm->tm_year = bcd2bin(regsData[0x06] & 0xFF);
000068  6120              STR      r0,[r4,#0x10]
00006a  f89d0006          LDRB     r0,[sp,#6]
00006e  f7fffffe          BL       bcd2bin
;;;164    	if(regsData[5] & 0x80)
000072  6160              STR      r0,[r4,#0x14]
000074  f89d1005          LDRB     r1,[sp,#5]
000078  0609              LSLS     r1,r1,#24
00007a  d502              BPL      |L8.130|
00007c  f200706c          ADD      r0,r0,#0x76c
;;;165    		tm->tm_year += 1900;
000080  e001              B        |L8.134|
                  |L8.130|
000082  f50060fa          ADD      r0,r0,#0x7d0
                  |L8.134|
;;;166    	else
;;;167    		tm->tm_year += 2000;
;;;168    		
;;;169    	tm->tm_yday = rtc_year_days(tm->tm_mday, tm->tm_mon, tm->tm_year);	
000086  4602              MOV      r2,r0
000088  6160              STR      r0,[r4,#0x14]
00008a  e9d40103          LDRD     r0,r1,[r4,#0xc]
00008e  f7fffffe          BL       rtc_year_days
;;;170    	
;;;171    	if( (tm->tm_year - 1900) < 0)
000092  61e0              STR      r0,[r4,#0x1c]
000094  6960              LDR      r0,[r4,#0x14]
000096  f5a060e0          SUB      r0,r0,#0x700
00009a  386c              SUBS     r0,r0,#0x6c
00009c  d500              BPL      |L8.160|
;;;172    		tm->tm_year = 0;	
00009e  6165              STR      r5,[r4,#0x14]
                  |L8.160|
;;;173    	tm->tm_isdst = 0;	
;;;174    
;;;175    	return ret;
0000a0  4630              MOV      r0,r6
0000a2  6225              STR      r5,[r4,#0x20]
;;;176    }
0000a4  bd7c              POP      {r2-r6,pc}
;;;177    
                          ENDP


                          AREA ||i.hym8563_set_time||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  hym8563_set_time PROC
;;;182    **/
;;;183    uint8_t hym8563_set_time(struct rtc_time *tm)	
000000  b57c              PUSH     {r2-r6,lr}
;;;184    {
000002  4604              MOV      r4,r0
;;;185    	uint8_t regs[HYM8563_RTC_SECTION_LEN] = {0};
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;186    	u8 mon_day;
;;;187    	u8 ret = 0;
;;;188    
;;;189    	USART_PRINTF_D("今天是 %d号\n",tm->tm_mday);
000008  9001              STR      r0,[sp,#4]
00000a  a03f              ADR      r0,|L9.264|
00000c  68e1              LDR      r1,[r4,#0xc]
00000e  f7fffffe          BL       __2printf
000012  e9d40104          LDRD     r0,r1,[r4,#0x10]
;;;190    	mon_day = rtc_month_days((tm->tm_mon), tm->tm_year);
000016  f7fffffe          BL       rtc_month_days
00001a  b2c5              UXTB     r5,r0
;;;191    	USART_PRINTF_D("本月最大天数 %d天\n",mon_day);
00001c  4629              MOV      r1,r5
00001e  a03e              ADR      r0,|L9.280|
000020  f7fffffe          BL       __2printf
;;;192    	tm->tm_wday = CaculateWeekDay(tm->tm_year,tm->tm_mon,tm->tm_mday);
000024  e9d41004          LDRD     r1,r0,[r4,#0x10]
000028  68e2              LDR      r2,[r4,#0xc]
00002a  f7fffffe          BL       CaculateWeekDay
00002e  4601              MOV      r1,r0
;;;193    	USART_PRINTF_D("今天星期 %d\n",tm->tm_wday);
000030  61a0              STR      r0,[r4,#0x18]
000032  a03e              ADR      r0,|L9.300|
000034  f7fffffe          BL       __2printf
;;;194    	if(tm->tm_sec >= 60 || tm->tm_sec < 0 )		//set  sec
000038  6820              LDR      r0,[r4,#0]
00003a  283c              CMP      r0,#0x3c
00003c  d301              BCC      |L9.66|
;;;195    	{
;;;196    		regs[0x00] = bin2bcd(0x00);
00003e  2000              MOVS     r0,#0
000040  e000              B        |L9.68|
                  |L9.66|
;;;197    	}
;;;198    	else
;;;199    	{
;;;200    		regs[0x00] = bin2bcd(tm->tm_sec);
000042  b2c0              UXTB     r0,r0
                  |L9.68|
000044  f7fffffe          BL       bin2bcd
000048  f88d0000          STRB     r0,[sp,#0]
;;;201    	}
;;;202    	
;;;203    	if(tm->tm_min >= 60 || tm->tm_min < 0 )		//set  min	
00004c  6860              LDR      r0,[r4,#4]
00004e  283c              CMP      r0,#0x3c
000050  d301              BCC      |L9.86|
;;;204    	{
;;;205    		regs[0x01] = bin2bcd(0x00);
000052  2000              MOVS     r0,#0
000054  e000              B        |L9.88|
                  |L9.86|
;;;206    	}
;;;207    	else
;;;208    	{
;;;209    		regs[0x01] = bin2bcd(tm->tm_min);
000056  b2c0              UXTB     r0,r0
                  |L9.88|
000058  f7fffffe          BL       bin2bcd
00005c  f88d0001          STRB     r0,[sp,#1]
;;;210    	}
;;;211    
;;;212    	if(tm->tm_hour >= 24 || tm->tm_hour < 0 )		//set  hour
000060  68a0              LDR      r0,[r4,#8]
000062  2818              CMP      r0,#0x18
000064  d301              BCC      |L9.106|
;;;213    	{
;;;214    		regs[0x02] = bin2bcd(0x00);
000066  2000              MOVS     r0,#0
000068  e000              B        |L9.108|
                  |L9.106|
;;;215    	}
;;;216    	else
;;;217    	{
;;;218    		regs[0x02] = bin2bcd(tm->tm_hour);
00006a  b2c0              UXTB     r0,r0
                  |L9.108|
00006c  f7fffffe          BL       bin2bcd
000070  f88d0002          STRB     r0,[sp,#2]
;;;219    	}
;;;220    	
;;;221    	if((tm->tm_mday) > mon_day)				//if the input month day is bigger than the biggest day of this month, set the biggest day 
000074  68e0              LDR      r0,[r4,#0xc]
000076  42a8              CMP      r0,r5
000078  dd01              BLE      |L9.126|
;;;222    	{
;;;223    		regs[0x03] = bin2bcd(mon_day);
00007a  4628              MOV      r0,r5
00007c  e004              B        |L9.136|
                  |L9.126|
;;;224    	}
;;;225    	else if((tm->tm_mday) > 0)
00007e  2800              CMP      r0,#0
000080  dd01              BLE      |L9.134|
;;;226    	{
;;;227    		regs[0x03] = bin2bcd(tm->tm_mday);
000082  b2c0              UXTB     r0,r0
000084  e000              B        |L9.136|
                  |L9.134|
;;;228    	}
;;;229    	else
;;;230    	{
;;;231    		regs[0x03] = bin2bcd(0x01);
000086  2001              MOVS     r0,#1
                  |L9.136|
000088  f7fffffe          BL       bin2bcd
00008c  f88d0003          STRB     r0,[sp,#3]            ;227
;;;232    	}
;;;233    
;;;234    	if( tm->tm_year >= 2100)		// year >= 2100
000090  6960              LDR      r0,[r4,#0x14]
000092  f6400134          MOV      r1,#0x834
000096  4288              CMP      r0,r1
000098  db01              BLT      |L9.158|
;;;235    	{
;;;236    		regs[0x06] = bin2bcd(99);	//year = 2099
00009a  2063              MOVS     r0,#0x63
00009c  e005              B        |L9.170|
                  |L9.158|
;;;237    	}
;;;238    	else if(tm->tm_year >= 2000)			// 2000 <= year < 2100
00009e  f5b06ffa          CMP      r0,#0x7d0
0000a2  db07              BLT      |L9.180|
0000a4  f5a060fa          SUB      r0,r0,#0x7d0
;;;239    	{
;;;240    		regs[0x06] = bin2bcd(tm->tm_year - 2000);
0000a8  b2c0              UXTB     r0,r0
                  |L9.170|
0000aa  f7fffffe          BL       bin2bcd
0000ae  f88d0006          STRB     r0,[sp,#6]
0000b2  e012              B        |L9.218|
                  |L9.180|
;;;241    	}
;;;242    	else if(tm->tm_year >= 1900)
0000b4  f240716c          MOV      r1,#0x76c
0000b8  4288              CMP      r0,r1
0000ba  db03              BLT      |L9.196|
0000bc  f2a0706c          SUB      r0,r0,#0x76c
;;;243    	{				// 1900 <= year < 2000
;;;244    		regs[0x06] = bin2bcd(tm->tm_year - 1900 );	
0000c0  b2c0              UXTB     r0,r0
;;;245    		regs[0x05] |= 0x80;	
0000c2  e000              B        |L9.198|
                  |L9.196|
;;;246    	}
;;;247    	else
;;;248    	{									// year < 1900
;;;249    		regs[0x06] = bin2bcd(0);	//year = 1900	
0000c4  2000              MOVS     r0,#0
                  |L9.198|
0000c6  f7fffffe          BL       bin2bcd
0000ca  f88d0006          STRB     r0,[sp,#6]            ;244
0000ce  f89d0005          LDRB     r0,[sp,#5]            ;245
0000d2  f0400080          ORR      r0,r0,#0x80           ;245
0000d6  f88d0005          STRB     r0,[sp,#5]            ;245
                  |L9.218|
;;;250    		regs[0x05] |= 0x80;	
;;;251    	}	
;;;252    	
;;;253    	regs[0x04] = bin2bcd(tm->tm_wday);		//set  the  weekday
0000da  7e20              LDRB     r0,[r4,#0x18]
0000dc  f7fffffe          BL       bin2bcd
0000e0  f88d0004          STRB     r0,[sp,#4]
;;;254    	regs[0x05] = (regs[0x05] & 0x80)| (bin2bcd(tm->tm_mon) & 0x7F);		//set  the  month
0000e4  7c20              LDRB     r0,[r4,#0x10]
0000e6  f7fffffe          BL       bin2bcd
0000ea  f89d1005          LDRB     r1,[sp,#5]
0000ee  f000007f          AND      r0,r0,#0x7f
0000f2  f0010180          AND      r1,r1,#0x80
0000f6  4308              ORRS     r0,r0,r1
0000f8  f88d0005          STRB     r0,[sp,#5]
;;;255    	
;;;256    	ret = hym8563_i2c_set_regs(RTC_SEC,regs,HYM8563_RTC_SECTION_LEN);//写日期时间，数据寄存器起始地址RTC_SEC
0000fc  2207              MOVS     r2,#7
0000fe  4669              MOV      r1,sp
000100  2002              MOVS     r0,#2
000102  f7fffffe          BL       hym8563_i2c_set_regs
;;;257    	
;;;258    	return ret;
;;;259    }
000106  bd7c              POP      {r2-r6,pc}
;;;260    
                          ENDP

                  |L9.264|
000108  bdf1ccec          DCB      189,241,204,236,202,199," %d",186,197,"\n",0
00010c  cac72025
000110  64bac50a
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0
                  |L9.280|
000118  b1bed4c2          DCB      177,190,212,194,215,238,180,243,204,236,202,253," %d",204
00011c  d7eeb4f3
000120  cceccafd
000124  202564cc
000128  ec0a00            DCB      236,"\n",0
00012b  00                DCB      0
                  |L9.300|
00012c  bdf1ccec          DCB      189,241,204,236,208,199,198,218," %d\n",0
000130  d0c7c6da
000134  2025640a
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0

                          AREA ||i.is_leap_year||, CODE, READONLY, ALIGN=1

                  is_leap_year PROC
;;;40     
;;;41     static uint8_t is_leap_year(unsigned int year)
000000  0781              LSLS     r1,r0,#30
;;;42     {
000002  d105              BNE      |L10.16|
;;;43     	return ((!(year % 4) && (year % 100)) || !(year % 400));
000004  2164              MOVS     r1,#0x64
000006  fbb0f2f1          UDIV     r2,r0,r1
00000a  fb010112          MLS      r1,r1,r2,r0
00000e  b941              CBNZ     r1,|L10.34|
                  |L10.16|
000010  f44f71c8          MOV      r1,#0x190
000014  fbb0f2f1          UDIV     r2,r0,r1
000018  fb010012          MLS      r0,r1,r2,r0
00001c  b108              CBZ      r0,|L10.34|
00001e  2000              MOVS     r0,#0
;;;44     }
000020  4770              BX       lr
                  |L10.34|
000022  2001              MOVS     r0,#1                 ;43
000024  4770              BX       lr
;;;45     
                          ENDP


                          AREA ||i.rtc_month_days||, CODE, READONLY, ALIGN=2

                  rtc_month_days PROC
;;;49      */
;;;50     int rtc_month_days(unsigned int month, unsigned int year)
000000  b510              PUSH     {r4,lr}
;;;51     {
000002  4604              MOV      r4,r0
;;;52     	return rtc_days_in_month[month-1] + (is_leap_year(year) && month == 2);
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       is_leap_year
00000a  b108              CBZ      r0,|L11.16|
00000c  2c02              CMP      r4,#2
00000e  d006              BEQ      |L11.30|
                  |L11.16|
000010  2000              MOVS     r0,#0
                  |L11.18|
000012  4904              LDR      r1,|L11.36|
000014  4421              ADD      r1,r1,r4
000016  f8111c01          LDRB     r1,[r1,#-1]
00001a  4408              ADD      r0,r0,r1
;;;53     }
00001c  bd10              POP      {r4,pc}
                  |L11.30|
00001e  2001              MOVS     r0,#1                 ;52
000020  e7f7              B        |L11.18|
;;;54     
                          ENDP

000022  0000              DCW      0x0000
                  |L11.36|
                          DCD      ||.constdata||

                          AREA ||i.rtc_year_days||, CODE, READONLY, ALIGN=2

                  rtc_year_days PROC
;;;54     
;;;55     int rtc_year_days(unsigned int day, unsigned int month, unsigned int year)
000000  b570              PUSH     {r4-r6,lr}
;;;56     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;57     	return rtc_ydays[is_leap_year(year)][month] + day-1;
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       is_leap_year
00000c  eb000180          ADD      r1,r0,r0,LSL #2
000010  eb0100c0          ADD      r0,r1,r0,LSL #3
000014  4903              LDR      r1,|L12.36|
000016  1e64              SUBS     r4,r4,#1
000018  eb010040          ADD      r0,r1,r0,LSL #1
00001c  f8300015          LDRH     r0,[r0,r5,LSL #1]
000020  4420              ADD      r0,r0,r4
;;;58     }
000022  bd70              POP      {r4-r6,pc}
;;;59     
                          ENDP

                  |L12.36|
                          DCD      ||.constdata||+0xc

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  rtc_days_in_month
000000  1f1c1f1e          DCB      0x1f,0x1c,0x1f,0x1e
000004  1f1e1f1f          DCB      0x1f,0x1e,0x1f,0x1f
000008  1e1f1e1f          DCB      0x1e,0x1f,0x1e,0x1f
                  rtc_ydays
00000c  0000001f          DCW      0x0000,0x001f
000010  003b005a          DCW      0x003b,0x005a
000014  00780097          DCW      0x0078,0x0097
000018  00b500d4          DCW      0x00b5,0x00d4
00001c  00f30111          DCW      0x00f3,0x0111
000020  0130014e          DCW      0x0130,0x014e
000024  016d0000          DCW      0x016d,0x0000
000028  001f003c          DCW      0x001f,0x003c
00002c  005b0079          DCW      0x005b,0x0079
000030  009800b6          DCW      0x0098,0x00b6
000034  00d500f4          DCW      0x00d5,0x00f4
000038  01120131          DCW      0x0112,0x0131
00003c  014f016e          DCW      0x014f,0x016e

;*** Start embedded assembler ***

#line 1 "..\\..\\Complex\\hym8563\\hym8563.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_hym8563_c_6c3c3ecb____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_hym8563_c_6c3c3ecb____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_hym8563_c_6c3c3ecb____REVSH|
#line 153
|__asm___9_hym8563_c_6c3c3ecb____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_hym8563_c_6c3c3ecb____RRX|
#line 328
|__asm___9_hym8563_c_6c3c3ecb____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

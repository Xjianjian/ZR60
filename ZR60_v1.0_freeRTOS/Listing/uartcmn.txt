; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\uartcmn.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\uartcmn.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\uartcmn.crf ..\..\Ecal\UartComn\UartCmn.c]
                          THUMB

                          AREA ||i.GetUartCmn_u_RxIdle||, CODE, READONLY, ALIGN=2

                  GetUartCmn_u_RxIdle PROC
;;;342    ******************************************************/
;;;343    uint8 GetUartCmn_u_RxIdle(void)
000000  4803              LDR      r0,|L1.16|
;;;344    {
;;;345    	if(0U == Uart_RecMsg.RxBusyFlg)
000002  7880              LDRB     r0,[r0,#2]  ; Uart_RecMsg
000004  b108              CBZ      r0,|L1.10|
;;;346    	{
;;;347    		return 1U;
;;;348    	}
;;;349    	else
;;;350    	{
;;;351    		return 0U;
000006  2000              MOVS     r0,#0
;;;352    	}
;;;353    }
000008  4770              BX       lr
                  |L1.10|
00000a  2001              MOVS     r0,#1                 ;347
00000c  4770              BX       lr
;;;354    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      ||.bss||+0x27

                          AREA ||i.GetUartCmn_u_RxMsg||, CODE, READONLY, ALIGN=2

                  GetUartCmn_u_RxMsg PROC
;;;298    ******************************************************/
;;;299    void GetUartCmn_u_RxMsg(uint8* LeUartCmn_RxData)
000000  4a04              LDR      r2,|L2.20|
;;;300    { 
;;;301    	uint8 LeUartCmn_u_Index;
;;;302    	for(LeUartCmn_u_Index = 0U;LeUartCmn_u_Index < UARTCMN_RX_SCLD_LNG; LeUartCmn_u_Index++)
000002  2100              MOVS     r1,#0
                  |L2.4|
;;;303    	{
;;;304    		LeUartCmn_RxData[LeUartCmn_u_Index] = SaUartCmn_u_RxBuff[UARTCMN_RX_PCKTHEAD_LNG+LeUartCmn_u_Index];
000004  1853              ADDS     r3,r2,r1
000006  785b              LDRB     r3,[r3,#1]
000008  5443              STRB     r3,[r0,r1]
00000a  1c49              ADDS     r1,r1,#1
00000c  b2c9              UXTB     r1,r1                 ;302
00000e  293b              CMP      r1,#0x3b              ;302
000010  d3f8              BCC      |L2.4|
;;;305    	}
;;;306    }
000012  4770              BX       lr
;;;307    
                          ENDP

                  |L2.20|
                          DCD      ||.bss||+0x100

                          AREA ||i.GetUartCmn_u_RxMsgRenew||, CODE, READONLY, ALIGN=2

                  GetUartCmn_u_RxMsgRenew PROC
;;;242    ******************************************************/
;;;243    uint8 GetUartCmn_u_RxMsgRenew(void)
000000  b570              PUSH     {r4-r6,lr}
;;;244    {
;;;245    	uint8 LeUartCmn_u_Flg = 0U;
;;;246    	if(Uart_RecMsg.UartNewFlag == 1U)/*接收数据缓存区更新*/
000002  4910              LDR      r1,|L3.68|
000004  2000              MOVS     r0,#0                 ;245
000006  790a              LDRB     r2,[r1,#4]  ; Uart_RecMsg
000008  2a01              CMP      r2,#1
00000a  d119              BNE      |L3.64|
;;;247    	{
;;;248    		Uart_RecMsg.UartNewFlag = 0U;
00000c  2200              MOVS     r2,#0
00000e  f10103d9          ADD      r3,r1,#0xd9
000012  710a              STRB     r2,[r1,#4]
000014  78d9              LDRB     r1,[r3,#3]  ; SaUartCmn_u_RxBuff
000016  4616              MOV      r6,r2
000018  1cc9              ADDS     r1,r1,#3
00001a  b2cd              UXTB     r5,r1
00001c  4611              MOV      r1,r2
;;;249    		if(1U == GetUartCmn_u_XOR())/*校验通过*/
00001e  e004              B        |L3.42|
                  |L3.32|
000020  185c              ADDS     r4,r3,r1
000022  7864              LDRB     r4,[r4,#1]
000024  4062              EORS     r2,r2,r4
000026  1c49              ADDS     r1,r1,#1
000028  b2c9              UXTB     r1,r1
                  |L3.42|
00002a  42a9              CMP      r1,r5
00002c  d3f8              BCC      |L3.32|
00002e  43d1              MVNS     r1,r2
000030  f893203c          LDRB     r2,[r3,#0x3c]  ; SaUartCmn_u_RxBuff
000034  b2c9              UXTB     r1,r1
000036  428a              CMP      r2,r1
000038  d001              BEQ      |L3.62|
00003a  2e00              CMP      r6,#0
00003c  d000              BEQ      |L3.64|
                  |L3.62|
;;;250    		{
;;;251    			LeUartCmn_u_Flg =1U;/*接收数据更新标志置有效*/
00003e  2001              MOVS     r0,#1
                  |L3.64|
;;;252    		}
;;;253    	}
;;;254    	return LeUartCmn_u_Flg;
;;;255    }
000040  bd70              POP      {r4-r6,pc}
;;;256    
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      ||.bss||+0x27

                          AREA ||i.GetUartCmn_u_TxIdle||, CODE, READONLY, ALIGN=2

                  GetUartCmn_u_TxIdle PROC
;;;319    ******************************************************/
;;;320    uint8 GetUartCmn_u_TxIdle(void)
000000  4803              LDR      r0,|L4.16|
;;;321    {
;;;322    	if(0U == Uart_TxMsg.ucTxFlg)
000002  f890004a          LDRB     r0,[r0,#0x4a]  ; Uart_TxMsg
000006  b108              CBZ      r0,|L4.12|
;;;323    	{
;;;324    		return 1U;
;;;325    	}
;;;326    	else
;;;327    	{
;;;328    		return 0U;
000008  2000              MOVS     r0,#0
;;;329    	}
;;;330    }
00000a  4770              BX       lr
                  |L4.12|
00000c  2001              MOVS     r0,#1                 ;324
00000e  4770              BX       lr
;;;331    
                          ENDP

                  |L4.16|
                          DCD      ||.bss||+0x6a

                          AREA ||i.InitUartCmn_parameter||, CODE, READONLY, ALIGN=2

                  InitUartCmn_parameter PROC
;;;57     ******************************************************/
;;;58     void InitUartCmn_parameter(void)
000000  4904              LDR      r1,|L5.20|
;;;59     {
;;;60     	Uart_TxMsg.ucTxFlg = 0U;/*初始化置数据发送标志无效*/
000002  2000              MOVS     r0,#0
000004  f881004a          STRB     r0,[r1,#0x4a]
;;;61     	Uart_TxMsg.ucTxCnt = 0U;
000008  f8810049          STRB     r0,[r1,#0x49]
;;;62     	Uart_RecMsg.RxBusyFlg = 0U;/*初始化置数据接收忙标志无效*/
00000c  3943              SUBS     r1,r1,#0x43
00000e  7088              STRB     r0,[r1,#2]
;;;63     }
000010  4770              BX       lr
;;;64     
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      ||.bss||+0x6a

                          AREA ||i.SetUartCmn_BluetoothTxMsg||, CODE, READONLY, ALIGN=2

                  SetUartCmn_BluetoothTxMsg PROC
;;;458    ******************************************************/
;;;459    void SetUartCmn_BluetoothTxMsg(char* LeUartCmn_u_TxData,uint8 LeUartCmn_u_Lng)
000000  b430              PUSH     {r4,r5}
;;;460    {
;;;461    	uint8 LeUartCmn_u_Index;
;;;462    	for(LeUartCmn_u_Index = 0U;LeUartCmn_u_Index < LeUartCmn_u_Lng;LeUartCmn_u_Index++)
000002  2200              MOVS     r2,#0
;;;463    	{
;;;464    		Uart_BluetoothTxMsg.ucTxData[LeUartCmn_u_Index] = LeUartCmn_u_TxData[LeUartCmn_u_Index];
000004  4b09              LDR      r3,|L6.44|
000006  e003              B        |L6.16|
                  |L6.8|
000008  5c84              LDRB     r4,[r0,r2]
00000a  549c              STRB     r4,[r3,r2]
00000c  1c52              ADDS     r2,r2,#1
00000e  b2d2              UXTB     r2,r2                 ;462
                  |L6.16|
000010  428a              CMP      r2,r1                 ;462
000012  d3f9              BCC      |L6.8|
;;;465    	}
;;;466    	Uart_BluetoothTxMsg.ucLength = LeUartCmn_u_Lng;
000014  f8031f48          STRB     r1,[r3,#0x48]!
;;;467    	Uart_BluetoothTxMsg.ucTxFlg = 1U;/*置发送标志有效*/
000018  2001              MOVS     r0,#1
00001a  7098              STRB     r0,[r3,#2]
;;;468    	//USART_SendData(UART5,Uart_BluetoothTxMsg.ucTxData[Uart_BluetoothTxMsg.ucTxCnt]);/* 发送数据场 */
;;;469    	//Uart_BluetoothTxMsg.ucTxCnt++;	
;;;470    	//USART_ITConfig(UART5_USART, USART_IT_RXNE, DISABLE);/* 关闭接收中断请求 */
;;;471    	//(UART5->CR1 &= (uint8_t)(~USART_Mode_Rx));/* 禁止接收 */
;;;472    	USART_ITConfig(UART5, USART_IT_TXE, ENABLE);/* 使能发送寄存器空中断 */
00001c  4602              MOV      r2,r0
00001e  bc30              POP      {r4,r5}
000020  f2407127          MOV      r1,#0x727
000024  4802              LDR      r0,|L6.48|
000026  f7ffbffe          B.W      USART_ITConfig
;;;473    	//(UART5->CR1 |= (uint8_t)USART_Mode_Tx);/* 允许发送 */
;;;474    	//DISABLE_RIEN;/* 关闭接收中断请求 */
;;;475    	//DISABLE_REN; /* 禁止接收 */
;;;476    	//ENABLE_TEN; /* 允许发送 */
;;;477    	//ENABLE_TIEN;/* 使能发送寄存器空中断 */		
;;;478    }
;;;479    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      ||.bss||+0xb5
                  |L6.48|
                          DCD      0x40005000

                          AREA ||i.SetUartCmn_TxMsg||, CODE, READONLY, ALIGN=2

                  SetUartCmn_TxMsg PROC
;;;366    ******************************************************/
;;;367    void SetUartCmn_TxMsg(uint8* LeUartCmn_u_TxData,uint8 LeUartCmn_u_Lng)
000000  b430              PUSH     {r4,r5}
;;;368    {
;;;369    	uint8 LeUartCmn_u_Index;
;;;370    	//Uart_TxMsg.ucTxData[0U] = UARTCMN_TX_HEADER;
;;;371    	for(LeUartCmn_u_Index = 0U;LeUartCmn_u_Index < LeUartCmn_u_Lng;LeUartCmn_u_Index++)
000002  2200              MOVS     r2,#0
;;;372    	{
;;;373    		Uart_TxMsg.ucTxData[LeUartCmn_u_Index] = LeUartCmn_u_TxData[LeUartCmn_u_Index];
000004  4b0c              LDR      r3,|L7.56|
000006  e003              B        |L7.16|
                  |L7.8|
000008  5c84              LDRB     r4,[r0,r2]
00000a  549c              STRB     r4,[r3,r2]
00000c  1c52              ADDS     r2,r2,#1
00000e  b2d2              UXTB     r2,r2                 ;371
                  |L7.16|
000010  428a              CMP      r2,r1                 ;371
000012  d3f9              BCC      |L7.8|
;;;374    	}
;;;375    	//Uart_TxMsg.ucTxData[1+LeUartCmn_u_Lng] = UARTCMN_TX_ETC;
;;;376    	Uart_TxMsg.ucLength = LeUartCmn_u_Lng;
000014  f8031f48          STRB     r1,[r3,#0x48]!
;;;377    	Uart_TxMsg.ucTxFlg = 1U;/*置发送标志有效*/
000018  2001              MOVS     r0,#1
00001a  7098              STRB     r0,[r3,#2]
;;;378    	//DISABLE_RIEN;/* 关闭接收中断请求 */
;;;379    	//DISABLE_REN; /* 禁止接收 */
;;;380    	ENABLE_TEN; /* 允许发送 */
00001c  4807              LDR      r0,|L7.60|
00001e  8801              LDRH     r1,[r0,#0]
000020  f0410108          ORR      r1,r1,#8
000024  8001              STRH     r1,[r0,#0]
;;;381    	ENABLE_TIEN;/* 使能发送寄存器空中断 */		
000026  4805              LDR      r0,|L7.60|
000028  2201              MOVS     r2,#1
00002a  bc30              POP      {r4,r5}
00002c  f2407127          MOV      r1,#0x727
000030  380c              SUBS     r0,r0,#0xc
000032  f7ffbffe          B.W      USART_ITConfig
;;;382    }
;;;383    
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      ||.bss||+0x6a
                  |L7.60|
                          DCD      0x4000480c

                          AREA ||i.UartCmn_Rx_BleMsg||, CODE, READONLY, ALIGN=2

                  UartCmn_Rx_BleMsg PROC
;;;524    
;;;525    void UartCmn_Rx_BleMsg(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;526    {
;;;527    	uint8_t i,j;
;;;528    	uint8 Buff;
;;;529    	if(USART_GetFlagStatus(UART5,UARTCMN_FLAG_OE)  || USART_GetFlagStatus(UART5,UARTCMN_FLAG_FE))/* 帧错误标志位 或者 数据溢出标志位 */
000004  4ec9              LDR      r6,|L8.812|
000006  2108              MOVS     r1,#8
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       USART_GetFlagStatus
;;;530    	{
;;;531    		Buff = USART_ReceiveData(UART5);/* 清除Break段数据及帧错误数据 */ 
;;;532    		blenum = 0;
00000e  4cc8              LDR      r4,|L8.816|
000010  2500              MOVS     r5,#0                 ;529
000012  b920              CBNZ     r0,|L8.30|
000014  2102              MOVS     r1,#2                 ;529
000016  4630              MOV      r0,r6                 ;529
000018  f7fffffe          BL       USART_GetFlagStatus
00001c  b128              CBZ      r0,|L8.42|
                  |L8.30|
00001e  4630              MOV      r0,r6                 ;531
000020  f7fffffe          BL       USART_ReceiveData
000024  7025              STRB     r5,[r4,#0]
                  |L8.38|
;;;533    	}				
;;;534    	else if (USART_GetFlagStatus(UART5,UARTCMN_FLAG_RXNE))/* 接受数据寄存器满标志位 */
;;;535    	{
;;;536    		Buff = USART_ReceiveData(UART5); 
;;;537    		switch(RcvFlag)
;;;538    		{
;;;539    			case 0U:
;;;540    			{
;;;541    				if(Buff == 'O')
;;;542    				{
;;;543    					BleTemp[blenum] = Buff;
;;;544    					blenum++;
;;;545    					RcvFlag = 1U;
;;;546    				}
;;;547    			}
;;;548    			break;
;;;549    			case 1U:
;;;550    			{
;;;551    				if(Buff == 'K')
;;;552    				{
;;;553    					BleTemp[blenum] = Buff;
;;;554    					blenum++;
;;;555    					RcvFlag = 2U;
;;;556    				}	
;;;557    				else
;;;558    				{
;;;559    					blenum = 0U;
;;;560    					RcvFlag = 0U;
;;;561    				}
;;;562    			}
;;;563    			break;
;;;564    			case 2U:
;;;565    			{
;;;566    				if(Buff == '+')
;;;567    				{
;;;568    					BleTemp[blenum] = Buff;
;;;569    					blenum++;
;;;570    					RcvFlag = 3U;
;;;571    				}	
;;;572    				else
;;;573    				{
;;;574    					blenum = 0U;
;;;575    					RcvFlag = 0U;
;;;576    				}
;;;577    			}
;;;578    			break;
;;;579    			case 3U:
;;;580    			{
;;;581    				if(Buff == 'D')
;;;582    				{
;;;583    					BleTemp[blenum] = Buff;
;;;584    					blenum++;
;;;585    					RcvFlag = 4U;
;;;586    				}	
;;;587    				else if(Buff == 'A')//准备接收MAC地址
;;;588    				{
;;;589    					BleTemp[blenum] = Buff;
;;;590    					blenum++;
;;;591    					RcvFlag = 12U;
;;;592    				}
;;;593    				else
;;;594    				{
;;;595    					blenum = 0U;
;;;596    					RcvFlag = 0U;
;;;597    				}
;;;598    			}
;;;599    			break;
;;;600    			case 4U:
;;;601    			{
;;;602    				if(Buff == 'I')
;;;603    				{
;;;604    					BleTemp[blenum] = Buff;
;;;605    					blenum++;
;;;606    					RcvFlag = 5U;
;;;607    				}	
;;;608    				else
;;;609    				{
;;;610    					blenum = 0U;
;;;611    					RcvFlag = 0U;
;;;612    				}
;;;613    			}
;;;614    			break;
;;;615    			case 5U:
;;;616    			{
;;;617    				if(Buff == 'S')
;;;618    				{
;;;619    					BleTemp[blenum] = Buff;
;;;620    					blenum++;
;;;621    					RcvFlag = 6U;
;;;622    				}	
;;;623    				else
;;;624    				{
;;;625    					blenum = 0U;
;;;626    					RcvFlag = 0U;
;;;627    				}
;;;628    			}
;;;629    			break;
;;;630    			case 6U:
;;;631    			{
;;;632    				switch(Buff)
;;;633    				{
;;;634    					case 'A'://蓝牙扫描：准备接收有效数据
;;;635    					{
;;;636    						BleTemp[blenum] = Buff;
;;;637    						blenum++;
;;;638    						RcvFlag = 7U;
;;;639    					}
;;;640    					break;
;;;641    					case 'C'://蓝牙扫描：准备接收开始或结束数据帧
;;;642    					{
;;;643    						BleTemp[blenum] = Buff;
;;;644    						blenum++;
;;;645    						RcvFlag = 11U;
;;;646    					}
;;;647    					break;
;;;648    					default:
;;;649    					{
;;;650    						blenum = 0U;
;;;651    						RcvFlag = 0U;
;;;652    					}
;;;653    					break;
;;;654    				}
;;;655    			}
;;;656    			break;
;;;657    			case 7U:
;;;658    			{
;;;659    				if(Buff == ':')//有效数据头接收完成
;;;660    				{
;;;661    					BleTemp[blenum] = Buff;
;;;662    					blenum++;
;;;663    					RcvFlag = 8U;
;;;664    				}	
;;;665    				else
;;;666    				{
;;;667    					blenum = 0U;
;;;668    					RcvFlag = 0U;
;;;669    				}
;;;670    			}
;;;671    			break;
;;;672    			case 8U://接收P1~P4,9 Byte
;;;673    			{
;;;674    				BleTemp[blenum] = Buff;
;;;675    				blenum++;
;;;676    				if(blenum == 17)
;;;677    				{
;;;678    					if((17+BleTemp[16]) < 120U)
;;;679    					{
;;;680    						RcvFlag = 9U;
;;;681    					}
;;;682    					else
;;;683    					{//接收溢出错误
;;;684    						blenum = 0;
;;;685    						RcvFlag = 0U;
;;;686    					}
;;;687    				}
;;;688    			}
;;;689    			break;
;;;690    			case 9U://接收Reset DATA
;;;691    			{
;;;692    				BleTemp[blenum] = Buff;
;;;693    				blenum++;
;;;694    				if(blenum == (17+BleTemp[16]))//蓝牙扫描数据接收完成
;;;695    				{
;;;696    					RcvFlag = 10U;
;;;697    				}
;;;698    			}
;;;699    			break;
;;;700    			case 10U://接收完成处理（一帧数据以'\n'结束，接收到'\n'后对一帧数据处理）
;;;701    			{
;;;702    				switch(BleTemp[16])
;;;703    				{
;;;704    					case 0x1D:
;;;705    					{
;;;706    						if( (BleTemp[17] == 0x02) && (BleTemp[20] == 0x09) && (BleTemp[22] == 0x57) && (BleTemp[23] == 0x5A) && (BleTemp[30] == 0x05) && (BleTemp[31] == 0x03) && (BleTemp[36] == 0x09))
;;;707    						{					
;;;708    							for(i = 0;i < 6;i++)
;;;709    							{
;;;710    								BleValue[i] = BleTemp[40+i];
;;;711    							}
;;;712    							ble_flag = 1;
;;;713    						}
;;;714    					}
;;;715    					break;
;;;716    					case 0x08:	
;;;717    					{
;;;718    						if((BleTemp[17] == 0x07) && (BleTemp[18] == 0x09))
;;;719    						{
;;;720    							for(i = 0;i < 6;i++)
;;;721    							{
;;;722    								BleValue[i] = BleTemp[19+i];
;;;723    							}
;;;724    							ble_flag = 1;
;;;725    						}
;;;726    					}
;;;727    					break;
;;;728    					case 0x18:
;;;729    					{
;;;730    						if(BleTemp[17] == 0x11)
;;;731    						{
;;;732    							if(strncmp(BleTemp+19,"IT",2) == 0 || strncmp(BleTemp+19,"TL",2) == 0)
;;;733    							{
;;;734    								strncpy(timelist,BleTemp+21,14);
;;;735    								set_time_flag = 1;
;;;736    							}
;;;737    						}
;;;738    					}
;;;739    					break;
;;;740    					case 0x12:
;;;741    					{
;;;742    						if((BleTemp[17] == 0x11) && (BleTemp[18] == 0x09))
;;;743    						{
;;;744    							if(strncmp(BleTemp+19,"TI",2) == 0 || strncmp(BleTemp+19,"LT",2) == 0)
;;;745    							{
;;;746    								strncpy(timelist,BleTemp+21,14);
;;;747    								set_time_flag = 1;
;;;748    							}
;;;749    						}
;;;750    					}
;;;751    					break;
;;;752    					case 0x1E://接收uuid
;;;753    					{
;;;754    						if((BleTemp[26] == 0x00) && (BleTemp[27] == 0x0A))
;;;755    						{
;;;756    							if(BleTemp[30] == 0x52)
;;;757    							{//表示接收到手机号码数字1,有效的手机号
;;;758    								for(i = 0;i < 11U;i++)
;;;759    								{
;;;760    									Se_u_PhoneNum[i] = BleTemp[30+i];
;;;761    								}
;;;762    								Se_u_PhoneNumFlg = 1;
;;;763    							}
;;;764    						}
;;;765    					}
;;;766    					break;
;;;767    					default:
;;;768    					{
;;;769    						for(i = 0;i< BleTemp[16];i++)
;;;770    						{
;;;771    							if((BleTemp[17+i] == 0x09) && (BleTemp[18+i] == 0xFF) && (BleTemp[19+i] == 0x57) && (BleTemp[20+i] == 0x5A ))
;;;772    							{
;;;773    								for(j = 0;j < 6;j++)
;;;774    								{
;;;775    									BleValue[j] = BleTemp[21+j];
;;;776    								}
;;;777    								ble_flag = 1;
;;;778    								break;
;;;779    							}
;;;780    						}
;;;781    					}
;;;782    					break;				 					
;;;783    				}
;;;784    				blenum = 0;
;;;785    				RcvFlag = 0U;
;;;786    			}
;;;787    			break;
;;;788    			case 11U:
;;;789    			{
;;;790    				switch(Buff)
;;;791    				{
;;;792    					case 'S'://收到开始字符串
;;;793    					{
;;;794    						blenum = 0U;
;;;795    						RcvFlag = 0U;
;;;796    					}
;;;797    					break;
;;;798    					case 'E'://收到结束字符串
;;;799    					{
;;;800    						blenum = 0U;
;;;801    						RcvFlag = 0U;
;;;802    						ClrZR60Ctrl_BleSt();
;;;803    					}
;;;804    					break;
;;;805    					default:
;;;806    					{
;;;807    						blenum = 0U;
;;;808    						RcvFlag = 0U;
;;;809    					}
;;;810    					break;
;;;811    				}
;;;812    			}
;;;813    			break;
;;;814    			case 12U://case 12~case 16接收MAC地址
;;;815    			{
;;;816    				if(Buff == 'D')
;;;817    				{
;;;818    					BleTemp[blenum] = Buff;
;;;819    					blenum++;
;;;820    					RcvFlag = 13U;
;;;821    				}	
;;;822    				else
;;;823    				{
;;;824    					blenum = 0U;
;;;825    					RcvFlag = 0U;
;;;826    				}
;;;827    			}
;;;828    			break;
;;;829    			case 13U://case 12~case 16接收MAC地址
;;;830    			{
;;;831    				if(Buff == 'D')
;;;832    				{
;;;833    					BleTemp[blenum] = Buff;
;;;834    					blenum++;
;;;835    					RcvFlag = 14U;
;;;836    				}	
;;;837    				else
;;;838    				{
;;;839    					blenum = 0U;
;;;840    					RcvFlag = 0U;
;;;841    				}
;;;842    			}
;;;843    			break;
;;;844    			case 14U://case 12~case 16接收MAC地址
;;;845    			{
;;;846    				if(Buff == 'R')
;;;847    				{
;;;848    					BleTemp[blenum] = Buff;
;;;849    					blenum++;
;;;850    					RcvFlag = 15U;
;;;851    				}	
;;;852    				else
;;;853    				{
;;;854    					blenum = 0U;
;;;855    					RcvFlag = 0U;
;;;856    				}
;;;857    			}
;;;858    			break;
;;;859    			case 15U://case 12~case 16接收MAC地址
;;;860    			{
;;;861    				if(Buff == ':')
;;;862    				{//准备接收MAC地址
;;;863    					blenum = 0U;
;;;864    					RcvFlag = 16U;
;;;865    				}	
;;;866    				else
;;;867    				{
;;;868    					blenum = 0U;
;;;869    					RcvFlag = 0U;
;;;870    				}
;;;871    			}
;;;872    			break;
;;;873    			case 16U://接收6Byte MAC地址
;;;874    			{
;;;875    				//BleTemp[blenum] = Buff;
;;;876    				DeviceInit.Blemac[blenum] = Buff;
;;;877    				if((Buff>= '0') &&(Buff <='9'))
;;;878    				{
;;;879    					Se_u_MacAddr[blenum++] = Buff-0x30;
;;;880    				}
;;;881    				else
;;;882    				{
;;;883    					Se_u_MacAddr[blenum++] = Buff-0x37;
;;;884    				}
;;;885    				if(blenum ==  12U)
;;;886    				{
;;;887    					DeviceInit.Blemac[blenum] = '\0';
;;;888    					Se_u_BleMacFlg = 1U;
;;;889    					blenum = 0U;
;;;890    					RcvFlag = 0U;
;;;891    				}
;;;892    			}
;;;893    			break;
;;;894    			default:
;;;895    			{
;;;896    				blenum = 0;
;;;897    				RcvFlag = 0U;
;;;898    			}
;;;899    			break;
;;;900    		}
;;;901    	}
;;;902    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L8.42|
00002a  2120              MOVS     r1,#0x20              ;534
00002c  4630              MOV      r0,r6                 ;534
00002e  f7fffffe          BL       USART_GetFlagStatus
000032  2800              CMP      r0,#0                 ;534
000034  d0f7              BEQ      |L8.38|
000036  4630              MOV      r0,r6                 ;536
000038  f7fffffe          BL       USART_ReceiveData
00003c  78e2              LDRB     r2,[r4,#3]            ;537  ; RcvFlag
00003e  b2c0              UXTB     r0,r0                 ;536
000040  2601              MOVS     r6,#1                 ;545
000042  49bc              LDR      r1,|L8.820|
000044  2a11              CMP      r2,#0x11              ;537
000046  d229              BCS      |L8.156|
000048  e8dff002          TBB      [pc,r2]               ;537
00004c  09121b24          DCB      0x09,0x12,0x1b,0x24
000050  3740495c          DCB      0x37,0x40,0x49,0x5c
000054  65737ff3          DCB      0x65,0x73,0x7f,0xf3
000058  f2f1f0ef          DCB      0xf2,0xf1,0xf0,0xef
00005c  ee00              DCB      0xee,0x00
00005e  284f              CMP      r0,#0x4f              ;541
000060  d1e1              BNE      |L8.38|
000062  7822              LDRB     r2,[r4,#0]            ;543  ; blenum
000064  5488              STRB     r0,[r1,r2]            ;543
000066  7820              LDRB     r0,[r4,#0]            ;544  ; blenum
000068  1c40              ADDS     r0,r0,#1              ;544
00006a  7020              STRB     r0,[r4,#0]            ;544
00006c  70e6              STRB     r6,[r4,#3]            ;545
                  |L8.110|
00006e  e7da              B        |L8.38|
000070  284b              CMP      r0,#0x4b              ;551
                  |L8.114|
000072  d113              BNE      |L8.156|
000074  7822              LDRB     r2,[r4,#0]            ;553  ; blenum
000076  5488              STRB     r0,[r1,r2]            ;553
000078  7820              LDRB     r0,[r4,#0]            ;554  ; blenum
00007a  1c40              ADDS     r0,r0,#1              ;554
00007c  7020              STRB     r0,[r4,#0]            ;554
00007e  2002              MOVS     r0,#2                 ;555
000080  e12f              B        |L8.738|
000082  282b              CMP      r0,#0x2b              ;566
000084  d1f5              BNE      |L8.114|
000086  7822              LDRB     r2,[r4,#0]            ;568  ; blenum
000088  5488              STRB     r0,[r1,r2]            ;568
00008a  7820              LDRB     r0,[r4,#0]            ;569  ; blenum
00008c  1c40              ADDS     r0,r0,#1              ;569
00008e  7020              STRB     r0,[r4,#0]            ;569
000090  2003              MOVS     r0,#3                 ;570
000092  e126              B        |L8.738|
000094  2844              CMP      r0,#0x44              ;581
000096  d002              BEQ      |L8.158|
000098  2841              CMP      r0,#0x41              ;587
00009a  d007              BEQ      |L8.172|
                  |L8.156|
00009c  e123              B        |L8.742|
                  |L8.158|
00009e  7822              LDRB     r2,[r4,#0]            ;583  ; blenum
0000a0  5488              STRB     r0,[r1,r2]            ;583
0000a2  7820              LDRB     r0,[r4,#0]            ;584  ; blenum
0000a4  1c40              ADDS     r0,r0,#1              ;584
0000a6  7020              STRB     r0,[r4,#0]            ;584
0000a8  2004              MOVS     r0,#4                 ;585
0000aa  e11a              B        |L8.738|
                  |L8.172|
0000ac  7822              LDRB     r2,[r4,#0]            ;589  ; blenum
0000ae  5488              STRB     r0,[r1,r2]            ;589
0000b0  7820              LDRB     r0,[r4,#0]            ;590  ; blenum
0000b2  1c40              ADDS     r0,r0,#1              ;590
0000b4  7020              STRB     r0,[r4,#0]            ;590
0000b6  200c              MOVS     r0,#0xc               ;591
0000b8  e113              B        |L8.738|
0000ba  2849              CMP      r0,#0x49              ;602
0000bc  d1ee              BNE      |L8.156|
0000be  7822              LDRB     r2,[r4,#0]            ;604  ; blenum
0000c0  5488              STRB     r0,[r1,r2]            ;604
0000c2  7820              LDRB     r0,[r4,#0]            ;605  ; blenum
0000c4  1c40              ADDS     r0,r0,#1              ;605
0000c6  7020              STRB     r0,[r4,#0]            ;605
0000c8  2005              MOVS     r0,#5                 ;606
0000ca  e10a              B        |L8.738|
0000cc  2853              CMP      r0,#0x53              ;617
0000ce  d1e5              BNE      |L8.156|
0000d0  7822              LDRB     r2,[r4,#0]            ;619  ; blenum
0000d2  5488              STRB     r0,[r1,r2]            ;619
0000d4  7820              LDRB     r0,[r4,#0]            ;620  ; blenum
0000d6  1c40              ADDS     r0,r0,#1              ;620
0000d8  7020              STRB     r0,[r4,#0]            ;620
0000da  2006              MOVS     r0,#6                 ;621
0000dc  e101              B        |L8.738|
0000de  2841              CMP      r0,#0x41              ;632
0000e0  d002              BEQ      |L8.232|
0000e2  2843              CMP      r0,#0x43              ;632
0000e4  d1da              BNE      |L8.156|
0000e6  e006              B        |L8.246|
                  |L8.232|
0000e8  7822              LDRB     r2,[r4,#0]            ;636  ; blenum
0000ea  5488              STRB     r0,[r1,r2]            ;636
0000ec  7820              LDRB     r0,[r4,#0]            ;637  ; blenum
0000ee  1c40              ADDS     r0,r0,#1              ;637
0000f0  7020              STRB     r0,[r4,#0]            ;637
0000f2  2007              MOVS     r0,#7                 ;638
0000f4  e0f5              B        |L8.738|
                  |L8.246|
0000f6  7822              LDRB     r2,[r4,#0]            ;643  ; blenum
0000f8  5488              STRB     r0,[r1,r2]            ;643
0000fa  7820              LDRB     r0,[r4,#0]            ;644  ; blenum
0000fc  1c40              ADDS     r0,r0,#1              ;644
0000fe  7020              STRB     r0,[r4,#0]            ;644
000100  200b              MOVS     r0,#0xb               ;645
000102  e0ee              B        |L8.738|
000104  283a              CMP      r0,#0x3a              ;659
000106  d1c9              BNE      |L8.156|
000108  7822              LDRB     r2,[r4,#0]            ;661  ; blenum
00010a  5488              STRB     r0,[r1,r2]            ;661
00010c  7820              LDRB     r0,[r4,#0]            ;662  ; blenum
00010e  1c40              ADDS     r0,r0,#1              ;662
000110  7020              STRB     r0,[r4,#0]            ;662
000112  2008              MOVS     r0,#8                 ;663
000114  e0e5              B        |L8.738|
000116  7822              LDRB     r2,[r4,#0]            ;674  ; blenum
000118  5488              STRB     r0,[r1,r2]            ;674
00011a  7820              LDRB     r0,[r4,#0]            ;675  ; blenum
00011c  1c40              ADDS     r0,r0,#1              ;675
00011e  7020              STRB     r0,[r4,#0]            ;675
000120  7820              LDRB     r0,[r4,#0]            ;676  ; blenum
000122  2811              CMP      r0,#0x11              ;676
000124  d1a3              BNE      |L8.110|
000126  7c08              LDRB     r0,[r1,#0x10]         ;678  ; BleTemp
000128  3011              ADDS     r0,r0,#0x11           ;678
00012a  2878              CMP      r0,#0x78              ;678
00012c  d2b6              BCS      |L8.156|
00012e  2009              MOVS     r0,#9                 ;680
000130  e0d7              B        |L8.738|
000132  7822              LDRB     r2,[r4,#0]            ;692  ; blenum
000134  5488              STRB     r0,[r1,r2]            ;692
000136  7820              LDRB     r0,[r4,#0]            ;693  ; blenum
000138  1c40              ADDS     r0,r0,#1              ;693
00013a  7020              STRB     r0,[r4,#0]            ;693
00013c  7c08              LDRB     r0,[r1,#0x10]         ;694  ; BleTemp
00013e  7821              LDRB     r1,[r4,#0]            ;694  ; blenum
000140  3011              ADDS     r0,r0,#0x11           ;694
000142  4288              CMP      r0,r1                 ;694
000144  d193              BNE      |L8.110|
000146  200a              MOVS     r0,#0xa               ;696
000148  e0cb              B        |L8.738|
00014a  4f7a              LDR      r7,|L8.820|
00014c  4a78              LDR      r2,|L8.816|
00014e  f891c010          LDRB     r12,[r1,#0x10]        ;702  ; BleTemp
000152  f1070815          ADD      r8,r7,#0x15           ;734
000156  1d92              ADDS     r2,r2,#6              ;710
000158  3713              ADDS     r7,r7,#0x13           ;710
00015a  f1bc0f18          CMP      r12,#0x18             ;702
00015e  d03e              BEQ      |L8.478|
000160  dc06              BGT      |L8.368|
000162  f1bc0f08          CMP      r12,#8                ;702
000166  d02b              BEQ      |L8.448|
000168  f1bc0f12          CMP      r12,#0x12             ;702
00016c  d106              BNE      |L8.380|
00016e  e042              B        |L8.502|
                  |L8.368|
000170  f1bc0f1d          CMP      r12,#0x1d             ;702
000174  d004              BEQ      |L8.384|
000176  f1bc0f1e          CMP      r12,#0x1e             ;702
00017a  d05b              BEQ      |L8.564|
                  |L8.380|
00017c  2000              MOVS     r0,#0                 ;769
00017e  e07c              B        |L8.634|
                  |L8.384|
000180  7c48              LDRB     r0,[r1,#0x11]         ;706  ; BleTemp
000182  2802              CMP      r0,#2                 ;706
000184  d14f              BNE      |L8.550|
000186  7d08              LDRB     r0,[r1,#0x14]         ;706  ; BleTemp
000188  2809              CMP      r0,#9                 ;706
00018a  d14c              BNE      |L8.550|
00018c  7d88              LDRB     r0,[r1,#0x16]         ;706  ; BleTemp
00018e  2857              CMP      r0,#0x57              ;706
000190  d149              BNE      |L8.550|
000192  7dc8              LDRB     r0,[r1,#0x17]         ;706  ; BleTemp
000194  285a              CMP      r0,#0x5a              ;706
000196  d146              BNE      |L8.550|
000198  7f88              LDRB     r0,[r1,#0x1e]         ;706  ; BleTemp
00019a  2805              CMP      r0,#5                 ;706
00019c  d143              BNE      |L8.550|
00019e  7fc8              LDRB     r0,[r1,#0x1f]         ;706  ; BleTemp
0001a0  2803              CMP      r0,#3                 ;706
0001a2  d140              BNE      |L8.550|
0001a4  f8910024          LDRB     r0,[r1,#0x24]         ;706  ; BleTemp
0001a8  2809              CMP      r0,#9                 ;706
0001aa  d13c              BNE      |L8.550|
0001ac  2000              MOVS     r0,#0                 ;708
                  |L8.430|
0001ae  180b              ADDS     r3,r1,r0              ;710
0001b0  f8933028          LDRB     r3,[r3,#0x28]         ;710
0001b4  5413              STRB     r3,[r2,r0]            ;710
0001b6  1c40              ADDS     r0,r0,#1              ;710
0001b8  b2c0              UXTB     r0,r0                 ;708
0001ba  2806              CMP      r0,#6                 ;708
0001bc  d3f7              BCC      |L8.430|
0001be  e067              B        |L8.656|
                  |L8.448|
0001c0  7c48              LDRB     r0,[r1,#0x11]         ;718  ; BleTemp
0001c2  2807              CMP      r0,#7                 ;718
0001c4  d12f              BNE      |L8.550|
0001c6  7c88              LDRB     r0,[r1,#0x12]         ;718  ; BleTemp
0001c8  2809              CMP      r0,#9                 ;718
0001ca  d12c              BNE      |L8.550|
0001cc  2000              MOVS     r0,#0                 ;720
                  |L8.462|
0001ce  180b              ADDS     r3,r1,r0              ;722
0001d0  7cdb              LDRB     r3,[r3,#0x13]         ;722
0001d2  5413              STRB     r3,[r2,r0]            ;722
0001d4  1c40              ADDS     r0,r0,#1              ;722
0001d6  b2c0              UXTB     r0,r0                 ;720
0001d8  2806              CMP      r0,#6                 ;720
0001da  d3f8              BCC      |L8.462|
0001dc  e058              B        |L8.656|
                  |L8.478|
0001de  7c48              LDRB     r0,[r1,#0x11]         ;730  ; BleTemp
0001e0  2811              CMP      r0,#0x11              ;730
0001e2  d120              BNE      |L8.550|
0001e4  2202              MOVS     r2,#2                 ;732
0001e6  a154              ADR      r1,|L8.824|
0001e8  4638              MOV      r0,r7                 ;732
0001ea  f7fffffe          BL       strncmp
0001ee  b1a0              CBZ      r0,|L8.538|
0001f0  2202              MOVS     r2,#2                 ;732
0001f2  a152              ADR      r1,|L8.828|
0001f4  e00d              B        |L8.530|
                  |L8.502|
0001f6  7c48              LDRB     r0,[r1,#0x11]         ;742  ; BleTemp
0001f8  2811              CMP      r0,#0x11              ;742
0001fa  d174              BNE      |L8.742|
0001fc  7c88              LDRB     r0,[r1,#0x12]         ;742  ; BleTemp
0001fe  2809              CMP      r0,#9                 ;742
000200  d171              BNE      |L8.742|
000202  2202              MOVS     r2,#2                 ;744
000204  a14e              ADR      r1,|L8.832|
000206  4638              MOV      r0,r7                 ;744
000208  f7fffffe          BL       strncmp
00020c  b128              CBZ      r0,|L8.538|
00020e  2202              MOVS     r2,#2                 ;744
000210  a14c              ADR      r1,|L8.836|
                  |L8.530|
000212  4638              MOV      r0,r7                 ;744
000214  f7fffffe          BL       strncmp
000218  b928              CBNZ     r0,|L8.550|
                  |L8.538|
00021a  220e              MOVS     r2,#0xe               ;746
00021c  4641              MOV      r1,r8                 ;746
00021e  484a              LDR      r0,|L8.840|
000220  f7fffffe          BL       strncpy
000224  70a6              STRB     r6,[r4,#2]            ;747
                  |L8.550|
000226  e05e              B        |L8.742|
000228  e060              B        |L8.748|
00022a  e056              B        |L8.730|
00022c  e04c              B        |L8.712|
00022e  e042              B        |L8.694|
000230  e038              B        |L8.676|
000232  e02f              B        |L8.660|
                  |L8.564|
000234  7e88              LDRB     r0,[r1,#0x1a]         ;754  ; BleTemp
000236  bb10              CBNZ     r0,|L8.638|
000238  7ec8              LDRB     r0,[r1,#0x1b]         ;754  ; BleTemp
00023a  280a              CMP      r0,#0xa               ;754
00023c  d153              BNE      |L8.742|
00023e  7f88              LDRB     r0,[r1,#0x1e]         ;756  ; BleTemp
000240  2852              CMP      r0,#0x52              ;756
000242  d150              BNE      |L8.742|
000244  4a40              LDR      r2,|L8.840|
000246  2000              MOVS     r0,#0                 ;758
000248  321b              ADDS     r2,r2,#0x1b           ;760
                  |L8.586|
00024a  180b              ADDS     r3,r1,r0              ;760
00024c  7f9b              LDRB     r3,[r3,#0x1e]         ;760
00024e  5413              STRB     r3,[r2,r0]            ;760
000250  1c40              ADDS     r0,r0,#1              ;760
000252  b2c0              UXTB     r0,r0                 ;758
000254  280b              CMP      r0,#0xb               ;758
000256  d3f8              BCC      |L8.586|
000258  7166              STRB     r6,[r4,#5]            ;762
00025a  e044              B        |L8.742|
                  |L8.604|
00025c  180b              ADDS     r3,r1,r0              ;771
00025e  7c5f              LDRB     r7,[r3,#0x11]         ;771
000260  2f09              CMP      r7,#9                 ;771
000262  d108              BNE      |L8.630|
000264  7c9f              LDRB     r7,[r3,#0x12]         ;771
000266  2fff              CMP      r7,#0xff              ;771
000268  d105              BNE      |L8.630|
00026a  7cdf              LDRB     r7,[r3,#0x13]         ;771
00026c  2f57              CMP      r7,#0x57              ;771
00026e  d102              BNE      |L8.630|
000270  7d1b              LDRB     r3,[r3,#0x14]         ;771
000272  2b5a              CMP      r3,#0x5a              ;771
000274  d004              BEQ      |L8.640|
                  |L8.630|
000276  1c40              ADDS     r0,r0,#1              ;771
000278  b2c0              UXTB     r0,r0                 ;769
                  |L8.634|
00027a  4584              CMP      r12,r0                ;769
00027c  d8ee              BHI      |L8.604|
                  |L8.638|
00027e  e032              B        |L8.742|
                  |L8.640|
000280  2000              MOVS     r0,#0                 ;773
                  |L8.642|
000282  180b              ADDS     r3,r1,r0              ;775
000284  7d5b              LDRB     r3,[r3,#0x15]         ;775
000286  5413              STRB     r3,[r2,r0]            ;775
000288  1c40              ADDS     r0,r0,#1              ;775
00028a  b2c0              UXTB     r0,r0                 ;773
00028c  2806              CMP      r0,#6                 ;773
00028e  d3f8              BCC      |L8.642|
                  |L8.656|
000290  7066              STRB     r6,[r4,#1]            ;777
000292  e028              B        |L8.742|
                  |L8.660|
000294  2845              CMP      r0,#0x45              ;790
000296  d126              BNE      |L8.742|
000298  7025              STRB     r5,[r4,#0]            ;800
00029a  70e5              STRB     r5,[r4,#3]            ;801
00029c  e8bd41f0          POP      {r4-r8,lr}            ;802
0002a0  f7ffbffe          B.W      ClrZR60Ctrl_BleSt
                  |L8.676|
0002a4  2844              CMP      r0,#0x44              ;816
0002a6  d11e              BNE      |L8.742|
0002a8  7822              LDRB     r2,[r4,#0]            ;818  ; blenum
0002aa  5488              STRB     r0,[r1,r2]            ;818
0002ac  7820              LDRB     r0,[r4,#0]            ;819  ; blenum
0002ae  1c40              ADDS     r0,r0,#1              ;819
0002b0  7020              STRB     r0,[r4,#0]            ;819
0002b2  200d              MOVS     r0,#0xd               ;820
0002b4  e015              B        |L8.738|
                  |L8.694|
0002b6  2844              CMP      r0,#0x44              ;831
0002b8  d115              BNE      |L8.742|
0002ba  7822              LDRB     r2,[r4,#0]            ;833  ; blenum
0002bc  5488              STRB     r0,[r1,r2]            ;833
0002be  7820              LDRB     r0,[r4,#0]            ;834  ; blenum
0002c0  1c40              ADDS     r0,r0,#1              ;834
0002c2  7020              STRB     r0,[r4,#0]            ;834
0002c4  200e              MOVS     r0,#0xe               ;835
0002c6  e00c              B        |L8.738|
                  |L8.712|
0002c8  2852              CMP      r0,#0x52              ;846
0002ca  d10c              BNE      |L8.742|
0002cc  7822              LDRB     r2,[r4,#0]            ;848  ; blenum
0002ce  5488              STRB     r0,[r1,r2]            ;848
0002d0  7820              LDRB     r0,[r4,#0]            ;849  ; blenum
0002d2  1c40              ADDS     r0,r0,#1              ;849
0002d4  7020              STRB     r0,[r4,#0]            ;849
0002d6  200f              MOVS     r0,#0xf               ;850
0002d8  e003              B        |L8.738|
                  |L8.730|
0002da  283a              CMP      r0,#0x3a              ;861
0002dc  d103              BNE      |L8.742|
0002de  7025              STRB     r5,[r4,#0]            ;863
0002e0  2010              MOVS     r0,#0x10              ;864
                  |L8.738|
0002e2  70e0              STRB     r0,[r4,#3]            ;864
                  |L8.740|
0002e4  e69f              B        |L8.38|
                  |L8.742|
0002e6  7025              STRB     r5,[r4,#0]            ;868
0002e8  70e5              STRB     r5,[r4,#3]            ;869
0002ea  e69c              B        |L8.38|
                  |L8.748|
0002ec  4a17              LDR      r2,|L8.844|
0002ee  7821              LDRB     r1,[r4,#0]            ;876  ; blenum
0002f0  4b15              LDR      r3,|L8.840|
0002f2  4411              ADD      r1,r1,r2              ;876
0002f4  330f              ADDS     r3,r3,#0xf            ;879
0002f6  f8810034          STRB     r0,[r1,#0x34]         ;876
0002fa  f1a00130          SUB      r1,r0,#0x30           ;877
0002fe  2909              CMP      r1,#9                 ;877
000300  d805              BHI      |L8.782|
000302  7820              LDRB     r0,[r4,#0]            ;879  ; blenum
000304  4403              ADD      r3,r3,r0              ;879
000306  1c40              ADDS     r0,r0,#1              ;879
000308  7020              STRB     r0,[r4,#0]            ;879
00030a  7019              STRB     r1,[r3,#0]            ;879
00030c  e005              B        |L8.794|
                  |L8.782|
00030e  7821              LDRB     r1,[r4,#0]            ;883  ; blenum
000310  440b              ADD      r3,r3,r1              ;883
000312  1c49              ADDS     r1,r1,#1              ;883
000314  7021              STRB     r1,[r4,#0]            ;883
000316  3837              SUBS     r0,r0,#0x37           ;883
000318  7018              STRB     r0,[r3,#0]            ;883
                  |L8.794|
00031a  7820              LDRB     r0,[r4,#0]            ;885  ; blenum
00031c  280c              CMP      r0,#0xc               ;885
00031e  d1e1              BNE      |L8.740|
000320  7820              LDRB     r0,[r4,#0]            ;887  ; blenum
000322  4410              ADD      r0,r0,r2              ;887
000324  f8805034          STRB     r5,[r0,#0x34]         ;887
000328  7126              STRB     r6,[r4,#4]            ;888
00032a  e7dc              B        |L8.742|
                          ENDP

                  |L8.812|
                          DCD      0x40005000
                  |L8.816|
                          DCD      ||.data||
                  |L8.820|
                          DCD      ||.bss||+0x13e
                  |L8.824|
000338  495400            DCB      "IT",0
00033b  00                DCB      0
                  |L8.828|
00033c  544c00            DCB      "TL",0
00033f  00                DCB      0
                  |L8.832|
000340  544900            DCB      "TI",0
000343  00                DCB      0
                  |L8.836|
000344  4c5400            DCB      "LT",0
000347  00                DCB      0
                  |L8.840|
                          DCD      ||.bss||
                  |L8.844|
                          DCD      DeviceInit

                          AREA ||i.UartCmn_Rx_Msg||, CODE, READONLY, ALIGN=2

                  UartCmn_Rx_Msg PROC
;;;75     ******************************************************/
;;;76     void UartCmn_Rx_Msg(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;77     {   
;;;78         unsigned char Buff;/* 接受数据缓存 */
;;;79              
;;;80         if (UartCmn_GetFlagStatus(UARTCMN_FLAG_OE) || UartCmn_GetFlagStatus(UARTCMN_FLAG_FE))/* 帧错误标志位 或者 数据溢出标志位 */
000004  4f32              LDR      r7,|L9.208|
000006  2108              MOVS     r1,#8
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       USART_GetFlagStatus
;;;81         {
;;;82             Buff = UartCmn_ReceiveData8();/* 清除Break段数据及帧错误数据 */         
;;;83         }
;;;84     	else if (UartCmn_GetFlagStatus(UARTCMN_FLAG_RXNE))/* 接受数据寄存器满标志位 */
;;;85         {
;;;86     		Uart_RecMsg.RxBusyFlg = 1U;/*置数据接收忙标志有效*/
00000e  2601              MOVS     r6,#1
000010  4c30              LDR      r4,|L9.212|
000012  2500              MOVS     r5,#0
000014  b920              CBNZ     r0,|L9.32|
000016  2102              MOVS     r1,#2                 ;80
000018  4638              MOV      r0,r7                 ;80
00001a  f7fffffe          BL       USART_GetFlagStatus
00001e  b118              CBZ      r0,|L9.40|
                  |L9.32|
000020  4638              MOV      r0,r7                 ;82
000022  f7fffffe          BL       USART_ReceiveData
000026  e03d              B        |L9.164|
                  |L9.40|
000028  2120              MOVS     r1,#0x20              ;84
00002a  4638              MOV      r0,r7                 ;84
00002c  f7fffffe          BL       USART_GetFlagStatus
000030  b300              CBZ      r0,|L9.116|
000032  70a6              STRB     r6,[r4,#2]
;;;87             Buff = UartCmn_ReceiveData8();/*读取数据寄存器数据*/        
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       USART_ReceiveData
;;;88             switch(Uart_RecMsg.UartHeaderFlag) 
00003a  78e2              LDRB     r2,[r4,#3]  ; Uart_RecMsg
00003c  2105              MOVS     r1,#5
00003e  b2c0              UXTB     r0,r0                 ;87
000040  2a07              CMP      r2,#7
000042  d22e              BCS      |L9.162|
000044  e8dff002          TBB      [pc,r2]
000048  04090c0f          DCB      0x04,0x09,0x0c,0x0f
00004c  17242900          DCB      0x17,0x24,0x29,0x00
;;;89             {
;;;90     			case 0U:/*接收帧头*/                           		
;;;91     				Uart_RecMsg.UartRx.Pckt.UartHeader[0] = Buff;
000050  7160              STRB     r0,[r4,#5]
;;;92     				if(Uart_RecMsg.UartRx.Pckt.UartHeader[0] == UARTCMN_RX_HEADER)   /*判断帧头是否正确*/
000052  2820              CMP      r0,#0x20
000054  d126              BNE      |L9.164|
;;;93     				{
;;;94     					Uart_RecMsg.UartHeaderFlag=1U; /*启动数据与帧尾接收*/
000056  70e6              STRB     r6,[r4,#3]
000058  e024              B        |L9.164|
;;;95     				} 
;;;96     				else 
;;;97     				{
;;;98     					/*帧头错误，重新接收帧头*/
;;;99     				}
;;;100    			break;		
;;;101    			case 1U:/*接收包号*/
;;;102    				Uart_RecMsg.UartRx.Pckt.UartSeqnr[0] = Buff;
00005a  71a0              STRB     r0,[r4,#6]
;;;103    				Uart_RecMsg.UartHeaderFlag = 2;
00005c  2002              MOVS     r0,#2
;;;104    			break;
00005e  e01a              B        |L9.150|
;;;105    			case 2U:/*接收命令字节*/
;;;106    				Uart_RecMsg.UartRx.Pckt.UartCmd[0] = Buff;
000060  71e0              STRB     r0,[r4,#7]
;;;107    				Uart_RecMsg.UartHeaderFlag = 3;
000062  2003              MOVS     r0,#3
;;;108    			break;
000064  e017              B        |L9.150|
;;;109    			case 3U:/*接收有效数据长度表示字节*/
;;;110    				Uart_RecMsg.UartRx.Pckt.UartRxDataLng[0] = Buff;
000066  7220              STRB     r0,[r4,#8]
;;;111    				if(Uart_RecMsg.UartRx.Pckt.UartRxDataLng[0] == 0U)
000068  b118              CBZ      r0,|L9.114|
;;;112    				{
;;;113    					Uart_RecMsg.UartHeaderFlag = 5;
;;;114    				}
;;;115    				else if(Uart_RecMsg.UartRx.Pckt.UartRxDataLng[0] <= UARTCMN_RX_PCKTDATA_LNG)
00006a  2838              CMP      r0,#0x38
00006c  d819              BHI      |L9.162|
;;;116    				{/*数据长度有效*/
;;;117    					Uart_RecMsg.UartHeaderFlag = 4;
00006e  2004              MOVS     r0,#4
000070  e011              B        |L9.150|
                  |L9.114|
000072  70e1              STRB     r1,[r4,#3]            ;113
                  |L9.116|
000074  e016              B        |L9.164|
;;;118    				}
;;;119    				else/*数据长度错误*/
;;;120    				{
;;;121    					Uart_RecMsg.UartHeaderFlag = 0;
;;;122    				}
;;;123    			break;
;;;124    			case 4U:/*接收有效数据*/ 
;;;125    				Uart_RecMsg.UartRx.Pckt.UartRxData[Uart_RecMsg.UartRxNm++]=Buff;
000076  4a17              LDR      r2,|L9.212|
000078  7823              LDRB     r3,[r4,#0]  ; Uart_RecMsg
00007a  3209              ADDS     r2,r2,#9
00007c  5498              STRB     r0,[r3,r2]
00007e  7820              LDRB     r0,[r4,#0]  ; Uart_RecMsg
000080  1c40              ADDS     r0,r0,#1
000082  b2c0              UXTB     r0,r0
000084  7020              STRB     r0,[r4,#0]
;;;126    				if(Uart_RecMsg.UartRxNm >= Uart_RecMsg.UartRx.Pckt.UartRxDataLng[0])/*有效数据接收完成*/
000086  7a22              LDRB     r2,[r4,#8]  ; Uart_RecMsg
000088  4290              CMP      r0,r2
00008a  d30b              BCC      |L9.164|
;;;127    				{
;;;128    					Uart_RecMsg.UartRxNm = 0U;/*接收有效数据计数器清零*/
00008c  7025              STRB     r5,[r4,#0]
;;;129    					Uart_RecMsg.UartHeaderFlag = 5U;	
00008e  e7f0              B        |L9.114|
;;;130    				}
;;;131    				else
;;;132    				{
;;;133    					/*有效数据接收中*/
;;;134    				}
;;;135    			break;
;;;136    			case 5U:/*接收校验和字节*/
;;;137    				Uart_RecMsg.UartRx.Pckt.UartCheck[0] = Buff;
000090  f8840041          STRB     r0,[r4,#0x41]
;;;138    				Uart_RecMsg.UartHeaderFlag = 6;
000094  2006              MOVS     r0,#6
                  |L9.150|
000096  70e0              STRB     r0,[r4,#3]
000098  e004              B        |L9.164|
;;;139    			break;
;;;140    			case 6U:/*接收结束字节*/
;;;141    				Uart_RecMsg.UartRx.Pckt.UartETX[0] = Buff;
00009a  f8840042          STRB     r0,[r4,#0x42]
;;;142    				if(Uart_RecMsg.UartRx.Pckt.UartETX[0] == UARTCMN_RX_ETC)/*整帧报文接收完成*/
00009e  2803              CMP      r0,#3
0000a0  d011              BEQ      |L9.198|
                  |L9.162|
;;;143    				{
;;;144    					Uart_RecMsg.UartRXFlag = 1U;/*接收成功标志*/
;;;145    					Uart_RecMsg.RxBusyFlg = 0U;/*置数据接收忙效*/
;;;146    					Uart_RecMsg.UartHeaderFlag = 0;
;;;147    				}
;;;148    				else/*报文终止符有误*/
;;;149    				{
;;;150    					Uart_RecMsg.UartHeaderFlag = 0;
;;;151    				}
;;;152    				
;;;153    			break;
;;;154    			default:
;;;155    				Uart_RecMsg.UartHeaderFlag = 0U;
0000a2  70e5              STRB     r5,[r4,#3]
                  |L9.164|
;;;156    			break;
;;;157            }
;;;158        }
;;;159    	else
;;;160    	{}
;;;161    	
;;;162    	if(1U == Uart_RecMsg.UartRXFlag)
0000a4  7860              LDRB     r0,[r4,#1]  ; Uart_RecMsg
0000a6  2801              CMP      r0,#1
0000a8  d10b              BNE      |L9.194|
                  |L9.170|
0000aa  490a              LDR      r1,|L9.212|
0000ac  2000              MOVS     r0,#0
;;;163    	{
;;;164    		Uart_RecMsg.UartRXFlag = 0U;
0000ae  7065              STRB     r5,[r4,#1]
0000b0  31d9              ADDS     r1,r1,#0xd9
                  |L9.178|
0000b2  1822              ADDS     r2,r4,r0
0000b4  7952              LDRB     r2,[r2,#5]
0000b6  540a              STRB     r2,[r1,r0]
0000b8  1c40              ADDS     r0,r0,#1
0000ba  b2c0              UXTB     r0,r0
0000bc  283e              CMP      r0,#0x3e
0000be  d3f8              BCC      |L9.178|
0000c0  7126              STRB     r6,[r4,#4]
                  |L9.194|
;;;165    		UartCmn_u_RxMsgBuff();/*接收数据缓存*/
;;;166    	}
;;;167    }
0000c2  e8bd81f0          POP      {r4-r8,pc}
                  |L9.198|
0000c6  7066              STRB     r6,[r4,#1]            ;144
0000c8  70a5              STRB     r5,[r4,#2]            ;145
0000ca  70e5              STRB     r5,[r4,#3]            ;146
0000cc  e7ed              B        |L9.170|
;;;168    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L9.208|
                          DCD      0x40004800
                  |L9.212|
                          DCD      ||.bss||+0x27

                          AREA ||i.UartCmn_Tx_BluetoothMsg||, CODE, READONLY, ALIGN=2

                  UartCmn_Tx_BluetoothMsg PROC
;;;490    ******************************************************/
;;;491    void UartCmn_Tx_BluetoothMsg(void)
000000  b510              PUSH     {r4,lr}
;;;492    {
;;;493    	//uint32 Le_dw_Timer = 0x00ffffff; 
;;;494    	if(1U == Uart_BluetoothTxMsg.ucTxFlg)
000002  4c0f              LDR      r4,|L10.64|
000004  f894004a          LDRB     r0,[r4,#0x4a]  ; Uart_BluetoothTxMsg
000008  2801              CMP      r0,#1
00000a  d10d              BNE      |L10.40|
;;;495    	{
;;;496    		//if(USART_GetFlagStatus(UART5,USART_FLAG_TXE))/*发送寄存器空*/
;;;497    		{
;;;498    			if(Uart_BluetoothTxMsg.ucTxCnt < Uart_BluetoothTxMsg.ucLength)
00000c  f8941049          LDRB     r1,[r4,#0x49]  ; Uart_BluetoothTxMsg
000010  f8942048          LDRB     r2,[r4,#0x48]  ; Uart_BluetoothTxMsg
;;;499    			{    
;;;500    				USART_SendData(UART5,Uart_BluetoothTxMsg.ucTxData[Uart_BluetoothTxMsg.ucTxCnt]);/* 发送数据场 */
000014  480b              LDR      r0,|L10.68|
000016  4291              CMP      r1,r2                 ;498
000018  d207              BCS      |L10.42|
00001a  5c61              LDRB     r1,[r4,r1]
00001c  f7fffffe          BL       USART_SendData
;;;501    				Uart_BluetoothTxMsg.ucTxCnt++;		
000020  f8140f49          LDRB     r0,[r4,#0x49]!  ; Uart_BluetoothTxMsg
000024  1c40              ADDS     r0,r0,#1
000026  7020              STRB     r0,[r4,#0]
                  |L10.40|
;;;502    			}
;;;503    			else if(Uart_BluetoothTxMsg.ucTxCnt >= Uart_BluetoothTxMsg.ucLength)
;;;504    			{
;;;505    				//while(!(USART_GetFlagStatus(UART5,UARTCMN_IT_TC)) && (Le_dw_Timer--));
;;;506    				Uart_BluetoothTxMsg.ucTxCnt = 0U;/*清发送计数值*/
;;;507    				Uart_BluetoothTxMsg.ucTxFlg = 0U;/*清发送标志*/
;;;508    				USART_ITConfig(UART5_USART, USART_IT_TXE, DISABLE);/* 禁止发送寄存器空中断 */	
;;;509    				//(UART5->CR1 &= (uint8_t)(~USART_Mode_Tx));/* 禁止发送 */
;;;510    				//USART_ITConfig(UART5_USART, USART_IT_RXNE, ENABLE);/* 接收中断请求 */
;;;511    				//(UART5->CR1 |= (uint8_t)USART_Mode_Rx); /* 允许接收 */	
;;;512    				//DISABLE_TIEN;/* 禁止发送寄存器空中断 */
;;;513    				//DISABLE_TEN;  /* 禁止发送 */
;;;514    				//ENABLE_RIEN; /* 接收中断请求 */
;;;515    				//ENABLE_REN; /* 允许接收 */	
;;;516    			}
;;;517    			else
;;;518    			{}
;;;519    		}  		
;;;520    	}
;;;521    }
000028  bd10              POP      {r4,pc}
                  |L10.42|
00002a  2100              MOVS     r1,#0                 ;506
00002c  f8041f49          STRB     r1,[r4,#0x49]!        ;506
000030  460a              MOV      r2,r1                 ;508
000032  7061              STRB     r1,[r4,#1]            ;507
000034  e8bd4010          POP      {r4,lr}               ;508
000038  f2407127          MOV      r1,#0x727             ;508
00003c  f7ffbffe          B.W      USART_ITConfig
;;;522    
                          ENDP

                  |L10.64|
                          DCD      ||.bss||+0xb5
                  |L10.68|
                          DCD      0x40005000

                          AREA ||i.UartCmn_Tx_Msg||, CODE, READONLY, ALIGN=2

                  UartCmn_Tx_Msg PROC
;;;180    ******************************************************/
;;;181    void UartCmn_Tx_Msg(void)
000000  b510              PUSH     {r4,lr}
;;;182    {
;;;183    	//uint32 Le_dw_Timer = 0xffffffff; 
;;;184    	if(1U == Uart_TxMsg.ucTxFlg)
000002  4c0f              LDR      r4,|L11.64|
000004  f894004a          LDRB     r0,[r4,#0x4a]  ; Uart_TxMsg
000008  2801              CMP      r0,#1
00000a  d10d              BNE      |L11.40|
;;;185    	{
;;;186    		//if(UartCmn_GetFlagStatus(UARTCMN_FLAG_TXE))/*发送寄存器空*/
;;;187    		{
;;;188    			if(Uart_TxMsg.ucTxCnt < Uart_TxMsg.ucLength)
00000c  f8941049          LDRB     r1,[r4,#0x49]  ; Uart_TxMsg
000010  f8942048          LDRB     r2,[r4,#0x48]  ; Uart_TxMsg
;;;189    			{    
;;;190    				UartCmn_SendData8(Uart_TxMsg.ucTxData[Uart_TxMsg.ucTxCnt]) ;/* 发送数据场 */
000014  480b              LDR      r0,|L11.68|
000016  4291              CMP      r1,r2                 ;188
000018  d207              BCS      |L11.42|
00001a  5c61              LDRB     r1,[r4,r1]
00001c  f7fffffe          BL       USART_SendData
;;;191    				Uart_TxMsg.ucTxCnt++;		
000020  f8140f49          LDRB     r0,[r4,#0x49]!  ; Uart_TxMsg
000024  1c40              ADDS     r0,r0,#1
000026  7020              STRB     r0,[r4,#0]
                  |L11.40|
;;;192    			}
;;;193    			else if(Uart_TxMsg.ucTxCnt >= Uart_TxMsg.ucLength)
;;;194    			{
;;;195    				//while(!(UartCmn_GetFlagStatus(UARTCMN_IT_TC)) && (Le_dw_Timer--));
;;;196    				Uart_TxMsg.ucTxCnt = 0U;/*清发送计数值*/
;;;197    				Uart_TxMsg.ucTxFlg = 0U;/*清发送标志*/
;;;198    				DISABLE_TIEN;/* 禁止发送寄存器空中断 */
;;;199    				//DISABLE_TEN;  /* 禁止发送 */
;;;200    				//ENABLE_RIEN; /* 接收中断请求 */
;;;201    				//ENABLE_REN; /* 允许接收 */	
;;;202    			}
;;;203    			else
;;;204    			{}
;;;205    		}  		
;;;206    	}
;;;207    }
000028  bd10              POP      {r4,pc}
                  |L11.42|
00002a  2100              MOVS     r1,#0                 ;196
00002c  f8041f49          STRB     r1,[r4,#0x49]!        ;196
000030  460a              MOV      r2,r1                 ;198
000032  7061              STRB     r1,[r4,#1]            ;197
000034  e8bd4010          POP      {r4,lr}               ;198
000038  f2407127          MOV      r1,#0x727             ;198
00003c  f7ffbffe          B.W      USART_ITConfig
;;;208    
                          ENDP

                  |L11.64|
                          DCD      ||.bss||+0x6a
                  |L11.68|
                          DCD      0x40004800

                          AREA ||i.Uart_PrintStr||, CODE, READONLY, ALIGN=2

                  Uart_PrintStr PROC
;;;433    ******************************************************/
;;;434    void Uart_PrintStr(uint8_t* Str)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;435    {
;;;436        ENABLE_TEN;
000004  4f12              LDR      r7,|L12.80|
000006  4604              MOV      r4,r0                 ;435
000008  8838              LDRH     r0,[r7,#0]
00000a  f0400008          ORR      r0,r0,#8
00000e  8038              STRH     r0,[r7,#0]
;;;437    	while(*Str)
;;;438    	{
;;;439    		while((UartCmn_GetFlagStatus(UARTCMN_FLAG_TXE)==RESET));	
000010  4d0f              LDR      r5,|L12.80|
;;;440    		UartCmn_SendData8(*(Str++));
;;;441    		while((UartCmn_GetFlagStatus(UARTCMN_IT_TC)==RESET));
000012  f2406626          MOV      r6,#0x626
000016  3d0c              SUBS     r5,r5,#0xc            ;439
000018  e010              B        |L12.60|
                  |L12.26|
00001a  2180              MOVS     r1,#0x80              ;439
00001c  4628              MOV      r0,r5                 ;439
00001e  f7fffffe          BL       USART_GetFlagStatus
000022  2800              CMP      r0,#0                 ;439
000024  d0f9              BEQ      |L12.26|
000026  f8141b01          LDRB     r1,[r4],#1            ;440
00002a  4628              MOV      r0,r5                 ;440
00002c  f7fffffe          BL       USART_SendData
                  |L12.48|
000030  4631              MOV      r1,r6
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       USART_GetFlagStatus
000038  2800              CMP      r0,#0
00003a  d0f9              BEQ      |L12.48|
                  |L12.60|
00003c  7820              LDRB     r0,[r4,#0]            ;437
00003e  2800              CMP      r0,#0                 ;437
000040  d1eb              BNE      |L12.26|
;;;442    	}
;;;443        DISABLE_TEN;
000042  8838              LDRH     r0,[r7,#0]
000044  f00000f7          AND      r0,r0,#0xf7
000048  8038              STRH     r0,[r7,#0]
;;;444    }
00004a  e8bd81f0          POP      {r4-r8,pc}
;;;445    
                          ENDP

00004e  0000              DCW      0x0000
                  |L12.80|
                          DCD      0x4000480c

                          AREA ||i.Uart_Send||, CODE, READONLY, ALIGN=2

                  Uart_Send PROC
;;;395    ******************************************************/
;;;396    void Uart_Send(uint8_t* Data,uint8_t Length)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;397    {
;;;398    	uint8_t LeUart_u_Len;
;;;399    	DISABLE_RIEN;/* 关闭接收中断请求 */
000004  4d36              LDR      r5,|L13.224|
000006  460f              MOV      r7,r1                 ;397
000008  4680              MOV      r8,r0                 ;397
00000a  f2405b25          MOV      r11,#0x525
00000e  2200              MOVS     r2,#0
000010  4659              MOV      r1,r11
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       USART_ITConfig
;;;400    	DISABLE_REN; /* 禁止接收 */
000018  f8df90c4          LDR      r9,|L13.224|
00001c  f109090c          ADD      r9,r9,#0xc
000020  f8b90000          LDRH     r0,[r9,#0]
000024  f00000fb          AND      r0,r0,#0xfb
000028  f8a90000          STRH     r0,[r9,#0]
;;;401        ENABLE_TEN;
00002c  f8b90000          LDRH     r0,[r9,#0]
000030  f0400008          ORR      r0,r0,#8
000034  f8a90000          STRH     r0,[r9,#0]
;;;402    	Uart_TxMsg.ucTxFlg = 1U;/*置发送标志有效*/
000038  f8dfa0a8          LDR      r10,|L13.228|
00003c  2001              MOVS     r0,#1
00003e  f88a004a          STRB     r0,[r10,#0x4a]
                  |L13.66|
;;;403    	while((UartCmn_GetFlagStatus(UARTCMN_FLAG_TXE)==RESET));	
000042  2180              MOVS     r1,#0x80
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       USART_GetFlagStatus
00004a  2800              CMP      r0,#0
00004c  d0f9              BEQ      |L13.66|
;;;404    	UartCmn_SendData8(UARTCMN_TX_HEADER);
00004e  2120              MOVS     r1,#0x20
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       USART_SendData
;;;405    	while((UartCmn_GetFlagStatus(UARTCMN_IT_TC)==RESET));
000056  f2406626          MOV      r6,#0x626
                  |L13.90|
00005a  4631              MOV      r1,r6
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       USART_GetFlagStatus
000062  2800              CMP      r0,#0
000064  d0f9              BEQ      |L13.90|
;;;406    	
;;;407    	for(LeUart_u_Len = 0;LeUart_u_Len < Length;LeUart_u_Len++)
000066  2400              MOVS     r4,#0
000068  e012              B        |L13.144|
                  |L13.106|
;;;408    	{
;;;409    		while((UartCmn_GetFlagStatus(UARTCMN_FLAG_TXE)==RESET));	
00006a  2180              MOVS     r1,#0x80
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       USART_GetFlagStatus
000072  2800              CMP      r0,#0
000074  d0f9              BEQ      |L13.106|
;;;410    		UartCmn_SendData8(Data[LeUart_u_Len]);
000076  f8181004          LDRB     r1,[r8,r4]
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_SendData
                  |L13.128|
;;;411    		while((UartCmn_GetFlagStatus(UARTCMN_IT_TC)==RESET));
000080  4631              MOV      r1,r6
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_GetFlagStatus
000088  2800              CMP      r0,#0
00008a  d0f9              BEQ      |L13.128|
00008c  1c64              ADDS     r4,r4,#1
00008e  b2e4              UXTB     r4,r4                 ;407
                  |L13.144|
000090  42bc              CMP      r4,r7                 ;407
000092  d3ea              BCC      |L13.106|
                  |L13.148|
;;;412    	}
;;;413    	while((UartCmn_GetFlagStatus(UARTCMN_FLAG_TXE)==RESET));	
000094  2180              MOVS     r1,#0x80
000096  4628              MOV      r0,r5
000098  f7fffffe          BL       USART_GetFlagStatus
00009c  2800              CMP      r0,#0
00009e  d0f9              BEQ      |L13.148|
;;;414    	UartCmn_SendData8(UARTCMN_TX_ETC);
0000a0  2103              MOVS     r1,#3
0000a2  4628              MOV      r0,r5
0000a4  f7fffffe          BL       USART_SendData
                  |L13.168|
;;;415    	while((UartCmn_GetFlagStatus(UARTCMN_IT_TC)==RESET));	
0000a8  4631              MOV      r1,r6
0000aa  4628              MOV      r0,r5
0000ac  f7fffffe          BL       USART_GetFlagStatus
0000b0  2800              CMP      r0,#0
0000b2  d0f9              BEQ      |L13.168|
;;;416    	Uart_TxMsg.ucTxFlg = 0U;/*置发送标志有效*/
0000b4  2100              MOVS     r1,#0
0000b6  f88a104a          STRB     r1,[r10,#0x4a]
;;;417    	
;;;418        DISABLE_TEN;
0000ba  f8b90000          LDRH     r0,[r9,#0]
0000be  464c              MOV      r4,r9
0000c0  f00000f7          AND      r0,r0,#0xf7
0000c4  f8a90000          STRH     r0,[r9,#0]
;;;419    	ENABLE_RIEN; /* 接收中断请求 */
0000c8  2201              MOVS     r2,#1
0000ca  4659              MOV      r1,r11
0000cc  4628              MOV      r0,r5
0000ce  f7fffffe          BL       USART_ITConfig
;;;420    	ENABLE_REN; /* 允许接收 */
0000d2  8820              LDRH     r0,[r4,#0]
0000d4  f0400004          ORR      r0,r0,#4
0000d8  8020              STRH     r0,[r4,#0]
;;;421    }
0000da  e8bd9ff0          POP      {r4-r12,pc}
;;;422    
                          ENDP

0000de  0000              DCW      0x0000
                  |L13.224|
                          DCD      0x40004800
                  |L13.228|
                          DCD      ||.bss||+0x6a

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  timelist
                          %        15
                  Se_u_MacAddr
                          %        12
                  Se_u_PhoneNum
                          %        12
                  Uart_RecMsg
                          %        67
                  Uart_TxMsg
                          %        75
                  Uart_BluetoothTxMsg
                          %        75
                  SaUartCmn_u_RxBuff
                          %        62
                  BleTemp
                          %        120

                          AREA ||.data||, DATA, ALIGN=0

                  blenum
000000  00                DCB      0x00
                  ble_flag
000001  00                DCB      0x00
                  set_time_flag
000002  00                DCB      0x00
                  RcvFlag
000003  00                DCB      0x00
                  Se_u_BleMacFlg
000004  00                DCB      0x00
                  Se_u_PhoneNumFlg
000005  00                DCB      0x00
                  BleValue
000006  0000              DCB      0x00,0x00
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Ecal\\UartComn\\UartCmn.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_UartCmn_c_timelist____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_UartCmn_c_timelist____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_UartCmn_c_timelist____REVSH|
#line 153
|__asm___9_UartCmn_c_timelist____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_UartCmn_c_timelist____RRX|
#line 328
|__asm___9_UartCmn_c_timelist____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

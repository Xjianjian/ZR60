; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\bsp_debug_usart.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\bsp_debug_usart.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\bsp_debug_usart.crf ..\..\Complex\usart\bsp_debug_usart.c]
                          THUMB

                          AREA ||i.Debug_USART_Config||, CODE, READONLY, ALIGN=2

                  Debug_USART_Config PROC
;;;50       */
;;;51     void Debug_USART_Config(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;52     {
;;;53     	GPIO_InitTypeDef GPIO_InitStructure;
;;;54     	USART_InitTypeDef USART_InitStructure;
;;;55     		
;;;56     	RCC_AHB1PeriphClockCmd(DEBUG_USART_RX_GPIO_CLK|DEBUG_USART_TX_GPIO_CLK,ENABLE);
000002  2101              MOVS     r1,#1
000004  b087              SUB      sp,sp,#0x1c           ;52
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;57     
;;;58     	/* 使能 USART 时钟 */
;;;59     	RCC_APB2PeriphClockCmd(DEBUG_USART_CLK, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2010              MOVS     r0,#0x10
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;60     
;;;61     	/* GPIO初始化 */
;;;62     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;63     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;  
;;;64     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000014  2502              MOVS     r5,#2
000016  2400              MOVS     r4,#0                 ;62
000018  f88d4006          STRB     r4,[sp,#6]            ;62
00001c  2601              MOVS     r6,#1                 ;63
00001e  f88d6007          STRB     r6,[sp,#7]            ;63
;;;65     
;;;66     	/* 配置Tx引脚为复用功能  */
;;;67     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;68     	GPIO_InitStructure.GPIO_Pin = DEBUG_USART_TX_PIN  ;  
000022  0228              LSLS     r0,r5,#8
;;;69     	GPIO_Init(DEBUG_USART_TX_GPIO_PORT, &GPIO_InitStructure);
000024  4f23              LDR      r7,|L1.180|
000026  f88d5005          STRB     r5,[sp,#5]            ;64
00002a  9000              STR      r0,[sp,#0]
00002c  f88d5004          STRB     r5,[sp,#4]            ;67
000030  4669              MOV      r1,sp
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       GPIO_Init
;;;70     
;;;71     	/* 配置Rx引脚为复用功能 */
;;;72     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;73     	GPIO_InitStructure.GPIO_Pin = DEBUG_USART_RX_PIN;
000038  0268              LSLS     r0,r5,#9
;;;74     	GPIO_Init(DEBUG_USART_RX_GPIO_PORT, &GPIO_InitStructure);
00003a  9000              STR      r0,[sp,#0]
00003c  f88d5004          STRB     r5,[sp,#4]            ;72
000040  4669              MOV      r1,sp
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       GPIO_Init
;;;75     
;;;76     	/* 连接 PXx 到 USARTx_Tx*/
;;;77     	GPIO_PinAFConfig(DEBUG_USART_RX_GPIO_PORT,DEBUG_USART_RX_SOURCE,DEBUG_USART_RX_AF);
000048  2207              MOVS     r2,#7
00004a  210a              MOVS     r1,#0xa
00004c  4638              MOV      r0,r7
00004e  f7fffffe          BL       GPIO_PinAFConfig
;;;78     
;;;79     	/*  连接 PXx 到 USARTx__Rx*/
;;;80     	GPIO_PinAFConfig(DEBUG_USART_TX_GPIO_PORT,DEBUG_USART_TX_SOURCE,DEBUG_USART_TX_AF);
000052  2207              MOVS     r2,#7
000054  2109              MOVS     r1,#9
000056  4638              MOV      r0,r7
000058  f7fffffe          BL       GPIO_PinAFConfig
;;;81     
;;;82     	/* 配置串DEBUG_USART 模式 */
;;;83     	/* 波特率设置：DEBUG_USART_BAUDRATE */
;;;84     	USART_InitStructure.USART_BaudRate = DEBUG_USART_BAUDRATE;
00005c  f44f30e1          MOV      r0,#0x1c200
;;;85     	/* 字长(数据位+校验位)：8 */
;;;86     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000060  9002              STR      r0,[sp,#8]
;;;87     	/* 停止位：1个停止位 */
;;;88     	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;89     	/* 校验位选择：不使用校验 */
;;;90     	USART_InitStructure.USART_Parity = USART_Parity_No;
000062  f8ad4010          STRH     r4,[sp,#0x10]
;;;91     	/* 硬件流控制：不使用硬件流 */
;;;92     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;93     	/* USART模式控制：同时使能接收和发送 */
;;;94     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000066  200c              MOVS     r0,#0xc
;;;95     	/* 完成USART初始化配置 */
;;;96     	USART_Init(DEBUG_USART, &USART_InitStructure); 
000068  4f13              LDR      r7,|L1.184|
00006a  f8ad400c          STRH     r4,[sp,#0xc]          ;86
00006e  f8ad0012          STRH     r0,[sp,#0x12]         ;94
000072  f8ad400e          STRH     r4,[sp,#0xe]          ;88
000076  f8ad4014          STRH     r4,[sp,#0x14]         ;92
00007a  a902              ADD      r1,sp,#8
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       USART_Init
000082  2025              MOVS     r0,#0x25
000084  f88d0018          STRB     r0,[sp,#0x18]
000088  f88d5019          STRB     r5,[sp,#0x19]
00008c  f88d401a          STRB     r4,[sp,#0x1a]
000090  f88d601b          STRB     r6,[sp,#0x1b]
000094  a806              ADD      r0,sp,#0x18
000096  f7fffffe          BL       NVIC_Init
;;;97     
;;;98     	/* 嵌套向量中断控制器NVIC配置 */
;;;99     	NVIC_Configuration();
;;;100    
;;;101    	/* 使能串口接收中断 */
;;;102    	USART_ITConfig(DEBUG_USART, USART_IT_RXNE, ENABLE);
00009a  2201              MOVS     r2,#1
00009c  f2405125          MOV      r1,#0x525
0000a0  4638              MOV      r0,r7
0000a2  f7fffffe          BL       USART_ITConfig
;;;103    
;;;104    	/* 使能串口 */
;;;105    	USART_Cmd(DEBUG_USART, ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  4638              MOV      r0,r7
0000aa  f7fffffe          BL       USART_Cmd
;;;106    }
0000ae  b007              ADD      sp,sp,#0x1c
0000b0  bdf0              POP      {r4-r7,pc}
;;;107    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L1.180|
                          DCD      0x40020000
                  |L1.184|
                          DCD      0x40011000

                          AREA ||i.Usart_SendByte||, CODE, READONLY, ALIGN=1

                  Usart_SendByte PROC
;;;108    /*****************  发送一个字符 **********************/
;;;109    void Usart_SendByte( USART_TypeDef * pUSARTx, uint8_t ch)
000000  b510              PUSH     {r4,lr}
;;;110    {
000002  4604              MOV      r4,r0
;;;111    	/* 发送一个字节数据到USART */
;;;112    	USART_SendData(pUSARTx,ch);
000004  f7fffffe          BL       USART_SendData
                  |L2.8|
;;;113    		
;;;114    	/* 等待发送数据寄存器为空 */
;;;115    	while (USART_GetFlagStatus(pUSARTx, USART_FLAG_TXE) == RESET);	
000008  2180              MOVS     r1,#0x80
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetFlagStatus
000010  2800              CMP      r0,#0
000012  d0f9              BEQ      |L2.8|
;;;116    }
000014  bd10              POP      {r4,pc}
;;;117    
                          ENDP


                          AREA ||i.Usart_SendHalfWord||, CODE, READONLY, ALIGN=1

                  Usart_SendHalfWord PROC
;;;133    /*****************  发送一个16位数 **********************/
;;;134    void Usart_SendHalfWord( USART_TypeDef * pUSARTx, uint16_t ch)
000000  b570              PUSH     {r4-r6,lr}
;;;135    {
000002  4604              MOV      r4,r0
;;;136    	uint8_t temp_h, temp_l;
;;;137    	
;;;138    	/* 取出高八位 */
;;;139    	temp_h = (ch&0XFF00)>>8;
000004  0a08              LSRS     r0,r1,#8
;;;140    	/* 取出低八位 */
;;;141    	temp_l = ch&0XFF;
000006  b2cd              UXTB     r5,r1
;;;142    	
;;;143    	/* 发送高八位 */
;;;144    	USART_SendData(pUSARTx,temp_h);	
000008  4601              MOV      r1,r0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_SendData
                  |L3.16|
;;;145    	while (USART_GetFlagStatus(pUSARTx, USART_FLAG_TXE) == RESET);
000010  2180              MOVS     r1,#0x80
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       USART_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L3.16|
;;;146    	
;;;147    	/* 发送低八位 */
;;;148    	USART_SendData(pUSARTx,temp_l);	
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       USART_SendData
                  |L3.36|
;;;149    	while (USART_GetFlagStatus(pUSARTx, USART_FLAG_TXE) == RESET);	
000024  2180              MOVS     r1,#0x80
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L3.36|
;;;150    }
000030  bd70              POP      {r4-r6,pc}
;;;151    
                          ENDP


                          AREA ||i.Usart_SendString||, CODE, READONLY, ALIGN=1

                  Usart_SendString PROC
;;;118    /*****************  发送字符串 **********************/
;;;119    void Usart_SendString( USART_TypeDef * pUSARTx, char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;120    {
000002  460d              MOV      r5,r1
000004  4606              MOV      r6,r0
;;;121    	unsigned int k=0;
000006  2400              MOVS     r4,#0
                  |L4.8|
;;;122      do 
;;;123      {
;;;124          Usart_SendByte( pUSARTx, *(str + k) );
000008  4630              MOV      r0,r6
00000a  5d29              LDRB     r1,[r5,r4]
00000c  f7fffffe          BL       Usart_SendByte
000010  1c64              ADDS     r4,r4,#1
;;;125          k++;
;;;126      } while(*(str + k)!='\0');
000012  5d28              LDRB     r0,[r5,r4]
000014  2800              CMP      r0,#0
000016  d1f7              BNE      |L4.8|
                  |L4.24|
;;;127      
;;;128      /* 等待发送完成 */
;;;129      while(USART_GetFlagStatus(pUSARTx,USART_FLAG_TC)==RESET)
000018  2140              MOVS     r1,#0x40
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       USART_GetFlagStatus
000020  2800              CMP      r0,#0
000022  d0f9              BEQ      |L4.24|
;;;130      {}
;;;131    }
000024  bd70              POP      {r4-r6,pc}
;;;132    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=2

                  fgetc PROC
;;;165    ///重定向c库函数scanf到串口，重写向后可使用scanf、getchar等函数
;;;166    int fgetc(FILE *f)
000000  b510              PUSH     {r4,lr}
;;;167    {
;;;168    		/* 等待串口输入数据 */
;;;169    		while (USART_GetFlagStatus(DEBUG_USART, USART_FLAG_RXNE) == RESET);
000002  4c06              LDR      r4,|L5.28|
                  |L5.4|
000004  2120              MOVS     r1,#0x20
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       USART_GetFlagStatus
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L5.4|
;;;170    
;;;171    		return (int)USART_ReceiveData(DEBUG_USART);
000010  4620              MOV      r0,r4
000012  e8bd4010          POP      {r4,lr}
000016  f7ffbffe          B.W      USART_ReceiveData
;;;172    }
;;;173    /*********************************************END OF FILE**********************/
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40011000

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;152    ///重定向c库函数printf到串口，重定向后可使用printf函数
;;;153    int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;154    {
;;;155    	uint32_t timeout = 0xffffff;
;;;156    	/* 发送一个字节数据到串口 */
;;;157    	USART_SendData(DEBUG_USART, (uint8_t) ch);
000002  4e08              LDR      r6,|L6.36|
000004  4605              MOV      r5,r0                 ;154
000006  b2c1              UXTB     r1,r0
000008  f06f447f          MVN      r4,#0xff000000        ;155
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       USART_SendData
                  |L6.18|
;;;158    	
;;;159    	/* 等待发送完毕 */
;;;160    	while ((USART_GetFlagStatus(DEBUG_USART, USART_FLAG_TXE) == RESET) && (--timeout));		
000012  2180              MOVS     r1,#0x80
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       USART_GetFlagStatus
00001a  b908              CBNZ     r0,|L6.32|
00001c  1e64              SUBS     r4,r4,#1
00001e  d1f8              BNE      |L6.18|
                  |L6.32|
;;;161    
;;;162    	return (ch);
000020  4628              MOV      r0,r5
;;;163    }
000022  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP

                  |L6.36|
                          DCD      0x40011000

;*** Start embedded assembler ***

#line 1 "..\\..\\Complex\\usart\\bsp_debug_usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_bsp_debug_usart_c_13e8a41b____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_bsp_debug_usart_c_13e8a41b____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_bsp_debug_usart_c_13e8a41b____REVSH|
#line 153
|__asm___17_bsp_debug_usart_c_13e8a41b____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_bsp_debug_usart_c_13e8a41b____RRX|
#line 328
|__asm___17_bsp_debug_usart_c_13e8a41b____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

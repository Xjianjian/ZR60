L 1 "..\..\Ecal\JsonIf\cJSON.c"
N/*
N  Copyright (c) 2009-2017 Dave Gamble and cJSON contributors
N
N  Permission is hereby granted, free of charge, to any person obtaining a copy
N  of this software and associated documentation files (the "Software"), to deal
N  in the Software without restriction, including without limitation the rights
N  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
N  copies of the Software, and to permit persons to whom the Software is
N  furnished to do so, subject to the following conditions:
N
N  The above copyright notice and this permission notice shall be included in
N  all copies or substantial portions of the Software.
N
N  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
N  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
N  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
N  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
N  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
N  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
N  THE SOFTWARE.
N*/
N
N/* cJSON */
N/* JSON parser in C. */
N
N/* disable warnings about old C89 functions in MSVC */
N#if !defined(_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
X#if !0L && 0L
S#define _CRT_SECURE_NO_DEPRECATE
N#endif
N
N#ifdef __GNUC__
S#pragma GCC visibility push(default)
N#endif
N#if defined(_MSC_VER)
X#if 0L
S#pragma warning (push)
S/* disable warning about single line comments in system headers */
S#pragma warning (disable : 4001)
N#endif
N
N#include <string.h>
L 1 "d:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060019
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 41 "..\..\Ecal\JsonIf\cJSON.c" 2
N#include <stdio.h>
L 1 "d:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060019
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 42 "..\..\Ecal\JsonIf\cJSON.c" 2
N#include <math.h>
L 1 "d:\Keil_v5\ARM\ARMCC\Bin\..\include\math.h" 1
N/*
N * math.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.5
N * Copyright (C) Codemist Ltd., 1988
N * Copyright 1991-1998,2004-2006,2014 ARM Limited. All rights reserved
N */
N
N/*
N * RCS $Revision$ Codemist 0.03
N * Checkin $Date$
N * Revising $Author: statham $
N */
N
N/*
N * Parts of this file are based upon fdlibm:
N *
N * ====================================================
N * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
N *
N * Developed at SunSoft, a Sun Microsystems, Inc. business.
N * Permission to use, copy, modify, and distribute this
N * software is freely granted, provided that this notice
N * is preserved.
N * ====================================================
N */
N
N#ifndef __math_h
N#define __math_h
N#define __ARMCLIB_VERSION 5060019
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N/*
N * Some of these declarations are new in C99.  To access them in C++
N * you can use -D__USE_C99_MATH (or -D__USE_C99_ALL).
N */
N#ifndef __USE_C99_MATH
N  #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X  #if 0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N    #define __USE_C99_MATH 1
N  #endif
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#ifdef __TARGET_ARCH_AARCH64
S# define _ARMABI_SOFTFP __declspec(__nothrow)
N#else
N# define _ARMABI_SOFTFP __declspec(__nothrow) __attribute__((__pcs__("aapcs")))
N# define __HAVE_LONGDOUBLE 1
N#endif
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#ifdef __FP_FENV_EXCEPTIONS
S# define _ARMABI_FPEXCEPT _ARMABI
N#else
N# define _ARMABI_FPEXCEPT _ARMABI __attribute__((const))
N#endif
N
N#ifdef __cplusplus
S#define _ARMABI_INLINE inline
S#define _ARMABI_INLINE_DEF inline
S#elif defined __GNUC__ || defined _USE_STATIC_INLINE
X#elif 0L || 0L
S#define _ARMABI_INLINE static __inline
S#define _ARMABI_INLINE_DEF static __inline
N#elif (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#elif (1L && 199901L <= 199901L)
N#define _ARMABI_INLINE inline
N#define _ARMABI_INLINE_DEF static inline
N#else
S#define _ARMABI_INLINE __inline
S#define _ARMABI_INLINE_DEF __inline
N#endif
N
N#ifdef __TARGET_ARCH_AARCH64
S#  define _SOFTFP
N#else
N#  define _SOFTFP __attribute__((__pcs__("aapcs")))
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain the nans function, as well as the
N    * FP_NANS and FP_NANQ classification macros.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
N/*
N * Macros for our inline functions down below.
N * unsigned& __FLT(float x) - returns the bit pattern of x
N * unsigned& __HI(double x) - returns the bit pattern of the high part of x
N *                            (high part has exponent & sign bit in it)
N * unsigned& __LO(double x) - returns the bit pattern of the low part of x
N *
N * We can assign to __FLT, __HI, and __LO and the appropriate bits get set in
N * the floating point variable used.
N *
N * __HI & __LO are affected by the endianness and the target FPU.
N */
N#define __FLT(x) (*(unsigned *)&(x))
N#if defined(__ARM_BIG_ENDIAN) || defined(__BIG_ENDIAN)
X#if 0L || 0L
S#  define __LO(x) (*(1 + (unsigned *)&(x)))
S#  define __HI(x) (*(unsigned *)&(x))
N#else /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N#  define __HI(x) (*(1 + (unsigned *)&(x)))
N#  define __LO(x) (*(unsigned *)&(x))
N#endif /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N
N#   ifndef __MATH_DECLS
N#   define __MATH_DECLS
N
N
N/*
N * A set of functions that we don't actually want to put in the standard
N * namespace ever.  These are all called by the C99 macros.  As they're
N * not specified by any standard they can't belong in ::std::.  The
N * macro #defines are below amongst the standard function declarations.
N * We only include these if we actually need them later on
N */
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N#   ifdef __cplusplus
S      extern "C" {
N#   endif /* __cplusplus */
N
Nextern _SOFTFP unsigned __ARM_dcmp4(double /*x*/, double /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_dcmp4(double  , double  );
Nextern _SOFTFP unsigned __ARM_fcmp4(float /*x*/, float /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_fcmp4(float  , float  );
N    /*
N     * Compare x and y and return the CPSR in r0.  These means we can test for
N     * result types with bit pattern matching.
N     *
N     * These are a copy of the declarations in rt_fp.h keep in sync.
N     */
N
Nextern _ARMABI_SOFTFP int __ARM_fpclassifyf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassifyf(float  );
Nextern _ARMABI_SOFTFP int __ARM_fpclassify(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassify(double  );
N    /* Classify x into NaN, infinite, normal, subnormal, zero */
N    /* Used by fpclassify macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinitef(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinitef(float __x)
N{
N    return ((__FLT(__x) >> 23) & 0xff) != 0xff;
X    return (((*(unsigned *)&(__x)) >> 23) & 0xff) != 0xff;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinite(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinite(double __x)
N{
N    return ((__HI(__x) >> 20) & 0x7ff) != 0x7ff;
X    return (((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff) != 0x7ff;
N}
N    /* Return 1 if __x is finite, 0 otherwise */
N    /* Used by isfinite macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinff(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinff(float __x)
N{
N    return (__FLT(__x) << 1) == 0xff000000;
X    return ((*(unsigned *)&(__x)) << 1) == 0xff000000;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinf(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinf(double __x)
N{
N    return ((__HI(__x) << 1) == 0xffe00000) && (__LO(__x) == 0);
X    return (((*(1 + (unsigned *)&(__x))) << 1) == 0xffe00000) && ((*(unsigned *)&(__x)) == 0);
N}
N    /* Return 1 if __x is infinite, 0 otherwise */
N    /* Used by isinf macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreaterf(float __x, float __y)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreaterf(float __x, float __y)
N{
N    unsigned __f = __ARM_fcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreater(double __x, double __y)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreater(double __x, double __y)
N{
N    unsigned __f = __ARM_dcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N    /*
N     * Compare __x and __y and return 1 if __x < __y or __x > __y, 0 otherwise
N     * Used by islessgreater macro
N     */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnanf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnanf(float __x)
N{
N    return (0x7f800000 - (__FLT(__x) & 0x7fffffff)) >> 31;
X    return (0x7f800000 - ((*(unsigned *)&(__x)) & 0x7fffffff)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnan(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnan(double __x)
N{
N    unsigned __xf = __HI(__x) | ((__LO(__x) == 0) ? 0 : 1);
X    unsigned __xf = (*(1 + (unsigned *)&(__x))) | (((*(unsigned *)&(__x)) == 0) ? 0 : 1);
N    return (0x7ff00000 - (__xf & 0x7fffffff)) >> 31;
N}
N    /* Return 1 if __x is a NaN, 0 otherwise */
N    /* Used by isnan macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormalf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormalf(float __x)
N{
N    unsigned __xe = (__FLT(__x) >> 23) & 0xff;
X    unsigned __xe = ((*(unsigned *)&(__x)) >> 23) & 0xff;
N    return (__xe != 0xff) && (__xe != 0);
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormal(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormal(double __x)
N{
N    unsigned __xe = (__HI(__x) >> 20) & 0x7ff;
X    unsigned __xe = ((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff;
N    return (__xe != 0x7ff) && (__xe != 0);
N}
N    /* Return 1 if __x is a normalised number, 0 otherwise */
N    /* used by isnormal macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbitf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbitf(float __x)
N{
N    return __FLT(__x) >> 31;
X    return (*(unsigned *)&(__x)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbit(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbit(double __x)
N{
N    return __HI(__x) >> 31;
X    return (*(1 + (unsigned *)&(__x))) >> 31;
N}
N    /* Return signbit of __x */
N    /* Used by signbit macro */
N
N#   ifdef __cplusplus
S      } /* extern "C" */
N#   endif /* __cplusplus */
N#endif /* Strict ANSI */
N
N#   undef __CLIBNS
N
N#   ifdef __cplusplus
S      namespace std {
S#       define __CLIBNS ::std::
S        extern "C" {
N#   else
N#       define __CLIBNS
N#   endif  /* __cplusplus */
N
N
N#ifndef __has_builtin
N  #define __has_builtin(x) 0
N#endif
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N  /* C99 additions */
N  typedef float float_t;
N  typedef double double_t;
N#if __has_builtin(__builtin_inf)
X#if 0
S#   define HUGE_VALF __builtin_inff()
S#   define HUGE_VALL __builtin_infl()
S#   define INFINITY __builtin_inff()
S#   define NAN __builtin_nanf("")
N# else
N#   define HUGE_VALF ((float)__INFINITY__)
N#   define HUGE_VALL ((long double)__INFINITY__)
N#   define INFINITY ((float)__INFINITY__)
N#   define NAN (__ESCAPE__(0f_7FC00000))
N#endif
N
N#   define MATH_ERRNO 1
N#   define MATH_ERREXCEPT 2
Nextern const int math_errhandling;
N#endif
N#if __has_builtin(__builtin_inf)
X#if 0
S# define HUGE_VAL __builtin_inf()
N#else
N# define HUGE_VAL ((double)__INFINITY__)
N#endif
N
Nextern _ARMABI double acos(double /*x*/);
Xextern __declspec(__nothrow) double acos(double  );
N   /* computes the principal value of the arc cosine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* Returns: the arc cosine in the range 0 to Pi. */
Nextern _ARMABI double asin(double /*x*/);
Xextern __declspec(__nothrow) double asin(double  );
N   /* computes the principal value of the arc sine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* and -HUGE_VAL is returned. */
N   /* Returns: the arc sine in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI_PURE double atan(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double atan(double  );
N   /* computes the principal value of the arc tangent of x */
N   /* Returns: the arc tangent in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI double atan2(double /*y*/, double /*x*/);
Xextern __declspec(__nothrow) double atan2(double  , double  );
N   /* computes the principal value of the arc tangent of y/x, using the */
N   /* signs of both arguments to determine the quadrant of the return value */
N   /* a domain error occurs if both args are zero, and -HUGE_VAL returned. */
N   /* Returns: the arc tangent of y/x, in the range -Pi to Pi. */
N
Nextern _ARMABI double cos(double /*x*/);
Xextern __declspec(__nothrow) double cos(double  );
N   /* computes the cosine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the cosine value. */
Nextern _ARMABI double sin(double /*x*/);
Xextern __declspec(__nothrow) double sin(double  );
N   /* computes the sine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the sine value. */
N
Nextern void __use_accurate_range_reduction(void);
N   /* reference this to select the larger, slower, but more accurate */
N   /* range reduction in sin, cos and tan */
N
Nextern _ARMABI double tan(double /*x*/);
Xextern __declspec(__nothrow) double tan(double  );
N   /* computes the tangent of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance */
N   /* Returns: the tangent value. */
N   /*          if range error; returns HUGE_VAL. */
N
Nextern _ARMABI double cosh(double /*x*/);
Xextern __declspec(__nothrow) double cosh(double  );
N   /* computes the hyperbolic cosine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic cosine value. */
N   /*          if range error; returns HUGE_VAL. */
Nextern _ARMABI double sinh(double /*x*/);
Xextern __declspec(__nothrow) double sinh(double  );
N   /* computes the hyperbolic sine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic sine value. */
N   /*          if range error; returns -HUGE_VAL or HUGE_VAL depending */
N   /*          on the sign of the argument */
N
Nextern _ARMABI_PURE double tanh(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double tanh(double  );
N   /* computes the hyperbolic tangent of x. */
N   /* Returns: the hyperbolic tangent value. */
N
Nextern _ARMABI double exp(double /*x*/);
Xextern __declspec(__nothrow) double exp(double  );
N   /* computes the exponential function of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the exponential value. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
N
Nextern _ARMABI double frexp(double /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double frexp(double  , int *  ) __attribute__((__nonnull__(2)));
N   /* breaks a floating-point number into a normalised fraction and an */
N   /* integral power of 2. It stores the integer in the int object pointed */
N   /* to by exp. */
N   /* Returns: the value x, such that x is a double with magnitude in the */
N   /* interval 0.5 to 1.0 or zero, and value equals x times 2 raised to the */
N   /* power *exp. If value is zero, both parts of the result are zero. */
N
Nextern _ARMABI double ldexp(double /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) double ldexp(double  , int  );
N   /* multiplies a floating-point number by an integral power of 2. */
N   /* A range error may occur. */
N   /* Returns: the value of x times 2 raised to the power of exp. */
N   /*          if range error; HUGE_VAL is returned. */
Nextern _ARMABI double log(double /*x*/);
Xextern __declspec(__nothrow) double log(double  );
N   /* computes the natural logarithm of x. A domain error occurs if the */
N   /* argument is negative, and -HUGE_VAL is returned. A range error occurs */
N   /* if the argument is zero. */
N   /* Returns: the natural logarithm. */
N   /*          if range error; -HUGE_VAL is returned. */
Nextern _ARMABI double log10(double /*x*/);
Xextern __declspec(__nothrow) double log10(double  );
N   /* computes the base-ten logarithm of x. A domain error occurs if the */
N   /* argument is negative. A range error occurs if the argument is zero. */
N   /* Returns: the base-ten logarithm. */
Nextern _ARMABI double modf(double /*value*/, double * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double modf(double  , double *  ) __attribute__((__nonnull__(2)));
N   /* breaks the argument value into integral and fraction parts, each of */
N   /* which has the same sign as the argument. It stores the integral part */
N   /* as a double in the object pointed to by iptr. */
N   /* Returns: the signed fractional part of value. */
N
Nextern _ARMABI double pow(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double pow(double  , double  );
N   /* computes x raised to the power of y. A domain error occurs if x is */
N   /* zero and y is less than or equal to zero, or if x is negative and y */
N   /* is not an integer, and -HUGE_VAL returned. A range error may occur. */
N   /* Returns: the value of x raised to the power of y. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
Nextern _ARMABI double sqrt(double /*x*/);
Xextern __declspec(__nothrow) double sqrt(double  );
N   /* computes the non-negative square root of x. A domain error occurs */
N   /* if the argument is negative, and -HUGE_VAL returned. */
N   /* Returns: the value of the square root. */
N
N#if defined(__TARGET_FPU_VFP_DOUBLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 0L && !0L
S    _ARMABI_INLINE double _sqrt(double __x) { return __sqrt(__x); }
N#else
N    _ARMABI_INLINE double _sqrt(double __x) { return sqrt(__x); }
X    inline double _sqrt(double __x) { return sqrt(__x); }
N#endif
N#if defined(__TARGET_FPU_VFP_SINGLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 1L && !0L
N    _ARMABI_INLINE float _sqrtf(float __x) { return __sqrtf(__x); }
X    inline float _sqrtf(float __x) { return __sqrtf(__x); }
N#else
S    _ARMABI_INLINE float _sqrtf(float __x) { return (float)sqrt(__x); }
N#endif
N    /* With VFP, _sqrt and _sqrtf should expand inline as the native VFP square root
N     * instructions. They will not behave like the C sqrt() function, because
N     * they will report unusual values as IEEE exceptions (in fpmodes which
N     * support IEEE exceptions) rather than in errno. These function names
N     * are not specified in any standard. */
N
Nextern _ARMABI_PURE double ceil(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double ceil(double  );
N   /* computes the smallest integer not less than x. */
N   /* Returns: the smallest integer not less than x, expressed as a double. */
Nextern _ARMABI_PURE double fabs(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fabs(double  );
N   /* computes the absolute value of the floating-point number x. */
N   /* Returns: the absolute value of x. */
N
Nextern _ARMABI_PURE double floor(double /*d*/);
Xextern __declspec(__nothrow) __attribute__((const)) double floor(double  );
N   /* computes the largest integer not greater than x. */
N   /* Returns: the largest integer not greater than x, expressed as a double */
N
Nextern _ARMABI double fmod(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double fmod(double  , double  );
N   /* computes the floating-point remainder of x/y. */
N   /* Returns: the value x - i * y, for some integer i such that, if y is */
N   /*          nonzero, the result has the same sign as x and magnitude */
N   /*          less than the magnitude of y. If y is zero, a domain error */
N   /*          occurs and -HUGE_VAL is returned. */
N
N    /* Additional Mathlib functions not defined by the ANSI standard.
N     * Not guaranteed, and not necessarily very well tested.
N     * C99 requires the user to include <math.h> to use these functions
N     * declaring them "by hand" is not sufficient
N     *
N     * The above statement is not completely true now.  Some of the above
N     * C99 functionality has been added as per the Standard, and (where
N     * necessary) old Mathlib functionality withdrawn/changed.  Before
N     * including this header #define __ENABLE_MATHLIB_LEGACY if you want to
N     * re-enable the legacy functionality.
N     */
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N
Nextern _ARMABI double acosh(double /*x*/);
Xextern __declspec(__nothrow) double acosh(double  );
N    /*
N     * Inverse cosh. EDOM if argument < 1.0
N     */
Nextern _ARMABI double asinh(double /*x*/);
Xextern __declspec(__nothrow) double asinh(double  );
N    /*
N     * Inverse sinh.
N     */
Nextern _ARMABI double atanh(double /*x*/);
Xextern __declspec(__nothrow) double atanh(double  );
N    /*
N     * Inverse tanh. EDOM if |argument| > 1.0
N     */
Nextern _ARMABI double cbrt(double /*x*/);
Xextern __declspec(__nothrow) double cbrt(double  );
N    /*
N     * Cube root.
N     */
N_ARMABI_INLINE _ARMABI_PURE double copysign(double __x, double __y)
Xinline __declspec(__nothrow) __attribute__((const)) double copysign(double __x, double __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __HI(__x) = (__HI(__x) & 0x7fffffff) | (__HI(__y) & 0x80000000);
X    (*(1 + (unsigned *)&(__x))) = ((*(1 + (unsigned *)&(__x))) & 0x7fffffff) | ((*(1 + (unsigned *)&(__y))) & 0x80000000);
N    return __x;
N}
N_ARMABI_INLINE _ARMABI_PURE float copysignf(float __x, float __y)
Xinline __declspec(__nothrow) __attribute__((const)) float copysignf(float __x, float __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __FLT(__x) = (__FLT(__x) & 0x7fffffff) | (__FLT(__y) & 0x80000000);
X    (*(unsigned *)&(__x)) = ((*(unsigned *)&(__x)) & 0x7fffffff) | ((*(unsigned *)&(__y)) & 0x80000000);
N    return __x;
N}
Nextern _ARMABI double erf(double /*x*/);
Xextern __declspec(__nothrow) double erf(double  );
N    /*
N     * Error function. (2/sqrt(pi)) * integral from 0 to x of exp(-t*t) dt.
N     */
Nextern _ARMABI double erfc(double /*x*/);
Xextern __declspec(__nothrow) double erfc(double  );
N    /*
N     * 1-erf(x). (More accurate than just coding 1-erf(x), for large x.)
N     */
Nextern _ARMABI double expm1(double /*x*/);
Xextern __declspec(__nothrow) double expm1(double  );
N    /*
N     * exp(x)-1. (More accurate than just coding exp(x)-1, for small x.)
N     */
N#define fpclassify(x) \
N    ((sizeof(x) == sizeof(float)) ? \
N        __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
X#define fpclassify(x)     ((sizeof(x) == sizeof(float)) ?         __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
N    /*
N     * Classify a floating point number into one of the following values:
N     */
N#define FP_ZERO         (0)
N#define FP_SUBNORMAL    (4)
N#define FP_NORMAL       (5)
N#define FP_INFINITE     (3)
N#define FP_NAN          (7)
N
N#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
X#if 0L && 0L
S/* 
S * Note that we'll never classify a number as FP_NAN, as all NaNs will 
S * be either FP_NANQ or FP_NANS
S */
S#  define FP_NANQ       (8)
S#  define FP_NANS       (9)
N#endif
N
N
Nextern _ARMABI double hypot(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double hypot(double  , double  );
N    /*
N     * sqrt(x*x+y*y), ie the length of the vector (x,y) or the
N     * hypotenuse of a right triangle whose other two sides are x
N     * and y. Won't overflow unless the _answer_ is too big, even
N     * if the intermediate x*x+y*y is too big.
N     */
Nextern _ARMABI int ilogb(double /*x*/);
Xextern __declspec(__nothrow) int ilogb(double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
Nextern _ARMABI int ilogbf(float /*x*/);
Xextern __declspec(__nothrow) int ilogbf(float  );
N    /*
N     * Like ilogb but takes a float
N     */
Nextern _ARMABI int ilogbl(long double /*x*/);
Xextern __declspec(__nothrow) int ilogbl(long double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
N#define FP_ILOGB0   (-0x7fffffff) /* ilogb(0) == -INT_MAX */
N#define FP_ILOGBNAN ( 0x80000000) /* ilogb(NAN) == INT_MIN */
N
N#define isfinite(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isfinitef(x) \
N        : __ARM_isfinite(x))
X#define isfinite(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isfinitef(x)         : __ARM_isfinite(x))
N    /*
N     * Returns true if x is a finite number, size independent.
N     */
N
N#define isgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
X#define isgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
N    /*
N     * Returns true if x > y, throws no exceptions except on Signaling NaNs
N     *
N     * We want the C not set but the Z bit clear, V must be clear
N     */
N
N#define isgreaterequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
X#define isgreaterequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
N    /*
N     * Returns true if x >= y, throws no exceptions except on Signaling NaNs
N     *
N     * We just need to see if the C bit is set or not and ensure V clear
N     */
N
N#define isinf(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isinff(x) \
N        : __ARM_isinf(x))
X#define isinf(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isinff(x)         : __ARM_isinf(x))
N    /*
N     * Returns true if x is an infinity, size independent.
N     */
N
N#define isless(x, y)  \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
X#define isless(x, y)      (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
N    /*
N     * Returns true if x < y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than if N is set, V clear
N     */
N
N#define islessequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0) \
N        : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
X#define islessequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0)         : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
N    /*
N     * Returns true if x <= y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than or equal if one of N or Z is set, V clear
N     */
N
N#define islessgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? __ARM_islessgreaterf((x), (y)) \
N        : __ARM_islessgreater((x), (y)))
X#define islessgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? __ARM_islessgreaterf((x), (y))         : __ARM_islessgreater((x), (y)))
N    /*
N     * Returns true if x <> y, throws no exceptions except on Signaling NaNs
N     * Unfortunately this test is too complicated to do in a macro without
N     * evaluating x & y twice.  Shame really...
N     */
N
N#define isnan(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnanf(x) \
N        : __ARM_isnan(x))
X#define isnan(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnanf(x)         : __ARM_isnan(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isnormal(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnormalf(x) \
N        : __ARM_isnormal(x))
X#define isnormal(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnormalf(x)         : __ARM_isnormal(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isunordered(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
X#define isunordered(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000)         : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
N    /*
N     * Returns true if x ? y, throws no exceptions except on Signaling NaNs
N     * Unordered occurs if and only if the V bit is set
N     */
N
Nextern _ARMABI double lgamma (double /*x*/);
Xextern __declspec(__nothrow) double lgamma (double  );
N    /*
N     * The log of the absolute value of the gamma function of x. The sign
N     * of the gamma function of x is returned in the global `signgam'.
N     */
Nextern _ARMABI double log1p(double /*x*/);
Xextern __declspec(__nothrow) double log1p(double  );
N    /*
N     * log(1+x). (More accurate than just coding log(1+x), for small x.)
N     */
Nextern _ARMABI double logb(double /*x*/);
Xextern __declspec(__nothrow) double logb(double  );
N    /*
N     * Like ilogb but returns a double.
N     */
Nextern _ARMABI float logbf(float /*x*/);
Xextern __declspec(__nothrow) float logbf(float  );
N    /*
N     * Like logb but takes and returns float
N     */
Nextern _ARMABI long double logbl(long double /*x*/);
Xextern __declspec(__nothrow) long double logbl(long double  );
N    /*
N     * Like logb but takes and returns long double
N     */
Nextern _ARMABI double nextafter(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double nextafter(double  , double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nextafterf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float nextafterf(float  , float  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nextafterl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nextafterl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double nexttoward(double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) double nexttoward(double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nexttowardf(float /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) float nexttowardf(float  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nexttowardl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nexttowardl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double remainder(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double remainder(double  , double  );
N    /*
N     * Returns the remainder of x by y, in the IEEE 754 sense.
N     */
Nextern _ARMABI_FPEXCEPT double rint(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double rint(double  );
N    /*
N     * Rounds x to an integer, in the IEEE 754 sense.
N     */
Nextern _ARMABI double scalbln(double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) double scalbln(double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalblnf(float /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) float scalblnf(float  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalblnl(long double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) long double scalblnl(long double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI double scalbn(double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) double scalbn(double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalbnf(float /*x*/, int /*n*/);
Xextern __declspec(__nothrow) float scalbnf(float  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalbnl(long double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) long double scalbnl(long double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
N#define signbit(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_signbitf(x) \
N        : __ARM_signbit(x))
X#define signbit(x)     ((sizeof(x) == sizeof(float))         ? __ARM_signbitf(x)         : __ARM_signbit(x))
N    /*
N     * Returns the signbit of x, size independent macro
N     */
N#endif
N
N/* C99 float versions of functions.  math.h has always reserved these
N   identifiers for this purpose (7.13.4). */
Nextern _ARMABI_PURE float _fabsf(float); /* old ARM name */
Xextern __declspec(__nothrow) __attribute__((const)) float _fabsf(float);  
N_ARMABI_INLINE _ARMABI_PURE float fabsf(float __f) { return _fabsf(__f); }
Xinline __declspec(__nothrow) __attribute__((const)) float fabsf(float __f) { return _fabsf(__f); }
Nextern _ARMABI float sinf(float /*x*/);
Xextern __declspec(__nothrow) float sinf(float  );
Nextern _ARMABI float cosf(float /*x*/);
Xextern __declspec(__nothrow) float cosf(float  );
Nextern _ARMABI float tanf(float /*x*/);
Xextern __declspec(__nothrow) float tanf(float  );
Nextern _ARMABI float acosf(float /*x*/);
Xextern __declspec(__nothrow) float acosf(float  );
Nextern _ARMABI float asinf(float /*x*/);
Xextern __declspec(__nothrow) float asinf(float  );
Nextern _ARMABI float atanf(float /*x*/);
Xextern __declspec(__nothrow) float atanf(float  );
Nextern _ARMABI float atan2f(float /*y*/, float /*x*/);
Xextern __declspec(__nothrow) float atan2f(float  , float  );
Nextern _ARMABI float sinhf(float /*x*/);
Xextern __declspec(__nothrow) float sinhf(float  );
Nextern _ARMABI float coshf(float /*x*/);
Xextern __declspec(__nothrow) float coshf(float  );
Nextern _ARMABI float tanhf(float /*x*/);
Xextern __declspec(__nothrow) float tanhf(float  );
Nextern _ARMABI float expf(float /*x*/);
Xextern __declspec(__nothrow) float expf(float  );
Nextern _ARMABI float logf(float /*x*/);
Xextern __declspec(__nothrow) float logf(float  );
Nextern _ARMABI float log10f(float /*x*/);
Xextern __declspec(__nothrow) float log10f(float  );
Nextern _ARMABI float powf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float powf(float  , float  );
Nextern _ARMABI float sqrtf(float /*x*/);
Xextern __declspec(__nothrow) float sqrtf(float  );
Nextern _ARMABI float ldexpf(float /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) float ldexpf(float  , int  );
Nextern _ARMABI float frexpf(float /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float frexpf(float  , int *  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI_PURE float ceilf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float ceilf(float  );
Nextern _ARMABI_PURE float floorf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float floorf(float  );
Nextern _ARMABI float fmodf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float fmodf(float  , float  );
Nextern _ARMABI float modff(float /*value*/, float * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float modff(float  , float *  ) __attribute__((__nonnull__(2)));
N
N/* C99 long double versions of functions. */
N/* (also need to have 'using' declarations below) */
N#define _ARMDEFLD1(f) \
N    _ARMABI long double f##l(long double /*x*/)
X#define _ARMDEFLD1(f)     _ARMABI long double f##l(long double  )
N
N#define _ARMDEFLD1P(f, T) \
N    _ARMABI long double f##l(long double /*x*/, T /*p*/)
X#define _ARMDEFLD1P(f, T)     _ARMABI long double f##l(long double  , T  )
N
N#define _ARMDEFLD2(f) \
N    _ARMABI long double f##l(long double /*x*/, long double /*y*/)
X#define _ARMDEFLD2(f)     _ARMABI long double f##l(long double  , long double  )
N
N/*
N * Long double versions of C89 functions can be defined
N * unconditionally, because C89 reserved these names in "future
N * library directions".
N */
N_ARMDEFLD1(acos);
X__declspec(__nothrow) long double acosl(long double );
N_ARMDEFLD1(asin);
X__declspec(__nothrow) long double asinl(long double );
N_ARMDEFLD1(atan);
X__declspec(__nothrow) long double atanl(long double );
N_ARMDEFLD2(atan2);
X__declspec(__nothrow) long double atan2l(long double , long double );
N_ARMDEFLD1(ceil);
X__declspec(__nothrow) long double ceill(long double );
N_ARMDEFLD1(cos);
X__declspec(__nothrow) long double cosl(long double );
N_ARMDEFLD1(cosh);
X__declspec(__nothrow) long double coshl(long double );
N_ARMDEFLD1(exp);
X__declspec(__nothrow) long double expl(long double );
N_ARMDEFLD1(fabs);
X__declspec(__nothrow) long double fabsl(long double );
N_ARMDEFLD1(floor);
X__declspec(__nothrow) long double floorl(long double );
N_ARMDEFLD2(fmod);
X__declspec(__nothrow) long double fmodl(long double , long double );
N_ARMDEFLD1P(frexp, int*) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double frexpl(long double , int* ) __attribute__((__nonnull__(2)));
N_ARMDEFLD1P(ldexp, int);
X__declspec(__nothrow) long double ldexpl(long double , int );
N_ARMDEFLD1(log);
X__declspec(__nothrow) long double logl(long double );
N_ARMDEFLD1(log10);
X__declspec(__nothrow) long double log10l(long double );
N_ARMABI long double modfl(long double /*x*/, long double * /*p*/) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double modfl(long double  , long double *  ) __attribute__((__nonnull__(2)));
N_ARMDEFLD2(pow);
X__declspec(__nothrow) long double powl(long double , long double );
N_ARMDEFLD1(sin);
X__declspec(__nothrow) long double sinl(long double );
N_ARMDEFLD1(sinh);
X__declspec(__nothrow) long double sinhl(long double );
N_ARMDEFLD1(sqrt);
X__declspec(__nothrow) long double sqrtl(long double );
N_ARMDEFLD1(tan);
X__declspec(__nothrow) long double tanl(long double );
N_ARMDEFLD1(tanh);
X__declspec(__nothrow) long double tanhl(long double );
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N
N/*
N * C99 float and long double versions of extra-C89 functions.
N */
Nextern _ARMABI float acoshf(float /*x*/);
Xextern __declspec(__nothrow) float acoshf(float  );
N_ARMDEFLD1(acosh);
X__declspec(__nothrow) long double acoshl(long double );
Nextern _ARMABI float asinhf(float /*x*/);
Xextern __declspec(__nothrow) float asinhf(float  );
N_ARMDEFLD1(asinh);
X__declspec(__nothrow) long double asinhl(long double );
Nextern _ARMABI float atanhf(float /*x*/);
Xextern __declspec(__nothrow) float atanhf(float  );
N_ARMDEFLD1(atanh);
X__declspec(__nothrow) long double atanhl(long double );
N_ARMDEFLD2(copysign);
X__declspec(__nothrow) long double copysignl(long double , long double );
Nextern _ARMABI float cbrtf(float /*x*/);
Xextern __declspec(__nothrow) float cbrtf(float  );
N_ARMDEFLD1(cbrt);
X__declspec(__nothrow) long double cbrtl(long double );
Nextern _ARMABI float erff(float /*x*/);
Xextern __declspec(__nothrow) float erff(float  );
N_ARMDEFLD1(erf);
X__declspec(__nothrow) long double erfl(long double );
Nextern _ARMABI float erfcf(float /*x*/);
Xextern __declspec(__nothrow) float erfcf(float  );
N_ARMDEFLD1(erfc);
X__declspec(__nothrow) long double erfcl(long double );
Nextern _ARMABI float expm1f(float /*x*/);
Xextern __declspec(__nothrow) float expm1f(float  );
N_ARMDEFLD1(expm1);
X__declspec(__nothrow) long double expm1l(long double );
Nextern _ARMABI float log1pf(float /*x*/);
Xextern __declspec(__nothrow) float log1pf(float  );
N_ARMDEFLD1(log1p);
X__declspec(__nothrow) long double log1pl(long double );
Nextern _ARMABI float hypotf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float hypotf(float  , float  );
N_ARMDEFLD2(hypot);
X__declspec(__nothrow) long double hypotl(long double , long double );
Nextern _ARMABI float lgammaf(float /*x*/);
Xextern __declspec(__nothrow) float lgammaf(float  );
N_ARMDEFLD1(lgamma);
X__declspec(__nothrow) long double lgammal(long double );
Nextern _ARMABI float remainderf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float remainderf(float  , float  );
N_ARMDEFLD2(remainder);
X__declspec(__nothrow) long double remainderl(long double , long double );
Nextern _ARMABI float rintf(float /*x*/);
Xextern __declspec(__nothrow) float rintf(float  );
N_ARMDEFLD1(rint);
X__declspec(__nothrow) long double rintl(long double );
N
N#endif
N
N#if (defined(__clang__) && !defined(__STRICT_ANSI)) || defined(__USE_C99_MATH)
X#if (0L && !0L) || 1L
N/*
N * Functions new in C99.
N */
Nextern _ARMABI double exp2(double /*x*/); /* * 2.^x. */
Xextern __declspec(__nothrow) double exp2(double  );  
Nextern _ARMABI float exp2f(float /*x*/);
Xextern __declspec(__nothrow) float exp2f(float  );
N_ARMDEFLD1(exp2);
X__declspec(__nothrow) long double exp2l(long double );
Nextern _ARMABI double fdim(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double fdim(double  , double  );
Nextern _ARMABI float fdimf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float fdimf(float  , float  );
N_ARMDEFLD2(fdim);
X__declspec(__nothrow) long double fdiml(long double , long double );
N#ifdef __FP_FAST_FMA
S#define FP_FAST_FMA
N#endif
N#ifdef __FP_FAST_FMAF
N#define FP_FAST_FMAF
N#endif
N#ifdef __FP_FAST_FMAL
S#define FP_FAST_FMAL
N#endif
Nextern _ARMABI double fma(double /*x*/, double /*y*/, double /*z*/);
Xextern __declspec(__nothrow) double fma(double  , double  , double  );
Nextern _ARMABI float fmaf(float /*x*/, float /*y*/, float /*z*/);
Xextern __declspec(__nothrow) float fmaf(float  , float  , float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long double fmal(long double __x, long double __y, long double __z) \
N    { return (long double)fma((double)__x, (double)__y, (double)__z); }
Xinline __declspec(__nothrow) long double fmal(long double __x, long double __y, long double __z)     { return (long double)fma((double)__x, (double)__y, (double)__z); }
N#endif
Nextern _ARMABI_FPEXCEPT double fmax(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fmax(double  , double  );
Nextern _ARMABI_FPEXCEPT float fmaxf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) float fmaxf(float  , float  );
N_ARMDEFLD2(fmax);
X__declspec(__nothrow) long double fmaxl(long double , long double );
Nextern _ARMABI_FPEXCEPT double fmin(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fmin(double  , double  );
Nextern _ARMABI_FPEXCEPT float fminf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) float fminf(float  , float  );
N_ARMDEFLD2(fmin);
X__declspec(__nothrow) long double fminl(long double , long double );
Nextern _ARMABI double log2(double /*x*/); /* * log base 2 of x. */
Xextern __declspec(__nothrow) double log2(double  );  
Nextern _ARMABI float log2f(float /*x*/);
Xextern __declspec(__nothrow) float log2f(float  );
N_ARMDEFLD1(log2);
X__declspec(__nothrow) long double log2l(long double );
Nextern _ARMABI long lrint(double /*x*/);
Xextern __declspec(__nothrow) long lrint(double  );
Nextern _ARMABI long lrintf(float /*x*/);
Xextern __declspec(__nothrow) long lrintf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long lrintl(long double __x) \
N    { return lrint((double)__x); }
Xinline __declspec(__nothrow) long lrintl(long double __x)     { return lrint((double)__x); }
N#endif
Nextern _ARMABI __LONGLONG llrint(double /*x*/);
Xextern __declspec(__nothrow) long long llrint(double  );
Nextern _ARMABI __LONGLONG llrintf(float /*x*/);
Xextern __declspec(__nothrow) long long llrintf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI __LONGLONG llrintl(long double __x) \
N    { return llrint((double)__x); }
Xinline __declspec(__nothrow) long long llrintl(long double __x)     { return llrint((double)__x); }
N#endif
Nextern _ARMABI long lround(double /*x*/);
Xextern __declspec(__nothrow) long lround(double  );
Nextern _ARMABI long lroundf(float /*x*/);
Xextern __declspec(__nothrow) long lroundf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long lroundl(long double __x) \
N    { return lround((double)__x); }
Xinline __declspec(__nothrow) long lroundl(long double __x)     { return lround((double)__x); }
N#endif
Nextern _ARMABI __LONGLONG llround(double /*x*/);
Xextern __declspec(__nothrow) long long llround(double  );
Nextern _ARMABI __LONGLONG llroundf(float /*x*/);
Xextern __declspec(__nothrow) long long llroundf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI __LONGLONG llroundl(long double __x) \
N    { return llround((double)__x); }
Xinline __declspec(__nothrow) long long llroundl(long double __x)     { return llround((double)__x); }
N#endif
Nextern _ARMABI_PURE double nan(const char */*tagp*/);
Xextern __declspec(__nothrow) __attribute__((const)) double nan(const char * );
Nextern _ARMABI_PURE float nanf(const char */*tagp*/);
Xextern __declspec(__nothrow) __attribute__((const)) float nanf(const char * );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI_PURE long double nanl(const char *__t) \
N    { return (long double)nan(__t); }
Xinline __declspec(__nothrow) __attribute__((const)) long double nanl(const char *__t)     { return (long double)nan(__t); }
N#endif
N#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
X#if 0L && 0L
Sextern _ARMABI_PURE double nans(const char */*tagp*/);
Sextern _ARMABI_PURE float nansf(const char */*tagp*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t) \
S    { return (long double)nans(__t); }
X_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t)     { return (long double)nans(__t); }
S#endif
N#endif 
Nextern _ARMABI_FPEXCEPT double nearbyint(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double nearbyint(double  );
Nextern _ARMABI_FPEXCEPT float nearbyintf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float nearbyintf(float  );
N_ARMDEFLD1(nearbyint);
X__declspec(__nothrow) long double nearbyintl(long double );
Nextern  double remquo(double /*x*/, double /*y*/, int */*quo*/);
Nextern  float remquof(float /*x*/, float /*y*/, int */*quo*/);
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE long double remquol(long double __x, long double __y, int *__q) \
N    { return (long double)remquo((double)__x, (double)__y, __q); }
Xinline long double remquol(long double __x, long double __y, int *__q)     { return (long double)remquo((double)__x, (double)__y, __q); }
N#endif
Nextern _ARMABI_FPEXCEPT double round(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double round(double  );
Nextern _ARMABI_FPEXCEPT float roundf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float roundf(float  );
N_ARMDEFLD1(round);
X__declspec(__nothrow) long double roundl(long double );
Nextern _ARMABI double tgamma(double /*x*/); /* * The gamma function of x. */
Xextern __declspec(__nothrow) double tgamma(double  );  
Nextern _ARMABI float tgammaf(float /*x*/);
Xextern __declspec(__nothrow) float tgammaf(float  );
N_ARMDEFLD1(tgamma);
X__declspec(__nothrow) long double tgammal(long double );
Nextern _ARMABI_FPEXCEPT double trunc(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double trunc(double  );
Nextern _ARMABI_FPEXCEPT float truncf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float truncf(float  );
N_ARMDEFLD1(trunc);
X__declspec(__nothrow) long double truncl(long double );
N#endif
N
N#undef _ARMDEFLD1
N#undef _ARMDEFLD1P
N#undef _ARMDEFLD2
N
N#if defined(__cplusplus) && ((!defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)) || defined(__ARMCOMPILER_LIBCXX))
X#if 0L && ((!0L || 1L) || 0L)
S  extern "C++" {
S    inline int (fpclassify)(double __x) { return fpclassify(__x); }
S    inline bool (isfinite)(double __x) { return isfinite(__x); }
S    inline bool (isgreater)(double __x, double __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(double __x, double __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(double __x) { return isinf(__x); }
S    inline bool (isless)(double __x, double __y) { return isless(__x, __y); }
S    inline bool (islessequal)(double __x, double __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(double __x, double __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(double __x) { return isnan(__x); }
S    inline bool (isnormal)(double __x) { return isnormal(__x); }
S    inline bool (isunordered)(double __x, double __y) { return isunordered(__x, __y); }
S
S  }
N#endif
N
N#if defined(__cplusplus) && !defined(__ARMCOMPILER_LIBCXX)
X#if 0L && !0L
S  extern "C++" {
S    inline float abs(float __x)   { return fabsf(__x); }
S    inline float acos(float __x)  { return acosf(__x); }
S    inline float asin(float __x)  { return asinf(__x); }
S    inline float atan(float __x)  { return atanf(__x); }
S    inline float atan2(float __y, float __x)    { return atan2f(__y,__x); }
S    inline float ceil(float __x)  { return ceilf(__x); }
S    inline float cos(float __x)   { return cosf(__x); }
S    inline float cosh(float __x)  { return coshf(__x); }
S    inline float exp(float __x)   { return expf(__x); }
S    inline float fabs(float __x)  { return fabsf(__x); }
S    inline float floor(float __x) { return floorf(__x); }
S    inline float fmod(float __x, float __y)     { return fmodf(__x, __y); }
S    float frexp(float __x, int* __exp) __attribute__((__nonnull__(2)));
S    inline float frexp(float __x, int* __exp)   { return frexpf(__x, __exp); }
S    inline float ldexp(float __x, int __exp)    { return ldexpf(__x, __exp);}
S    inline float log(float __x)   { return logf(__x); }
S    inline float log10(float __x) { return log10f(__x); }
S    float modf(float __x, float* __iptr) __attribute__((__nonnull__(2)));
S    inline float modf(float __x, float* __iptr) { return modff(__x, __iptr); }
S    inline float pow(float __x, float __y)      { return powf(__x,__y); }
S    inline float pow(float __x, int __y)     { return powf(__x, (float)__y); }
S    inline float sin(float __x)   { return sinf(__x); }
S    inline float sinh(float __x)  { return sinhf(__x); }
S    inline float sqrt(float __x)  { return sqrtf(__x); }
S    inline float _sqrt(float __x) { return _sqrtf(__x); }
S    inline float tan(float __x)   { return tanf(__x); }
S    inline float tanh(float __x)  { return tanhf(__x); }
S
S    inline double abs(double __x) { return fabs(__x); }
S    inline double pow(double __x, int __y)
S                { return pow(__x, (double) __y); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double abs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double acos(long double __x)
S                { return (long double)acosl(__x); }
S    inline long double asin(long double __x)
S                { return (long double)asinl(__x); }
S    inline long double atan(long double __x)
S                { return (long double)atanl(__x); }
S    inline long double atan2(long double __y, long double __x)
S                { return (long double)atan2l(__y, __x); }
S    inline long double ceil(long double __x)
S                { return (long double)ceill( __x); }
S    inline long double cos(long double __x)
S                { return (long double)cosl(__x); }
S    inline long double cosh(long double __x)
S                { return (long double)coshl(__x); }
S    inline long double exp(long double __x)
S                { return (long double)expl(__x); }
S    inline long double fabs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double floor(long double __x)
S                { return (long double)floorl(__x); }
S    inline long double fmod(long double __x, long double __y)
S                { return (long double)fmodl(__x, __y); }
S    long double frexp(long double __x, int* __p) __attribute__((__nonnull__(2)));
S    inline long double frexp(long double __x, int* __p)
S                { return (long double)frexpl(__x, __p); }
S    inline long double ldexp(long double __x, int __exp)
S                { return (long double)ldexpl(__x, __exp); }
S    inline long double log(long double __x)
S                { return (long double)logl(__x); }
S    inline long double log10(long double __x)
S                { return (long double)log10l(__x); }
S    long double modf(long double __x, long double* __p) __attribute__((__nonnull__(2)));
S    inline long double modf(long double __x, long double* __p)
S                { return (long double)modfl(__x, __p); }
S    inline long double pow(long double __x, long double __y)
S                { return (long double)powl(__x, __y); }
S    inline long double pow(long double __x, int __y)
S                { return (long double)powl(__x, __y); }
S    inline long double sin(long double __x)
S                { return (long double)sinl(__x); }
S    inline long double sinh(long double __x)
S                { return (long double)sinhl(__x); }
S    inline long double sqrt(long double __x)
S                { return (long double)sqrtl(__x); }
S    inline long double _sqrt(long double __x)
S                { return (long double)_sqrt((double) __x); }
S    inline long double tan(long double __x)
S                { return (long double)tanl(__x); }
S    inline long double tanh(long double __x)
S                { return (long double)tanhl(__x); }
S#endif
S
S#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S    inline float acosh(float __x) { return acoshf(__x); }
S    inline float asinh(float __x) { return asinhf(__x); }
S    inline float atanh(float __x) { return atanhf(__x); }
S    inline float cbrt(float __x) { return cbrtf(__x); }
S    inline float erf(float __x) { return erff(__x); }
S    inline float erfc(float __x) { return erfcf(__x); }
S    inline float expm1(float __x) { return expm1f(__x); }
S    inline float log1p(float __x) { return log1pf(__x); }
S    inline float hypot(float __x, float __y) { return hypotf(__x, __y); }
S    inline float lgamma(float __x) { return lgammaf(__x); }
S    inline float remainder(float __x, float __y) { return remainderf(__x, __y); }
S    inline float rint(float __x) { return rintf(__x); }
S#endif
S
S#ifdef __USE_C99_MATH
S    inline float exp2(float __x) { return exp2f(__x); }
S    inline float fdim(float __x, float __y) { return fdimf(__x, __y); }
S    inline float fma(float __x, float __y, float __z) { return fmaf(__x, __y, __z); }
S    inline float fmax(float __x, float __y) { return fmaxf(__x, __y); }
S    inline float fmin(float __x, float __y) { return fminf(__x, __y); }
S    inline float log2(float __x) { return log2f(__x); }
S    inline _ARMABI long lrint(float __x) { return lrintf(__x); }
S    inline _ARMABI __LONGLONG llrint(float __x) { return llrintf(__x); }
S    inline _ARMABI long lround(float __x) { return lroundf(__x); }
S    inline _ARMABI __LONGLONG llround(float __x) { return llroundf(__x); }
S    inline _ARMABI_FPEXCEPT float nearbyint(float __x) { return nearbyintf(__x); }
S    inline float remquo(float __x, float __y, int *__q) { return remquof(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT float round(float __x) { return roundf(__x); }
S    inline float tgamma(float __x) { return tgammaf(__x); }
S    inline _ARMABI_FPEXCEPT float trunc(float __x) { return truncf(__x); }
S
S    inline int (fpclassify)(float __x) { return fpclassify(__x); }
S    inline bool (isfinite)(float __x) { return isfinite(__x); }
S    inline bool (isgreater)(float __x, float __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(float __x, float __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(float __x) { return isinf(__x); }
S    inline bool (isless)(float __x, float __y) { return isless(__x, __y); }
S    inline bool (islessequal)(float __x, float __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(float __x, float __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(float __x) { return isnan(__x); }
S    inline bool (isnormal)(float __x) { return isnormal(__x); }
S    inline bool (isunordered)(float __x, float __y) { return isunordered(__x, __y); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double acosh(long double __x) { return acoshl(__x); }
S    inline long double asinh(long double __x) { return asinhl(__x); }
S    inline long double atanh(long double __x) { return atanhl(__x); }
S    inline long double cbrt(long double __x) { return cbrtl(__x); }
S    inline long double erf(long double __x) { return erfl(__x); }
S    inline long double erfc(long double __x) { return erfcl(__x); }
S    inline long double expm1(long double __x) { return expm1l(__x); }
S    inline long double log1p(long double __x) { return log1pl(__x); }
S    inline long double hypot(long double __x, long double __y) { return hypotl(__x, __y); }
S    inline long double lgamma(long double __x) { return lgammal(__x); }
S    inline long double remainder(long double __x, long double __y) { return remainderl(__x, __y); }
S    inline long double rint(long double __x) { return rintl(__x); }
S    inline long double exp2(long double __x) { return exp2l(__x); }
S    inline long double fdim(long double __x, long double __y) { return fdiml(__x, __y); }
S    inline long double fma(long double __x, long double __y, long double __z) { return fmal(__x, __y, __z); }
S    inline long double fmax(long double __x, long double __y) { return fmaxl(__x, __y); }
S    inline long double fmin(long double __x, long double __y) { return fminl(__x, __y); }
S    inline long double log2(long double __x) { return log2l(__x); }
S    inline _ARMABI long lrint(long double __x) { return lrintl(__x); }
S    inline _ARMABI __LONGLONG llrint(long double __x) { return llrintl(__x); }
S    inline _ARMABI long lround(long double __x) { return lroundl(__x); }
S    inline _ARMABI __LONGLONG llround(long double __x) { return llroundl(__x); }
S    inline _ARMABI_FPEXCEPT long double nearbyint(long double __x) { return nearbyintl(__x); }
S    inline long double remquo(long double __x, long double __y, int *__q) { return remquol(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT long double round(long double __x) { return roundl(__x); }
S    inline long double tgamma(long double __x) { return tgammal(__x); }
S    inline _ARMABI_FPEXCEPT long double trunc(long double __x) { return truncl(__x); }
S    inline int (fpclassify)(long double __x) { return fpclassify(__x); }
S    inline bool (isfinite)(long double __x) { return isfinite(__x); }
S    inline bool (isgreater)(long double __x, long double __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(long double __x, long double __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(long double __x) { return isinf(__x); }
S    inline bool (isless)(long double __x, long double __y) { return isless(__x, __y); }
S    inline bool (islessequal)(long double __x, long double __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(long double __x, long double __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(long double __x) { return isnan(__x); }
S    inline bool (isnormal)(long double __x) { return isnormal(__x); }
S    inline bool (isunordered)(long double __x, long double __y) { return isunordered(__x, __y); }
S#endif
S
S#undef fpclassify
S#undef isfinite
S#undef isgreater
S#undef isgreaterequal
S#undef isinf
S#undef isless
S#undef islessequal
S#undef islessgreater
S#undef isnan
S#undef isnormal
S#undef isunordered
S
S#endif
S
S  }
N#endif
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __MATH_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__MATH_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::__use_accurate_range_reduction;
S    #ifndef __ARMCOMPILER_LIBCXX
S      using ::std::abs;
S    #endif
S    using ::std::acos;
S    using ::std::asin;
S    using ::std::atan2;
S    using ::std::atan;
S    using ::std::ceil;
S    using ::std::cos;
S    using ::std::cosh;
S    using ::std::exp;
S    using ::std::fabs;
S    using ::std::floor;
S    using ::std::fmod;
S    using ::std::frexp;
S    using ::std::ldexp;
S    using ::std::log10;
S    using ::std::log;
S    using ::std::modf;
S    using ::std::pow;
S    using ::std::sin;
S    using ::std::sinh;
S    using ::std::sqrt;
S    using ::std::_sqrt;
S    using ::std::_sqrtf;
S    using ::std::tan;
S    using ::std::tanh;
S    using ::std::_fabsf;
S    /* C99 float and long double versions in already-C89-reserved namespace */
S    using ::std::acosf;
S    using ::std::acosl;
S    using ::std::asinf;
S    using ::std::asinl;
S    using ::std::atan2f;
S    using ::std::atan2l;
S    using ::std::atanf;
S    using ::std::atanl;
S    using ::std::ceilf;
S    using ::std::ceill;
S    using ::std::cosf;
S    using ::std::coshf;
S    using ::std::coshl;
S    using ::std::cosl;
S    using ::std::expf;
S    using ::std::expl;
S    using ::std::fabsf;
S    using ::std::fabsl;
S    using ::std::floorf;
S    using ::std::floorl;
S    using ::std::fmodf;
S    using ::std::fmodl;
S    using ::std::frexpf;
S    using ::std::frexpl;
S    using ::std::ldexpf;
S    using ::std::ldexpl;
S    using ::std::log10f;
S    using ::std::log10l;
S    using ::std::logf;
S    using ::std::logl;
S    using ::std::modff;
S    using ::std::modfl;
S    using ::std::powf;
S    using ::std::powl;
S    using ::std::sinf;
S    using ::std::sinhf;
S    using ::std::sinhl;
S    using ::std::sinl;
S    using ::std::sqrtf;
S    using ::std::sqrtl;
S    using ::std::tanf;
S    using ::std::tanhf;
S    using ::std::tanhl;
S    using ::std::tanl;
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      /* C99 additions which for historical reasons appear in non-strict mode */
S      using ::std::acosh;
S      using ::std::asinh;
S      using ::std::atanh;
S      using ::std::cbrt;
S      using ::std::copysign;
S      using ::std::copysignf;
S      using ::std::erf;
S      using ::std::erfc;
S      using ::std::expm1;
S      using ::std::hypot;
S      using ::std::ilogb;
S      using ::std::ilogbf;
S      using ::std::ilogbl;
S      using ::std::lgamma;
S      using ::std::log1p;
S      using ::std::logb;
S      using ::std::logbf;
S      using ::std::logbl;
S      using ::std::nextafter;
S      using ::std::nextafterf;
S      using ::std::nextafterl;
S      using ::std::nexttoward;
S      using ::std::nexttowardf;
S      using ::std::nexttowardl;
S      using ::std::remainder;
S      using ::std::rint;
S      using ::std::scalbln;
S      using ::std::scalblnf;
S      using ::std::scalblnl;
S      using ::std::scalbn;
S      using ::std::scalbnf;
S      using ::std::scalbnl;
S      using ::std::math_errhandling;
S      using ::std::acoshf;
S      using ::std::acoshl;
S      using ::std::asinhf;
S      using ::std::asinhl;
S      using ::std::atanhf;
S      using ::std::atanhl;
S      using ::std::copysignl;
S      using ::std::cbrtf;
S      using ::std::cbrtl;
S      using ::std::erff;
S      using ::std::erfl;
S      using ::std::erfcf;
S      using ::std::erfcl;
S      using ::std::expm1f;
S      using ::std::expm1l;
S      using ::std::log1pf;
S      using ::std::log1pl;
S      using ::std::hypotf;
S      using ::std::hypotl;
S      using ::std::lgammaf;
S      using ::std::lgammal;
S      using ::std::remainderf;
S      using ::std::remainderl;
S      using ::std::rintf;
S      using ::std::rintl;
S      /* New in C99. */
S      using ::std::float_t;
S      using ::std::double_t;
S    #endif
S    #if (defined(__clang__) && !defined(__STRICT_ANSI)) || defined(__USE_C99_MATH)
S      /* Functions new in C99. */
S      using ::std::exp2;
S      using ::std::exp2f;
S      using ::std::exp2l;
S      using ::std::fdim;
S      using ::std::fdimf;
S      using ::std::fdiml;
S      using ::std::fma;
S      using ::std::fmaf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::fmal;
S#endif
S      using ::std::fmax;
S      using ::std::fmaxf;
S      using ::std::fmaxl;
S      using ::std::fmin;
S      using ::std::fminf;
S      using ::std::fminl;
S      using ::std::log2;
S      using ::std::log2f;
S      using ::std::log2l;
S      using ::std::lrint;
S      using ::std::lrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lrintl;
S#endif
S      using ::std::llrint;
S      using ::std::llrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llrintl;
S#endif
S      using ::std::lround;
S      using ::std::lroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lroundl;
S#endif
S      using ::std::llround;
S      using ::std::llroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llroundl;
S#endif
S      using ::std::nan;
S      using ::std::nanf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::nanl;
S#endif
S      using ::std::nearbyint;
S      using ::std::nearbyintf;
S      using ::std::nearbyintl;
S      using ::std::remquo;
S      using ::std::remquof;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::remquol;
S#endif
S      using ::std::round;
S      using ::std::roundf;
S      using ::std::roundl;
S      using ::std::tgamma;
S      using ::std::tgammaf;
S      using ::std::tgammal;
S      using ::std::trunc;
S      using ::std::truncf;
S      using ::std::truncl;
S    #endif
S
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      using ::std::fpclassify;
S      using ::std::isfinite;
S      using ::std::isgreater;
S      using ::std::isgreaterequal;
S      using ::std::isinf;
S      using ::std::isless;
S      using ::std::islessequal;
S      using ::std::islessgreater;
S      using ::std::isnan;
S      using ::std::isnormal;
S      using ::std::isunordered;
S    #endif
N  #endif
N
N#undef __LONGLONG
N
N#endif /* __math_h */
N
N/* end of math.h */
L 43 "..\..\Ecal\JsonIf\cJSON.c" 2
N#include <stdlib.h>
L 1 "d:\Keil_v5\ARM\ARMCC\Bin\..\include\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998,2014 ARM Limited. All rights reserved.       */
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N#define __ARMCLIB_VERSION 5060019
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define _ARMABI_THROW
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N  /*
N   * Some of these declarations are new in C99.  To access them in C++
N   * you can use -D__USE_C99_STDLIB (or -D__USE_C99ALL).
N   */
N  #ifndef __USE_C99_STDLIB
N    #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X    #if 0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N      #define __USE_C99_STDLIB 1
N    #endif
N  #endif
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N   /* unconditional in non-strict C for consistency of debug info */
N   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X   #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
N   #else
N    typedef unsigned short wchar_t; /* see <stddef.h> */
N   #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
N  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Ntypedef struct lldiv_t { __LONGLONG quot, rem; } lldiv_t;
Xtypedef struct lldiv_t { long long quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
Nextern _ARMABI int __aeabi_MB_CUR_MAX(void);
Xextern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);
N#define MB_CUR_MAX ( __aeabi_MB_CUR_MAX() )
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain a compliant version of the strtod
N    * family of functions.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Nextern _ARMABI double atof(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI int atoi(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI long int atol(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI __LONGLONG atoll(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long long atoll(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern _ARMABI double strtod(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI float strtof(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
Nextern _ARMABI long double strtold(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * same as strtod, but return float and long double respectively.
N    */
N#endif
Nextern _ARMABI long int strtol(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long int strtol(const char * __restrict  ,
N                        char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned long int strtoul(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
N                                       char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N/* C90 reserves all names beginning with 'str' */
Nextern _ARMABI __LONGLONG strtoll(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long long strtoll(const char * __restrict  ,
N                                  char ** __restrict /*endptr*/, int /*base*/)
N                          __attribute__((__nonnull__(1)));
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned __LONGLONG strtoull(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long long strtoull(const char * __restrict  ,
N                                            char ** __restrict /*endptr*/, int /*base*/)
N                                   __attribute__((__nonnull__(1)));
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N
Nextern _ARMABI int rand(void);
Xextern __declspec(__nothrow) int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern _ARMABI void srand(unsigned int /*seed*/);
Xextern __declspec(__nothrow) void srand(unsigned int  );
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nstruct _rand_state { int __x[57]; };
Nextern _ARMABI int _rand_r(struct _rand_state *);
Xextern __declspec(__nothrow) int _rand_r(struct _rand_state *);
Nextern _ARMABI void _srand_r(struct _rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
Nstruct _ANSI_rand_state { int __x[1]; };
Nextern _ARMABI int _ANSI_rand_r(struct _ANSI_rand_state *);
Xextern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
Nextern _ARMABI void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
N   /*
N    * Re-entrant variants of both flavours of rand, which operate on
N    * an explicitly supplied state buffer.
N    */
N
Nextern _ARMABI void *calloc(size_t /*nmemb*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *calloc(size_t  , size_t  );
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void free(void * /*ptr*/);
Xextern __declspec(__nothrow) void free(void *  );
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern _ARMABI void *malloc(size_t /*size*/);
Xextern __declspec(__nothrow) void *malloc(size_t  );
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void *realloc(void * /*ptr*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *realloc(void *  , size_t  );
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
Nextern _ARMABI int posix_memalign(void ** /*ret*/, size_t /*alignment*/, size_t /*size*/);
Xextern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
N   /*
N    * allocates space for an object of size 'size', aligned to a
N    * multiple of 'alignment' (which must be a power of two and at
N    * least 4).
N    *
N    * On success, a pointer to the allocated object is stored in
N    * *ret, and zero is returned. On failure, the return value is
N    * either ENOMEM (allocation failed because no suitable piece of
N    * memory was available) or EINVAL (the 'alignment' parameter was
N    * invalid).
N    */
N#endif
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern _ARMABI void __heapstats(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                        void * /*param*/) __attribute__((__nonnull__(1)));
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern _ARMABI int __heapvalid(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/) __attribute__((__nonnull__(1)));
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern _ARMABI_NORETURN void abort(void);
Xextern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
N
Nextern _ARMABI int atexit(void (* /*func*/)(void)) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
N#if defined(__EDG__) && !defined(__GNUC__)
X#if 1L && !0L
N#define __LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE
N#endif
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE) 
X#if 0L && 1L 
S    /* atexit that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode  
S     */
S    typedef void (* __C_exitfuncptr)();
S    extern "C++"
S    inline int atexit(void (* __func)()) {
S      return atexit((__C_exitfuncptr)__func);
S    }
N#endif
N
N
Nextern _ARMABI_NORETURN void exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern _ARMABI_NORETURN void _Exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
N   /*
N    * causes normal program termination to occur. No functions registered
N    * by the atexit function are called.
N    * In this implementation, all open output streams are flushed, all
N    * open streams are closed, and all files created by the tmpfile function
N    * are removed.
N    * Control is returned to the host environment. The status returned to
N    * the host environment is determined in the same way as for 'exit'.
N    */     
N
Nextern _ARMABI char *getenv(const char * /*name*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
N
Nextern _ARMABI int  system(const char * /*string*/);
Xextern __declspec(__nothrow) int  system(const char *  );
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern _ARMABI_THROW void *bsearch(const void * /*key*/, const void * /*base*/,
Xextern  void *bsearch(const void *  , const void *  ,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* bsearch that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */
S    typedef int (* __C_compareprocptr)(const void *, const void *);
S    extern "C++"
S    void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
S    extern "C++"
S    inline void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) {
S      return bsearch(__key, __base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
N
Nextern _ARMABI_THROW void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
Xextern  void qsort(void *  , size_t  , size_t  ,
N           int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* qsort that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */    
S    extern "C++"
S    void qsort(void * __base, size_t __nmemb, size_t __size,
S               int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
S    extern "C++"
S    inline void qsort(void * __base, size_t __nmemb, size_t __size,
S                      int (* __compar)(const void *, const void *)) {
S      qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
Nextern _ARMABI_PURE int abs(int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) int abs(int  );
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern _ARMABI_PURE div_t div(int /*numer*/, int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) div_t div(int  , int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern _ARMABI_PURE long int labs(long int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long int labs(long int  );
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE long abs(long int x) { return labs(x); }
N#endif
N
Nextern _ARMABI_PURE ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) ldiv_t ldiv(long int  , long int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE ldiv_t div(long int __numer, long int __denom) {
S       return ldiv(__numer, __denom);
S   }
N#endif
N
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI_PURE __LONGLONG llabs(__LONGLONG /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long long llabs(long long  );
N   /*
N    * computes the absolute value of a long long integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE __LONGLONG abs(__LONGLONG x) { return llabs(x); }
N#endif
N
Nextern _ARMABI_PURE lldiv_t lldiv(__LONGLONG /*numer*/, __LONGLONG /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) lldiv_t lldiv(long long  , long long  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE lldiv_t div(__LONGLONG __numer, __LONGLONG __denom) {
S       return lldiv(__numer, __denom);
S   }
N#endif
N#endif
N
N#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern _ARMABI_PURE __sdiv32by16 __rt_sdiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __udiv32by16 __rt_udiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __sdiv64by32 __rt_sdiv64by32(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N#endif
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern _ARMABI unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
Xextern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern _ARMABI int mblen(const char * /*s*/, size_t /*n*/);
Xextern __declspec(__nothrow) int mblen(const char *  , size_t  );
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern _ARMABI int mbtowc(wchar_t * __restrict /*pwc*/,
Xextern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
N                   const char * __restrict /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern _ARMABI int wctomb(char * /*s*/, wchar_t /*wchar*/);
Xextern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern _ARMABI size_t mbstowcs(wchar_t * __restrict /*pwcs*/,
Xextern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
N                      const char * __restrict /*s*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern _ARMABI size_t wcstombs(char * __restrict /*s*/,
Xextern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
N                      const wchar_t * __restrict /*pwcs*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern _ARMABI void __use_realtime_heap(void);
Xextern __declspec(__nothrow) void __use_realtime_heap(void);
Nextern _ARMABI void __use_realtime_division(void);
Xextern __declspec(__nothrow) void __use_realtime_division(void);
Nextern _ARMABI void __use_two_region_memory(void);
Xextern __declspec(__nothrow) void __use_two_region_memory(void);
Nextern _ARMABI void __use_no_heap(void);
Xextern __declspec(__nothrow) void __use_no_heap(void);
Nextern _ARMABI void __use_no_heap_region(void);
Xextern __declspec(__nothrow) void __use_no_heap_region(void);
N
Nextern _ARMABI char const *__C_library_version_string(void);
Xextern __declspec(__nothrow) char const *__C_library_version_string(void);
Nextern _ARMABI int __C_library_version_number(void);
Xextern __declspec(__nothrow) int __C_library_version_number(void);
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDLIB_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __STDLIB_NO_EXPORTS
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::atoll;
S        using ::std::lldiv_t;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::div_t;
S      using ::std::ldiv_t;
S      using ::std::atof;
S      using ::std::atoi;
S      using ::std::atol;
S      using ::std::strtod;
S#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S      using ::std::strtof;
S      using ::std::strtold;
S#endif
S      using ::std::strtol;
S      using ::std::strtoul;
S      using ::std::strtoll;
S      using ::std::strtoull;
S      using ::std::rand;
S      using ::std::srand;
S      using ::std::_rand_state;
S      using ::std::_rand_r;
S      using ::std::_srand_r;
S      using ::std::_ANSI_rand_state;
S      using ::std::_ANSI_rand_r;
S      using ::std::_ANSI_srand_r;
S      using ::std::calloc;
S      using ::std::free;
S      using ::std::malloc;
S      using ::std::realloc;
S#if !defined(__STRICT_ANSI__)
S      using ::std::posix_memalign;
S#endif
S      using ::std::__heapprt;
S      using ::std::__heapstats;
S      using ::std::__heapvalid;
S      using ::std::abort;
S      using ::std::atexit;
S      using ::std::exit;
S      using ::std::_Exit;
S      using ::std::getenv;
S      using ::std::system;
S      using ::std::bsearch;
S      using ::std::qsort;
S      using ::std::abs;
S      using ::std::div;
S      using ::std::labs;
S      using ::std::ldiv;
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::llabs;
S        using ::std::lldiv;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
S      using ::std::__sdiv32by16;
S      using ::std::__udiv32by16;
S      using ::std::__sdiv64by32;
S      using ::std::__rt_sdiv32by16;
S      using ::std::__rt_udiv32by16;
S      using ::std::__rt_sdiv64by32;
S#endif
S      using ::std::__fp_status;
S      using ::std::mblen;
S      using ::std::mbtowc;
S      using ::std::wctomb;
S      using ::std::mbstowcs;
S      using ::std::wcstombs;
S      using ::std::__use_realtime_heap;
S      using ::std::__use_realtime_division;
S      using ::std::__use_two_region_memory;
S      using ::std::__use_no_heap;
S      using ::std::__use_no_heap_region;
S      using ::std::__C_library_version_string;
S      using ::std::__C_library_version_number;
S      using ::std::size_t;
S      using ::std::__aeabi_MB_CUR_MAX;
S    #endif /* __STDLIB_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#undef __LONGLONG
N
N#endif /* __stdlib_h */
N
N/* end of stdlib.h */
L 44 "..\..\Ecal\JsonIf\cJSON.c" 2
N#include <limits.h>
L 1 "d:\Keil_v5\ARM\ARMCC\Bin\..\include\limits.h" 1
N/* limits.h: ANSI 'C' (X3J11 Oct 88) library header, section 2.2.4.2 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991-1997 ARM Limited. All rights reserved         */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __limits_h
N#define __limits_h
N#define __ARMCLIB_VERSION 5060019
N
N#define CHAR_BIT 8
N    /* max number of bits for smallest object that is not a bit-field (byte) */
N#define SCHAR_MIN (-128)
N    /* mimimum value for an object of type signed char */
N#define SCHAR_MAX 127
N    /* maximum value for an object of type signed char */
N#define UCHAR_MAX 255
N    /* maximum value for an object of type unsigned char */
N#ifdef __FEATURE_SIGNED_CHAR
S  #define CHAR_MIN (-128)
S      /* minimum value for an object of type char */
S  #define CHAR_MAX 127
S      /* maximum value for an object of type char */
N#else
N  #define CHAR_MIN 0
N      /* minimum value for an object of type char */
N  #define CHAR_MAX 255
N      /* maximum value for an object of type char */
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
Sextern const int __aeabi_MB_LEN_MAX;
S#define MB_LEN_MAX (__aeabi_MB_LEN_MAX)
N#else
N#define MB_LEN_MAX 6
N#endif
N    /* maximum number of bytes in a multibyte character, */
N    /* for any supported locale */
N
N#define SHRT_MIN  (-0x8000)
N    /* minimum value for an object of type short int */
N#define SHRT_MAX  0x7fff
N    /* maximum value for an object of type short int */
N#define USHRT_MAX 65535
N    /* maximum value for an object of type unsigned short int */
N#define INT_MIN   (~0x7fffffff)  /* -2147483648 and 0x80000000 are unsigned */
N    /* minimum value for an object of type int */
N#define INT_MAX   0x7fffffff
N    /* maximum value for an object of type int */
N#define UINT_MAX  0xffffffffU
N    /* maximum value for an object of type unsigned int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MIN  (~0x7fffffffffffffffL)
N#else
N  #define LONG_MIN  (~0x7fffffffL)
N#endif
N    /* minimum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MAX  0x7fffffffffffffffL
N#else
N  #define LONG_MAX  0x7fffffffL
N#endif
N    /* maximum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define ULONG_MAX 0xffffffffffffffffUL
N#else
N  #define ULONG_MAX 0xffffffffUL
N#endif
N    /* maximum value for an object of type unsigned long int */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N  #define LLONG_MIN  (~0x7fffffffffffffffLL)
N      /* minimum value for an object of type long long int */
N  #define LLONG_MAX    0x7fffffffffffffffLL
N      /* maximum value for an object of type long long int */
N  #define ULLONG_MAX   0xffffffffffffffffULL
N      /* maximum value for an object of type unsigned long int */
N#endif
N
N#endif
N
N/* end of limits.h */
N
L 45 "..\..\Ecal\JsonIf\cJSON.c" 2
N#include <ctype.h>
L 1 "d:\Keil_v5\ARM\ARMCC\Bin\..\include\ctype.h" 1
N/* ctype.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.3 */
N/* Copyright (C) Codemist Ltd. 1988-1993.                       */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.        */
N/* version 0.03 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/*
N * ctype.h declares several functions useful for testing and mapping
N * characters. In all cases the argument is an int, the value of which shall
N * be representable as an unsigned char or shall equal the value of the
N * macro EOF. If the argument has any other value, the behaviour is undefined.
N */
N
N#ifndef __ctype_h
N#define __ctype_h
N#define __ARMCLIB_VERSION 5060019
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N
N#ifdef __cplusplus
S#define _ARMABI_INLINE_DEF inline
N#elif defined(__GNUC__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#elif 0L || (1L && 199901L <= 199901L)
N#define _ARMABI_INLINE_DEF static inline
N#elif defined(_USE_STATIC_INLINE)
S#define _ARMABI_INLINE_DEF static __inline
S#else
S#define _ARMABI_INLINE_DEF __inline
N#endif
N
N  #ifndef __CTYPE_DECLS
N  #define __CTYPE_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/* AEABI portable ctype flag bits */
N#define _ABI_A    1       /* alphabetic        */
N#define _ABI_X    2       /* A-F, a-f and 0-9  */
N#define _ABI_P    4       /* punctuation       */
N#define _ABI_B    8       /* blank             */
N#define _ABI_S   16       /* white space       */
N#define _ABI_L   32       /* lower case letter */
N#define _ABI_U   64       /* upper case letter */
N#define _ABI_C  128       /* control chars     */
N
N/* ARM internal ctype flag bits */
N/* N.B. - keep in step with <ctype.c> */
N
N/*
N * __ARM_CT_A (alphabetic) is required because characters in some locales
N * (e.g. Japanese) can be alphabetic but neither uppercase nor
N * lowercase. Unfortunately there wasn't a bit free for this, so
N * instead we've defined __ARM_CT_A as __ARM_CT_N+__ARM_CT_X (on the grounds that this
N * was a previously unused combination). Hence some of the ctype
N * predicates below are slightly less than obvious in
N * implementation.
N */
N#define __ARM_CT_S 1            /* whitespace           */
N#define __ARM_CT_P 2            /* punctuation          */
N#define __ARM_CT_B 4            /* blank                */
N#define __ARM_CT_L 8            /* lower case letter    */
N#define __ARM_CT_U 16           /* upper case letter    */
N#define __ARM_CT_N 32           /* (decimal) digit      */
N#define __ARM_CT_C 64           /* control chars        */
N#define __ARM_CT_X 128          /* A-F and a-f          */
N#define __ARM_CT_A (__ARM_CT_N+__ARM_CT_X)    /* alphabetic           */
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S
Sextern int (isalnum)(int /*c*/);
Sextern int (isalpha)(int /*c*/);
Sextern int (isblank)(int /*c*/);
Sextern int (iscntrl)(int /*c*/);
Sextern int (isdigit)(int /*c*/);
Sextern int (isgraph)(int /*c*/);
Sextern int (islower)(int /*c*/);
Sextern int (isprint)(int /*c*/);
Sextern int (ispunct)(int /*c*/);
Sextern int (isspace)(int /*c*/);
Sextern int (isupper)(int /*c*/);
Sextern int (isxdigit)(int /*c*/);
S
S/* Mandatory character attribute arrays indexed from 0 to 256 */
Sextern unsigned char const __aeabi_ctype_table_C[257];  /* "C" locale */
Sextern unsigned char const __aeabi_ctype_table_[257];   /* default locale */
S         /* The default locale might be the C locale */
S/* Optional character attribute arrays indexed from 0 to 256.        */
S/* These do not have to be provided by every execution environment   */
S/* but, if provided, shall be provided with these names and meaning. */
Sextern unsigned char const __aeabi_ctype_table_ISO8859_1[257];
Sextern unsigned char const __aeabi_ctype_table_SJIS[257];
Sextern unsigned char const __aeabi_ctype_table_BIG5[257];
Sextern unsigned char const __aeabi_ctype_table_UTF8[257];
S#ifdef _AEABI_LC_CTYPE
S# define _AEABI_CTYPE_TABLE(_X) __aeabi_ctype_table_ ## _X
S# define _AEABI_CTYPE(_X) _AEABI_CTYPE_TABLE(_X)
S# define __aeabi_ctype_table _AEABI_CTYPE(_AEABI_LC_CTYPE)
S#else
S# define __aeabi_ctype_table __aeabi_ctype_table_
S#endif
S
S#define isspace(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_S)
S#define isalpha(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_A)
S#define isalnum(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] << 30) /* test for _ABI_A and _ABI_X */
S#define isprint(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] << 28) /* test for _ABI_A, _ABI_X, _ABI_P and _ABI_B */
S#define isupper(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_U)
S#define islower(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_L)
S#define isxdigit(x) ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_X)
S#define isgraph(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] << 29) /* test for _ABI_A, _ABI_X and _ABI_P */
S#define iscntrl(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_C)
S#define ispunct(x)  ((__CLIBNS __aeabi_ctype_table+1)[(x)] & _ABI_P)
S#define isdigit(c)  (((unsigned)(c) - '0') < 10)
S
N#else /* __AEABI_PORTABILITY_LEVEL */
N
Nextern _ARMABI_PURE unsigned char **__rt_ctype_table(void);
Xextern __declspec(__nothrow) __attribute__((const)) unsigned char **__rt_ctype_table(void);
N
N#define __arm_ctype (*__CLIBNS __rt_ctype_table())
N
N#ifdef __cplusplus
S    inline int isalnum(int __c) { return (__arm_ctype[__c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_N)); }
N#else
N    #define isalnum(c) (__arm_ctype[c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_N))
N    extern int (isalnum)(int /*c*/);
N#endif
N    /* non-0 iff c is alphabetic or numeric */
N
N#ifdef __cplusplus
S    inline int isalpha(int __c) { return (__arm_ctype[__c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_X)); }
N#else
N    #define isalpha(c) (__arm_ctype[c] & (__ARM_CT_U+__ARM_CT_L+__ARM_CT_X))
N    extern int (isalpha)(int /*c*/);
N#endif
N    /* non-0 iff c is alphabetic */
N
N#ifdef __cplusplus
S    inline int iscntrl(int __c) { return (__arm_ctype[__c] & __ARM_CT_C); }
N#else
N    #define iscntrl(c) (__arm_ctype[c] & __ARM_CT_C)
N    extern int (iscntrl)(int /*c*/);
N#endif
N    /* non-0 iff c is a control character - in the "C" locale */
N    /*       this means (c < ' ') || (c > '~')                */
N
N/* isdigit must test for the presence of _only_ __ARM_CT_N, not just __ARM_CT_N at all. */
N#ifdef __cplusplus
S    inline int isdigit(int __c) { return (__arm_ctype[__c] == __ARM_CT_N); }
N#else
N    #define isdigit(c) (__arm_ctype[c] == __ARM_CT_N)
N    extern int (isdigit)(int /*c*/);
N#endif
N    /* non-0 iff c is a decimal digit */
N
N    extern int (isblank)(int /*c*/);
N    /* non-0 iff c is ' ', '\t' or some other locale-specific, */
N    /* word-separating character (there are no others in "C"   */
N    /* locale) */
N
N#ifdef __cplusplus
S    inline int isgraph(int __c) {return(__arm_ctype[__c] & (__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_X+__ARM_CT_P));}
N#else
N    #define isgraph(c) (__arm_ctype[c]&(__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_X+__ARM_CT_P))
N    extern int (isgraph)(int /*c*/);
N#endif
N    /* non-0 iff c is any printing character other than ' ' */
N
N#ifdef __cplusplus
S    inline int islower(int __c) { return (__arm_ctype[__c] & __ARM_CT_L); }
N#else
N    #define islower(c) (__arm_ctype[c] & __ARM_CT_L)
N    extern int (islower)(int /*c*/);
N#endif
N    /* non-0 iff c is a lower-case letter */
N
N#ifdef __cplusplus
S    inline int isprint(int __c) { return (__arm_ctype[__c] & (__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_P+__ARM_CT_B)); }
N#else
N    #define isprint(c) (__arm_ctype[c] & (__ARM_CT_L+__ARM_CT_U+__ARM_CT_N+__ARM_CT_P+__ARM_CT_B))
N    extern int (isprint)(int /*c*/);
N#endif
N    /* non-0 iff c is a printing character - in the "C" locale */
N    /*       this means 0x20 (space) -> 0x7E (tilde)           */
N
N#ifdef __cplusplus
S    inline int ispunct(int __c) { return (__arm_ctype[__c] & __ARM_CT_P); }
N#else
N    #define ispunct(c) (__arm_ctype[c] & __ARM_CT_P)
N    extern int (ispunct)(int /*c*/);
N#endif
N    /* non-0 iff c is a non-space, non-alpha-numeric, printing character */
N
N#ifdef __cplusplus
S    inline int isspace(int __c) { return (__arm_ctype[__c] & __ARM_CT_S); }
N#else
N    #define isspace(c) (__arm_ctype[c] & __ARM_CT_S)
N    extern int (isspace)(int /*c*/);
N#endif
N    /* non-0 iff c is a white-space char: ' ', '\f', '\n', '\r', '\t', '\v'. */
N
N#ifdef __cplusplus
S    inline int isupper(int __c) { return (__arm_ctype[__c] & __ARM_CT_U); }
N#else
N    #define isupper(c) (__arm_ctype[c] & __ARM_CT_U)
N    extern int (isupper)(int /*c*/);
N#endif
N    /* non-0 iff c is an upper-case letter */
N
N/* isxdigit must test for the presence of __ARM_CT_N or __ARM_CT_X but not both. */
N/* This helper function avoids needing to evaluate c twice. */
N
N_ARMABI_INLINE_DEF int __isxdigit_helper(int __t) { return (__t ^ (__t << 2)); }
Xstatic inline int __isxdigit_helper(int __t) { return (__t ^ (__t << 2)); }
N#ifdef __cplusplus
S    inline int isxdigit(int __c){return __isxdigit_helper(__arm_ctype[__c]) & __ARM_CT_X;}
N#else
N    #define isxdigit(c) (__isxdigit_helper(__arm_ctype[c]) & __ARM_CT_X)
N    extern int (isxdigit)(int /*c*/);
N#endif
N    /* non-0 iff c is a digit, in 'a'..'f', or in 'A'..'F' */
N
N#endif /* __AEABI_PORTABILITY_LEVEL */
N
Nextern int tolower(int /*c*/);
N    /* if c is an upper-case letter then return the corresponding */
N    /* lower-case letter, otherwise return c.                     */
N
Nextern int toupper(int /*c*/);
N    /* if c is an lower-case letter then return the corresponding */
N    /* upper-case letter, otherwise return c.                     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __CTYPE_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __CTYPE_NO_EXPORTS
S      using ::std::isalnum;
S      using ::std::isalpha;
S      using ::std::iscntrl;
S      using ::std::isdigit;
S      using ::std::isblank;
S      using ::std::isgraph;
S      using ::std::islower;
S      using ::std::isprint;
S      using ::std::ispunct;
S      using ::std::isspace;
S      using ::std::isupper;
S      using ::std::isxdigit;
S      using ::std::tolower;
S      using ::std::toupper;
S    #endif /* __CTYPE_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of ctype.h */
N
L 46 "..\..\Ecal\JsonIf\cJSON.c" 2
N
N#ifdef ENABLE_LOCALES
S#include <locale.h>
N#endif
N
N#if defined(_MSC_VER)
X#if 0L
S#pragma warning (pop)
N#endif
N#ifdef __GNUC__
S#pragma GCC visibility pop
N#endif
N
N#include "cJSON.h"
L 1 "..\..\Ecal\JsonIf\cJSON.h" 1
N/*
N  Copyright (c) 2009-2017 Dave Gamble and cJSON contributors
N
N  Permission is hereby granted, free of charge, to any person obtaining a copy
N  of this software and associated documentation files (the "Software"), to deal
N  in the Software without restriction, including without limitation the rights
N  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
N  copies of the Software, and to permit persons to whom the Software is
N  furnished to do so, subject to the following conditions:
N
N  The above copyright notice and this permission notice shall be included in
N  all copies or substantial portions of the Software.
N
N  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
N  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
N  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
N  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
N  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
N  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
N  THE SOFTWARE.
N*/
N
N#ifndef cJSON__h
N#define cJSON__h
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N/* project version */
N#define CJSON_VERSION_MAJOR 1
N#define CJSON_VERSION_MINOR 7
N#define CJSON_VERSION_PATCH 6
N
N#include <stddef.h>
L 1 "d:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199901L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 37 "..\..\Ecal\JsonIf\cJSON.h" 2
N
N/* cJSON Types: */
N#define cJSON_Invalid (0)
N#define cJSON_False  (1 << 0)
N#define cJSON_True   (1 << 1)
N#define cJSON_NULL   (1 << 2)
N#define cJSON_Number (1 << 3)
N#define cJSON_String (1 << 4)
N#define cJSON_Array  (1 << 5)
N#define cJSON_Object (1 << 6)
N#define cJSON_Raw    (1 << 7) /* raw json */
N
N#define cJSON_IsReference 256
N#define cJSON_StringIsConst 512
N
N/* The cJSON structure: */
Ntypedef struct cJSON
N{
N    /* next/prev allow you to walk array/object chains. Alternatively, use GetArraySize/GetArrayItem/GetObjectItem */
N    struct cJSON *next;
N    struct cJSON *prev;
N    /* An array or object item will have a child pointer pointing to a chain of the items in the array/object. */
N    struct cJSON *child;
N
N    /* The type of the item, as above. */
N    int type;
N
N    /* The item's string, if type==cJSON_String  and type == cJSON_Raw */
N    char *valuestring;
N    /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */
N    int valueint;
N    /* The item's number, if type==cJSON_Number */
N    double valuedouble;
N
N    /* The item's name string, if this item is the child of, or is in the list of subitems of an object. */
N    char *string;
N} cJSON;
N
Ntypedef struct cJSON_Hooks
N{
N      void *(*malloc_fn)(size_t sz);
N      void (*free_fn)(void *ptr);
N} cJSON_Hooks;
N
Ntypedef int cJSON_bool;
N
N#if !defined(__WINDOWS__) && (defined(WIN32) || defined(WIN64) || defined(_MSC_VER) || defined(_WIN32))
X#if !0L && (0L || 0L || 0L || 0L)
S#define __WINDOWS__
N#endif
N#ifdef __WINDOWS__
S
S/* When compiling for windows, we specify a specific calling convention to avoid issues where we are being called from a project with a different default calling convention.  For windows you have 2 define options:
S
SCJSON_HIDE_SYMBOLS - Define this in the case where you don't want to ever dllexport symbols
SCJSON_EXPORT_SYMBOLS - Define this on library build when you want to dllexport symbols (default)
SCJSON_IMPORT_SYMBOLS - Define this if you want to dllimport symbol
S
SFor *nix builds that support visibility attribute, you can define similar behavior by
S
Ssetting default visibility to hidden by adding
S-fvisibility=hidden (for gcc)
Sor
S-xldscope=hidden (for sun cc)
Sto CFLAGS
S
Sthen using the CJSON_API_VISIBILITY flag to "export" the same symbols the way CJSON_EXPORT_SYMBOLS does
S
S*/
S
S/* export symbols by default, this is necessary for copy pasting the C and header file */
S#if !defined(CJSON_HIDE_SYMBOLS) && !defined(CJSON_IMPORT_SYMBOLS) && !defined(CJSON_EXPORT_SYMBOLS)
S#define CJSON_EXPORT_SYMBOLS
S#endif
S
S#if defined(CJSON_HIDE_SYMBOLS)
S#define CJSON_PUBLIC(type)   type __stdcall
S#elif defined(CJSON_EXPORT_SYMBOLS)
S#define CJSON_PUBLIC(type)   __declspec(dllexport) type __stdcall
S#elif defined(CJSON_IMPORT_SYMBOLS)
S#define CJSON_PUBLIC(type)   __declspec(dllimport) type __stdcall
S#endif
N#else /* !WIN32 */
N#if (defined(__GNUC__) || defined(__SUNPRO_CC) || defined (__SUNPRO_C)) && defined(CJSON_API_VISIBILITY)
X#if (0L || 0L || 0L) && 0L
S#define CJSON_PUBLIC(type)   __attribute__((visibility("default"))) type
N#else
N#define CJSON_PUBLIC(type) type
N#endif
N#endif
N
N/* Limits how deeply nested arrays/objects can be before cJSON rejects to parse them.
N * This is to prevent stack overflows. */
N#ifndef CJSON_NESTING_LIMIT
N#define CJSON_NESTING_LIMIT 1000
N#endif
N
N/* returns the version of cJSON as a string */
NCJSON_PUBLIC(const char*) cJSON_Version(void);
Xconst char* cJSON_Version(void);
N
N/* Supply malloc, realloc and free functions to cJSON */
NCJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks);
Xvoid cJSON_InitHooks(cJSON_Hooks* hooks);
N
N/* Memory Management: the caller is always responsible to free the results from all variants of cJSON_Parse (with cJSON_Delete) and cJSON_Print (with stdlib free, cJSON_Hooks.free_fn, or cJSON_free as appropriate). The exception is cJSON_PrintPreallocated, where the caller has full responsibility of the buffer. */
N/* Supply a block of JSON, and this returns a cJSON object you can interrogate. */
NCJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value);
XcJSON * cJSON_Parse(const char *value);
N/* ParseWithOpts allows you to require (and check) that the JSON is null terminated, and to retrieve the pointer to the final byte parsed. */
N/* If you supply a ptr in return_parse_end and parsing fails, then return_parse_end will contain a pointer to the error so will match cJSON_GetErrorPtr(). */
NCJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated);
XcJSON * cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated);
N
N/* Render a cJSON entity to text for transfer/storage. */
NCJSON_PUBLIC(char *) cJSON_Print(const cJSON *item);
Xchar * cJSON_Print(const cJSON *item);
N/* Render a cJSON entity to text for transfer/storage without any formatting. */
NCJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item);
Xchar * cJSON_PrintUnformatted(const cJSON *item);
N/* Render a cJSON entity to text using a buffered strategy. prebuffer is a guess at the final size. guessing well reduces reallocation. fmt=0 gives unformatted, =1 gives formatted */
NCJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt);
Xchar * cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt);
N/* Render a cJSON entity to text using a buffer already allocated in memory with given length. Returns 1 on success and 0 on failure. */
N/* NOTE: cJSON is not always 100% accurate in estimating how much memory it will use, so to be safe allocate 5 bytes more than you actually need */
NCJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format);
XcJSON_bool cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format);
N/* Delete a cJSON entity and all subentities. */
NCJSON_PUBLIC(void) cJSON_Delete(cJSON *c);
Xvoid cJSON_Delete(cJSON *c);
N
N/* Returns the number of items in an array (or object). */
NCJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);
Xint cJSON_GetArraySize(const cJSON *array);
N/* Retrieve item number "item" from array "array". Returns NULL if unsuccessful. */
NCJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index);
XcJSON * cJSON_GetArrayItem(const cJSON *array, int index);
N/* Get item "string" from object. Case insensitive. */
NCJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string);
XcJSON * cJSON_GetObjectItem(const cJSON * const object, const char * const string);
NCJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string);
XcJSON * cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string);
NCJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string);
XcJSON_bool cJSON_HasObjectItem(const cJSON *object, const char *string);
N/* For analysing failed parses. This returns a pointer to the parse error. You'll probably need to look a few chars back to make sense of it. Defined when cJSON_Parse() returns 0. 0 when cJSON_Parse() succeeds. */
NCJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void);
Xconst char * cJSON_GetErrorPtr(void);
N
N/* Check if the item is a string and return its valuestring */
NCJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item);
Xchar * cJSON_GetStringValue(cJSON *item);
N
N/* These functions check the type of an item */
NCJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item);
XcJSON_bool cJSON_IsInvalid(const cJSON * const item);
NCJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item);
XcJSON_bool cJSON_IsFalse(const cJSON * const item);
NCJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item);
XcJSON_bool cJSON_IsTrue(const cJSON * const item);
NCJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item);
XcJSON_bool cJSON_IsBool(const cJSON * const item);
NCJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item);
XcJSON_bool cJSON_IsNull(const cJSON * const item);
NCJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item);
XcJSON_bool cJSON_IsNumber(const cJSON * const item);
NCJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item);
XcJSON_bool cJSON_IsString(const cJSON * const item);
NCJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item);
XcJSON_bool cJSON_IsArray(const cJSON * const item);
NCJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item);
XcJSON_bool cJSON_IsObject(const cJSON * const item);
NCJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item);
XcJSON_bool cJSON_IsRaw(const cJSON * const item);
N
N/* These calls create a cJSON item of the appropriate type. */
NCJSON_PUBLIC(cJSON *) cJSON_CreateNull(void);
XcJSON * cJSON_CreateNull(void);
NCJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void);
XcJSON * cJSON_CreateTrue(void);
NCJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void);
XcJSON * cJSON_CreateFalse(void);
NCJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);
XcJSON * cJSON_CreateBool(cJSON_bool boolean);
NCJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num);
XcJSON * cJSON_CreateNumber(double num);
NCJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string);
XcJSON * cJSON_CreateString(const char *string);
N/* raw json */
NCJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw);
XcJSON * cJSON_CreateRaw(const char *raw);
NCJSON_PUBLIC(cJSON *) cJSON_CreateArray(void);
XcJSON * cJSON_CreateArray(void);
NCJSON_PUBLIC(cJSON *) cJSON_CreateObject(void);
XcJSON * cJSON_CreateObject(void);
N
N/* Create a string where valuestring references a string so
N * it will not be freed by cJSON_Delete */
NCJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string);
XcJSON * cJSON_CreateStringReference(const char *string);
N/* Create an object/arrray that only references it's elements so
N * they will not be freed by cJSON_Delete */
NCJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child);
XcJSON * cJSON_CreateObjectReference(const cJSON *child);
NCJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child);
XcJSON * cJSON_CreateArrayReference(const cJSON *child);
N
N/* These utilities create an Array of count items. */
NCJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count);
XcJSON * cJSON_CreateIntArray(const int *numbers, int count);
NCJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count);
XcJSON * cJSON_CreateFloatArray(const float *numbers, int count);
NCJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count);
XcJSON * cJSON_CreateDoubleArray(const double *numbers, int count);
NCJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char **strings, int count);
XcJSON * cJSON_CreateStringArray(const char **strings, int count);
N
N/* Append item to the specified array/object. */
NCJSON_PUBLIC(void) cJSON_AddItemToArray(cJSON *array, cJSON *item);
Xvoid cJSON_AddItemToArray(cJSON *array, cJSON *item);
NCJSON_PUBLIC(void) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item);
Xvoid cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item);
N/* Use this when string is definitely const (i.e. a literal, or as good as), and will definitely survive the cJSON object.
N * WARNING: When this function was used, make sure to always check that (item->type & cJSON_StringIsConst) is zero before
N * writing to `item->string` */
NCJSON_PUBLIC(void) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item);
Xvoid cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item);
N/* Append reference to item to the specified array/object. Use this when you want to add an existing cJSON to a new cJSON, but don't want to corrupt your existing cJSON. */
NCJSON_PUBLIC(void) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item);
Xvoid cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item);
NCJSON_PUBLIC(void) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item);
Xvoid cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item);
N
N/* Remove/Detatch items from Arrays/Objects. */
NCJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item);
XcJSON * cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item);
NCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which);
XcJSON * cJSON_DetachItemFromArray(cJSON *array, int which);
NCJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which);
Xvoid cJSON_DeleteItemFromArray(cJSON *array, int which);
NCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string);
XcJSON * cJSON_DetachItemFromObject(cJSON *object, const char *string);
NCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string);
XcJSON * cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string);
NCJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string);
Xvoid cJSON_DeleteItemFromObject(cJSON *object, const char *string);
NCJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string);
Xvoid cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string);
N
N/* Update array items. */
NCJSON_PUBLIC(void) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem); /* Shifts pre-existing items to the right. */
Xvoid cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem);  
NCJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement);
XcJSON_bool cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement);
NCJSON_PUBLIC(void) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem);
Xvoid cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem);
NCJSON_PUBLIC(void) cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem);
Xvoid cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem);
NCJSON_PUBLIC(void) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object,const char *string,cJSON *newitem);
Xvoid cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object,const char *string,cJSON *newitem);
N
N/* Duplicate a cJSON item */
NCJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse);
XcJSON * cJSON_Duplicate(const cJSON *item, cJSON_bool recurse);
N/* Duplicate will create a new, identical cJSON item to the one you pass, in new memory that will
Nneed to be released. With recurse!=0, it will duplicate any children connected to the item.
NThe item->next and ->prev pointers are always zero on return from Duplicate. */
N/* Recursively compare two cJSON items for equality. If either a or b is NULL or invalid, they will be considered unequal.
N * case_sensitive determines if object keys are treated case sensitive (1) or case insensitive (0) */
NCJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive);
XcJSON_bool cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive);
N
N
NCJSON_PUBLIC(void) cJSON_Minify(char *json);
Xvoid cJSON_Minify(char *json);
N
N/* Helper functions for creating and adding items to an object at the same time.
N * They return the added item or NULL on failure. */
NCJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name);
XcJSON* cJSON_AddNullToObject(cJSON * const object, const char * const name);
NCJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name);
XcJSON* cJSON_AddTrueToObject(cJSON * const object, const char * const name);
NCJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name);
XcJSON* cJSON_AddFalseToObject(cJSON * const object, const char * const name);
NCJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean);
XcJSON* cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean);
NCJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number);
XcJSON* cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number);
NCJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string);
XcJSON* cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string);
NCJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw);
XcJSON* cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw);
NCJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name);
XcJSON* cJSON_AddObjectToObject(cJSON * const object, const char * const name);
NCJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name);
XcJSON* cJSON_AddArrayToObject(cJSON * const object, const char * const name);
N
N/* When assigning an integer value, it needs to be propagated to valuedouble too. */
N#define cJSON_SetIntValue(object, number) ((object) ? (object)->valueint = (object)->valuedouble = (number) : (number))
N/* helper for the cJSON_SetNumberValue macro */
NCJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number);
Xdouble cJSON_SetNumberHelper(cJSON *object, double number);
N#define cJSON_SetNumberValue(object, number) ((object != NULL) ? cJSON_SetNumberHelper(object, (double)number) : (number))
N
N/* Macro for iterating over an array or object */
N#define cJSON_ArrayForEach(element, array) for(element = (array != NULL) ? (array)->child : NULL; element != NULL; element = element->next)
N
N/* malloc/free objects using the malloc/free functions that have been set with cJSON_InitHooks */
NCJSON_PUBLIC(void *) cJSON_malloc(size_t size);
Xvoid * cJSON_malloc(size_t size);
NCJSON_PUBLIC(void) cJSON_free(void *object);
Xvoid cJSON_free(void *object);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 59 "..\..\Ecal\JsonIf\cJSON.c" 2
N
N/* define our own boolean type */
N#define true ((cJSON_bool)1)
N#define false ((cJSON_bool)0)
N
Ntypedef struct {
N    const unsigned char *json;
N    size_t position;
N} error;
Nstatic error global_error = { NULL, 0 };
Xstatic error global_error = { 0, 0 };
N
NCJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
Xconst char * cJSON_GetErrorPtr(void)
N{
N    return (const char*) (global_error.json + global_error.position);
N}
N
NCJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {
Xchar * cJSON_GetStringValue(cJSON *item) {
N    if (!cJSON_IsString(item)) {
N        return NULL;
X        return 0;
N    }
N
N    return item->valuestring;
N}
N
N/* This is a safeguard to prevent copy-pasters from using incompatible C and header files */
N#if (CJSON_VERSION_MAJOR != 1) || (CJSON_VERSION_MINOR != 7) || (CJSON_VERSION_PATCH != 6)
X#if (1 != 1) || (7 != 7) || (6 != 6)
S    #error cJSON.h and cJSON.c have different versions. Make sure that both have the same.
N#endif
N
NCJSON_PUBLIC(const char*) cJSON_Version(void)
Xconst char* cJSON_Version(void)
N{
N    static char version[15];
N    sprintf(version, "%i.%i.%i", CJSON_VERSION_MAJOR, CJSON_VERSION_MINOR, CJSON_VERSION_PATCH);
X    sprintf(version, "%i.%i.%i", 1, 7, 6);
N
N    return version;
N}
N
N/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
Nstatic int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
N{
N    if ((string1 == NULL) || (string2 == NULL))
X    if ((string1 == 0) || (string2 == 0))
N    {
N        return 1;
N    }
N
N    if (string1 == string2)
N    {
N        return 0;
N    }
N
N    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
N    {
N        if (*string1 == '\0')
N        {
N            return 0;
N        }
N    }
N
N    return tolower(*string1) - tolower(*string2);
N}
N
Ntypedef struct internal_hooks
N{
N    void *(*allocate)(size_t size);
N    void (*deallocate)(void *pointer);
N    void *(*reallocate)(void *pointer, size_t size);
N} internal_hooks;
N
N#if defined(_MSC_VER)
X#if 0L
S/* work around MSVC error C2322: '...' address of dillimport '...' is not static */
Sstatic void *internal_malloc(size_t size)
S{
S    return malloc(size);
S}
Sstatic void internal_free(void *pointer)
S{
S    free(pointer);
S}
Sstatic void *internal_realloc(void *pointer, size_t size)
S{
S    return realloc(pointer, size);
S}
N#else
N#define internal_malloc malloc
N#define internal_free free
N#define internal_realloc realloc
N#endif
N
Nstatic internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };
Xstatic internal_hooks global_hooks = { malloc, free, realloc };
N
Nstatic unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
N{
N    size_t length = 0;
N    unsigned char *copy = NULL;
X    unsigned char *copy = 0;
N
N    if (string == NULL)
X    if (string == 0)
N    {
N        return NULL;
X        return 0;
N    }
N
N    length = strlen((const char*)string) + sizeof("");
N    copy = (unsigned char*)hooks->allocate(length);
N    if (copy == NULL)
X    if (copy == 0)
N    {
N        return NULL;
X        return 0;
N    }
N    memcpy(copy, string, length);
N
N    return copy;
N}
N
NCJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)
Xvoid cJSON_InitHooks(cJSON_Hooks* hooks)
N{
N    if (hooks == NULL)
X    if (hooks == 0)
N    {
N        /* Reset hooks */
N        global_hooks.allocate = malloc;
N        global_hooks.deallocate = free;
N        global_hooks.reallocate = realloc;
N        return;
N    }
N
N    global_hooks.allocate = malloc;
N    if (hooks->malloc_fn != NULL)
X    if (hooks->malloc_fn != 0)
N    {
N        global_hooks.allocate = hooks->malloc_fn;
N    }
N
N    global_hooks.deallocate = free;
N    if (hooks->free_fn != NULL)
X    if (hooks->free_fn != 0)
N    {
N        global_hooks.deallocate = hooks->free_fn;
N    }
N
N    /* use realloc only if both free and malloc are used */
N    global_hooks.reallocate = NULL;
X    global_hooks.reallocate = 0;
N    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
N    {
N        global_hooks.reallocate = realloc;
N    }
N}
N
N/* Internal constructor. */
Nstatic cJSON *cJSON_New_Item(const internal_hooks * const hooks)
N{
N    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
N    if (node)
N    {
N        memset(node, '\0', sizeof(cJSON));
N    }
N
N    return node;
N}
N
N/* Delete a cJSON structure. */
NCJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
Xvoid cJSON_Delete(cJSON *item)
N{
N    cJSON *next = NULL;
X    cJSON *next = 0;
N    while (item != NULL)
X    while (item != 0)
N    {
N        next = item->next;
N        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
X        if (!(item->type & 256) && (item->child != 0))
N        {
N            cJSON_Delete(item->child);
N        }
N        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
X        if (!(item->type & 256) && (item->valuestring != 0))
N        {
N            global_hooks.deallocate(item->valuestring);
N        }
N        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
X        if (!(item->type & 512) && (item->string != 0))
N        {
N            global_hooks.deallocate(item->string);
N        }
N        global_hooks.deallocate(item);
N        item = next;
N    }
N}
N
N/* get the decimal point character of the current locale */
Nstatic unsigned char get_decimal_point(void)
N{
N#ifdef ENABLE_LOCALES
S    struct lconv *lconv = localeconv();
S    return (unsigned char) lconv->decimal_point[0];
N#else
N    return '.';
N#endif
N}
N
Ntypedef struct
N{
N    const unsigned char *content;
N    size_t length;
N    size_t offset;
N    size_t depth; /* How deeply nested (in arrays/objects) is the input at the current offset. */
N    internal_hooks hooks;
N} parse_buffer;
N
N/* check if the given size is left to read in a given parse buffer (starting with 1) */
N#define can_read(buffer, size) ((buffer != NULL) && (((buffer)->offset + size) <= (buffer)->length))
N/* check if the buffer can be accessed at the given index (starting with 0) */
N#define can_access_at_index(buffer, index) ((buffer != NULL) && (((buffer)->offset + index) < (buffer)->length))
N#define cannot_access_at_index(buffer, index) (!can_access_at_index(buffer, index))
N/* get a pointer to the buffer at the position */
N#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)
N
N/* Parse the input text to generate a number, and populate the result into item. */
Nstatic cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
N{
N    double number = 0;
N    unsigned char *after_end = NULL;
X    unsigned char *after_end = 0;
N    unsigned char number_c_string[64];
N    unsigned char decimal_point = get_decimal_point();
N    size_t i = 0;
N
N    if ((input_buffer == NULL) || (input_buffer->content == NULL))
X    if ((input_buffer == 0) || (input_buffer->content == 0))
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    /* copy the number into a temporary buffer and replace '.' with the decimal point
N     * of the current locale (for strtod)
N     * This also takes care of '\0' not necessarily being available for marking the end of the input */
N    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
X    for (i = 0; (i < (sizeof(number_c_string) - 1)) && ((input_buffer != 0) && (((input_buffer)->offset + i) < (input_buffer)->length)); i++)
N    {
N        switch (buffer_at_offset(input_buffer)[i])
X        switch (((input_buffer)->content + (input_buffer)->offset)[i])
N        {
N            case '0':
N            case '1':
N            case '2':
N            case '3':
N            case '4':
N            case '5':
N            case '6':
N            case '7':
N            case '8':
N            case '9':
N            case '+':
N            case '-':
N            case 'e':
N            case 'E':
N                number_c_string[i] = buffer_at_offset(input_buffer)[i];
X                number_c_string[i] = ((input_buffer)->content + (input_buffer)->offset)[i];
N                break;
N
N            case '.':
N                number_c_string[i] = decimal_point;
N                break;
N
N            default:
N                goto loop_end;
N        }
N    }
Nloop_end:
N    number_c_string[i] = '\0';
N
N    number = strtod((const char*)number_c_string, (char**)&after_end);
N    if (number_c_string == after_end)
N    {
N        return false; /* parse_error */
X        return ((cJSON_bool)0);  
N    }
N
N    item->valuedouble = number;
N
N    /* use saturation in case of overflow */
N    if (number >= INT_MAX)
X    if (number >= 0x7fffffff)
N    {
N        item->valueint = INT_MAX;
X        item->valueint = 0x7fffffff;
N    }
N    else if (number <= INT_MIN)
X    else if (number <= (~0x7fffffff))
N    {
N        item->valueint = INT_MIN;
X        item->valueint = (~0x7fffffff);
N    }
N    else
N    {
N        item->valueint = (int)number;
N    }
N
N    item->type = cJSON_Number;
X    item->type = (1 << 3);
N
N    input_buffer->offset += (size_t)(after_end - number_c_string);
N    return true;
X    return ((cJSON_bool)1);
N}
N
N/* don't ask me, but the original cJSON_SetNumberValue returns an integer or double */
NCJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)
Xdouble cJSON_SetNumberHelper(cJSON *object, double number)
N{
N    if (number >= INT_MAX)
X    if (number >= 0x7fffffff)
N    {
N        object->valueint = INT_MAX;
X        object->valueint = 0x7fffffff;
N    }
N    else if (number <= INT_MIN)
X    else if (number <= (~0x7fffffff))
N    {
N        object->valueint = INT_MIN;
X        object->valueint = (~0x7fffffff);
N    }
N    else
N    {
N        object->valueint = (int)number;
N    }
N
N    return object->valuedouble = number;
N}
N
Ntypedef struct
N{
N    unsigned char *buffer;
N    size_t length;
N    size_t offset;
N    size_t depth; /* current nesting depth (for formatted printing) */
N    cJSON_bool noalloc;
N    cJSON_bool format; /* is this print a formatted print */
N    internal_hooks hooks;
N} printbuffer;
N
N/* realloc printbuffer if necessary to have at least "needed" bytes more */
Nstatic unsigned char* ensure(printbuffer * const p, size_t needed)
N{
N    unsigned char *newbuffer = NULL;
X    unsigned char *newbuffer = 0;
N    size_t newsize = 0;
N
N    if ((p == NULL) || (p->buffer == NULL))
X    if ((p == 0) || (p->buffer == 0))
N    {
N        return NULL;
X        return 0;
N    }
N
N    if ((p->length > 0) && (p->offset >= p->length))
N    {
N        /* make sure that offset is valid */
N        return NULL;
X        return 0;
N    }
N
N    if (needed > INT_MAX)
X    if (needed > 0x7fffffff)
N    {
N        /* sizes bigger than INT_MAX are currently not supported */
N        return NULL;
X        return 0;
N    }
N
N    needed += p->offset + 1;
N    if (needed <= p->length)
N    {
N        return p->buffer + p->offset;
N    }
N
N    if (p->noalloc) {
N        return NULL;
X        return 0;
N    }
N
N    /* calculate new buffer size */
N    if (needed > (INT_MAX / 2))
X    if (needed > (0x7fffffff / 2))
N    {
N        /* overflow of int, use INT_MAX if possible */
N        if (needed <= INT_MAX)
X        if (needed <= 0x7fffffff)
N        {
N            newsize = INT_MAX;
X            newsize = 0x7fffffff;
N        }
N        else
N        {
N            return NULL;
X            return 0;
N        }
N    }
N    else
N    {
N        newsize = needed * 2;
N    }
N
N    if (p->hooks.reallocate != NULL)
X    if (p->hooks.reallocate != 0)
N    {
N        /* reallocate with realloc if available */
N        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
N        if (newbuffer == NULL)
X        if (newbuffer == 0)
N        {
N            p->hooks.deallocate(p->buffer);
N            p->length = 0;
N            p->buffer = NULL;
X            p->buffer = 0;
N
N            return NULL;
X            return 0;
N        }
N    }
N    else
N    {
N        /* otherwise reallocate manually */
N        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
N        if (!newbuffer)
N        {
N            p->hooks.deallocate(p->buffer);
N            p->length = 0;
N            p->buffer = NULL;
X            p->buffer = 0;
N
N            return NULL;
X            return 0;
N        }
N        if (newbuffer)
N        {
N            memcpy(newbuffer, p->buffer, p->offset + 1);
N        }
N        p->hooks.deallocate(p->buffer);
N    }
N    p->length = newsize;
N    p->buffer = newbuffer;
N
N    return newbuffer + p->offset;
N}
N
N/* calculate the new length of the string in a printbuffer and update the offset */
Nstatic void update_offset(printbuffer * const buffer)
N{
N    const unsigned char *buffer_pointer = NULL;
X    const unsigned char *buffer_pointer = 0;
N    if ((buffer == NULL) || (buffer->buffer == NULL))
X    if ((buffer == 0) || (buffer->buffer == 0))
N    {
N        return;
N    }
N    buffer_pointer = buffer->buffer + buffer->offset;
N
N    buffer->offset += strlen((const char*)buffer_pointer);
N}
N
N/* Render the number nicely from the given item into a string. */
Nstatic cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
N{
N    unsigned char *output_pointer = NULL;
X    unsigned char *output_pointer = 0;
N    double d = item->valuedouble;
N    int length = 0;
N    size_t i = 0;
N    unsigned char number_buffer[26]; /* temporary buffer to print the number into */
N    unsigned char decimal_point = get_decimal_point();
N    double test;
N
N    if (output_buffer == NULL)
X    if (output_buffer == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    /* This checks for NaN and Infinity */
N    if ((d * 0) != 0)
N    {
N        length = sprintf((char*)number_buffer, "null");
N    }
N    else
N    {
N        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
N        length = sprintf((char*)number_buffer, "%1.15g", d);
N
N        /* Check whether the original double can be recovered */
N        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
N        {
N            /* If not, print with 17 decimal places of precision */
N            length = sprintf((char*)number_buffer, "%1.17g", d);
N        }
N    }
N
N    /* sprintf failed or buffer overrun occured */
N    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    /* reserve appropriate space in the output */
N    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
N    if (output_pointer == NULL)
X    if (output_pointer == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    /* copy the printed number to the output and replace locale
N     * dependent decimal point with '.' */
N    for (i = 0; i < ((size_t)length); i++)
N    {
N        if (number_buffer[i] == decimal_point)
N        {
N            output_pointer[i] = '.';
N            continue;
N        }
N
N        output_pointer[i] = number_buffer[i];
N    }
N    output_pointer[i] = '\0';
N
N    output_buffer->offset += (size_t)length;
N
N    return true;
X    return ((cJSON_bool)1);
N}
N
N/* parse 4 digit hexadecimal number */
Nstatic unsigned parse_hex4(const unsigned char * const input)
N{
N    unsigned int h = 0;
N    size_t i = 0;
N
N    for (i = 0; i < 4; i++)
N    {
N        /* parse digit */
N        if ((input[i] >= '0') && (input[i] <= '9'))
N        {
N            h += (unsigned int) input[i] - '0';
N        }
N        else if ((input[i] >= 'A') && (input[i] <= 'F'))
N        {
N            h += (unsigned int) 10 + input[i] - 'A';
N        }
N        else if ((input[i] >= 'a') && (input[i] <= 'f'))
N        {
N            h += (unsigned int) 10 + input[i] - 'a';
N        }
N        else /* invalid */
N        {
N            return 0;
N        }
N
N        if (i < 3)
N        {
N            /* shift left to make place for the next nibble */
N            h = h << 4;
N        }
N    }
N
N    return h;
N}
N
N/* converts a UTF-16 literal to UTF-8
N * A literal can be one or two sequences of the form \uXXXX */
Nstatic unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
N{
N    long unsigned int codepoint = 0;
N    unsigned int first_code = 0;
N    const unsigned char *first_sequence = input_pointer;
N    unsigned char utf8_length = 0;
N    unsigned char utf8_position = 0;
N    unsigned char sequence_length = 0;
N    unsigned char first_byte_mark = 0;
N
N    if ((input_end - first_sequence) < 6)
N    {
N        /* input ends unexpectedly */
N        goto fail;
N    }
N
N    /* get the first utf16 sequence */
N    first_code = parse_hex4(first_sequence + 2);
N
N    /* check that the code is valid */
N    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
N    {
N        goto fail;
N    }
N
N    /* UTF16 surrogate pair */
N    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
N    {
N        const unsigned char *second_sequence = first_sequence + 6;
N        unsigned int second_code = 0;
N        sequence_length = 12; /* \uXXXX\uXXXX */
N
N        if ((input_end - second_sequence) < 6)
N        {
N            /* input ends unexpectedly */
N            goto fail;
N        }
N
N        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
N        {
N            /* missing second half of the surrogate pair */
N            goto fail;
N        }
N
N        /* get the second utf16 sequence */
N        second_code = parse_hex4(second_sequence + 2);
N        /* check that the code is valid */
N        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
N        {
N            /* invalid second half of the surrogate pair */
N            goto fail;
N        }
N
N
N        /* calculate the unicode codepoint from the surrogate pair */
N        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
N    }
N    else
N    {
N        sequence_length = 6; /* \uXXXX */
N        codepoint = first_code;
N    }
N
N    /* encode as UTF-8
N     * takes at maximum 4 bytes to encode:
N     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
N    if (codepoint < 0x80)
N    {
N        /* normal ascii, encoding 0xxxxxxx */
N        utf8_length = 1;
N    }
N    else if (codepoint < 0x800)
N    {
N        /* two bytes, encoding 110xxxxx 10xxxxxx */
N        utf8_length = 2;
N        first_byte_mark = 0xC0; /* 11000000 */
N    }
N    else if (codepoint < 0x10000)
N    {
N        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
N        utf8_length = 3;
N        first_byte_mark = 0xE0; /* 11100000 */
N    }
N    else if (codepoint <= 0x10FFFF)
N    {
N        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
N        utf8_length = 4;
N        first_byte_mark = 0xF0; /* 11110000 */
N    }
N    else
N    {
N        /* invalid unicode codepoint */
N        goto fail;
N    }
N
N    /* encode as utf8 */
N    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
N    {
N        /* 10xxxxxx */
N        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
N        codepoint >>= 6;
N    }
N    /* encode first byte */
N    if (utf8_length > 1)
N    {
N        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
N    }
N    else
N    {
N        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
N    }
N
N    *output_pointer += utf8_length;
N
N    return sequence_length;
N
Nfail:
N    return 0;
N}
N
N/* Parse the input text into an unescaped cinput, and populate item. */
Nstatic cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
N{
N    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
X    const unsigned char *input_pointer = ((input_buffer)->content + (input_buffer)->offset) + 1;
N    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
X    const unsigned char *input_end = ((input_buffer)->content + (input_buffer)->offset) + 1;
N    unsigned char *output_pointer = NULL;
X    unsigned char *output_pointer = 0;
N    unsigned char *output = NULL;
X    unsigned char *output = 0;
N
N    /* not a string */
N    if (buffer_at_offset(input_buffer)[0] != '\"')
X    if (((input_buffer)->content + (input_buffer)->offset)[0] != '\"')
N    {
N        goto fail;
N    }
N
N    {
N        /* calculate approximate size of the output (overestimate) */
N        size_t allocation_length = 0;
N        size_t skipped_bytes = 0;
N        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
N        {
N            /* is escape sequence */
N            if (input_end[0] == '\\')
N            {
N                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
N                {
N                    /* prevent buffer overflow when last input character is a backslash */
N                    goto fail;
N                }
N                skipped_bytes++;
N                input_end++;
N            }
N            input_end++;
N        }
N        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
N        {
N            goto fail; /* string ended unexpectedly */
N        }
N
N        /* This is at most how much we need for the output */
N        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
X        allocation_length = (size_t) (input_end - ((input_buffer)->content + (input_buffer)->offset)) - skipped_bytes;
N        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
N        if (output == NULL)
X        if (output == 0)
N        {
N            goto fail; /* allocation failure */
N        }
N    }
N
N    output_pointer = output;
N    /* loop through the string literal */
N    while (input_pointer < input_end)
N    {
N        if (*input_pointer != '\\')
N        {
N            *output_pointer++ = *input_pointer++;
N        }
N        /* escape sequence */
N        else
N        {
N            unsigned char sequence_length = 2;
N            if ((input_end - input_pointer) < 1)
N            {
N                goto fail;
N            }
N
N            switch (input_pointer[1])
N            {
N                case 'b':
N                    *output_pointer++ = '\b';
N                    break;
N                case 'f':
N                    *output_pointer++ = '\f';
N                    break;
N                case 'n':
N                    *output_pointer++ = '\n';
N                    break;
N                case 'r':
N                    *output_pointer++ = '\r';
N                    break;
N                case 't':
N                    *output_pointer++ = '\t';
N                    break;
N                case '\"':
N                case '\\':
N                case '/':
N                    *output_pointer++ = input_pointer[1];
N                    break;
N
N                /* UTF-16 literal */
N                case 'u':
N                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
N                    if (sequence_length == 0)
N                    {
N                        /* failed to convert UTF16-literal to UTF-8 */
N                        goto fail;
N                    }
N                    break;
N
N                default:
N                    goto fail;
N            }
N            input_pointer += sequence_length;
N        }
N    }
N
N    /* zero terminate the output */
N    *output_pointer = '\0';
N
N    item->type = cJSON_String;
X    item->type = (1 << 4);
N    item->valuestring = (char*)output;
N
N    input_buffer->offset = (size_t) (input_end - input_buffer->content);
N    input_buffer->offset++;
N
N    return true;
X    return ((cJSON_bool)1);
N
Nfail:
N    if (output != NULL)
X    if (output != 0)
N    {
N        input_buffer->hooks.deallocate(output);
N    }
N
N    if (input_pointer != NULL)
X    if (input_pointer != 0)
N    {
N        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
N    }
N
N    return false;
X    return ((cJSON_bool)0);
N}
N
N/* Render the cstring provided to an escaped version that can be printed. */
Nstatic cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
N{
N    const unsigned char *input_pointer = NULL;
X    const unsigned char *input_pointer = 0;
N    unsigned char *output = NULL;
X    unsigned char *output = 0;
N    unsigned char *output_pointer = NULL;
X    unsigned char *output_pointer = 0;
N    size_t output_length = 0;
N    /* numbers of additional characters needed for escaping */
N    size_t escape_characters = 0;
N
N    if (output_buffer == NULL)
X    if (output_buffer == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    /* empty string */
N    if (input == NULL)
X    if (input == 0)
N    {
N        output = ensure(output_buffer, sizeof("\"\""));
N        if (output == NULL)
X        if (output == 0)
N        {
N            return false;
X            return ((cJSON_bool)0);
N        }
N        strcpy((char*)output, "\"\"");
N
N        return true;
X        return ((cJSON_bool)1);
N    }
N
N    /* set "flag" to 1 if something needs to be escaped */
N    for (input_pointer = input; *input_pointer; input_pointer++)
N    {
N        switch (*input_pointer)
N        {
N            case '\"':
N            case '\\':
N            case '\b':
N            case '\f':
N            case '\n':
N            case '\r':
N            case '\t':
N                /* one character escape sequence */
N                escape_characters++;
N                break;
N            default:
N                if (*input_pointer < 32)
N                {
N                    /* UTF-16 escape sequence uXXXX */
N                    escape_characters += 5;
N                }
N                break;
N        }
N    }
N    output_length = (size_t)(input_pointer - input) + escape_characters;
N
N    output = ensure(output_buffer, output_length + sizeof("\"\""));
N    if (output == NULL)
X    if (output == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    /* no characters have to be escaped */
N    if (escape_characters == 0)
N    {
N        output[0] = '\"';
N        memcpy(output + 1, input, output_length);
N        output[output_length + 1] = '\"';
N        output[output_length + 2] = '\0';
N
N        return true;
X        return ((cJSON_bool)1);
N    }
N
N    output[0] = '\"';
N    output_pointer = output + 1;
N    /* copy the string */
N    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
N    {
N        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
N        {
N            /* normal character, copy */
N            *output_pointer = *input_pointer;
N        }
N        else
N        {
N            /* character needs to be escaped */
N            *output_pointer++ = '\\';
N            switch (*input_pointer)
N            {
N                case '\\':
N                    *output_pointer = '\\';
N                    break;
N                case '\"':
N                    *output_pointer = '\"';
N                    break;
N                case '\b':
N                    *output_pointer = 'b';
N                    break;
N                case '\f':
N                    *output_pointer = 'f';
N                    break;
N                case '\n':
N                    *output_pointer = 'n';
N                    break;
N                case '\r':
N                    *output_pointer = 'r';
N                    break;
N                case '\t':
N                    *output_pointer = 't';
N                    break;
N                default:
N                    /* escape and print as unicode codepoint */
N                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
N                    output_pointer += 4;
N                    break;
N            }
N        }
N    }
N    output[output_length + 1] = '\"';
N    output[output_length + 2] = '\0';
N
N    return true;
X    return ((cJSON_bool)1);
N}
N
N/* Invoke print_string_ptr (which is useful) on an item. */
Nstatic cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
N{
N    return print_string_ptr((unsigned char*)item->valuestring, p);
N}
N
N/* Predeclare these prototypes. */
Nstatic cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer);
Nstatic cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer);
Nstatic cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer);
Nstatic cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer);
Nstatic cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
Nstatic cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);
N
N/* Utility to jump whitespace and cr/lf */
Nstatic parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
N{
N    if ((buffer == NULL) || (buffer->content == NULL))
X    if ((buffer == 0) || (buffer->content == 0))
N    {
N        return NULL;
X        return 0;
N    }
N
N    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
X    while (((buffer != 0) && (((buffer)->offset + 0) < (buffer)->length)) && (((buffer)->content + (buffer)->offset)[0] <= 32))
N    {
N       buffer->offset++;
N    }
N
N    if (buffer->offset == buffer->length)
N    {
N        buffer->offset--;
N    }
N
N    return buffer;
N}
N
N/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
Nstatic parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
N{
N    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
X    if ((buffer == 0) || (buffer->content == 0) || (buffer->offset != 0))
N    {
N        return NULL;
X        return 0;
N    }
N
N    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
X    if (((buffer != 0) && (((buffer)->offset + 4) < (buffer)->length)) && (strncmp((const char*)((buffer)->content + (buffer)->offset), "\xEF\xBB\xBF", 3) == 0))
N    {
N        buffer->offset += 3;
N    }
N
N    return buffer;
N}
N
N/* Parse an object - create a new root, and populate. */
NCJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
XcJSON * cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
N{
N    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
N    cJSON *item = NULL;
X    cJSON *item = 0;
N
N    /* reset error position */
N    global_error.json = NULL;
X    global_error.json = 0;
N    global_error.position = 0;
N
N    if (value == NULL)
X    if (value == 0)
N    {
N        goto fail;
N    }
N
N    buffer.content = (const unsigned char*)value;
N    buffer.length = strlen((const char*)value) + sizeof("");
N    buffer.offset = 0;
N    buffer.hooks = global_hooks;
N
N    item = cJSON_New_Item(&global_hooks);
N    if (item == NULL) /* memory fail */
X    if (item == 0)  
N    {
N        goto fail;
N    }
N
N    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
N    {
N        /* parse failure. ep is set. */
N        goto fail;
N    }
N
N    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
N    if (require_null_terminated)
N    {
N        buffer_skip_whitespace(&buffer);
N        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
X        if ((buffer.offset >= buffer.length) || ((&buffer)->content + (&buffer)->offset)[0] != '\0')
N        {
N            goto fail;
N        }
N    }
N    if (return_parse_end)
N    {
N        *return_parse_end = (const char*)buffer_at_offset(&buffer);
X        *return_parse_end = (const char*)((&buffer)->content + (&buffer)->offset);
N    }
N
N    return item;
N
Nfail:
N    if (item != NULL)
X    if (item != 0)
N    {
N        cJSON_Delete(item);
N    }
N
N    if (value != NULL)
X    if (value != 0)
N    {
N        error local_error;
N        local_error.json = (const unsigned char*)value;
N        local_error.position = 0;
N
N        if (buffer.offset < buffer.length)
N        {
N            local_error.position = buffer.offset;
N        }
N        else if (buffer.length > 0)
N        {
N            local_error.position = buffer.length - 1;
N        }
N
N        if (return_parse_end != NULL)
X        if (return_parse_end != 0)
N        {
N            *return_parse_end = (const char*)local_error.json + local_error.position;
N        }
N
N        global_error = local_error;
N    }
N
N    return NULL;
X    return 0;
N}
N
N/* Default options for cJSON_Parse */
NCJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
XcJSON * cJSON_Parse(const char *value)
N{
N    return cJSON_ParseWithOpts(value, 0, 0);
N}
N
N#define cjson_min(a, b) ((a < b) ? a : b)
N
Nstatic unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
N{
N    static const size_t default_buffer_size = 256;
N    printbuffer buffer[1];
N    unsigned char *printed = NULL;
X    unsigned char *printed = 0;
N
N    memset(buffer, 0, sizeof(buffer));
N
N    /* create buffer */
N    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
N    buffer->length = default_buffer_size;
N    buffer->format = format;
N    buffer->hooks = *hooks;
N    if (buffer->buffer == NULL)
X    if (buffer->buffer == 0)
N    {
N        goto fail;
N    }
N
N    /* print the value */
N    if (!print_value(item, buffer))
N    {
N        goto fail;
N    }
N    update_offset(buffer);
N
N    /* check if reallocate is available */
N    if (hooks->reallocate != NULL)
X    if (hooks->reallocate != 0)
N    {
N        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
N        buffer->buffer = NULL;
X        buffer->buffer = 0;
N        if (printed == NULL) {
X        if (printed == 0) {
N            goto fail;
N        }
N    }
N    else /* otherwise copy the JSON over to a new buffer */
N    {
N        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
N        if (printed == NULL)
X        if (printed == 0)
N        {
N            goto fail;
N        }
N        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
X        memcpy(printed, buffer->buffer, ((buffer->length < buffer->offset + 1) ? buffer->length : buffer->offset + 1));
N        printed[buffer->offset] = '\0'; /* just to be sure */
N
N        /* free the buffer */
N        hooks->deallocate(buffer->buffer);
N    }
N
N    return printed;
N
Nfail:
N    if (buffer->buffer != NULL)
X    if (buffer->buffer != 0)
N    {
N        hooks->deallocate(buffer->buffer);
N    }
N
N    if (printed != NULL)
X    if (printed != 0)
N    {
N        hooks->deallocate(printed);
N    }
N
N    return NULL;
X    return 0;
N}
N
N/* Render a cJSON item/entity/structure to text. */
NCJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
Xchar * cJSON_Print(const cJSON *item)
N{
N    return (char*)print(item, true, &global_hooks);
X    return (char*)print(item, ((cJSON_bool)1), &global_hooks);
N}
N
NCJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
Xchar * cJSON_PrintUnformatted(const cJSON *item)
N{
N    return (char*)print(item, false, &global_hooks);
X    return (char*)print(item, ((cJSON_bool)0), &global_hooks);
N}
N
NCJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)
Xchar * cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)
N{
N    printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
N
N    if (prebuffer < 0)
N    {
N        return NULL;
X        return 0;
N    }
N
N    p.buffer = (unsigned char*)global_hooks.allocate((size_t)prebuffer);
N    if (!p.buffer)
N    {
N        return NULL;
X        return 0;
N    }
N
N    p.length = (size_t)prebuffer;
N    p.offset = 0;
N    p.noalloc = false;
X    p.noalloc = ((cJSON_bool)0);
N    p.format = fmt;
N    p.hooks = global_hooks;
N
N    if (!print_value(item, &p))
N    {
N        global_hooks.deallocate(p.buffer);
N        return NULL;
X        return 0;
N    }
N
N    return (char*)p.buffer;
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buf, const int len, const cJSON_bool fmt)
XcJSON_bool cJSON_PrintPreallocated(cJSON *item, char *buf, const int len, const cJSON_bool fmt)
N{
N    printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
N
N    if ((len < 0) || (buf == NULL))
X    if ((len < 0) || (buf == 0))
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    p.buffer = (unsigned char*)buf;
N    p.length = (size_t)len;
N    p.offset = 0;
N    p.noalloc = true;
X    p.noalloc = ((cJSON_bool)1);
N    p.format = fmt;
N    p.hooks = global_hooks;
N
N    return print_value(item, &p);
N}
N
N/* Parser core - when encountering text, process appropriately. */
Nstatic cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
N{
N    if ((input_buffer == NULL) || (input_buffer->content == NULL))
X    if ((input_buffer == 0) || (input_buffer->content == 0))
N    {
N        return false; /* no input */
X        return ((cJSON_bool)0);  
N    }
N
N    /* parse the different types of values */
N    /* null */
N    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
X    if (((input_buffer != 0) && (((input_buffer)->offset + 4) <= (input_buffer)->length)) && (strncmp((const char*)((input_buffer)->content + (input_buffer)->offset), "null", 4) == 0))
N    {
N        item->type = cJSON_NULL;
X        item->type = (1 << 2);
N        input_buffer->offset += 4;
N        return true;
X        return ((cJSON_bool)1);
N    }
N    /* false */
N    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
X    if (((input_buffer != 0) && (((input_buffer)->offset + 5) <= (input_buffer)->length)) && (strncmp((const char*)((input_buffer)->content + (input_buffer)->offset), "false", 5) == 0))
N    {
N        item->type = cJSON_False;
X        item->type = (1 << 0);
N        input_buffer->offset += 5;
N        return true;
X        return ((cJSON_bool)1);
N    }
N    /* true */
N    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
X    if (((input_buffer != 0) && (((input_buffer)->offset + 4) <= (input_buffer)->length)) && (strncmp((const char*)((input_buffer)->content + (input_buffer)->offset), "true", 4) == 0))
N    {
N        item->type = cJSON_True;
X        item->type = (1 << 1);
N        item->valueint = 1;
N        input_buffer->offset += 4;
N        return true;
X        return ((cJSON_bool)1);
N    }
N    /* string */
N    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
X    if (((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length)) && (((input_buffer)->content + (input_buffer)->offset)[0] == '\"'))
N    {
N        return parse_string(item, input_buffer);
N    }
N    /* number */
N    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
X    if (((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length)) && ((((input_buffer)->content + (input_buffer)->offset)[0] == '-') || ((((input_buffer)->content + (input_buffer)->offset)[0] >= '0') && (((input_buffer)->content + (input_buffer)->offset)[0] <= '9'))))
N    {
N        return parse_number(item, input_buffer);
N    }
N    /* array */
N    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
X    if (((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length)) && (((input_buffer)->content + (input_buffer)->offset)[0] == '['))
N    {
N        return parse_array(item, input_buffer);
N    }
N    /* object */
N    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
X    if (((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length)) && (((input_buffer)->content + (input_buffer)->offset)[0] == '{'))
N    {
N        return parse_object(item, input_buffer);
N    }
N
N    return false;
X    return ((cJSON_bool)0);
N}
N
N/* Render a value to text. */
Nstatic cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
N{
N    unsigned char *output = NULL;
X    unsigned char *output = 0;
N
N    if ((item == NULL) || (output_buffer == NULL))
X    if ((item == 0) || (output_buffer == 0))
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    switch ((item->type) & 0xFF)
N    {
N        case cJSON_NULL:
X        case (1 << 2):
N            output = ensure(output_buffer, 5);
N            if (output == NULL)
X            if (output == 0)
N            {
N                return false;
X                return ((cJSON_bool)0);
N            }
N            strcpy((char*)output, "null");
N            return true;
X            return ((cJSON_bool)1);
N
N        case cJSON_False:
X        case (1 << 0):
N            output = ensure(output_buffer, 6);
N            if (output == NULL)
X            if (output == 0)
N            {
N                return false;
X                return ((cJSON_bool)0);
N            }
N            strcpy((char*)output, "false");
N            return true;
X            return ((cJSON_bool)1);
N
N        case cJSON_True:
X        case (1 << 1):
N            output = ensure(output_buffer, 5);
N            if (output == NULL)
X            if (output == 0)
N            {
N                return false;
X                return ((cJSON_bool)0);
N            }
N            strcpy((char*)output, "true");
N            return true;
X            return ((cJSON_bool)1);
N
N        case cJSON_Number:
X        case (1 << 3):
N            return print_number(item, output_buffer);
N
N        case cJSON_Raw:
X        case (1 << 7):
N        {
N            size_t raw_length = 0;
N            if (item->valuestring == NULL)
X            if (item->valuestring == 0)
N            {
N                return false;
X                return ((cJSON_bool)0);
N            }
N
N            raw_length = strlen(item->valuestring) + sizeof("");
N            output = ensure(output_buffer, raw_length);
N            if (output == NULL)
X            if (output == 0)
N            {
N                return false;
X                return ((cJSON_bool)0);
N            }
N            memcpy(output, item->valuestring, raw_length);
N            return true;
X            return ((cJSON_bool)1);
N        }
N
N        case cJSON_String:
X        case (1 << 4):
N            return print_string(item, output_buffer);
N
N        case cJSON_Array:
X        case (1 << 5):
N            return print_array(item, output_buffer);
N
N        case cJSON_Object:
X        case (1 << 6):
N            return print_object(item, output_buffer);
N
N        default:
N            return false;
X            return ((cJSON_bool)0);
N    }
N}
N
N/* Build an array from input text. */
Nstatic cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
N{
N    cJSON *head = NULL; /* head of the linked list */
X    cJSON *head = 0;  
N    cJSON *current_item = NULL;
X    cJSON *current_item = 0;
N
N    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
X    if (input_buffer->depth >= 1000)
N    {
N        return false; /* to deeply nested */
X        return ((cJSON_bool)0);  
N    }
N    input_buffer->depth++;
N
N    if (buffer_at_offset(input_buffer)[0] != '[')
X    if (((input_buffer)->content + (input_buffer)->offset)[0] != '[')
N    {
N        /* not an array */
N        goto fail;
N    }
N
N    input_buffer->offset++;
N    buffer_skip_whitespace(input_buffer);
N    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
X    if (((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length)) && (((input_buffer)->content + (input_buffer)->offset)[0] == ']'))
N    {
N        /* empty array */
N        goto success;
N    }
N
N    /* check if we skipped to the end of the buffer */
N    if (cannot_access_at_index(input_buffer, 0))
X    if ((!((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length))))
N    {
N        input_buffer->offset--;
N        goto fail;
N    }
N
N    /* step back to character in front of the first element */
N    input_buffer->offset--;
N    /* loop through the comma separated array elements */
N    do
N    {
N        /* allocate next item */
N        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
N        if (new_item == NULL)
X        if (new_item == 0)
N        {
N            goto fail; /* allocation failure */
N        }
N
N        /* attach next item to list */
N        if (head == NULL)
X        if (head == 0)
N        {
N            /* start the linked list */
N            current_item = head = new_item;
N        }
N        else
N        {
N            /* add to the end and advance */
N            current_item->next = new_item;
N            new_item->prev = current_item;
N            current_item = new_item;
N        }
N
N        /* parse next value */
N        input_buffer->offset++;
N        buffer_skip_whitespace(input_buffer);
N        if (!parse_value(current_item, input_buffer))
N        {
N            goto fail; /* failed to parse value */
N        }
N        buffer_skip_whitespace(input_buffer);
N    }
N    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
X    while (((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length)) && (((input_buffer)->content + (input_buffer)->offset)[0] == ','));
N
N    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
X    if ((!((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length))) || ((input_buffer)->content + (input_buffer)->offset)[0] != ']')
N    {
N        goto fail; /* expected end of array */
N    }
N
Nsuccess:
N    input_buffer->depth--;
N
N    item->type = cJSON_Array;
X    item->type = (1 << 5);
N    item->child = head;
N
N    input_buffer->offset++;
N
N    return true;
X    return ((cJSON_bool)1);
N
Nfail:
N    if (head != NULL)
X    if (head != 0)
N    {
N        cJSON_Delete(head);
N    }
N
N    return false;
X    return ((cJSON_bool)0);
N}
N
N/* Render an array to text */
Nstatic cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
N{
N    unsigned char *output_pointer = NULL;
X    unsigned char *output_pointer = 0;
N    size_t length = 0;
N    cJSON *current_element = item->child;
N
N    if (output_buffer == NULL)
X    if (output_buffer == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    /* Compose the output array. */
N    /* opening square bracket */
N    output_pointer = ensure(output_buffer, 1);
N    if (output_pointer == NULL)
X    if (output_pointer == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    *output_pointer = '[';
N    output_buffer->offset++;
N    output_buffer->depth++;
N
N    while (current_element != NULL)
X    while (current_element != 0)
N    {
N        if (!print_value(current_element, output_buffer))
N        {
N            return false;
X            return ((cJSON_bool)0);
N        }
N        update_offset(output_buffer);
N        if (current_element->next)
N        {
N            length = (size_t) (output_buffer->format ? 2 : 1);
N            output_pointer = ensure(output_buffer, length + 1);
N            if (output_pointer == NULL)
X            if (output_pointer == 0)
N            {
N                return false;
X                return ((cJSON_bool)0);
N            }
N            *output_pointer++ = ',';
N            if(output_buffer->format)
N            {
N                *output_pointer++ = ' ';
N            }
N            *output_pointer = '\0';
N            output_buffer->offset += length;
N        }
N        current_element = current_element->next;
N    }
N
N    output_pointer = ensure(output_buffer, 2);
N    if (output_pointer == NULL)
X    if (output_pointer == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N    *output_pointer++ = ']';
N    *output_pointer = '\0';
N    output_buffer->depth--;
N
N    return true;
X    return ((cJSON_bool)1);
N}
N
N/* Build an object from the text. */
Nstatic cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
N{
N    cJSON *head = NULL; /* linked list head */
X    cJSON *head = 0;  
N    cJSON *current_item = NULL;
X    cJSON *current_item = 0;
N
N    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
X    if (input_buffer->depth >= 1000)
N    {
N        return false; /* to deeply nested */
X        return ((cJSON_bool)0);  
N    }
N    input_buffer->depth++;
N
N    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
X    if ((!((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length))) || (((input_buffer)->content + (input_buffer)->offset)[0] != '{'))
N    {
N        goto fail; /* not an object */
N    }
N
N    input_buffer->offset++;
N    buffer_skip_whitespace(input_buffer);
N    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
X    if (((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length)) && (((input_buffer)->content + (input_buffer)->offset)[0] == '}'))
N    {
N        goto success; /* empty object */
N    }
N
N    /* check if we skipped to the end of the buffer */
N    if (cannot_access_at_index(input_buffer, 0))
X    if ((!((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length))))
N    {
N        input_buffer->offset--;
N        goto fail;
N    }
N
N    /* step back to character in front of the first element */
N    input_buffer->offset--;
N    /* loop through the comma separated array elements */
N    do
N    {
N        /* allocate next item */
N        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
N        if (new_item == NULL)
X        if (new_item == 0)
N        {
N            goto fail; /* allocation failure */
N        }
N
N        /* attach next item to list */
N        if (head == NULL)
X        if (head == 0)
N        {
N            /* start the linked list */
N            current_item = head = new_item;
N        }
N        else
N        {
N            /* add to the end and advance */
N            current_item->next = new_item;
N            new_item->prev = current_item;
N            current_item = new_item;
N        }
N
N        /* parse the name of the child */
N        input_buffer->offset++;
N        buffer_skip_whitespace(input_buffer);
N        if (!parse_string(current_item, input_buffer))
N        {
N            goto fail; /* faile to parse name */
N        }
N        buffer_skip_whitespace(input_buffer);
N
N        /* swap valuestring and string, because we parsed the name */
N        current_item->string = current_item->valuestring;
N        current_item->valuestring = NULL;
X        current_item->valuestring = 0;
N
N        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
X        if ((!((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length))) || (((input_buffer)->content + (input_buffer)->offset)[0] != ':'))
N        {
N            goto fail; /* invalid object */
N        }
N
N        /* parse the value */
N        input_buffer->offset++;
N        buffer_skip_whitespace(input_buffer);
N        if (!parse_value(current_item, input_buffer))
N        {
N            goto fail; /* failed to parse value */
N        }
N        buffer_skip_whitespace(input_buffer);
N    }
N    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
X    while (((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length)) && (((input_buffer)->content + (input_buffer)->offset)[0] == ','));
N
N    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
X    if ((!((input_buffer != 0) && (((input_buffer)->offset + 0) < (input_buffer)->length))) || (((input_buffer)->content + (input_buffer)->offset)[0] != '}'))
N    {
N        goto fail; /* expected end of object */
N    }
N
Nsuccess:
N    input_buffer->depth--;
N
N    item->type = cJSON_Object;
X    item->type = (1 << 6);
N    item->child = head;
N
N    input_buffer->offset++;
N    return true;
X    return ((cJSON_bool)1);
N
Nfail:
N    if (head != NULL)
X    if (head != 0)
N    {
N        cJSON_Delete(head);
N    }
N
N    return false;
X    return ((cJSON_bool)0);
N}
N
N/* Render an object to text. */
Nstatic cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
N{
N    unsigned char *output_pointer = NULL;
X    unsigned char *output_pointer = 0;
N    size_t length = 0;
N    cJSON *current_item = item->child;
N
N    if (output_buffer == NULL)
X    if (output_buffer == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    /* Compose the output: */
N    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
N    output_pointer = ensure(output_buffer, length + 1);
N    if (output_pointer == NULL)
X    if (output_pointer == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    *output_pointer++ = '{';
N    output_buffer->depth++;
N    if (output_buffer->format)
N    {
N        *output_pointer++ = '\n';
N    }
N    output_buffer->offset += length;
N
N    while (current_item)
N    {
N        if (output_buffer->format)
N        {
N            size_t i;
N            output_pointer = ensure(output_buffer, output_buffer->depth);
N            if (output_pointer == NULL)
X            if (output_pointer == 0)
N            {
N                return false;
X                return ((cJSON_bool)0);
N            }
N            for (i = 0; i < output_buffer->depth; i++)
N            {
N                *output_pointer++ = '\t';
N            }
N            output_buffer->offset += output_buffer->depth;
N        }
N
N        /* print key */
N        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
N        {
N            return false;
X            return ((cJSON_bool)0);
N        }
N        update_offset(output_buffer);
N
N        length = (size_t) (output_buffer->format ? 2 : 1);
N        output_pointer = ensure(output_buffer, length);
N        if (output_pointer == NULL)
X        if (output_pointer == 0)
N        {
N            return false;
X            return ((cJSON_bool)0);
N        }
N        *output_pointer++ = ':';
N        if (output_buffer->format)
N        {
N            *output_pointer++ = '\t';
N        }
N        output_buffer->offset += length;
N
N        /* print value */
N        if (!print_value(current_item, output_buffer))
N        {
N            return false;
X            return ((cJSON_bool)0);
N        }
N        update_offset(output_buffer);
N
N        /* print comma if not last */
N        length = (size_t) ((output_buffer->format ? 1 : 0) + (current_item->next ? 1 : 0));
N        output_pointer = ensure(output_buffer, length + 1);
N        if (output_pointer == NULL)
X        if (output_pointer == 0)
N        {
N            return false;
X            return ((cJSON_bool)0);
N        }
N        if (current_item->next)
N        {
N            *output_pointer++ = ',';
N        }
N
N        if (output_buffer->format)
N        {
N            *output_pointer++ = '\n';
N        }
N        *output_pointer = '\0';
N        output_buffer->offset += length;
N
N        current_item = current_item->next;
N    }
N
N    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
N    if (output_pointer == NULL)
X    if (output_pointer == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N    if (output_buffer->format)
N    {
N        size_t i;
N        for (i = 0; i < (output_buffer->depth - 1); i++)
N        {
N            *output_pointer++ = '\t';
N        }
N    }
N    *output_pointer++ = '}';
N    *output_pointer = '\0';
N    output_buffer->depth--;
N
N    return true;
X    return ((cJSON_bool)1);
N}
N
N/* Get Array size/item / object item. */
NCJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
Xint cJSON_GetArraySize(const cJSON *array)
N{
N    cJSON *child = NULL;
X    cJSON *child = 0;
N    size_t size = 0;
N
N    if (array == NULL)
X    if (array == 0)
N    {
N        return 0;
N    }
N
N    child = array->child;
N
N    while(child != NULL)
X    while(child != 0)
N    {
N        size++;
N        child = child->next;
N    }
N
N    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */
N
N    return (int)size;
N}
N
Nstatic cJSON* get_array_item(const cJSON *array, size_t index)
N{
N    cJSON *current_child = NULL;
X    cJSON *current_child = 0;
N
N    if (array == NULL)
X    if (array == 0)
N    {
N        return NULL;
X        return 0;
N    }
N
N    current_child = array->child;
N    while ((current_child != NULL) && (index > 0))
X    while ((current_child != 0) && (index > 0))
N    {
N        index--;
N        current_child = current_child->next;
N    }
N
N    return current_child;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
XcJSON * cJSON_GetArrayItem(const cJSON *array, int index)
N{
N    if (index < 0)
N    {
N        return NULL;
X        return 0;
N    }
N
N    return get_array_item(array, (size_t)index);
N}
N
Nstatic cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
N{
N    cJSON *current_element = NULL;
X    cJSON *current_element = 0;
N
N    if ((object == NULL) || (name == NULL))
X    if ((object == 0) || (name == 0))
N    {
N        return NULL;
X        return 0;
N    }
N
N    current_element = object->child;
N    if (case_sensitive)
N    {
N        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
X        while ((current_element != 0) && (strcmp(name, current_element->string) != 0))
N        {
N            current_element = current_element->next;
N        }
N    }
N    else
N    {
N        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
X        while ((current_element != 0) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
N        {
N            current_element = current_element->next;
N        }
N    }
N
N    return current_element;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
XcJSON * cJSON_GetObjectItem(const cJSON * const object, const char * const string)
N{
N    return get_object_item(object, string, false);
X    return get_object_item(object, string, ((cJSON_bool)0));
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
XcJSON * cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
N{
N    return get_object_item(object, string, true);
X    return get_object_item(object, string, ((cJSON_bool)1));
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)
XcJSON_bool cJSON_HasObjectItem(const cJSON *object, const char *string)
N{
N    return cJSON_GetObjectItem(object, string) ? 1 : 0;
N}
N
N/* Utility for array list handling. */
Nstatic void suffix_object(cJSON *prev, cJSON *item)
N{
N    prev->next = item;
N    item->prev = prev;
N}
N
N/* Utility for handling references. */
Nstatic cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)
N{
N    cJSON *reference = NULL;
X    cJSON *reference = 0;
N    if (item == NULL)
X    if (item == 0)
N    {
N        return NULL;
X        return 0;
N    }
N
N    reference = cJSON_New_Item(hooks);
N    if (reference == NULL)
X    if (reference == 0)
N    {
N        return NULL;
X        return 0;
N    }
N
N    memcpy(reference, item, sizeof(cJSON));
N    reference->string = NULL;
X    reference->string = 0;
N    reference->type |= cJSON_IsReference;
X    reference->type |= 256;
N    reference->next = reference->prev = NULL;
X    reference->next = reference->prev = 0;
N    return reference;
N}
N
Nstatic cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
N{
N    cJSON *child = NULL;
X    cJSON *child = 0;
N
N    if ((item == NULL) || (array == NULL))
X    if ((item == 0) || (array == 0))
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    child = array->child;
N
N    if (child == NULL)
X    if (child == 0)
N    {
N        /* list is empty, start new one */
N        array->child = item;
N    }
N    else
N    {
N        /* append to the end */
N        while (child->next)
N        {
N            child = child->next;
N        }
N        suffix_object(child, item);
N    }
N
N    return true;
X    return ((cJSON_bool)1);
N}
N
N/* Add item to array/object. */
NCJSON_PUBLIC(void) cJSON_AddItemToArray(cJSON *array, cJSON *item)
Xvoid cJSON_AddItemToArray(cJSON *array, cJSON *item)
N{
N    add_item_to_array(array, item);
N}
N
N#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
X#if 0L || (0L  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
S    #pragma GCC diagnostic push
N#endif
N#ifdef __GNUC__
S#pragma GCC diagnostic ignored "-Wcast-qual"
N#endif
N/* helper function to cast away const */
Nstatic void* cast_away_const(const void* string)
N{
N    return (void*)string;
N}
N#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
X#if 0L || (0L  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
S    #pragma GCC diagnostic pop
N#endif
N
N
Nstatic cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
N{
N    char *new_key = NULL;
X    char *new_key = 0;
N    int new_type = cJSON_Invalid;
X    int new_type = (0);
N
N    if ((object == NULL) || (string == NULL) || (item == NULL))
X    if ((object == 0) || (string == 0) || (item == 0))
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    if (constant_key)
N    {
N        new_key = (char*)cast_away_const(string);
N        new_type = item->type | cJSON_StringIsConst;
X        new_type = item->type | 512;
N    }
N    else
N    {
N        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
N        if (new_key == NULL)
X        if (new_key == 0)
N        {
N            return false;
X            return ((cJSON_bool)0);
N        }
N
N        new_type = item->type & ~cJSON_StringIsConst;
X        new_type = item->type & ~512;
N    }
N
N    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
X    if (!(item->type & 512) && (item->string != 0))
N    {
N        hooks->deallocate(item->string);
N    }
N
N    item->string = new_key;
N    item->type = new_type;
N
N    return add_item_to_array(object, item);
N}
N
NCJSON_PUBLIC(void) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
Xvoid cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
N{
N    add_item_to_object(object, string, item, &global_hooks, false);
X    add_item_to_object(object, string, item, &global_hooks, ((cJSON_bool)0));
N}
N
N/* Add an item to an object with constant string as key */
NCJSON_PUBLIC(void) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)
Xvoid cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)
N{
N    add_item_to_object(object, string, item, &global_hooks, true);
X    add_item_to_object(object, string, item, &global_hooks, ((cJSON_bool)1));
N}
N
NCJSON_PUBLIC(void) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)
Xvoid cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)
N{
N    if (array == NULL)
X    if (array == 0)
N    {
N        return;
N    }
N
N    add_item_to_array(array, create_reference(item, &global_hooks));
N}
N
NCJSON_PUBLIC(void) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)
Xvoid cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)
N{
N    if ((object == NULL) || (string == NULL))
X    if ((object == 0) || (string == 0))
N    {
N        return;
N    }
N
N    add_item_to_object(object, string, create_reference(item, &global_hooks), &global_hooks, false);
X    add_item_to_object(object, string, create_reference(item, &global_hooks), &global_hooks, ((cJSON_bool)0));
N}
N
NCJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name)
XcJSON* cJSON_AddNullToObject(cJSON * const object, const char * const name)
N{
N    cJSON *null = cJSON_CreateNull();
N    if (add_item_to_object(object, name, null, &global_hooks, false))
X    if (add_item_to_object(object, name, null, &global_hooks, ((cJSON_bool)0)))
N    {
N        return null;
N    }
N
N    cJSON_Delete(null);
N    return NULL;
X    return 0;
N}
N
NCJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name)
XcJSON* cJSON_AddTrueToObject(cJSON * const object, const char * const name)
N{
N    cJSON *true_item = cJSON_CreateTrue();
N    if (add_item_to_object(object, name, true_item, &global_hooks, false))
X    if (add_item_to_object(object, name, true_item, &global_hooks, ((cJSON_bool)0)))
N    {
N        return true_item;
N    }
N
N    cJSON_Delete(true_item);
N    return NULL;
X    return 0;
N}
N
NCJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name)
XcJSON* cJSON_AddFalseToObject(cJSON * const object, const char * const name)
N{
N    cJSON *false_item = cJSON_CreateFalse();
N    if (add_item_to_object(object, name, false_item, &global_hooks, false))
X    if (add_item_to_object(object, name, false_item, &global_hooks, ((cJSON_bool)0)))
N    {
N        return false_item;
N    }
N
N    cJSON_Delete(false_item);
N    return NULL;
X    return 0;
N}
N
NCJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)
XcJSON* cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)
N{
N    cJSON *bool_item = cJSON_CreateBool(boolean);
N    if (add_item_to_object(object, name, bool_item, &global_hooks, false))
X    if (add_item_to_object(object, name, bool_item, &global_hooks, ((cJSON_bool)0)))
N    {
N        return bool_item;
N    }
N
N    cJSON_Delete(bool_item);
N    return NULL;
X    return 0;
N}
N
NCJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
XcJSON* cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
N{
N    cJSON *number_item = cJSON_CreateNumber(number);
N    if (add_item_to_object(object, name, number_item, &global_hooks, false))
X    if (add_item_to_object(object, name, number_item, &global_hooks, ((cJSON_bool)0)))
N    {
N        return number_item;
N    }
N
N    cJSON_Delete(number_item);
N    return NULL;
X    return 0;
N}
N
NCJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
XcJSON* cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
N{
N    cJSON *string_item = cJSON_CreateString(string);
N    if (add_item_to_object(object, name, string_item, &global_hooks, false))
X    if (add_item_to_object(object, name, string_item, &global_hooks, ((cJSON_bool)0)))
N    {
N        return string_item;
N    }
N
N    cJSON_Delete(string_item);
N    return NULL;
X    return 0;
N}
N
NCJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)
XcJSON* cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)
N{
N    cJSON *raw_item = cJSON_CreateRaw(raw);
N    if (add_item_to_object(object, name, raw_item, &global_hooks, false))
X    if (add_item_to_object(object, name, raw_item, &global_hooks, ((cJSON_bool)0)))
N    {
N        return raw_item;
N    }
N
N    cJSON_Delete(raw_item);
N    return NULL;
X    return 0;
N}
N
NCJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name)
XcJSON* cJSON_AddObjectToObject(cJSON * const object, const char * const name)
N{
N    cJSON *object_item = cJSON_CreateObject();
N    if (add_item_to_object(object, name, object_item, &global_hooks, false))
X    if (add_item_to_object(object, name, object_item, &global_hooks, ((cJSON_bool)0)))
N    {
N        return object_item;
N    }
N
N    cJSON_Delete(object_item);
N    return NULL;
X    return 0;
N}
N
NCJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name)
XcJSON* cJSON_AddArrayToObject(cJSON * const object, const char * const name)
N{
N    cJSON *array = cJSON_CreateArray();
N    if (add_item_to_object(object, name, array, &global_hooks, false))
X    if (add_item_to_object(object, name, array, &global_hooks, ((cJSON_bool)0)))
N    {
N        return array;
N    }
N
N    cJSON_Delete(array);
N    return NULL;
X    return 0;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)
XcJSON * cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)
N{
N    if ((parent == NULL) || (item == NULL))
X    if ((parent == 0) || (item == 0))
N    {
N        return NULL;
X        return 0;
N    }
N
N    if (item->prev != NULL)
X    if (item->prev != 0)
N    {
N        /* not the first element */
N        item->prev->next = item->next;
N    }
N    if (item->next != NULL)
X    if (item->next != 0)
N    {
N        /* not the last element */
N        item->next->prev = item->prev;
N    }
N
N    if (item == parent->child)
N    {
N        /* first element */
N        parent->child = item->next;
N    }
N    /* make sure the detached item doesn't point anywhere anymore */
N    item->prev = NULL;
X    item->prev = 0;
N    item->next = NULL;
X    item->next = 0;
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)
XcJSON * cJSON_DetachItemFromArray(cJSON *array, int which)
N{
N    if (which < 0)
N    {
N        return NULL;
X        return 0;
N    }
N
N    return cJSON_DetachItemViaPointer(array, get_array_item(array, (size_t)which));
N}
N
NCJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)
Xvoid cJSON_DeleteItemFromArray(cJSON *array, int which)
N{
N    cJSON_Delete(cJSON_DetachItemFromArray(array, which));
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)
XcJSON * cJSON_DetachItemFromObject(cJSON *object, const char *string)
N{
N    cJSON *to_detach = cJSON_GetObjectItem(object, string);
N
N    return cJSON_DetachItemViaPointer(object, to_detach);
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)
XcJSON * cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)
N{
N    cJSON *to_detach = cJSON_GetObjectItemCaseSensitive(object, string);
N
N    return cJSON_DetachItemViaPointer(object, to_detach);
N}
N
NCJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)
Xvoid cJSON_DeleteItemFromObject(cJSON *object, const char *string)
N{
N    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
N}
N
NCJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)
Xvoid cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)
N{
N    cJSON_Delete(cJSON_DetachItemFromObjectCaseSensitive(object, string));
N}
N
N/* Replace array/object items with new ones. */
NCJSON_PUBLIC(void) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)
Xvoid cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)
N{
N    cJSON *after_inserted = NULL;
X    cJSON *after_inserted = 0;
N
N    if (which < 0)
N    {
N        return;
N    }
N
N    after_inserted = get_array_item(array, (size_t)which);
N    if (after_inserted == NULL)
X    if (after_inserted == 0)
N    {
N        add_item_to_array(array, newitem);
N        return;
N    }
N
N    newitem->next = after_inserted;
N    newitem->prev = after_inserted->prev;
N    after_inserted->prev = newitem;
N    if (after_inserted == array->child)
N    {
N        array->child = newitem;
N    }
N    else
N    {
N        newitem->prev->next = newitem;
N    }
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)
XcJSON_bool cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)
N{
N    if ((parent == NULL) || (replacement == NULL) || (item == NULL))
X    if ((parent == 0) || (replacement == 0) || (item == 0))
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    if (replacement == item)
N    {
N        return true;
X        return ((cJSON_bool)1);
N    }
N
N    replacement->next = item->next;
N    replacement->prev = item->prev;
N
N    if (replacement->next != NULL)
X    if (replacement->next != 0)
N    {
N        replacement->next->prev = replacement;
N    }
N    if (replacement->prev != NULL)
X    if (replacement->prev != 0)
N    {
N        replacement->prev->next = replacement;
N    }
N    if (parent->child == item)
N    {
N        parent->child = replacement;
N    }
N
N    item->next = NULL;
X    item->next = 0;
N    item->prev = NULL;
X    item->prev = 0;
N    cJSON_Delete(item);
N
N    return true;
X    return ((cJSON_bool)1);
N}
N
NCJSON_PUBLIC(void) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)
Xvoid cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)
N{
N    if (which < 0)
N    {
N        return;
N    }
N
N    cJSON_ReplaceItemViaPointer(array, get_array_item(array, (size_t)which), newitem);
N}
N
Nstatic cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)
N{
N    if ((replacement == NULL) || (string == NULL))
X    if ((replacement == 0) || (string == 0))
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    /* replace the name in the replacement */
N    if (!(replacement->type & cJSON_StringIsConst) && (replacement->string != NULL))
X    if (!(replacement->type & 512) && (replacement->string != 0))
N    {
N        cJSON_free(replacement->string);
N    }
N    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
N    replacement->type &= ~cJSON_StringIsConst;
X    replacement->type &= ~512;
N
N    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
N
N    return true;
X    return ((cJSON_bool)1);
N}
N
NCJSON_PUBLIC(void) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)
Xvoid cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)
N{
N    replace_item_in_object(object, string, newitem, false);
X    replace_item_in_object(object, string, newitem, ((cJSON_bool)0));
N}
N
NCJSON_PUBLIC(void) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)
Xvoid cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)
N{
N    replace_item_in_object(object, string, newitem, true);
X    replace_item_in_object(object, string, newitem, ((cJSON_bool)1));
N}
N
N/* Create basic types: */
NCJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)
XcJSON * cJSON_CreateNull(void)
N{
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if(item)
N    {
N        item->type = cJSON_NULL;
X        item->type = (1 << 2);
N    }
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)
XcJSON * cJSON_CreateTrue(void)
N{
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if(item)
N    {
N        item->type = cJSON_True;
X        item->type = (1 << 1);
N    }
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)
XcJSON * cJSON_CreateFalse(void)
N{
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if(item)
N    {
N        item->type = cJSON_False;
X        item->type = (1 << 0);
N    }
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool b)
XcJSON * cJSON_CreateBool(cJSON_bool b)
N{
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if(item)
N    {
N        item->type = b ? cJSON_True : cJSON_False;
X        item->type = b ? (1 << 1) : (1 << 0);
N    }
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
XcJSON * cJSON_CreateNumber(double num)
N{
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if(item)
N    {
N        item->type = cJSON_Number;
X        item->type = (1 << 3);
N        item->valuedouble = num;
N
N        /* use saturation in case of overflow */
N        if (num >= INT_MAX)
X        if (num >= 0x7fffffff)
N        {
N            item->valueint = INT_MAX;
X            item->valueint = 0x7fffffff;
N        }
N        else if (num <= INT_MIN)
X        else if (num <= (~0x7fffffff))
N        {
N            item->valueint = INT_MIN;
X            item->valueint = (~0x7fffffff);
N        }
N        else
N        {
N            item->valueint = (int)num;
N        }
N    }
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
XcJSON * cJSON_CreateString(const char *string)
N{
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if(item)
N    {
N        item->type = cJSON_String;
X        item->type = (1 << 4);
N        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
N        if(!item->valuestring)
N        {
N            cJSON_Delete(item);
N            return NULL;
X            return 0;
N        }
N    }
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string)
XcJSON * cJSON_CreateStringReference(const char *string)
N{
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if (item != NULL)
X    if (item != 0)
N    {
N        item->type = cJSON_String | cJSON_IsReference;
X        item->type = (1 << 4) | 256;
N        item->valuestring = (char*)cast_away_const(string);
N    }
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child)
XcJSON * cJSON_CreateObjectReference(const cJSON *child)
N{
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if (item != NULL) {
X    if (item != 0) {
N        item->type = cJSON_Object | cJSON_IsReference;
X        item->type = (1 << 6) | 256;
N        item->child = (cJSON*)cast_away_const(child);
N    }
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child) {
XcJSON * cJSON_CreateArrayReference(const cJSON *child) {
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if (item != NULL) {
X    if (item != 0) {
N        item->type = cJSON_Array | cJSON_IsReference;
X        item->type = (1 << 5) | 256;
N        item->child = (cJSON*)cast_away_const(child);
N    }
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)
XcJSON * cJSON_CreateRaw(const char *raw)
N{
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if(item)
N    {
N        item->type = cJSON_Raw;
X        item->type = (1 << 7);
N        item->valuestring = (char*)cJSON_strdup((const unsigned char*)raw, &global_hooks);
N        if(!item->valuestring)
N        {
N            cJSON_Delete(item);
N            return NULL;
X            return 0;
N        }
N    }
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
XcJSON * cJSON_CreateArray(void)
N{
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if(item)
N    {
N        item->type=cJSON_Array;
X        item->type=(1 << 5);
N    }
N
N    return item;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
XcJSON * cJSON_CreateObject(void)
N{
N    cJSON *item = cJSON_New_Item(&global_hooks);
N    if (item)
N    {
N        item->type = cJSON_Object;
X        item->type = (1 << 6);
N    }
N
N    return item;
N}
N
N/* Create Arrays: */
NCJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)
XcJSON * cJSON_CreateIntArray(const int *numbers, int count)
N{
N    size_t i = 0;
N    cJSON *n = NULL;
X    cJSON *n = 0;
N    cJSON *p = NULL;
X    cJSON *p = 0;
N    cJSON *a = NULL;
X    cJSON *a = 0;
N
N    if ((count < 0) || (numbers == NULL))
X    if ((count < 0) || (numbers == 0))
N    {
N        return NULL;
X        return 0;
N    }
N
N    a = cJSON_CreateArray();
N    for(i = 0; a && (i < (size_t)count); i++)
N    {
N        n = cJSON_CreateNumber(numbers[i]);
N        if (!n)
N        {
N            cJSON_Delete(a);
N            return NULL;
X            return 0;
N        }
N        if(!i)
N        {
N            a->child = n;
N        }
N        else
N        {
N            suffix_object(p, n);
N        }
N        p = n;
N    }
N
N    return a;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)
XcJSON * cJSON_CreateFloatArray(const float *numbers, int count)
N{
N    size_t i = 0;
N    cJSON *n = NULL;
X    cJSON *n = 0;
N    cJSON *p = NULL;
X    cJSON *p = 0;
N    cJSON *a = NULL;
X    cJSON *a = 0;
N
N    if ((count < 0) || (numbers == NULL))
X    if ((count < 0) || (numbers == 0))
N    {
N        return NULL;
X        return 0;
N    }
N
N    a = cJSON_CreateArray();
N
N    for(i = 0; a && (i < (size_t)count); i++)
N    {
N        n = cJSON_CreateNumber((double)numbers[i]);
N        if(!n)
N        {
N            cJSON_Delete(a);
N            return NULL;
X            return 0;
N        }
N        if(!i)
N        {
N            a->child = n;
N        }
N        else
N        {
N            suffix_object(p, n);
N        }
N        p = n;
N    }
N
N    return a;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)
XcJSON * cJSON_CreateDoubleArray(const double *numbers, int count)
N{
N    size_t i = 0;
N    cJSON *n = NULL;
X    cJSON *n = 0;
N    cJSON *p = NULL;
X    cJSON *p = 0;
N    cJSON *a = NULL;
X    cJSON *a = 0;
N
N    if ((count < 0) || (numbers == NULL))
X    if ((count < 0) || (numbers == 0))
N    {
N        return NULL;
X        return 0;
N    }
N
N    a = cJSON_CreateArray();
N
N    for(i = 0;a && (i < (size_t)count); i++)
N    {
N        n = cJSON_CreateNumber(numbers[i]);
N        if(!n)
N        {
N            cJSON_Delete(a);
N            return NULL;
X            return 0;
N        }
N        if(!i)
N        {
N            a->child = n;
N        }
N        else
N        {
N            suffix_object(p, n);
N        }
N        p = n;
N    }
N
N    return a;
N}
N
NCJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char **strings, int count)
XcJSON * cJSON_CreateStringArray(const char **strings, int count)
N{
N    size_t i = 0;
N    cJSON *n = NULL;
X    cJSON *n = 0;
N    cJSON *p = NULL;
X    cJSON *p = 0;
N    cJSON *a = NULL;
X    cJSON *a = 0;
N
N    if ((count < 0) || (strings == NULL))
X    if ((count < 0) || (strings == 0))
N    {
N        return NULL;
X        return 0;
N    }
N
N    a = cJSON_CreateArray();
N
N    for (i = 0; a && (i < (size_t)count); i++)
N    {
N        n = cJSON_CreateString(strings[i]);
N        if(!n)
N        {
N            cJSON_Delete(a);
N            return NULL;
X            return 0;
N        }
N        if(!i)
N        {
N            a->child = n;
N        }
N        else
N        {
N            suffix_object(p,n);
N        }
N        p = n;
N    }
N
N    return a;
N}
N
N/* Duplication */
NCJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)
XcJSON * cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)
N{
N    cJSON *newitem = NULL;
X    cJSON *newitem = 0;
N    cJSON *child = NULL;
X    cJSON *child = 0;
N    cJSON *next = NULL;
X    cJSON *next = 0;
N    cJSON *newchild = NULL;
X    cJSON *newchild = 0;
N
N    /* Bail on bad ptr */
N    if (!item)
N    {
N        goto fail;
N    }
N    /* Create new item */
N    newitem = cJSON_New_Item(&global_hooks);
N    if (!newitem)
N    {
N        goto fail;
N    }
N    /* Copy over all vars */
N    newitem->type = item->type & (~cJSON_IsReference);
X    newitem->type = item->type & (~256);
N    newitem->valueint = item->valueint;
N    newitem->valuedouble = item->valuedouble;
N    if (item->valuestring)
N    {
N        newitem->valuestring = (char*)cJSON_strdup((unsigned char*)item->valuestring, &global_hooks);
N        if (!newitem->valuestring)
N        {
N            goto fail;
N        }
N    }
N    if (item->string)
N    {
N        newitem->string = (item->type&cJSON_StringIsConst) ? item->string : (char*)cJSON_strdup((unsigned char*)item->string, &global_hooks);
X        newitem->string = (item->type&512) ? item->string : (char*)cJSON_strdup((unsigned char*)item->string, &global_hooks);
N        if (!newitem->string)
N        {
N            goto fail;
N        }
N    }
N    /* If non-recursive, then we're done! */
N    if (!recurse)
N    {
N        return newitem;
N    }
N    /* Walk the ->next chain for the child. */
N    child = item->child;
N    while (child != NULL)
X    while (child != 0)
N    {
N        newchild = cJSON_Duplicate(child, true); /* Duplicate (with recurse) each item in the ->next chain */
X        newchild = cJSON_Duplicate(child, ((cJSON_bool)1));  
N        if (!newchild)
N        {
N            goto fail;
N        }
N        if (next != NULL)
X        if (next != 0)
N        {
N            /* If newitem->child already set, then crosswire ->prev and ->next and move on */
N            next->next = newchild;
N            newchild->prev = next;
N            next = newchild;
N        }
N        else
N        {
N            /* Set newitem->child and move to it */
N            newitem->child = newchild;
N            next = newchild;
N        }
N        child = child->next;
N    }
N
N    return newitem;
N
Nfail:
N    if (newitem != NULL)
X    if (newitem != 0)
N    {
N        cJSON_Delete(newitem);
N    }
N
N    return NULL;
X    return 0;
N}
N
NCJSON_PUBLIC(void) cJSON_Minify(char *json)
Xvoid cJSON_Minify(char *json)
N{
N    unsigned char *into = (unsigned char*)json;
N
N    if (json == NULL)
X    if (json == 0)
N    {
N        return;
N    }
N
N    while (*json)
N    {
N        if (*json == ' ')
N        {
N            json++;
N        }
N        else if (*json == '\t')
N        {
N            /* Whitespace characters. */
N            json++;
N        }
N        else if (*json == '\r')
N        {
N            json++;
N        }
N        else if (*json=='\n')
N        {
N            json++;
N        }
N        else if ((*json == '/') && (json[1] == '/'))
N        {
N            /* double-slash comments, to end of line. */
N            while (*json && (*json != '\n'))
N            {
N                json++;
N            }
N        }
N        else if ((*json == '/') && (json[1] == '*'))
N        {
N            /* multiline comments. */
N            while (*json && !((*json == '*') && (json[1] == '/')))
N            {
N                json++;
N            }
N            json += 2;
N        }
N        else if (*json == '\"')
N        {
N            /* string literals, which are \" sensitive. */
N            *into++ = (unsigned char)*json++;
N            while (*json && (*json != '\"'))
N            {
N                if (*json == '\\')
N                {
N                    *into++ = (unsigned char)*json++;
N                }
N                *into++ = (unsigned char)*json++;
N            }
N            *into++ = (unsigned char)*json++;
N        }
N        else
N        {
N            /* All other characters. */
N            *into++ = (unsigned char)*json++;
N        }
N    }
N
N    /* and null-terminate. */
N    *into = '\0';
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)
XcJSON_bool cJSON_IsInvalid(const cJSON * const item)
N{
N    if (item == NULL)
X    if (item == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    return (item->type & 0xFF) == cJSON_Invalid;
X    return (item->type & 0xFF) == (0);
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)
XcJSON_bool cJSON_IsFalse(const cJSON * const item)
N{
N    if (item == NULL)
X    if (item == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    return (item->type & 0xFF) == cJSON_False;
X    return (item->type & 0xFF) == (1 << 0);
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
XcJSON_bool cJSON_IsTrue(const cJSON * const item)
N{
N    if (item == NULL)
X    if (item == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    return (item->type & 0xff) == cJSON_True;
X    return (item->type & 0xff) == (1 << 1);
N}
N
N
NCJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
XcJSON_bool cJSON_IsBool(const cJSON * const item)
N{
N    if (item == NULL)
X    if (item == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    return (item->type & (cJSON_True | cJSON_False)) != 0;
X    return (item->type & ((1 << 1) | (1 << 0))) != 0;
N}
NCJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
XcJSON_bool cJSON_IsNull(const cJSON * const item)
N{
N    if (item == NULL)
X    if (item == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    return (item->type & 0xFF) == cJSON_NULL;
X    return (item->type & 0xFF) == (1 << 2);
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
XcJSON_bool cJSON_IsNumber(const cJSON * const item)
N{
N    if (item == NULL)
X    if (item == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    return (item->type & 0xFF) == cJSON_Number;
X    return (item->type & 0xFF) == (1 << 3);
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
XcJSON_bool cJSON_IsString(const cJSON * const item)
N{
N    if (item == NULL)
X    if (item == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    return (item->type & 0xFF) == cJSON_String;
X    return (item->type & 0xFF) == (1 << 4);
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
XcJSON_bool cJSON_IsArray(const cJSON * const item)
N{
N    if (item == NULL)
X    if (item == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    return (item->type & 0xFF) == cJSON_Array;
X    return (item->type & 0xFF) == (1 << 5);
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
XcJSON_bool cJSON_IsObject(const cJSON * const item)
N{
N    if (item == NULL)
X    if (item == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    return (item->type & 0xFF) == cJSON_Object;
X    return (item->type & 0xFF) == (1 << 6);
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)
XcJSON_bool cJSON_IsRaw(const cJSON * const item)
N{
N    if (item == NULL)
X    if (item == 0)
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    return (item->type & 0xFF) == cJSON_Raw;
X    return (item->type & 0xFF) == (1 << 7);
N}
N
NCJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)
XcJSON_bool cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)
N{
N    if ((a == NULL) || (b == NULL) || ((a->type & 0xFF) != (b->type & 0xFF)) || cJSON_IsInvalid(a))
X    if ((a == 0) || (b == 0) || ((a->type & 0xFF) != (b->type & 0xFF)) || cJSON_IsInvalid(a))
N    {
N        return false;
X        return ((cJSON_bool)0);
N    }
N
N    /* check if type is valid */
N    switch (a->type & 0xFF)
N    {
N        case cJSON_False:
X        case (1 << 0):
N        case cJSON_True:
X        case (1 << 1):
N        case cJSON_NULL:
X        case (1 << 2):
N        case cJSON_Number:
X        case (1 << 3):
N        case cJSON_String:
X        case (1 << 4):
N        case cJSON_Raw:
X        case (1 << 7):
N        case cJSON_Array:
X        case (1 << 5):
N        case cJSON_Object:
X        case (1 << 6):
N            break;
N
N        default:
N            return false;
X            return ((cJSON_bool)0);
N    }
N
N    /* identical objects are equal */
N    if (a == b)
N    {
N        return true;
X        return ((cJSON_bool)1);
N    }
N
N    switch (a->type & 0xFF)
N    {
N        /* in these cases and equal type is enough */
N        case cJSON_False:
X        case (1 << 0):
N        case cJSON_True:
X        case (1 << 1):
N        case cJSON_NULL:
X        case (1 << 2):
N            return true;
X            return ((cJSON_bool)1);
N
N        case cJSON_Number:
X        case (1 << 3):
N            if (a->valuedouble == b->valuedouble)
N            {
N                return true;
X                return ((cJSON_bool)1);
N            }
N            return false;
X            return ((cJSON_bool)0);
N
N        case cJSON_String:
X        case (1 << 4):
N        case cJSON_Raw:
X        case (1 << 7):
N            if ((a->valuestring == NULL) || (b->valuestring == NULL))
X            if ((a->valuestring == 0) || (b->valuestring == 0))
N            {
N                return false;
X                return ((cJSON_bool)0);
N            }
N            if (strcmp(a->valuestring, b->valuestring) == 0)
N            {
N                return true;
X                return ((cJSON_bool)1);
N            }
N
N            return false;
X            return ((cJSON_bool)0);
N
N        case cJSON_Array:
X        case (1 << 5):
N        {
N            cJSON *a_element = a->child;
N            cJSON *b_element = b->child;
N
N            for (; (a_element != NULL) && (b_element != NULL);)
X            for (; (a_element != 0) && (b_element != 0);)
N            {
N                if (!cJSON_Compare(a_element, b_element, case_sensitive))
N                {
N                    return false;
X                    return ((cJSON_bool)0);
N                }
N
N                a_element = a_element->next;
N                b_element = b_element->next;
N            }
N
N            /* one of the arrays is longer than the other */
N            if (a_element != b_element) {
N                return false;
X                return ((cJSON_bool)0);
N            }
N
N            return true;
X            return ((cJSON_bool)1);
N        }
N
N        case cJSON_Object:
X        case (1 << 6):
N        {
N            cJSON *a_element = NULL;
X            cJSON *a_element = 0;
N            cJSON *b_element = NULL;
X            cJSON *b_element = 0;
N            cJSON_ArrayForEach(a_element, a)
X            for(a_element = (a != 0) ? (a)->child : 0; a_element != 0; a_element = a_element->next)
N            {
N                /* TODO This has O(n^2) runtime, which is horrible! */
N                b_element = get_object_item(b, a_element->string, case_sensitive);
N                if (b_element == NULL)
X                if (b_element == 0)
N                {
N                    return false;
X                    return ((cJSON_bool)0);
N                }
N
N                if (!cJSON_Compare(a_element, b_element, case_sensitive))
N                {
N                    return false;
X                    return ((cJSON_bool)0);
N                }
N            }
N
N            /* doing this twice, once on a and b to prevent true comparison if a subset of b
N             * TODO: Do this the proper way, this is just a fix for now */
N            cJSON_ArrayForEach(b_element, b)
X            for(b_element = (b != 0) ? (b)->child : 0; b_element != 0; b_element = b_element->next)
N            {
N                a_element = get_object_item(a, b_element->string, case_sensitive);
N                if (a_element == NULL)
X                if (a_element == 0)
N                {
N                    return false;
X                    return ((cJSON_bool)0);
N                }
N
N                if (!cJSON_Compare(b_element, a_element, case_sensitive))
N                {
N                    return false;
X                    return ((cJSON_bool)0);
N                }
N            }
N
N            return true;
X            return ((cJSON_bool)1);
N        }
N
N        default:
N            return false;
X            return ((cJSON_bool)0);
N    }
N}
N
NCJSON_PUBLIC(void *) cJSON_malloc(size_t size)
Xvoid * cJSON_malloc(size_t size)
N{
N    return global_hooks.allocate(size);
N}
N
NCJSON_PUBLIC(void) cJSON_free(void *object)
Xvoid cJSON_free(void *object)
N{
N    global_hooks.deallocate(object);
N}

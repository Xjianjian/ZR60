; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\stm32f4xx_rng.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\stm32f4xx_rng.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\stm32f4xx_rng.crf ..\..\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_rng.c]
                          THUMB

                          AREA ||i.RNG_ClearFlag||, CODE, READONLY, ALIGN=2

                  RNG_ClearFlag PROC
;;;334      */
;;;335    void RNG_ClearFlag(uint8_t RNG_FLAG)
000000  4902              LDR      r1,|L1.12|
;;;336    {
;;;337      /* Check the parameters */
;;;338      assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
;;;339      /* Clear the selected RNG flags */
;;;340      RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
000002  ea6f1000          MVN      r0,r0,LSL #4
000006  6008              STR      r0,[r1,#0]
;;;341    }
000008  4770              BX       lr
;;;342    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x50060804

                          AREA ||i.RNG_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RNG_ClearITPendingBit PROC
;;;380      */
;;;381    void RNG_ClearITPendingBit(uint8_t RNG_IT)
000000  4902              LDR      r1,|L2.12|
;;;382    {
;;;383      /* Check the parameters */
;;;384      assert_param(IS_RNG_IT(RNG_IT));
;;;385    
;;;386      /* Clear the selected RNG interrupt pending bit */
;;;387      RNG->SR = (uint8_t)~RNG_IT;
000002  43c0              MVNS     r0,r0
000004  b2c0              UXTB     r0,r0
000006  6008              STR      r0,[r1,#0]
;;;388    }
000008  4770              BX       lr
;;;389    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x50060804

                          AREA ||i.RNG_Cmd||, CODE, READONLY, ALIGN=2

                  RNG_Cmd PROC
;;;122      */
;;;123    void RNG_Cmd(FunctionalState NewState)
000000  4905              LDR      r1,|L3.24|
;;;124    {
;;;125      /* Check the parameters */
;;;126      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;127    
;;;128      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;129      {
;;;130        /* Enable the RNG */
;;;131        RNG->CR |= RNG_CR_RNGEN;
;;;132      }
;;;133      else
;;;134      {
;;;135        /* Disable the RNG */
;;;136        RNG->CR &= ~RNG_CR_RNGEN;
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L3.14|
000008  f0400004          ORR      r0,r0,#4              ;131
00000c  e001              B        |L3.18|
                  |L3.14|
00000e  f0200004          BIC      r0,r0,#4
                  |L3.18|
000012  6008              STR      r0,[r1,#0]            ;131
;;;137      }
;;;138    }
000014  4770              BX       lr
;;;139    /**
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0x50060800

                          AREA ||i.RNG_DeInit||, CODE, READONLY, ALIGN=1

                  RNG_DeInit PROC
;;;98       */
;;;99     void RNG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;100    {
;;;101    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)  
;;;102      /* Enable RNG reset state */
;;;103      RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
000002  2101              MOVS     r1,#1
000004  2040              MOVS     r0,#0x40
000006  f7fffffe          BL       RCC_AHB2PeriphResetCmd
;;;104    
;;;105      /* Release RNG from reset state */
;;;106      RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  e8bd4010          POP      {r4,lr}
000010  2040              MOVS     r0,#0x40
000012  f7ffbffe          B.W      RCC_AHB2PeriphResetCmd
;;;107    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
;;;108    #if defined(STM32F410xx)
;;;109       /* Enable RNG reset state */
;;;110      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, ENABLE);
;;;111    
;;;112      /* Release RNG from reset state */
;;;113      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, DISABLE); 
;;;114    #endif /* STM32F410xx*/  
;;;115    }
;;;116    
                          ENDP


                          AREA ||i.RNG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RNG_GetFlagStatus PROC
;;;301      */
;;;302    FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
000000  4a03              LDR      r2,|L5.16|
;;;303    {
000002  4601              MOV      r1,r0
;;;304      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;305      /* Check the parameters */
;;;306      assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
;;;307    
;;;308      /* Check the status of the specified RNG flag */
;;;309      if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L5.14|
;;;310      {
;;;311        /* RNG_FLAG is set */
;;;312        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L5.14|
;;;313      }
;;;314      else
;;;315      {
;;;316        /* RNG_FLAG is reset */
;;;317        bitstatus = RESET;
;;;318      }
;;;319      /* Return the RNG_FLAG status */
;;;320      return  bitstatus;
;;;321    }
00000e  4770              BX       lr
;;;322    
                          ENDP

                  |L5.16|
                          DCD      0x50060804

                          AREA ||i.RNG_GetITStatus||, CODE, READONLY, ALIGN=2

                  RNG_GetITStatus PROC
;;;350      */
;;;351    ITStatus RNG_GetITStatus(uint8_t RNG_IT)
000000  4a03              LDR      r2,|L6.16|
;;;352    {
000002  4601              MOV      r1,r0
;;;353      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;354      /* Check the parameters */
;;;355      assert_param(IS_RNG_GET_IT(RNG_IT));
;;;356    
;;;357      /* Check the status of the specified RNG interrupt */
;;;358      if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L6.14|
;;;359      {
;;;360        /* RNG_IT is set */
;;;361        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L6.14|
;;;362      }
;;;363      else
;;;364      {
;;;365        /* RNG_IT is reset */
;;;366        bitstatus = RESET;
;;;367      }
;;;368      /* Return the RNG_IT status */
;;;369      return bitstatus;
;;;370    }
00000e  4770              BX       lr
;;;371    
                          ENDP

                  |L6.16|
                          DCD      0x50060804

                          AREA ||i.RNG_GetRandomNumber||, CODE, READONLY, ALIGN=2

                  RNG_GetRandomNumber PROC
;;;184      */
;;;185    uint32_t RNG_GetRandomNumber(void)
000000  4801              LDR      r0,|L7.8|
;;;186    {
;;;187      /* Return the 32 bit random number from the DR register */
;;;188      return RNG->DR;
000002  6800              LDR      r0,[r0,#0]
;;;189    }
000004  4770              BX       lr
;;;190    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x50060808

                          AREA ||i.RNG_ITConfig||, CODE, READONLY, ALIGN=2

                  RNG_ITConfig PROC
;;;275      */
;;;276    void RNG_ITConfig(FunctionalState NewState)
000000  4905              LDR      r1,|L8.24|
;;;277    {
;;;278      /* Check the parameters */
;;;279      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;280    
;;;281      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;282      {
;;;283        /* Enable the RNG interrupt */
;;;284        RNG->CR |= RNG_CR_IE;
;;;285      }
;;;286      else
;;;287      {
;;;288        /* Disable the RNG interrupt */
;;;289        RNG->CR &= ~RNG_CR_IE;
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L8.14|
000008  f0400008          ORR      r0,r0,#8              ;284
00000c  e001              B        |L8.18|
                  |L8.14|
00000e  f0200008          BIC      r0,r0,#8
                  |L8.18|
000012  6008              STR      r0,[r1,#0]            ;284
;;;290      }
;;;291    }
000014  4770              BX       lr
;;;292    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x50060800

;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_rng.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rng_c_3ce7902d____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f4xx_rng_c_3ce7902d____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rng_c_3ce7902d____REVSH|
#line 153
|__asm___15_stm32f4xx_rng_c_3ce7902d____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rng_c_3ce7902d____RRX|
#line 328
|__asm___15_stm32f4xx_rng_c_3ce7902d____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

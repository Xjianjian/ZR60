; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\heap_2.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\heap_2.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\heap_2.crf ..\..\FreeRTOS\Source\portable\MemMang\heap_2.c]
                          THUMB

                          AREA ||i.pvPortMalloc||, CODE, READONLY, ALIGN=2

                  pvPortMalloc PROC
;;;148    
;;;149    void *pvPortMalloc( size_t xWantedSize )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;150    {
000004  4604              MOV      r4,r0
;;;151    BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;152    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
;;;153    void *pvReturn = NULL;
000006  2500              MOVS     r5,#0
;;;154    
;;;155    	vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;156    	{
;;;157    		/* If this is the first call to malloc then the heap will require
;;;158    		initialisation to setup the list of free blocks. */
;;;159    		if( xHeapHasBeenInitialised == pdFALSE )
00000c  4e27              LDR      r6,|L1.172|
00000e  f1060108          ADD      r1,r6,#8
000012  6870              LDR      r0,[r6,#4]  ; xHeapHasBeenInitialised
000014  f1010308          ADD      r3,r1,#8
000018  b968              CBNZ     r0,|L1.54|
00001a  4825              LDR      r0,|L1.176|
00001c  2700              MOVS     r7,#0
00001e  f0200007          BIC      r0,r0,#7
000022  e9c10700          STRD     r0,r7,[r1,#0]
000026  f64472f8          MOV      r2,#0x4ff8
00002a  e9c37200          STRD     r7,r2,[r3,#0]
00002e  e9c03200          STRD     r3,r2,[r0,#0]
;;;160    		{
;;;161    			prvHeapInit();
;;;162    			xHeapHasBeenInitialised = pdTRUE;
000032  2001              MOVS     r0,#1
000034  6070              STR      r0,[r6,#4]  ; xHeapHasBeenInitialised
                  |L1.54|
;;;163    		}
;;;164    
;;;165    		/* The wanted size is increased so it can contain a BlockLink_t
;;;166    		structure in addition to the requested amount of bytes. */
;;;167    		if( xWantedSize > 0 )
000036  b13c              CBZ      r4,|L1.72|
000038  3408              ADDS     r4,r4,#8
;;;168    		{
;;;169    			xWantedSize += heapSTRUCT_SIZE;
;;;170    
;;;171    			/* Ensure that blocks are always aligned to the required number of bytes. */
;;;172    			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
00003a  0760              LSLS     r0,r4,#29
00003c  d004              BEQ      |L1.72|
;;;173    			{
;;;174    				/* Byte alignment required. */
;;;175    				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
00003e  f0040007          AND      r0,r4,#7
000042  f1c00008          RSB      r0,r0,#8
000046  4404              ADD      r4,r4,r0
                  |L1.72|
;;;176    			}
;;;177    		}
;;;178    
;;;179    		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
000048  1e60              SUBS     r0,r4,#1
00004a  f64472f7          MOV      r2,#0x4ff7
00004e  4290              CMP      r0,r2
000050  d227              BCS      |L1.162|
;;;180    		{
;;;181    			/* Blocks are stored in byte order - traverse the list from the start
;;;182    			(smallest) block until one of adequate size is found. */
;;;183    			pxPreviousBlock = &xStart;
000052  4a16              LDR      r2,|L1.172|
;;;184    			pxBlock = xStart.pxNextFreeBlock;
000054  6809              LDR      r1,[r1,#0]  ; xStart
000056  3208              ADDS     r2,r2,#8              ;183
;;;185    			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
000058  e001              B        |L1.94|
                  |L1.90|
;;;186    			{
;;;187    				pxPreviousBlock = pxBlock;
00005a  460a              MOV      r2,r1
;;;188    				pxBlock = pxBlock->pxNextFreeBlock;
00005c  4601              MOV      r1,r0
                  |L1.94|
00005e  6848              LDR      r0,[r1,#4]            ;185
000060  42a0              CMP      r0,r4                 ;185
000062  d202              BCS      |L1.106|
000064  6808              LDR      r0,[r1,#0]            ;185
000066  2800              CMP      r0,#0                 ;185
000068  d1f7              BNE      |L1.90|
                  |L1.106|
;;;189    			}
;;;190    
;;;191    			/* If we found the end marker then a block of adequate size was not found. */
;;;192    			if( pxBlock != &xEnd )
00006a  4299              CMP      r1,r3
00006c  d019              BEQ      |L1.162|
;;;193    			{
;;;194    				/* Return the memory space - jumping over the BlockLink_t structure
;;;195    				at its start. */
;;;196    				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
;;;197    
;;;198    				/* This block is being returned for use so must be taken out of the
;;;199    				list of free blocks. */
;;;200    				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
00006e  6815              LDR      r5,[r2,#0]
000070  6808              LDR      r0,[r1,#0]
;;;201    
;;;202    				/* If the block is larger than required it can be split into two. */
;;;203    				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
000072  6010              STR      r0,[r2,#0]
000074  6848              LDR      r0,[r1,#4]
000076  3508              ADDS     r5,r5,#8
000078  1b00              SUBS     r0,r0,r4
00007a  2810              CMP      r0,#0x10
00007c  d90d              BLS      |L1.154|
;;;204    				{
;;;205    					/* This block is to be split into two.  Create a new block
;;;206    					following the number of bytes requested. The void cast is
;;;207    					used to prevent byte alignment warnings from the compiler. */
;;;208    					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
00007e  190b              ADDS     r3,r1,r4
;;;209    
;;;210    					/* Calculate the sizes of two blocks split from the single
;;;211    					block. */
;;;212    					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
;;;213    					pxBlock->xBlockSize = xWantedSize;
000080  6058              STR      r0,[r3,#4]
;;;214    
;;;215    					/* Insert the new block into the list of free blocks. */
;;;216    					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
000082  480a              LDR      r0,|L1.172|
000084  604c              STR      r4,[r1,#4]
000086  3008              ADDS     r0,r0,#8
000088  685c              LDR      r4,[r3,#4]
00008a  e000              B        |L1.142|
                  |L1.140|
00008c  4610              MOV      r0,r2
                  |L1.142|
00008e  6802              LDR      r2,[r0,#0]
000090  6857              LDR      r7,[r2,#4]
000092  42a7              CMP      r7,r4
000094  d3fa              BCC      |L1.140|
000096  601a              STR      r2,[r3,#0]
000098  6003              STR      r3,[r0,#0]
                  |L1.154|
;;;217    				}
;;;218    
;;;219    				xFreeBytesRemaining -= pxBlock->xBlockSize;
00009a  6848              LDR      r0,[r1,#4]
00009c  6831              LDR      r1,[r6,#0]  ; xFreeBytesRemaining
00009e  1a08              SUBS     r0,r1,r0
0000a0  6030              STR      r0,[r6,#0]  ; xFreeBytesRemaining
                  |L1.162|
;;;220    			}
;;;221    		}
;;;222    
;;;223    		traceMALLOC( pvReturn, xWantedSize );
;;;224    	}
;;;225    	( void ) xTaskResumeAll();
0000a2  f7fffffe          BL       xTaskResumeAll
;;;226    
;;;227    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;228    	{
;;;229    		if( pvReturn == NULL )
;;;230    		{
;;;231    			extern void vApplicationMallocFailedHook( void );
;;;232    			vApplicationMallocFailedHook();
;;;233    		}
;;;234    	}
;;;235    	#endif
;;;236    
;;;237    	return pvReturn;
0000a6  4628              MOV      r0,r5
;;;238    }
0000a8  e8bd81f0          POP      {r4-r8,pc}
;;;239    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.172|
                          DCD      ||.data||
                  |L1.176|
                          DCD      ||.bss||+0x8

                          AREA ||i.vPortFree||, CODE, READONLY, ALIGN=2

                  vPortFree PROC
;;;240    
;;;241    void vPortFree( void *pv )
000000  b510              PUSH     {r4,lr}
;;;242    {
000002  2800              CMP      r0,#0
000004  d017              BEQ      |L2.54|
000006  f1a00408          SUB      r4,r0,#8
;;;243    uint8_t *puc = ( uint8_t * ) pv;
;;;244    BlockLink_t *pxLink;
;;;245    
;;;246    	if( pv != NULL )
;;;247    	{
;;;248    		/* The memory being freed will have an BlockLink_t structure immediately
;;;249    		before it. */
;;;250    		puc -= heapSTRUCT_SIZE;
;;;251    
;;;252    		/* This unexpected casting is to keep some compilers from issuing
;;;253    		byte alignment warnings. */
;;;254    		pxLink = ( void * ) puc;
;;;255    
;;;256    		vTaskSuspendAll();
00000a  f7fffffe          BL       vTaskSuspendAll
;;;257    		{
;;;258    			/* Add this block to the list of free blocks. */
;;;259    			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
00000e  490a              LDR      r1,|L2.56|
000010  6860              LDR      r0,[r4,#4]
000012  e000              B        |L2.22|
                  |L2.20|
000014  4611              MOV      r1,r2
                  |L2.22|
000016  680a              LDR      r2,[r1,#0]
000018  6853              LDR      r3,[r2,#4]
00001a  4283              CMP      r3,r0
00001c  d3fa              BCC      |L2.20|
;;;260    			xFreeBytesRemaining += pxLink->xBlockSize;
00001e  4806              LDR      r0,|L2.56|
000020  6022              STR      r2,[r4,#0]            ;259
000022  600c              STR      r4,[r1,#0]
000024  3808              SUBS     r0,r0,#8
000026  6861              LDR      r1,[r4,#4]
000028  6802              LDR      r2,[r0,#0]  ; xFreeBytesRemaining
00002a  4411              ADD      r1,r1,r2
;;;261    			traceFREE( pv, pxLink->xBlockSize );
;;;262    		}
;;;263    		( void ) xTaskResumeAll();
00002c  6001              STR      r1,[r0,#0]  ; xFreeBytesRemaining
00002e  e8bd4010          POP      {r4,lr}
000032  f7ffbffe          B.W      xTaskResumeAll
                  |L2.54|
;;;264    	}
;;;265    }
000036  bd10              POP      {r4,pc}
;;;266    /*-----------------------------------------------------------*/
                          ENDP

                  |L2.56|
                          DCD      ||.data||+0x8

                          AREA ||i.vPortInitialiseBlocks||, CODE, READONLY, ALIGN=1

                  vPortInitialiseBlocks PROC
;;;273    
;;;274    void vPortInitialiseBlocks( void )
000000  4770              BX       lr
;;;275    {
;;;276    	/* This just exists to keep the linker quiet. */
;;;277    }
;;;278    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xPortGetFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetFreeHeapSize PROC
;;;267    
;;;268    size_t xPortGetFreeHeapSize( void )
000000  4801              LDR      r0,|L4.8|
;;;269    {
;;;270    	return xFreeBytesRemaining;
000002  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;271    }
000004  4770              BX       lr
;;;272    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        20480

                          AREA ||.data||, DATA, ALIGN=2

                  xFreeBytesRemaining
                          DCD      0x00004ff8
                  xHeapHasBeenInitialised
                          DCD      0x00000000
                  xStart
                          %        8
                  xEnd
                          %        8

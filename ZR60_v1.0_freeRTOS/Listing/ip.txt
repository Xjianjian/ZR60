; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\ip.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\ip.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\ip.crf ..\..\Lwip\lwip-1.4.1\src\core\ipv4\ip.c]
                          THUMB

                          AREA ||i.ip_input||, CODE, READONLY, ALIGN=2

                  ip_input PROC
;;;304    err_t
;;;305    ip_input(struct pbuf *p, struct netif *inp)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;306    {
000004  4606              MOV      r6,r0
;;;307      struct ip_hdr *iphdr;
;;;308      struct netif *netif;
;;;309      u16_t iphdr_hlen;
;;;310      u16_t iphdr_len;
;;;311    #if IP_ACCEPT_LINK_LAYER_ADDRESSING
;;;312      int check_ip_src=1;
000006  2001              MOVS     r0,#1
;;;313    #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
;;;314    
;;;315      IP_STATS_INC(ip.recv);
;;;316      snmp_inc_ipinreceives();
;;;317    
;;;318      /* identify the IP header */
;;;319      iphdr = (struct ip_hdr *)p->payload;
000008  9000              STR      r0,[sp,#0]
;;;320      if (IPH_V(iphdr) != 4) {
00000a  6875              LDR      r5,[r6,#4]
00000c  460f              MOV      r7,r1                 ;306
00000e  2104              MOVS     r1,#4
000010  7828              LDRB     r0,[r5,#0]
000012  ebb11f10          CMP      r1,r0,LSR #4
000016  d10f              BNE      |L1.56|
;;;321        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
;;;322        ip_debug_print(p);
;;;323        pbuf_free(p);
;;;324        IP_STATS_INC(ip.err);
;;;325        IP_STATS_INC(ip.drop);
;;;326        snmp_inc_ipinhdrerrors();
;;;327        return ERR_OK;
;;;328      }
;;;329    
;;;330    #ifdef LWIP_HOOK_IP4_INPUT
;;;331      if (LWIP_HOOK_IP4_INPUT(p, inp)) {
;;;332        /* the packet has been eaten */
;;;333        return ERR_OK;
;;;334      }
;;;335    #endif
;;;336    
;;;337      /* obtain IP header length in number of 32-bit words */
;;;338      iphdr_hlen = IPH_HL(iphdr);
000018  f000000f          AND      r0,r0,#0xf
;;;339      /* calculate IP header length in bytes */
;;;340      iphdr_hlen *= 4;
00001c  f64f71ff          MOV      r1,#0xffff
000020  ea010980          AND      r9,r1,r0,LSL #2
;;;341      /* obtain ip length in bytes */
;;;342      iphdr_len = ntohs(IPH_LEN(iphdr));
000024  8868              LDRH     r0,[r5,#2]
000026  f7fffffe          BL       lwip_ntohs
;;;343    
;;;344      /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
;;;345      if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
00002a  8972              LDRH     r2,[r6,#0xa]
00002c  4601              MOV      r1,r0                 ;342
00002e  454a              CMP      r2,r9
000030  d302              BCC      |L1.56|
000032  8930              LDRH     r0,[r6,#8]
000034  4288              CMP      r0,r1
000036  d203              BCS      |L1.64|
                  |L1.56|
000038  4630              MOV      r0,r6                 ;323
00003a  f7fffffe          BL       pbuf_free
00003e  e060              B        |L1.258|
                  |L1.64|
;;;346        if (iphdr_hlen > p->len) {
;;;347          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;348            ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
;;;349            iphdr_hlen, p->len));
;;;350        }
;;;351        if (iphdr_len > p->tot_len) {
;;;352          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;353            ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
;;;354            iphdr_len, p->tot_len));
;;;355        }
;;;356        /* free (drop) packet pbufs */
;;;357        pbuf_free(p);
;;;358        IP_STATS_INC(ip.lenerr);
;;;359        IP_STATS_INC(ip.drop);
;;;360        snmp_inc_ipindiscards();
;;;361        return ERR_OK;
;;;362      }
;;;363    
;;;364      /* verify checksum */
;;;365    #if CHECKSUM_CHECK_IP
;;;366      if (inet_chksum(iphdr, iphdr_hlen) != 0) {
;;;367    
;;;368        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;369          ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
;;;370        ip_debug_print(p);
;;;371        pbuf_free(p);
;;;372        IP_STATS_INC(ip.chkerr);
;;;373        IP_STATS_INC(ip.drop);
;;;374        snmp_inc_ipinhdrerrors();
;;;375        return ERR_OK;
;;;376      }
;;;377    #endif
;;;378    
;;;379      /* Trim pbuf. This should have been done at the netif layer,
;;;380       * but we'll do it anyway just to be sure that its done. */
;;;381      pbuf_realloc(p, iphdr_len);
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       pbuf_realloc
;;;382    
;;;383      /* copy IP addresses to aligned ip_addr_t */
;;;384      ip_addr_copy(current_iphdr_dest, iphdr->dest);
000046  484a              LDR      r0,|L1.368|
000048  6929              LDR      r1,[r5,#0x10]
;;;385      ip_addr_copy(current_iphdr_src, iphdr->src);
00004a  f1a00b04          SUB      r11,r0,#4
00004e  6001              STR      r1,[r0,#0]  ; current_iphdr_dest
000050  68ea              LDR      r2,[r5,#0xc]
;;;386    
;;;387      /* match packet against an interface, i.e. is this packet for us? */
;;;388    #if LWIP_IGMP
;;;389      if (ip_addr_ismulticast(&current_iphdr_dest)) {
;;;390        if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, &current_iphdr_dest))) {
;;;391          netif = inp;
;;;392        } else {
;;;393          netif = NULL;
;;;394        }
;;;395      } else
;;;396    #endif /* LWIP_IGMP */
;;;397      {
;;;398        /* start trying with inp. if that's not acceptable, start walking the
;;;399           list of configured netifs.
;;;400           'first' is used as a boolean to mark whether we started walking the list */
;;;401        int first = 1;
000052  f04f0801          MOV      r8,#1
;;;402        netif = inp;
000056  463c              MOV      r4,r7
000058  4682              MOV      r10,r0                ;384
00005a  f8cb2000          STR      r2,[r11,#0]           ;384  ; current_iphdr_src
                  |L1.94|
;;;403        do {
;;;404          LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
;;;405              ip4_addr_get_u32(&iphdr->dest), ip4_addr_get_u32(&netif->ip_addr),
;;;406              ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
;;;407              ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
;;;408              ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));
;;;409    
;;;410          /* interface is up and configured? */
;;;411          if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
00005e  f8940031          LDRB     r0,[r4,#0x31]
000062  07c0              LSLS     r0,r0,#31
000064  d00d              BEQ      |L1.130|
000066  1d20              ADDS     r0,r4,#4
000068  d00b              BEQ      |L1.130|
00006a  6861              LDR      r1,[r4,#4]
00006c  b149              CBZ      r1,|L1.130|
;;;412            /* unicast to this interface address? */
;;;413            if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
00006e  f8da0000          LDR      r0,[r10,#0]  ; current_iphdr_dest
000072  4288              CMP      r0,r1
000074  d003              BEQ      |L1.126|
;;;414                /* or broadcast on this interface network address? */
;;;415                ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
000076  4621              MOV      r1,r4
000078  f7fffffe          BL       ip4_addr_isbroadcast
00007c  b108              CBZ      r0,|L1.130|
                  |L1.126|
;;;416              LWIP_DEBUGF(IP_DEBUG, ("ip_input: packet accepted on interface %c%c\n",
;;;417                  netif->name[0], netif->name[1]));
;;;418              /* break out of for loop */
;;;419              break;
;;;420            }
;;;421    #if LWIP_AUTOIP
;;;422            /* connections to link-local addresses must persist after changing
;;;423               the netif's address (RFC3927 ch. 1.9) */
;;;424            if ((netif->autoip != NULL) &&
;;;425                ip_addr_cmp(&current_iphdr_dest, &(netif->autoip->llipaddr))) {
;;;426              LWIP_DEBUGF(IP_DEBUG, ("ip_input: LLA packet accepted on interface %c%c\n",
;;;427                  netif->name[0], netif->name[1]));
;;;428              /* break out of for loop */
;;;429              break;
;;;430            }
;;;431    #endif /* LWIP_AUTOIP */
;;;432          }
;;;433          if (first) {
;;;434            first = 0;
;;;435            netif = netif_list;
;;;436          } else {
;;;437            netif = netif->next;
;;;438          }
;;;439          if (netif == inp) {
;;;440            netif = netif->next;
;;;441          }
;;;442        } while(netif != NULL);
;;;443      }
;;;444    
;;;445    #if IP_ACCEPT_LINK_LAYER_ADDRESSING
;;;446      /* Pass DHCP messages regardless of destination address. DHCP traffic is addressed
;;;447       * using link layer addressing (such as Ethernet MAC) so we must not filter on IP.
;;;448       * According to RFC 1542 section 3.1.1, referred by RFC 2131).
;;;449       *
;;;450       * If you want to accept private broadcast communication while a netif is down,
;;;451       * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
;;;452       *
;;;453       * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
;;;454       */
;;;455      if (netif == NULL) {
00007e  b174              CBZ      r4,|L1.158|
000080  e016              B        |L1.176|
                  |L1.130|
000082  f1b80f00          CMP      r8,#0                 ;433
000086  d004              BEQ      |L1.146|
000088  483a              LDR      r0,|L1.372|
00008a  f04f0800          MOV      r8,#0                 ;434
00008e  6804              LDR      r4,[r0,#0]            ;435  ; netif_list
000090  e000              B        |L1.148|
                  |L1.146|
000092  6824              LDR      r4,[r4,#0]            ;437
                  |L1.148|
000094  42bc              CMP      r4,r7                 ;439
000096  d100              BNE      |L1.154|
000098  6824              LDR      r4,[r4,#0]            ;440
                  |L1.154|
00009a  2c00              CMP      r4,#0                 ;442
00009c  d1df              BNE      |L1.94|
                  |L1.158|
;;;456        /* remote port is DHCP server? */
;;;457        if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
00009e  7a68              LDRB     r0,[r5,#9]
0000a0  2811              CMP      r0,#0x11
0000a2  d105              BNE      |L1.176|
;;;458          struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
0000a4  eb050009          ADD      r0,r5,r9
;;;459          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
;;;460            ntohs(udphdr->dest)));
;;;461          if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
0000a8  8840              LDRH     r0,[r0,#2]
0000aa  f5b04f88          CMP      r0,#0x4400
0000ae  d026              BEQ      |L1.254|
                  |L1.176|
;;;462            LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
;;;463            netif = inp;
;;;464            check_ip_src = 0;
;;;465          }
;;;466        }
;;;467      }
;;;468    #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
;;;469    
;;;470      /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
;;;471    #if IP_ACCEPT_LINK_LAYER_ADDRESSING
;;;472      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
;;;473      if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
0000b0  9800              LDR      r0,[sp,#0]
0000b2  b170              CBZ      r0,|L1.210|
0000b4  f8db0000          LDR      r0,[r11,#0]  ; current_iphdr_src
0000b8  b158              CBZ      r0,|L1.210|
;;;474    #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
;;;475      {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
0000ba  46d8              MOV      r8,r11
0000bc  4639              MOV      r1,r7
0000be  f7fffffe          BL       ip4_addr_isbroadcast
0000c2  2800              CMP      r0,#0
0000c4  d1b8              BNE      |L1.56|
;;;476             (ip_addr_ismulticast(&current_iphdr_src))) {
0000c6  f8980000          LDRB     r0,[r8,#0]  ; current_iphdr_src
0000ca  f3c01003          UBFX     r0,r0,#4,#4
0000ce  280e              CMP      r0,#0xe
0000d0  d0b2              BEQ      |L1.56|
                  |L1.210|
;;;477          /* packet source is not valid */
;;;478          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
;;;479          /* free (drop) packet pbufs */
;;;480          pbuf_free(p);
;;;481          IP_STATS_INC(ip.drop);
;;;482          snmp_inc_ipinaddrerrors();
;;;483          snmp_inc_ipindiscards();
;;;484          return ERR_OK;
;;;485        }
;;;486      }
;;;487    
;;;488      /* packet not for us? */
;;;489      if (netif == NULL) {
0000d2  2c00              CMP      r4,#0
0000d4  d0b0              BEQ      |L1.56|
;;;490        /* packet not for us, route or discard */
;;;491        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: packet not for us.\n"));
;;;492    #if IP_FORWARD
;;;493        /* non-broadcast packet? */
;;;494        if (!ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
;;;495          /* try to forward IP packet on (other) interfaces */
;;;496          ip_forward(p, iphdr, inp);
;;;497        } else
;;;498    #endif /* IP_FORWARD */
;;;499        {
;;;500          snmp_inc_ipinaddrerrors();
;;;501          snmp_inc_ipindiscards();
;;;502        }
;;;503        pbuf_free(p);
;;;504        return ERR_OK;
;;;505      }
;;;506      /* packet consists of multiple fragments? */
;;;507      if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
0000d6  88e8              LDRH     r0,[r5,#6]
0000d8  f03000c0          BICS     r0,r0,#0xc0
0000dc  d005              BEQ      |L1.234|
;;;508    #if IP_REASSEMBLY /* packet fragment reassembly code present? */
;;;509        LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
;;;510          ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
;;;511        /* reassemble the packet*/
;;;512        p = ip_reass(p);
0000de  4630              MOV      r0,r6
0000e0  f7fffffe          BL       ip_reass
0000e4  0006              MOVS     r6,r0
;;;513        /* packet not fully reassembled yet? */
;;;514        if (p == NULL) {
0000e6  d00c              BEQ      |L1.258|
;;;515          return ERR_OK;
;;;516        }
;;;517        iphdr = (struct ip_hdr *)p->payload;
0000e8  6875              LDR      r5,[r6,#4]
                  |L1.234|
;;;518    #else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
;;;519        pbuf_free(p);
;;;520        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%"X16_F") (while IP_REASSEMBLY == 0).\n",
;;;521          ntohs(IPH_OFFSET(iphdr))));
;;;522        IP_STATS_INC(ip.opterr);
;;;523        IP_STATS_INC(ip.drop);
;;;524        /* unsupported protocol feature */
;;;525        snmp_inc_ipinunknownprotos();
;;;526        return ERR_OK;
;;;527    #endif /* IP_REASSEMBLY */
;;;528      }
;;;529    
;;;530    #if IP_OPTIONS_ALLOWED == 0 /* no support for IP options in the IP header? */
;;;531    
;;;532    #if LWIP_IGMP
;;;533      /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
;;;534      if((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
;;;535    #else
;;;536      if (iphdr_hlen > IP_HLEN) {
;;;537    #endif /* LWIP_IGMP */
;;;538        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
;;;539        pbuf_free(p);
;;;540        IP_STATS_INC(ip.opterr);
;;;541        IP_STATS_INC(ip.drop);
;;;542        /* unsupported protocol feature */
;;;543        snmp_inc_ipinunknownprotos();
;;;544        return ERR_OK;
;;;545      }
;;;546    #endif /* IP_OPTIONS_ALLOWED == 0 */
;;;547    
;;;548      /* send to upper layers */
;;;549      LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
;;;550      ip_debug_print(p);
;;;551      LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
;;;552    
;;;553      current_netif = inp;
0000ea  4c21              LDR      r4,|L1.368|
;;;554      current_header = iphdr;
;;;555    
;;;556    #if LWIP_RAW
;;;557      /* raw input did not eat the packet? */
;;;558      if (raw_input(p, inp) == 0)
0000ec  4639              MOV      r1,r7
0000ee  3c10              SUBS     r4,r4,#0x10           ;553
0000f0  4630              MOV      r0,r6
0000f2  e9c47501          STRD     r7,r5,[r4,#4]
0000f6  f7fffffe          BL       raw_input
0000fa  b128              CBZ      r0,|L1.264|
0000fc  e02f              B        |L1.350|
                  |L1.254|
0000fe  463c              MOV      r4,r7                 ;463
000100  e7e7              B        |L1.210|
                  |L1.258|
000102  2000              MOVS     r0,#0                 ;515
;;;559    #endif /* LWIP_RAW */
;;;560      {
;;;561        switch (IPH_PROTO(iphdr)) {
;;;562    #if LWIP_UDP
;;;563        case IP_PROTO_UDP:
;;;564    #if LWIP_UDPLITE
;;;565        case IP_PROTO_UDPLITE:
;;;566    #endif /* LWIP_UDPLITE */
;;;567          snmp_inc_ipindelivers();
;;;568          udp_input(p, inp);
;;;569          break;
;;;570    #endif /* LWIP_UDP */
;;;571    #if LWIP_TCP
;;;572        case IP_PROTO_TCP:
;;;573          snmp_inc_ipindelivers();
;;;574          tcp_input(p, inp);
;;;575          break;
;;;576    #endif /* LWIP_TCP */
;;;577    #if LWIP_ICMP
;;;578        case IP_PROTO_ICMP:
;;;579          snmp_inc_ipindelivers();
;;;580          icmp_input(p, inp);
;;;581          break;
;;;582    #endif /* LWIP_ICMP */
;;;583    #if LWIP_IGMP
;;;584        case IP_PROTO_IGMP:
;;;585          igmp_input(p, inp, &current_iphdr_dest);
;;;586          break;
;;;587    #endif /* LWIP_IGMP */
;;;588        default:
;;;589    #if LWIP_ICMP
;;;590          /* send ICMP destination protocol unreachable unless is was a broadcast */
;;;591          if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
;;;592              !ip_addr_ismulticast(&current_iphdr_dest)) {
;;;593            p->payload = iphdr;
;;;594            icmp_dest_unreach(p, ICMP_DUR_PROTO);
;;;595          }
;;;596    #endif /* LWIP_ICMP */
;;;597          pbuf_free(p);
;;;598    
;;;599          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));
;;;600    
;;;601          IP_STATS_INC(ip.proterr);
;;;602          IP_STATS_INC(ip.drop);
;;;603          snmp_inc_ipinunknownprotos();
;;;604        }
;;;605      }
;;;606    
;;;607      current_netif = NULL;
;;;608      current_header = NULL;
;;;609      ip_addr_set_any(&current_iphdr_src);
;;;610      ip_addr_set_any(&current_iphdr_dest);
;;;611    
;;;612      return ERR_OK;
;;;613    }
000104  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.264|
000108  7a68              LDRB     r0,[r5,#9]            ;561
00010a  2801              CMP      r0,#1                 ;561
00010c  d014              BEQ      |L1.312|
00010e  2806              CMP      r0,#6                 ;561
000110  d00d              BEQ      |L1.302|
000112  2811              CMP      r0,#0x11              ;561
000114  d006              BEQ      |L1.292|
000116  4639              MOV      r1,r7                 ;591
000118  f8da0000          LDR      r0,[r10,#0]           ;591  ; current_iphdr_dest
00011c  f7fffffe          BL       ip4_addr_isbroadcast
000120  b178              CBZ      r0,|L1.322|
000122  e019              B        |L1.344|
                  |L1.292|
000124  4639              MOV      r1,r7                 ;568
000126  4630              MOV      r0,r6                 ;568
000128  f7fffffe          BL       udp_input
00012c  e017              B        |L1.350|
                  |L1.302|
00012e  4639              MOV      r1,r7                 ;574
000130  4630              MOV      r0,r6                 ;574
000132  f7fffffe          BL       tcp_input
000136  e012              B        |L1.350|
                  |L1.312|
000138  4639              MOV      r1,r7                 ;580
00013a  4630              MOV      r0,r6                 ;580
00013c  f7fffffe          BL       icmp_input
000140  e00d              B        |L1.350|
                  |L1.322|
000142  f89a0000          LDRB     r0,[r10,#0]           ;592  ; current_iphdr_dest
000146  f3c01003          UBFX     r0,r0,#4,#4           ;592
00014a  280e              CMP      r0,#0xe               ;592
00014c  d004              BEQ      |L1.344|
00014e  2102              MOVS     r1,#2                 ;594
000150  4630              MOV      r0,r6                 ;594
000152  6075              STR      r5,[r6,#4]            ;594
000154  f7fffffe          BL       icmp_dest_unreach
                  |L1.344|
000158  4630              MOV      r0,r6                 ;597
00015a  f7fffffe          BL       pbuf_free
                  |L1.350|
00015e  2000              MOVS     r0,#0                 ;607
000160  6060              STR      r0,[r4,#4]            ;608  ; current_netif
000162  60a0              STR      r0,[r4,#8]            ;609  ; current_header
000164  f8cb0000          STR      r0,[r11,#0]           ;610  ; current_iphdr_src
000168  f8ca0000          STR      r0,[r10,#0]           ;612  ; current_iphdr_dest
00016c  e7c9              B        |L1.258|
;;;614    
                          ENDP

00016e  0000              DCW      0x0000
                  |L1.368|
                          DCD      ||.data||+0x10
                  |L1.372|
                          DCD      netif_list

                          AREA ||i.ip_output||, CODE, READONLY, ALIGN=2

                  ip_output PROC
;;;817    err_t
;;;818    ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;819              u8_t ttl, u8_t tos, u8_t proto)
;;;820    {
000004  4604              MOV      r4,r0
000006  e9dd650a          LDRD     r6,r5,[sp,#0x28]
;;;821      struct netif *netif;
;;;822    
;;;823      /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
;;;824         gets altered as the packet is passed down the stack */
;;;825      LWIP_ASSERT("p->ref == 1", p->ref == 1);
00000a  89c0              LDRH     r0,[r0,#0xe]
00000c  4698              MOV      r8,r3                 ;820
00000e  4617              MOV      r7,r2                 ;820
000010  4689              MOV      r9,r1                 ;820
000012  2801              CMP      r0,#1
000014  d002              BEQ      |L2.28|
000016  a00a              ADR      r0,|L2.64|
000018  f7fffffe          BL       __2printf
                  |L2.28|
;;;826    
;;;827      if ((netif = ip_route(dest)) == NULL) {
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       ip_route
000022  b150              CBZ      r0,|L2.58|
;;;828        LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;829          ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
;;;830        IP_STATS_INC(ip.rterr);
;;;831        return ERR_RTE;
;;;832      }
;;;833    
;;;834      return ip_output_if(p, src, dest, ttl, tos, proto, netif);
000024  9600              STR      r6,[sp,#0]
000026  e9cd5001          STRD     r5,r0,[sp,#4]
00002a  4643              MOV      r3,r8
00002c  463a              MOV      r2,r7
00002e  4649              MOV      r1,r9
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       ip_output_if
                  |L2.54|
;;;835    }
000036  e8bd83fe          POP      {r1-r9,pc}
                  |L2.58|
00003a  f06f0003          MVN      r0,#3                 ;831
00003e  e7fa              B        |L2.54|
;;;836    
                          ENDP

                  |L2.64|
000040  702d3e72          DCB      "p->ref == 1",0
000044  6566203d
000048  3d203100

                          AREA ||i.ip_output_if||, CODE, READONLY, ALIGN=2

                  ip_output_if PROC
;;;640    err_t
;;;641    ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;642                 u8_t ttl, u8_t tos,
;;;643                 u8_t proto, struct netif *netif)
;;;644    {
000004  4605              MOV      r5,r0
000006  e9dda60b          LDRD     r10,r6,[sp,#0x2c]
;;;645    #if IP_OPTIONS_SEND
;;;646      return ip_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
;;;647    }
;;;648    
;;;649    /**
;;;650     * Same as ip_output_if() but with the possibility to include IP options:
;;;651     *
;;;652     * @ param ip_options pointer to the IP options, copied into the IP header
;;;653     * @ param optlen length of ip_options
;;;654     */
;;;655    err_t ip_output_if_opt(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
;;;656           u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
;;;657           u16_t optlen)
;;;658    {
;;;659    #endif /* IP_OPTIONS_SEND */
;;;660      struct ip_hdr *iphdr;
;;;661      ip_addr_t dest_addr;
;;;662    #if CHECKSUM_GEN_IP_INLINE
;;;663      u32_t chk_sum = 0;
;;;664    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;665    
;;;666      /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
;;;667         gets altered as the packet is passed down the stack */
;;;668      LWIP_ASSERT("p->ref == 1", p->ref == 1);
00000a  89c0              LDRH     r0,[r0,#0xe]
00000c  f8ddb028          LDR      r11,[sp,#0x28]
000010  4698              MOV      r8,r3                 ;644
000012  4617              MOV      r7,r2                 ;644
000014  4689              MOV      r9,r1                 ;644
000016  2801              CMP      r0,#1
000018  d002              BEQ      |L3.32|
00001a  a029              ADR      r0,|L3.192|
00001c  f7fffffe          BL       __2printf
                  |L3.32|
;;;669    
;;;670      snmp_inc_ipoutrequests();
;;;671    
;;;672      /* Should the IP header be generated or is it already included in p? */
;;;673      if (dest != IP_HDRINCL) {
000020  b3c7              CBZ      r7,|L3.148|
;;;674        u16_t ip_hlen = IP_HLEN;
;;;675    #if IP_OPTIONS_SEND
;;;676        u16_t optlen_aligned = 0;
;;;677        if (optlen != 0) {
;;;678    #if CHECKSUM_GEN_IP_INLINE
;;;679          int i;
;;;680    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;681          /* round up to a multiple of 4 */
;;;682          optlen_aligned = ((optlen + 3) & ~3);
;;;683          ip_hlen += optlen_aligned;
;;;684          /* First write in the IP options */
;;;685          if (pbuf_header(p, optlen_aligned)) {
;;;686            LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output_if_opt: not enough room for IP options in pbuf\n"));
;;;687            IP_STATS_INC(ip.err);
;;;688            snmp_inc_ipoutdiscards();
;;;689            return ERR_BUF;
;;;690          }
;;;691          MEMCPY(p->payload, ip_options, optlen);
;;;692          if (optlen < optlen_aligned) {
;;;693            /* zero the remaining bytes */
;;;694            memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
;;;695          }
;;;696    #if CHECKSUM_GEN_IP_INLINE
;;;697          for (i = 0; i < optlen_aligned/2; i++) {
;;;698            chk_sum += ((u16_t*)p->payload)[i];
;;;699          }
;;;700    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;701        }
;;;702    #endif /* IP_OPTIONS_SEND */
;;;703        /* generate IP header */
;;;704        if (pbuf_header(p, IP_HLEN)) {
000022  2114              MOVS     r1,#0x14
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       pbuf_header
00002a  b118              CBZ      r0,|L3.52|
;;;705          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));
;;;706    
;;;707          IP_STATS_INC(ip.err);
;;;708          snmp_inc_ipoutdiscards();
;;;709          return ERR_BUF;
00002c  f06f0001          MVN      r0,#1
                  |L3.48|
;;;710        }
;;;711    
;;;712        iphdr = (struct ip_hdr *)p->payload;
;;;713        LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
;;;714                   (p->len >= sizeof(struct ip_hdr)));
;;;715    
;;;716        IPH_TTL_SET(iphdr, ttl);
;;;717        IPH_PROTO_SET(iphdr, proto);
;;;718    #if CHECKSUM_GEN_IP_INLINE
;;;719        chk_sum += LWIP_MAKE_U16(proto, ttl);
;;;720    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;721    
;;;722        /* dest cannot be NULL here */
;;;723        ip_addr_copy(iphdr->dest, *dest);
;;;724    #if CHECKSUM_GEN_IP_INLINE
;;;725        chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
;;;726        chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
;;;727    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;728    
;;;729        IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
;;;730        IPH_TOS_SET(iphdr, tos);
;;;731    #if CHECKSUM_GEN_IP_INLINE
;;;732        chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
;;;733    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;734        IPH_LEN_SET(iphdr, htons(p->tot_len));
;;;735    #if CHECKSUM_GEN_IP_INLINE
;;;736        chk_sum += iphdr->_len;
;;;737    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;738        IPH_OFFSET_SET(iphdr, 0);
;;;739        IPH_ID_SET(iphdr, htons(ip_id));
;;;740    #if CHECKSUM_GEN_IP_INLINE
;;;741        chk_sum += iphdr->_id;
;;;742    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;743        ++ip_id;
;;;744    
;;;745        if (ip_addr_isany(src)) {
;;;746          ip_addr_copy(iphdr->src, netif->ip_addr);
;;;747        } else {
;;;748          /* src cannot be NULL here */
;;;749          ip_addr_copy(iphdr->src, *src);
;;;750        }
;;;751    
;;;752    #if CHECKSUM_GEN_IP_INLINE
;;;753        chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
;;;754        chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
;;;755        chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
;;;756        chk_sum = (chk_sum >> 16) + chk_sum;
;;;757        chk_sum = ~chk_sum;
;;;758        iphdr->_chksum = chk_sum; /* network order */
;;;759    #else /* CHECKSUM_GEN_IP_INLINE */
;;;760        IPH_CHKSUM_SET(iphdr, 0);
;;;761    #if CHECKSUM_GEN_IP
;;;762        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
;;;763    #endif
;;;764    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;765      } else {
;;;766        /* IP header already included in p */
;;;767        iphdr = (struct ip_hdr *)p->payload;
;;;768        ip_addr_copy(dest_addr, iphdr->dest);
;;;769        dest = &dest_addr;
;;;770      }
;;;771    
;;;772      IP_STATS_INC(ip.xmit);
;;;773    
;;;774      LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], netif->num));
;;;775      ip_debug_print(p);
;;;776    
;;;777    #if ENABLE_LOOPBACK
;;;778      if (ip_addr_cmp(dest, &netif->ip_addr)) {
;;;779        /* Packet to self, enqueue it for loopback */
;;;780        LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
;;;781        return netif_loop_output(netif, p, dest);
;;;782      }
;;;783    #if LWIP_IGMP
;;;784      if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
;;;785        netif_loop_output(netif, p, dest);
;;;786      }
;;;787    #endif /* LWIP_IGMP */
;;;788    #endif /* ENABLE_LOOPBACK */
;;;789    #if IP_FRAG
;;;790      /* don't fragment if interface has mtu set to 0 [loopif] */
;;;791      if (netif->mtu && (p->tot_len > netif->mtu)) {
;;;792        return ip_frag(p, netif, dest);
;;;793      }
;;;794    #endif /* IP_FRAG */
;;;795    
;;;796      LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
;;;797      return netif->output(netif, p, dest);
;;;798    }
000030  e8bd8ff8          POP      {r3-r11,pc}
                  |L3.52|
000034  8968              LDRH     r0,[r5,#0xa]          ;713
000036  686c              LDR      r4,[r5,#4]            ;713
000038  2814              CMP      r0,#0x14              ;713
00003a  d202              BCS      |L3.66|
00003c  a023              ADR      r0,|L3.204|
00003e  f7fffffe          BL       __2printf
                  |L3.66|
000042  f8848008          STRB     r8,[r4,#8]            ;716
000046  f884a009          STRB     r10,[r4,#9]           ;717
00004a  6838              LDR      r0,[r7,#0]            ;723
00004c  6120              STR      r0,[r4,#0x10]         ;723
00004e  2045              MOVS     r0,#0x45              ;729
000050  7020              STRB     r0,[r4,#0]            ;729
000052  f884b001          STRB     r11,[r4,#1]           ;730
000056  8928              LDRH     r0,[r5,#8]            ;734
000058  f7fffffe          BL       lwip_htons
00005c  f8df809c          LDR      r8,|L3.252|
000060  8060              STRH     r0,[r4,#2]            ;734
000062  f04f0a00          MOV      r10,#0                ;738
000066  f8a4a006          STRH     r10,[r4,#6]           ;738
00006a  f8b80000          LDRH     r0,[r8,#0]            ;739  ; ip_id
00006e  f7fffffe          BL       lwip_htons
000072  80a0              STRH     r0,[r4,#4]            ;739
000074  f8b80000          LDRH     r0,[r8,#0]            ;743  ; ip_id
000078  1c40              ADDS     r0,r0,#1              ;743
00007a  f8a80000          STRH     r0,[r8,#0]            ;743
00007e  f1b90f00          CMP      r9,#0                 ;745
000082  d002              BEQ      |L3.138|
000084  f8d90000          LDR      r0,[r9,#0]            ;745
000088  b900              CBNZ     r0,|L3.140|
                  |L3.138|
00008a  6870              LDR      r0,[r6,#4]            ;746
                  |L3.140|
00008c  60e0              STR      r0,[r4,#0xc]          ;749
00008e  f8a4a00a          STRH     r10,[r4,#0xa]         ;760
000092  e004              B        |L3.158|
                  |L3.148|
000094  e7ff              B        |L3.150|
                  |L3.150|
000096  6868              LDR      r0,[r5,#4]            ;768
000098  466f              MOV      r7,sp                 ;769
00009a  6900              LDR      r0,[r0,#0x10]         ;768
00009c  9000              STR      r0,[sp,#0]            ;769
                  |L3.158|
00009e  8d30              LDRH     r0,[r6,#0x28]         ;791
0000a0  b140              CBZ      r0,|L3.180|
0000a2  8929              LDRH     r1,[r5,#8]            ;791
0000a4  4281              CMP      r1,r0                 ;791
0000a6  d905              BLS      |L3.180|
0000a8  463a              MOV      r2,r7                 ;792
0000aa  4631              MOV      r1,r6                 ;792
0000ac  4628              MOV      r0,r5                 ;792
0000ae  f7fffffe          BL       ip_frag
0000b2  e7bd              B        |L3.48|
                  |L3.180|
0000b4  6973              LDR      r3,[r6,#0x14]         ;797
0000b6  463a              MOV      r2,r7                 ;797
0000b8  4629              MOV      r1,r5                 ;797
0000ba  4630              MOV      r0,r6                 ;797
0000bc  4798              BLX      r3                    ;797
0000be  e7b7              B        |L3.48|
;;;799    
                          ENDP

                  |L3.192|
0000c0  702d3e72          DCB      "p->ref == 1",0
0000c4  6566203d
0000c8  3d203100
                  |L3.204|
0000cc  63686563          DCB      "check that first pbuf can hold struct ip_hdr",0
0000d0  6b207468
0000d4  61742066
0000d8  69727374
0000dc  20706275
0000e0  66206361
0000e4  6e20686f
0000e8  6c642073
0000ec  74727563
0000f0  74206970
0000f4  5f686472
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L3.252|
                          DCD      ||.data||

                          AREA ||i.ip_route||, CODE, READONLY, ALIGN=2

                  ip_route PROC
;;;123    struct netif *
;;;124    ip_route(ip_addr_t *dest)
000000  b510              PUSH     {r4,lr}
;;;125    {
000002  4604              MOV      r4,r0
;;;126      struct netif *netif;
;;;127    
;;;128    #ifdef LWIP_HOOK_IP4_ROUTE
;;;129      netif = LWIP_HOOK_IP4_ROUTE(dest);
;;;130      if (netif != NULL) {
;;;131        return netif;
;;;132      }
;;;133    #endif
;;;134    
;;;135      /* iterate through netifs */
;;;136      for (netif = netif_list; netif != NULL; netif = netif->next) {
000004  480c              LDR      r0,|L4.56|
000006  e00a              B        |L4.30|
                  |L4.8|
;;;137        /* network mask matches? */
;;;138        if (netif_is_up(netif)) {
000008  f8901031          LDRB     r1,[r0,#0x31]
00000c  07c9              LSLS     r1,r1,#31
00000e  d006              BEQ      |L4.30|
;;;139          if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
000010  6881              LDR      r1,[r0,#8]
000012  6822              LDR      r2,[r4,#0]
000014  6843              LDR      r3,[r0,#4]
000016  400a              ANDS     r2,r2,r1
000018  400b              ANDS     r3,r3,r1
00001a  429a              CMP      r2,r3
00001c  d00a              BEQ      |L4.52|
                  |L4.30|
00001e  6800              LDR      r0,[r0,#0]            ;136
000020  2800              CMP      r0,#0                 ;136
000022  d1f1              BNE      |L4.8|
;;;140            /* return netif on which to forward IP packet */
;;;141            return netif;
;;;142          }
;;;143        }
;;;144      }
;;;145      if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
000024  4805              LDR      r0,|L4.60|
000026  6800              LDR      r0,[r0,#0]  ; netif_default
000028  b118              CBZ      r0,|L4.50|
00002a  f8901031          LDRB     r1,[r0,#0x31]
00002e  07c9              LSLS     r1,r1,#31
000030  d100              BNE      |L4.52|
                  |L4.50|
;;;146        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;147          ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
;;;148        IP_STATS_INC(ip.rterr);
;;;149        snmp_inc_ipoutnoroutes();
;;;150        return NULL;
000032  2000              MOVS     r0,#0
                  |L4.52|
;;;151      }
;;;152      /* no matching netif found, use default netif */
;;;153      return netif_default;
;;;154    }
000034  bd10              POP      {r4,pc}
;;;155    
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      netif_list
                  |L4.60|
                          DCD      netif_default

                          AREA ||.data||, DATA, ALIGN=2

                  ip_id
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  current_netif
                          DCD      0x00000000
                  current_header
                          DCD      0x00000000
                  current_iphdr_src
                          DCD      0x00000000
                  current_iphdr_dest
                          DCD      0x00000000

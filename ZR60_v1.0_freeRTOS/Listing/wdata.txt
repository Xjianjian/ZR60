; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\wdata.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\wdata.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\wdata.crf ..\..\Complex\wdata\wdata.c]
                          THUMB

                          AREA ||i.add_data||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  add_data PROC
;;;35     
;;;36     int add_data(const char *filename,struct comm_info *sm3_buf)
000000  b5f8              PUSH     {r3-r7,lr}
;;;37     {
000002  460e              MOV      r6,r1
;;;38     	//int i = 0;
;;;39     
;;;40     	UINT name_n = 0;
000004  2100              MOVS     r1,#0
;;;41     	res = f_open(&file_name,filename,FA_CREATE_ALWAYS | FA_WRITE);
000006  9100              STR      r1,[sp,#0]
000008  4601              MOV      r1,r0
00000a  220a              MOVS     r2,#0xa
00000c  4811              LDR      r0,|L1.84|
00000e  f7fffffe          BL       f_open
000012  4c11              LDR      r4,|L1.88|
;;;42     	if(res != FR_OK)
;;;43     	{
;;;44     		//USART_PRINTF_S("打开写卡文件失败\n");
;;;45     		return -1;		
000014  f04f35ff          MOV      r5,#0xffffffff
000018  7020              STRB     r0,[r4,#0]            ;41
00001a  b108              CBZ      r0,|L1.32|
                  |L1.28|
00001c  4628              MOV      r0,r5
;;;46     	}
;;;47     
;;;48     	USART_PRINTF_D("file_name.fsize: %d\n",file_name.fsize);
;;;49     
;;;50     	res = f_write(&file_name, sm3_buf,sizeof(struct comm_info), &name_n);
;;;51     
;;;52     	if(res != FR_OK)
;;;53     	{
;;;54     		USART_PRINTF_S("写入母卡数据失败  X\n");
;;;55     		f_close(&file_name);
;;;56     		return -1;
;;;57     	}
;;;58     
;;;59     	f_close(&file_name);
;;;60     	
;;;61     	return 0;
;;;62     	
;;;63     
;;;64     }
00001e  bdf8              POP      {r3-r7,pc}
                  |L1.32|
000020  480c              LDR      r0,|L1.84|
000022  68c1              LDR      r1,[r0,#0xc]          ;48  ; file_name
000024  a00d              ADR      r0,|L1.92|
000026  f7fffffe          BL       __2printf
00002a  466b              MOV      r3,sp                 ;50
00002c  2251              MOVS     r2,#0x51              ;50
00002e  4631              MOV      r1,r6                 ;50
000030  4808              LDR      r0,|L1.84|
000032  f7fffffe          BL       f_write
000036  7020              STRB     r0,[r4,#0]            ;50
000038  b138              CBZ      r0,|L1.74|
00003a  a10e              ADR      r1,|L1.116|
00003c  a013              ADR      r0,|L1.140|
00003e  f7fffffe          BL       __2printf
000042  4804              LDR      r0,|L1.84|
000044  f7fffffe          BL       f_close
000048  e7e8              B        |L1.28|
                  |L1.74|
00004a  4802              LDR      r0,|L1.84|
00004c  f7fffffe          BL       f_close
000050  2000              MOVS     r0,#0                 ;61
000052  bdf8              POP      {r3-r7,pc}
;;;65     /**
                          ENDP

                  |L1.84|
                          DCD      ||.bss||
                  |L1.88|
                          DCD      ||area_number.9||
                  |L1.92|
00005c  66696c65          DCB      "file_name.fsize: %d\n",0
000060  5f6e616d
000064  652e6673
000068  697a653a
00006c  2025640a
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L1.116|
000074  d0b4c8eb          DCB      208,180,200,235,196,184,191,168,202,253,190,221,202,167,176
000078  c4b8bfa8
00007c  cafdbedd
000080  caa7b0  
000083  dc202058          DCB      220,"  X\n",0
000087  0a00    
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L1.140|
00008c  25730a00          DCB      "%s\n",0

                          AREA ||i.read_card_data||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  read_card_data PROC
;;;80     
;;;81     int read_card_data(const char *filename,struct comm_info *sm3_buf)
000000  b5f8              PUSH     {r3-r7,lr}
;;;82     {
000002  460f              MOV      r7,r1
;;;83     	//int i = 0;
;;;84     
;;;85     	UINT name_n = 0;	
000004  2500              MOVS     r5,#0
;;;86     	
;;;87     	
;;;88     		/*将写入文件的信息重新读出来*/
;;;89     	res = f_open(&file_name,filename,FA_OPEN_EXISTING | FA_READ);
000006  4601              MOV      r1,r0
000008  2201              MOVS     r2,#1
00000a  480f              LDR      r0,|L2.72|
00000c  9500              STR      r5,[sp,#0]
00000e  f7fffffe          BL       f_open
000012  4c0e              LDR      r4,|L2.76|
;;;90     	if(res != FR_OK)
;;;91     	{
;;;92     		USART_PRINTF_S("打开写卡文件失败  X\n");
;;;93     		return -1;
000014  1e6e              SUBS     r6,r5,#1
000016  7020              STRB     r0,[r4,#0]            ;89
000018  b108              CBZ      r0,|L2.30|
00001a  a10d              ADR      r1,|L2.80|
00001c  e009              B        |L2.50|
                  |L2.30|
;;;94     	}
;;;95     	
;;;96     	name_n = 0;
;;;97     	res = f_read(&file_name,sm3_buf,sizeof(struct comm_info), &name_n);
00001e  466b              MOV      r3,sp
000020  2251              MOVS     r2,#0x51
000022  4639              MOV      r1,r7
000024  4808              LDR      r0,|L2.72|
000026  9500              STR      r5,[sp,#0]
000028  f7fffffe          BL       f_read
00002c  7020              STRB     r0,[r4,#0]
;;;98     	if(res != FR_OK)
00002e  b128              CBZ      r0,|L2.60|
;;;99     	{
;;;100    		USART_PRINTF_S("读取写卡文件失败  X\n");
000030  a10d              ADR      r1,|L2.104|
                  |L2.50|
000032  a013              ADR      r0,|L2.128|
000034  f7fffffe          BL       __2printf
;;;101    		return -1;	
000038  4630              MOV      r0,r6
;;;102    	}
;;;103    
;;;104    
;;;105    	f_close(&file_name);
;;;106    	return 0;
;;;107    	
;;;108    }
00003a  bdf8              POP      {r3-r7,pc}
                  |L2.60|
00003c  4802              LDR      r0,|L2.72|
00003e  f7fffffe          BL       f_close
000042  2000              MOVS     r0,#0                 ;106
000044  bdf8              POP      {r3-r7,pc}
;;;109    /**
                          ENDP

000046  0000              DCW      0x0000
                  |L2.72|
                          DCD      ||.bss||
                  |L2.76|
                          DCD      ||area_number.9||
                  |L2.80|
000050  b4f2bfaa          DCB      180,242,191,170,208,180,191,168,206,196,188,254,202,167,176
000054  d0b4bfa8
000058  cec4bcfe
00005c  caa7b0  
00005f  dc202058          DCB      220,"  X\n",0
000063  0a00    
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L2.104|
000068  b6c1c8a1          DCB      182,193,200,161,208,180,191,168,206,196,188,254,202,167,176
00006c  d0b4bfa8
000070  cec4bcfe
000074  caa7b0  
000077  dc202058          DCB      220,"  X\n",0
00007b  0a00    
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L2.128|
000080  25730a00          DCB      "%s\n",0

                          AREA ||i.read_init_sminfo||, CODE, READONLY, ALIGN=2

                  read_init_sminfo PROC
;;;117    
;;;118    void read_init_sminfo(struct comm_info *sm3_buf,struct sm3_info *sm)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;119    {
000004  460e              MOV      r6,r1
000006  4605              MOV      r5,r0
;;;120    	u8 i;
;;;121    
;;;122    	for(i = 0;i < 4U;i++)
000008  2400              MOVS     r4,#0
                  |L3.10|
;;;123    	{
;;;124    		sm->community_id[2*i] = wdata_HexToChar(sm3_buf->community_id[i]>>4);
00000a  5d28              LDRB     r0,[r5,r4]
00000c  0900              LSRS     r0,r0,#4
00000e  f7fffffe          BL       wdata_HexToChar
000012  f8060014          STRB     r0,[r6,r4,LSL #1]
;;;125    		sm->community_id[2*i+1] = wdata_HexToChar(sm3_buf->community_id[i]&0xf);
000016  5d28              LDRB     r0,[r5,r4]
000018  f000000f          AND      r0,r0,#0xf
00001c  f7fffffe          BL       wdata_HexToChar
000020  eb060144          ADD      r1,r6,r4,LSL #1
000024  1c64              ADDS     r4,r4,#1
000026  b2e4              UXTB     r4,r4                 ;122
000028  7048              STRB     r0,[r1,#1]
00002a  2c04              CMP      r4,#4                 ;122
00002c  d3ed              BCC      |L3.10|
;;;126    	}
;;;127    
;;;128    	//printf("%lu%lu%lu%lu\n",*((uint32*)(&(sm3_buf->build_numOne[0]))),*((uint32*)(&(sm3_buf->build_numOne[4]))), \
;;;129    													*((uint32*)(&(sm3_buf->build_numOne[8]))),*((uint32*)(&(sm3_buf->build_numOne[12]))));
;;;130    	if((sm3_buf->build_numOne[0] == 0xAA) && (sm3_buf->build_numOne[12] == 0xAA))
00002e  7c29              LDRB     r1,[r5,#0x10]
;;;131    	{//围墙机0x15为全A
;;;132    		machine_type = 1;
000030  4814              LDR      r0,|L3.132|
000032  29aa              CMP      r1,#0xaa              ;130
000034  d102              BNE      |L3.60|
000036  7f29              LDRB     r1,[r5,#0x1c]         ;130
000038  29aa              CMP      r1,#0xaa              ;130
00003a  d01c              BEQ      |L3.118|
                  |L3.60|
;;;133    		printf("\n【4】当前设备为围墙机  √\n");
;;;134    	}
;;;135    	else
;;;136    	{//当门口机处理（需要验证 小区密码 和 楼栋密码）
;;;137    		machine_type = 2;
00003c  2102              MOVS     r1,#2
00003e  7001              STRB     r1,[r0,#0]
;;;138    		printf("\n【4】当前设备为门口机  √\n");	
000040  a011              ADR      r0,|L3.136|
000042  f7fffffe          BL       __2printf
;;;139    		for(i = 0;i < 2U;i++)
000046  2400              MOVS     r4,#0
                  |L3.72|
;;;140    		{
;;;141    			sm->build_num[2*i] = wdata_HexToChar(sm3_buf->build_numOne[i]>>4);
000048  eb050804          ADD      r8,r5,r4
00004c  f8980010          LDRB     r0,[r8,#0x10]
000050  0900              LSRS     r0,r0,#4
000052  f7fffffe          BL       wdata_HexToChar
000056  eb060744          ADD      r7,r6,r4,LSL #1
00005a  7238              STRB     r0,[r7,#8]
;;;142    			sm->build_num[2*i+1] = wdata_HexToChar(sm3_buf->build_numOne[i]&0xf);
00005c  f8980010          LDRB     r0,[r8,#0x10]
000060  f000000f          AND      r0,r0,#0xf
000064  f7fffffe          BL       wdata_HexToChar
000068  1c64              ADDS     r4,r4,#1
00006a  b2e4              UXTB     r4,r4                 ;139
00006c  7278              STRB     r0,[r7,#9]
00006e  2c02              CMP      r4,#2                 ;139
000070  d3ea              BCC      |L3.72|
;;;143    		}
;;;144    	}
;;;145    }
000072  e8bd81f0          POP      {r4-r8,pc}
                  |L3.118|
000076  2101              MOVS     r1,#1                 ;132
000078  7001              STRB     r1,[r0,#0]            ;132
00007a  e8bd41f0          POP      {r4-r8,lr}            ;133
00007e  a009              ADR      r0,|L3.164|
000080  f7ffbffe          B.W      __2printf
;;;146    
                          ENDP

                  |L3.132|
                          DCD      machine_type
                  |L3.136|
000088  0aa1be34          DCB      "\n",161,190,"4",161,191,181,177,199,176,201,232,177,184
00008c  a1bfb5b1
000090  c7b0c9e8
000094  b1b8    
000096  ceaac3c5          DCB      206,170,195,197,191,218,187,250,"  ",161,204,"\n",0
00009a  bfdabbfa
00009e  2020a1cc
0000a2  0a00    
                  |L3.164|
0000a4  0aa1be34          DCB      "\n",161,190,"4",161,191,181,177,199,176,201,232,177,184
0000a8  a1bfb5b1
0000ac  c7b0c9e8
0000b0  b1b8    
0000b2  ceaacea7          DCB      206,170,206,167,199,189,187,250,"  ",161,204,"\n",0
0000b6  c7bdbbfa
0000ba  2020a1cc
0000be  0a00    

                          AREA ||i.wdata_HexToChar||, CODE, READONLY, ALIGN=1

                  wdata_HexToChar PROC
;;;147    
;;;148    static uint8_t wdata_HexToChar(uint8_t temp)
000000  280a              CMP      r0,#0xa
;;;149    {
000002  d201              BCS      |L4.8|
000004  3030              ADDS     r0,r0,#0x30
;;;150        uint8_t dst;
;;;151        if (temp < 10)
;;;152    	{
;;;153            dst = temp + '0';
000006  e000              B        |L4.10|
                  |L4.8|
000008  3037              ADDS     r0,r0,#0x37
                  |L4.10|
00000a  b2c0              UXTB     r0,r0
;;;154        }
;;;155    	else
;;;156    	{
;;;157            dst = temp -10 +'A';
;;;158        }
;;;159        return dst;
;;;160    }
00000c  4770              BX       lr
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  file_name
                          %        4132

                          AREA ||.data||, DATA, ALIGN=2

                  black_n
                          DCD      0x00000000

                          AREA ||area_number.9||, DATA, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.data||
                  ||res||
000000  00                DCB      0x00

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  name_num
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Complex\\wdata\\wdata.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_wdata_c_black_n____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_wdata_c_black_n____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_wdata_c_black_n____REVSH|
#line 153
|__asm___7_wdata_c_black_n____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_wdata_c_black_n____RRX|
#line 328
|__asm___7_wdata_c_black_n____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

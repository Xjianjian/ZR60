; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\stm32f4xx_it.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\stm32f4xx_it.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\stm32f4xx_it.crf ..\..\Service\stm32f4xx_it.c]
                          THUMB

                          AREA ||i.BASIC_TIM_IRQHandler||, CODE, READONLY, ALIGN=2

                  BASIC_TIM_IRQHandler PROC
;;;239    /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
;;;240    void  BASIC_TIM_IRQHandler (void)
000000  b510              PUSH     {r4,lr}
;;;241    {//10us中断
;;;242    	if( TIM_GetITStatus( TIM6, TIM_IT_Update) != RESET ) 
000002  4c08              LDR      r4,|L1.36|
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       TIM_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d007              BEQ      |L1.32|
;;;243    	{	
;;;244    		TimingDelay_Decrement();
000010  f7fffffe          BL       TimingDelay_Decrement
;;;245    		TIM_ClearITPendingBit(TIM6 , TIM_IT_Update);  		
000014  4620              MOV      r0,r4
000016  e8bd4010          POP      {r4,lr}
00001a  2101              MOVS     r1,#1
00001c  f7ffbffe          B.W      TIM_ClearITPendingBit
                  |L1.32|
;;;246    	}		 	
;;;247    }
000020  bd10              POP      {r4,pc}
;;;248    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      0x40001000

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
                  |L2.0|
;;;118      */
;;;119    void BusFault_Handler(void)
000000  e7fe              B        |L2.0|
;;;120    {
;;;121      /* Go to infinite loop when Bus Fault exception occurs */
;;;122      while (1)
;;;123      {
;;;124    #ifdef USART_PRINTF
;;;125    	  printf("BusFault_Handler\n");
;;;126    #endif
;;;127      }
;;;128    }
;;;129    
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;150      */
;;;151    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;152    {
;;;153    #ifdef USART_PRINTF
;;;154    	printf("DebugMon_Handler\n");
;;;155    #endif
;;;156    }
;;;157    
                          ENDP


                          AREA ||i.ETH_IRQHandler||, CODE, READONLY, ALIGN=1

                  ETH_IRQHandler PROC
;;;219      */
;;;220    void ETH_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;221    {
;;;222        /* Handles all the received frames */
;;;223        /* check if any packet received */
;;;224        while(ETH_CheckFrameReceived())
;;;225    	{ 
;;;226            /* process received ethernet packet */
;;;227    		LwIP_Pkt_Handle();
000002  e001              B        |L4.8|
                  |L4.4|
000004  f7fffffe          BL       LwIP_Pkt_Handle
                  |L4.8|
000008  f7fffffe          BL       ETH_CheckFrameReceived
00000c  2800              CMP      r0,#0                 ;224
00000e  d1f9              BNE      |L4.4|
;;;228        }
;;;229        /* Clear the Eth DMA Rx IT pending bits */
;;;230        ETH_DMAClearITPendingBit(ETH_DMA_IT_R);
000010  2040              MOVS     r0,#0x40
000012  f7fffffe          BL       ETH_DMAClearITPendingBit
;;;231        ETH_DMAClearITPendingBit(ETH_DMA_IT_NIS);
000016  e8bd4010          POP      {r4,lr}
00001a  f44f3080          MOV      r0,#0x10000
00001e  f7ffbffe          B.W      ETH_DMAClearITPendingBit
;;;232    }
;;;233    
                          ENDP


                          AREA ||i.EXTI2_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI2_IRQHandler PROC
;;;203      */ 
;;;204    void KEY2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;205    {
;;;206    	//确保是否产生了EXTI Line中断
;;;207    	if(EXTI_GetITStatus(KEY2_INT_EXTI_LINE) != RESET) 
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       EXTI_GetITStatus
000008  2800              CMP      r0,#0
00000a  d006              BEQ      |L5.26|
;;;208    	{
;;;209    		SetZR60Ctrl_u_PasswordKey();
00000c  f7fffffe          BL       SetZR60Ctrl_u_PasswordKey
;;;210    		EXTI_ClearITPendingBit(KEY2_INT_EXTI_LINE);		
000010  e8bd4010          POP      {r4,lr}
000014  2004              MOVS     r0,#4
000016  f7ffbffe          B.W      EXTI_ClearITPendingBit
                  |L5.26|
;;;211    	} 
;;;212    }
00001a  bd10              POP      {r4,pc}
;;;213    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
                  |L6.0|
;;;86       */
;;;87     void HardFault_Handler(void)
000000  e7fe              B        |L6.0|
;;;88     {
;;;89       /* Go to infinite loop when Hard Fault exception occurs */
;;;90       while (1)
;;;91       {//出现硬件错误中断，考虑是否堆栈溢出
;;;92     #ifdef USART_PRINTF
;;;93     	  printf("HardFault_Handler\n");
;;;94     #endif
;;;95       }
;;;96     }
;;;97     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
                  |L7.0|
;;;102      */
;;;103    void MemManage_Handler(void)
000000  e7fe              B        |L7.0|
;;;104    {
;;;105      /* Go to infinite loop when Memory Manage exception occurs */
;;;106      while (1)
;;;107      {
;;;108    #ifdef USART_PRINTF
;;;109    	  printf("MemManage_Handler\n");
;;;110    #endif
;;;111      }
;;;112    }
;;;113    
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;74       */
;;;75     void NMI_Handler(void)
000000  4770              BX       lr
;;;76     {
;;;77     #ifdef USART_PRINTF
;;;78     	printf("NMI_Handler\n");
;;;79     #endif
;;;80     }
;;;81     
                          ENDP


                          AREA ||i.UART4_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART4_IRQHandler PROC
;;;287    uint32_t ulong = 0;
;;;288    void UART4_IRQHandler()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;289    {
;;;290    	uint8_t i;
;;;291    	if(USART_GetITStatus(UART4, USART_IT_RXNE ) != RESET)
000004  4f26              LDR      r7,|L9.160|
000006  f2405825          MOV      r8,#0x525
00000a  4641              MOV      r1,r8
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       USART_GetITStatus
;;;292    	{		
;;;293    		USART_ClearITPendingBit(UART4,USART_IT_RXNE);
;;;294    		if(num > 20)
;;;295    		{
;;;296    			num = 0;	
;;;297    		}
;;;298    		ucTemp[num++] = USART_ReceiveData(UART4);
000012  4d24              LDR      r5,|L9.164|
000014  4c24              LDR      r4,|L9.168|
000016  2600              MOVS     r6,#0                 ;291
000018  b178              CBZ      r0,|L9.58|
00001a  4641              MOV      r1,r8                 ;293
00001c  4638              MOV      r0,r7                 ;293
00001e  f7fffffe          BL       USART_ClearITPendingBit
000022  7820              LDRB     r0,[r4,#0]            ;294  ; num
000024  2814              CMP      r0,#0x14              ;294
000026  d900              BLS      |L9.42|
000028  7026              STRB     r6,[r4,#0]            ;296
                  |L9.42|
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       USART_ReceiveData
000030  4601              MOV      r1,r0
000032  7820              LDRB     r0,[r4,#0]  ; num
000034  5429              STRB     r1,[r5,r0]
000036  1c40              ADDS     r0,r0,#1
000038  7020              STRB     r0,[r4,#0]
                  |L9.58|
;;;299    	}
;;;300    	
;;;301    	for(i = 0;i < num; i++)
00003a  2000              MOVS     r0,#0
00003c  e01b              B        |L9.118|
                  |L9.62|
;;;302    	{
;;;303    		if( (ucTemp[0+i] == 0xFF ) && (ucTemp[1+i] == 0xFD )  && (ucTemp[7+i] == 0xFF) &&( (num - i) == 8 ))
00003e  5c29              LDRB     r1,[r5,r0]
000040  29ff              CMP      r1,#0xff
000042  d116              BNE      |L9.114|
000044  1829              ADDS     r1,r5,r0
000046  784b              LDRB     r3,[r1,#1]
000048  2bfd              CMP      r3,#0xfd
00004a  d112              BNE      |L9.114|
00004c  79c9              LDRB     r1,[r1,#7]
00004e  29ff              CMP      r1,#0xff
000050  d10f              BNE      |L9.114|
000052  1a11              SUBS     r1,r2,r0
000054  2908              CMP      r1,#8
000056  d10c              BNE      |L9.114|
;;;304    		{		
;;;305    			uint32_t  ulong1,ulong2;
;;;306    			num = 0;
000058  7026              STRB     r6,[r4,#0]
;;;307    			ulong1 = ucTemp[4];
00005a  792a              LDRB     r2,[r5,#4]  ; ucTemp
;;;308    			ulong2 = ucTemp[5];
00005c  7969              LDRB     r1,[r5,#5]  ; ucTemp
;;;309    			ulong |= ulong1 << 16 | ulong2 <<8 | ucTemp[6] ;
00005e  0412              LSLS     r2,r2,#16
000060  ea422101          ORR      r1,r2,r1,LSL #8
000064  79aa              LDRB     r2,[r5,#6]  ; ucTemp
000066  6863              LDR      r3,[r4,#4]  ; ulong
000068  431a              ORRS     r2,r2,r3
00006a  4311              ORRS     r1,r1,r2
;;;310    			receive_flag = 1;
00006c  6061              STR      r1,[r4,#4]  ; ulong
00006e  2101              MOVS     r1,#1
000070  7061              STRB     r1,[r4,#1]
                  |L9.114|
000072  1c40              ADDS     r0,r0,#1
000074  b2c0              UXTB     r0,r0                 ;301
                  |L9.118|
000076  7822              LDRB     r2,[r4,#0]            ;301  ; num
000078  4290              CMP      r0,r2                 ;301
00007a  d3e0              BCC      |L9.62|
;;;311    		}
;;;312    	}
;;;313    
;;;314    	if(USART_GetFlagStatus(UART4,USART_FLAG_ORE) == SET) //溢出 
00007c  2108              MOVS     r1,#8
00007e  4638              MOV      r0,r7
000080  f7fffffe          BL       USART_GetFlagStatus
000084  2801              CMP      r0,#1
000086  d108              BNE      |L9.154|
;;;315    	{ 	
;;;316    		USART_ClearFlag(UART4,USART_FLAG_ORE);  //读SR 
000088  2108              MOVS     r1,#8
00008a  4638              MOV      r0,r7
00008c  f7fffffe          BL       USART_ClearFlag
;;;317    		USART_ReceiveData(UART4);		//读DR   
000090  4638              MOV      r0,r7
000092  e8bd41f0          POP      {r4-r8,lr}
000096  f7ffbffe          B.W      USART_ReceiveData
                  |L9.154|
;;;318    	}
;;;319    	
;;;320    }
00009a  e8bd81f0          POP      {r4-r8,pc}
;;;321    
                          ENDP

00009e  0000              DCW      0x0000
                  |L9.160|
                          DCD      0x40004c00
                  |L9.164|
                          DCD      ||.bss||
                  |L9.168|
                          DCD      ||.data||

                          AREA ||i.UART5_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART5_IRQHandler PROC
;;;266    //串口5中断函数
;;;267    void UART5_IRQHandler()
000000  b510              PUSH     {r4,lr}
;;;268    {
;;;269    	ClrZR60Ctrl_BleCnntTimeout();
000002  f7fffffe          BL       ClrZR60Ctrl_BleCnntTimeout
;;;270    	if(USART_GetITStatus(UART5,USART_IT_RXNE) != RESET) 
000006  4c0a              LDR      r4,|L10.48|
000008  f2405125          MOV      r1,#0x525
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       USART_GetITStatus
000012  b108              CBZ      r0,|L10.24|
;;;271        {
;;;272    		UartCmn_Rx_BleMsg();
000014  f7fffffe          BL       UartCmn_Rx_BleMsg
                  |L10.24|
;;;273    	}
;;;274    	
;;;275    	if(USART_GetITStatus(UART5,USART_IT_TXE) != RESET) 
000018  f2407127          MOV      r1,#0x727
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_GetITStatus
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L10.46|
;;;276    	{		
;;;277    		UartCmn_Tx_BluetoothMsg();
000026  e8bd4010          POP      {r4,lr}
00002a  f7ffbffe          B.W      UartCmn_Tx_BluetoothMsg
                  |L10.46|
;;;278    	}
;;;279    	
;;;280    }
00002e  bd10              POP      {r4,pc}
;;;281    
                          ENDP

                  |L10.48|
                          DCD      0x40005000

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;251    //串口3
;;;252    void USART3_IRQHandler()
000000  b510              PUSH     {r4,lr}
;;;253    {
;;;254    	if(USART_GetITStatus(USART3,USART_IT_RXNE) != RESET) 
000002  4c0a              LDR      r4,|L11.44|
000004  f2405125          MOV      r1,#0x525
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b108              CBZ      r0,|L11.20|
;;;255    	{
;;;256    		UartCmn_Rx_Msg();
000010  f7fffffe          BL       UartCmn_Rx_Msg
                  |L11.20|
;;;257    	}
;;;258    	
;;;259    	if(USART_GetITStatus(USART3,USART_IT_TXE) != RESET) 
000014  f2407127          MOV      r1,#0x727
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       USART_GetITStatus
00001e  2800              CMP      r0,#0
000020  d003              BEQ      |L11.42|
;;;260    	{		
;;;261    		UartCmn_Tx_Msg();
000022  e8bd4010          POP      {r4,lr}
000026  f7ffbffe          B.W      UartCmn_Tx_Msg
                  |L11.42|
;;;262    	}
;;;263    }
00002a  bd10              POP      {r4,pc}
;;;264    
                          ENDP

                  |L11.44|
                          DCD      0x40004800

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
                  |L12.0|
;;;134      */
;;;135    void UsageFault_Handler(void)
000000  e7fe              B        |L12.0|
;;;136    {
;;;137      /* Go to infinite loop when Usage Fault exception occurs */
;;;138      while (1)
;;;139      { 
;;;140    #ifdef USART_PRINTF	  
;;;141    	printf("UsageFault_Handler\n");
;;;142    #endif
;;;143      }
;;;144    }
;;;145    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucTemp
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  num
000000  00                DCB      0x00
                  receive_flag
000001  000000            DCB      0x00,0x00,0x00
                  ulong
                          DCD      0x00000000

                          AREA ||area_number.17||, DATA, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.data||
                  update_sec
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\Service\\stm32f4xx_it.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_stm32f4xx_it_c_bb8ca80c____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH|
#line 153
|__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____RRX|
#line 328
|__asm___14_stm32f4xx_it_c_bb8ca80c____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\system_stm32f4xx.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\system_stm32f4xx.crf ..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Source\Templates\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;653      */
;;;654    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;655    {
;;;656    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
;;;657    /******************************************************************************/
;;;658    /*            PLL (clocked by HSE) used as System clock source                */
;;;659    /******************************************************************************/
;;;660      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2200              MOVS     r2,#0
;;;661      
;;;662      /* Enable HSE */
;;;663      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  4927              LDR      r1,|L1.164|
000006  9200              STR      r2,[sp,#0]            ;660
000008  9201              STR      r2,[sp,#4]
00000a  6808              LDR      r0,[r1,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  6008              STR      r0,[r1,#0]
;;;664     
;;;665      /* Wait till HSE is ready and if Time out is reached exit */
;;;666      do
;;;667      {
;;;668        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;669        StartUpCounter++;
;;;670      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000012  f44f43a0          MOV      r3,#0x5000
                  |L1.22|
000016  6808              LDR      r0,[r1,#0]            ;668
000018  f4003000          AND      r0,r0,#0x20000        ;668
00001c  9001              STR      r0,[sp,#4]            ;669
00001e  9800              LDR      r0,[sp,#0]            ;669
000020  1c40              ADDS     r0,r0,#1              ;669
000022  9000              STR      r0,[sp,#0]
000024  9801              LDR      r0,[sp,#4]
000026  b910              CBNZ     r0,|L1.46|
000028  9800              LDR      r0,[sp,#0]
00002a  4298              CMP      r0,r3
00002c  d1f3              BNE      |L1.22|
                  |L1.46|
;;;671    
;;;672      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00002e  6808              LDR      r0,[r1,#0]
000030  0380              LSLS     r0,r0,#14
000032  d534              BPL      |L1.158|
;;;673      {
;;;674        HSEStatus = (uint32_t)0x01;
000034  2001              MOVS     r0,#1
;;;675      }
;;;676      else
;;;677      {
;;;678        HSEStatus = (uint32_t)0x00;
;;;679      }
;;;680    
;;;681      if (HSEStatus == (uint32_t)0x01)
;;;682      {
;;;683        /* Select regulator voltage output Scale 1 mode */
;;;684        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
000036  9001              STR      r0,[sp,#4]
000038  481a              LDR      r0,|L1.164|
00003a  3040              ADDS     r0,r0,#0x40
00003c  6802              LDR      r2,[r0,#0]
00003e  f0425280          ORR      r2,r2,#0x10000000
000042  6002              STR      r2,[r0,#0]
;;;685        PWR->CR |= PWR_CR_VOS;
000044  4818              LDR      r0,|L1.168|
000046  6802              LDR      r2,[r0,#0]
000048  f4424240          ORR      r2,r2,#0xc000
00004c  6002              STR      r2,[r0,#0]
;;;686    
;;;687        /* HCLK = SYSCLK / 1*/
;;;688        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
00004e  4815              LDR      r0,|L1.164|
000050  3008              ADDS     r0,r0,#8
000052  6802              LDR      r2,[r0,#0]
000054  6002              STR      r2,[r0,#0]
;;;689    
;;;690    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
;;;691        /* PCLK2 = HCLK / 2*/
;;;692        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000056  6802              LDR      r2,[r0,#0]
000058  f4424200          ORR      r2,r2,#0x8000
00005c  6002              STR      r2,[r0,#0]
;;;693        
;;;694        /* PCLK1 = HCLK / 4*/
;;;695        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00005e  6802              LDR      r2,[r0,#0]
000060  f44252a0          ORR      r2,r2,#0x1400
000064  6002              STR      r2,[r0,#0]
;;;696    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */
;;;697    
;;;698    #if defined(STM32F401xx) || defined(STM32F413_423xx)
;;;699        /* PCLK2 = HCLK / 1*/
;;;700        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;701        
;;;702        /* PCLK1 = HCLK / 2*/
;;;703        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;704    #endif /* STM32F401xx || STM32F413_423xx */
;;;705    
;;;706    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
;;;707        /* Configure the main PLL */
;;;708        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000066  1f03              SUBS     r3,r0,#4
000068  4a10              LDR      r2,|L1.172|
00006a  601a              STR      r2,[r3,#0]
;;;709                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;710    #endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */
;;;711    
;;;712    #if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
;;;713        /* Configure the main PLL */
;;;714        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;715                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
;;;716    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
;;;717        
;;;718        /* Enable the main PLL */
;;;719        RCC->CR |= RCC_CR_PLLON;
00006c  680a              LDR      r2,[r1,#0]
00006e  f0427280          ORR      r2,r2,#0x1000000
000072  600a              STR      r2,[r1,#0]
                  |L1.116|
;;;720    
;;;721        /* Wait till the main PLL is ready */
;;;722        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000074  680a              LDR      r2,[r1,#0]
000076  0192              LSLS     r2,r2,#6
000078  d5fc              BPL      |L1.116|
;;;723        {
;;;724        }
;;;725       
;;;726    #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
;;;727        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;728        PWR->CR |= PWR_CR_ODEN;
;;;729        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;730        {
;;;731        }
;;;732        PWR->CR |= PWR_CR_ODSWEN;
;;;733        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;734        {
;;;735        }      
;;;736        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;737        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;738    #endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
;;;739    
;;;740    #if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
;;;741        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;742        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
00007a  490d              LDR      r1,|L1.176|
00007c  f2407205          MOV      r2,#0x705
000080  600a              STR      r2,[r1,#0]
;;;743    #endif /* STM32F40_41xxx  || STM32F412xG */
;;;744    
;;;745    #if defined(STM32F413_423xx)  
;;;746        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;747        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
;;;748    #endif /* STM32F413_423xx */
;;;749    
;;;750    #if defined(STM32F401xx)
;;;751        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;752        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;753    #endif /* STM32F401xx */
;;;754    
;;;755        /* Select the main PLL as system clock source */
;;;756        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000082  6801              LDR      r1,[r0,#0]
000084  f0210103          BIC      r1,r1,#3
000088  6001              STR      r1,[r0,#0]
;;;757        RCC->CFGR |= RCC_CFGR_SW_PLL;
00008a  6801              LDR      r1,[r0,#0]
00008c  f0410102          ORR      r1,r1,#2
000090  6001              STR      r1,[r0,#0]
                  |L1.146|
;;;758    
;;;759        /* Wait till the main PLL is used as system clock source */
;;;760        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
000092  6801              LDR      r1,[r0,#0]
000094  f3c10181          UBFX     r1,r1,#2,#2
000098  2902              CMP      r1,#2
00009a  d1fa              BNE      |L1.146|
;;;761        {
;;;762        }
;;;763      }
;;;764      else
;;;765      { /* If HSE fails to start-up, the application will have wrong clock
;;;766             configuration. User can add here some code to deal with this error */
;;;767      }
;;;768    #elif defined(STM32F410xx) || defined(STM32F411xE)
;;;769    #if defined(USE_HSE_BYPASS) 
;;;770    /******************************************************************************/
;;;771    /*            PLL (clocked by HSE) used as System clock source                */
;;;772    /******************************************************************************/
;;;773      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
;;;774      
;;;775      /* Enable HSE and HSE BYPASS */
;;;776      RCC->CR |= ((uint32_t)RCC_CR_HSEON | RCC_CR_HSEBYP);
;;;777     
;;;778      /* Wait till HSE is ready and if Time out is reached exit */
;;;779      do
;;;780      {
;;;781        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;782        StartUpCounter++;
;;;783      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
;;;784    
;;;785      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
;;;786      {
;;;787        HSEStatus = (uint32_t)0x01;
;;;788      }
;;;789      else
;;;790      {
;;;791        HSEStatus = (uint32_t)0x00;
;;;792      }
;;;793    
;;;794      if (HSEStatus == (uint32_t)0x01)
;;;795      {
;;;796        /* Select regulator voltage output Scale 1 mode */
;;;797        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;798        PWR->CR |= PWR_CR_VOS;
;;;799    
;;;800        /* HCLK = SYSCLK / 1*/
;;;801        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;802    
;;;803        /* PCLK2 = HCLK / 2*/
;;;804        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;805        
;;;806        /* PCLK1 = HCLK / 4*/
;;;807        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;808    
;;;809        /* Configure the main PLL */
;;;810        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;811                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;812        
;;;813        /* Enable the main PLL */
;;;814        RCC->CR |= RCC_CR_PLLON;
;;;815    
;;;816        /* Wait till the main PLL is ready */
;;;817        while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;818        {
;;;819        }
;;;820    
;;;821        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;822        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;823    
;;;824        /* Select the main PLL as system clock source */
;;;825        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;826        RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;827    
;;;828        /* Wait till the main PLL is used as system clock source */
;;;829        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;830        {
;;;831        }
;;;832      }
;;;833      else
;;;834      { /* If HSE fails to start-up, the application will have wrong clock
;;;835             configuration. User can add here some code to deal with this error */
;;;836      }
;;;837    #else /* HSI will be used as PLL clock source */
;;;838      /* Select regulator voltage output Scale 1 mode */
;;;839      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;840      PWR->CR |= PWR_CR_VOS;
;;;841      
;;;842      /* HCLK = SYSCLK / 1*/
;;;843      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;844      
;;;845      /* PCLK2 = HCLK / 2*/
;;;846      RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;847      
;;;848      /* PCLK1 = HCLK / 4*/
;;;849      RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;850      
;;;851      /* Configure the main PLL */
;;;852      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (PLL_Q << 24); 
;;;853      
;;;854      /* Enable the main PLL */
;;;855      RCC->CR |= RCC_CR_PLLON;
;;;856      
;;;857      /* Wait till the main PLL is ready */
;;;858      while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;859      {
;;;860      }
;;;861      
;;;862      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;863      FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;864      
;;;865      /* Select the main PLL as system clock source */
;;;866      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;867      RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;868      
;;;869      /* Wait till the main PLL is used as system clock source */
;;;870      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;871      {
;;;872      }
;;;873    #endif /* USE_HSE_BYPASS */  
;;;874    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
;;;875    }
00009c  bd0c              POP      {r2,r3,pc}
                  |L1.158|
00009e  9201              STR      r2,[sp,#4]            ;678
0000a0  bd0c              POP      {r2,r3,pc}
;;;876    #if defined (DATA_IN_ExtSRAM) && defined (DATA_IN_ExtSDRAM)
                          ENDP

0000a2  0000              DCW      0x0000
                  |L1.164|
                          DCD      0x40023800
                  |L1.168|
                          DCD      0x40007000
                  |L1.172|
                          DCD      0x07405419
                  |L1.176|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;559      */
;;;560    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;561    {
;;;562      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;563    #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
;;;564      uint32_t pllr = 2;
;;;565    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
;;;566      /* Get SYSCLK source -------------------------------------------------------*/
;;;567      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4d1a              LDR      r5,|L2.108|
000004  6828              LDR      r0,[r5,#0]
;;;568    
;;;569      switch (tmp)
;;;570      {
;;;571        case 0x00:  /* HSI used as system clock source */
;;;572          SystemCoreClock = HSI_VALUE;
000006  4b1a              LDR      r3,|L2.112|
000008  491a              LDR      r1,|L2.116|
00000a  f010000c          ANDS     r0,r0,#0xc            ;567
00000e  d004              BEQ      |L2.26|
;;;573          break;
;;;574        case 0x04:  /* HSE used as system clock source */
;;;575          SystemCoreClock = HSE_VALUE;
000010  4e19              LDR      r6,|L2.120|
000012  2804              CMP      r0,#4                 ;569
000014  d003              BEQ      |L2.30|
000016  2808              CMP      r0,#8                 ;569
000018  d003              BEQ      |L2.34|
                  |L2.26|
00001a  600b              STR      r3,[r1,#0]            ;573  ; SystemCoreClock
00001c  e01b              B        |L2.86|
                  |L2.30|
;;;576          break;
00001e  600e              STR      r6,[r1,#0]  ; SystemCoreClock
000020  e019              B        |L2.86|
                  |L2.34|
;;;577        case 0x08:  /* PLL P used as system clock source */
;;;578           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;579             SYSCLK = PLL_VCO / PLL_P
;;;580             */    
;;;581          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000022  4a12              LDR      r2,|L2.108|
000024  1f12              SUBS     r2,r2,#4
000026  6810              LDR      r0,[r2,#0]
000028  f3c05480          UBFX     r4,r0,#22,#1
;;;582          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002c  6810              LDR      r0,[r2,#0]
00002e  f000003f          AND      r0,r0,#0x3f
;;;583          
;;;584    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
;;;585          if (pllsource != 0)
000032  b114              CBZ      r4,|L2.58|
;;;586          {
;;;587            /* HSE used as PLL clock source */
;;;588            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000034  fbb6f0f0          UDIV     r0,r6,r0
000038  e001              B        |L2.62|
                  |L2.58|
;;;589          }
;;;590          else
;;;591          {
;;;592            /* HSI used as PLL clock source */
;;;593            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
00003a  fbb3f0f0          UDIV     r0,r3,r0
                  |L2.62|
00003e  6813              LDR      r3,[r2,#0]
;;;594          }
;;;595    #elif defined(STM32F410xx) || defined(STM32F411xE)
;;;596    #if defined(USE_HSE_BYPASS)
;;;597          if (pllsource != 0)
;;;598          {
;;;599            /* HSE used as PLL clock source */
;;;600            pllvco = (HSE_BYPASS_INPUT_FREQUENCY / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;601          }  
;;;602    #else  
;;;603          if (pllsource == 0)
;;;604          {
;;;605            /* HSI used as PLL clock source */
;;;606            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;607          }  
;;;608    #endif /* USE_HSE_BYPASS */  
;;;609    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
;;;610          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000040  6812              LDR      r2,[r2,#0]
000042  f3c31388          UBFX     r3,r3,#6,#9           ;593
000046  4358              MULS     r0,r3,r0              ;593
000048  f3c24201          UBFX     r2,r2,#16,#2
00004c  1c52              ADDS     r2,r2,#1
00004e  0052              LSLS     r2,r2,#1
;;;611          SystemCoreClock = pllvco/pllp;      
000050  fbb0f0f2          UDIV     r0,r0,r2
000054  6008              STR      r0,[r1,#0]  ; SystemCoreClock
                  |L2.86|
;;;612          break;
;;;613    #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
;;;614          case 0x0C:  /* PLL R used as system clock source */
;;;615           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;616             SYSCLK = PLL_VCO / PLL_R
;;;617             */    
;;;618          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
;;;619          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
;;;620          if (pllsource != 0)
;;;621          {
;;;622            /* HSE used as PLL clock source */
;;;623            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;624          }
;;;625          else
;;;626          {
;;;627            /* HSI used as PLL clock source */
;;;628            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
;;;629          }
;;;630     
;;;631          pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
;;;632          SystemCoreClock = pllvco/pllr;      
;;;633          break;
;;;634    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
;;;635        default:
;;;636          SystemCoreClock = HSI_VALUE;
;;;637          break;
;;;638      }
;;;639      /* Compute HCLK frequency --------------------------------------------------*/
;;;640      /* Get HCLK prescaler */
;;;641      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000056  6828              LDR      r0,[r5,#0]
000058  4a06              LDR      r2,|L2.116|
00005a  f3c01003          UBFX     r0,r0,#4,#4
00005e  1d12              ADDS     r2,r2,#4
000060  5c10              LDRB     r0,[r2,r0]
;;;642      /* HCLK frequency */
;;;643      SystemCoreClock >>= tmp;
000062  680a              LDR      r2,[r1,#0]  ; SystemCoreClock
000064  40c2              LSRS     r2,r2,r0
000066  600a              STR      r2,[r1,#0]  ; SystemCoreClock
;;;644    }
000068  bd70              POP      {r4-r6,pc}
;;;645    
                          ENDP

00006a  0000              DCW      0x0000
                  |L2.108|
                          DCD      0x40023808
                  |L2.112|
                          DCD      0x00f42400
                  |L2.116|
                          DCD      ||.data||
                  |L2.120|
                          DCD      0x017d7840

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;482      */
;;;483    void SystemInit(void)
000000  4812              LDR      r0,|L3.76|
;;;484    {
000002  b510              PUSH     {r4,lr}
;;;485      /* FPU settings ------------------------------------------------------------*/
;;;486      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;487        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000004  6801              LDR      r1,[r0,#0]
000006  f4410170          ORR      r1,r1,#0xf00000
00000a  6001              STR      r1,[r0,#0]
;;;488      #endif
;;;489      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;490      /* Set HSION bit */
;;;491      RCC->CR |= (uint32_t)0x00000001;
00000c  4810              LDR      r0,|L3.80|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410101          ORR      r1,r1,#1
000014  6001              STR      r1,[r0,#0]
;;;492    
;;;493      /* Reset CFGR register */
;;;494      RCC->CFGR = 0x00000000;
000016  4a0e              LDR      r2,|L3.80|
000018  2100              MOVS     r1,#0
00001a  3208              ADDS     r2,r2,#8
00001c  6011              STR      r1,[r2,#0]
;;;495    
;;;496      /* Reset HSEON, CSSON and PLLON bits */
;;;497      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001e  6802              LDR      r2,[r0,#0]
000020  4b0c              LDR      r3,|L3.84|
000022  401a              ANDS     r2,r2,r3
000024  6002              STR      r2,[r0,#0]
;;;498    
;;;499      /* Reset PLLCFGR register */
;;;500      RCC->PLLCFGR = 0x24003010;
000026  1d03              ADDS     r3,r0,#4
000028  4a0b              LDR      r2,|L3.88|
00002a  601a              STR      r2,[r3,#0]
;;;501    
;;;502      /* Reset HSEBYP bit */
;;;503      RCC->CR &= (uint32_t)0xFFFBFFFF;
00002c  6802              LDR      r2,[r0,#0]
00002e  f4222280          BIC      r2,r2,#0x40000
000032  6002              STR      r2,[r0,#0]
;;;504    
;;;505      /* Disable all interrupts */
;;;506      RCC->CIR = 0x00000000;
000034  4806              LDR      r0,|L3.80|
000036  300c              ADDS     r0,r0,#0xc
000038  6001              STR      r1,[r0,#0]
;;;507    
;;;508    #if defined(DATA_IN_ExtSRAM) || defined(DATA_IN_ExtSDRAM)
;;;509      SystemInit_ExtMemCtl(); 
;;;510    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;511             
;;;512      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;513         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;514      SetSysClock();
00003a  f7fffffe          BL       SetSysClock
;;;515    
;;;516      /* Configure the Vector Table location add offset address ------------------*/
;;;517    #ifdef VECT_TAB_SRAM
;;;518      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;519    #else
;;;520      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00003e  4903              LDR      r1,|L3.76|
000040  f04f6000          MOV      r0,#0x8000000
000044  3980              SUBS     r1,r1,#0x80
000046  6008              STR      r0,[r1,#0]
;;;521    #endif
;;;522    }
000048  bd10              POP      {r4,pc}
;;;523    
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      0xe000ed88
                  |L3.80|
                          DCD      0x40023800
                  |L3.84|
                          DCD      0xfef6ffff
                  |L3.88|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\CMSIS\\Device\\ST\\STM32F4xx\\Source\\Templates\\system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 153
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____RRX|
#line 328
|__asm___18_system_stm32f4xx_c_5d646a67____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

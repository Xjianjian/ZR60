; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\event_groups.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\event_groups.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\event_groups.crf ..\..\FreeRTOS\Source\event_groups.c]
                          THUMB

                          AREA ||i.prvTestWaitCondition||, CODE, READONLY, ALIGN=1

                  prvTestWaitCondition PROC
;;;612    
;;;613    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
000000  4603              MOV      r3,r0
;;;614    {
;;;615    BaseType_t xWaitConditionMet = pdFALSE;
000002  2000              MOVS     r0,#0
000004  b112              CBZ      r2,|L1.12|
;;;616    
;;;617    	if( xWaitForAllBits == pdFALSE )
;;;618    	{
;;;619    		/* Task only has to wait for one bit within uxBitsToWaitFor to be
;;;620    		set.  Is one already set? */
;;;621    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
;;;622    		{
;;;623    			xWaitConditionMet = pdTRUE;
;;;624    		}
;;;625    		else
;;;626    		{
;;;627    			mtCOVERAGE_TEST_MARKER();
;;;628    		}
;;;629    	}
;;;630    	else
;;;631    	{
;;;632    		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
;;;633    		Are they set already? */
;;;634    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
000006  4399              BICS     r1,r1,r3
000008  d002              BEQ      |L1.16|
                  |L1.10|
;;;635    		{
;;;636    			xWaitConditionMet = pdTRUE;
;;;637    		}
;;;638    		else
;;;639    		{
;;;640    			mtCOVERAGE_TEST_MARKER();
;;;641    		}
;;;642    	}
;;;643    
;;;644    	return xWaitConditionMet;
;;;645    }
00000a  4770              BX       lr
                  |L1.12|
00000c  420b              TST      r3,r1                 ;621
00000e  d0fc              BEQ      |L1.10|
                  |L1.16|
000010  2001              MOVS     r0,#1                 ;623
000012  4770              BX       lr
;;;646    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupClearBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupClearBitsCallback PROC
;;;606    an interrupt. */
;;;607    void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
000000  f7ffbffe          B.W      xEventGroupClearBits
;;;608    {
;;;609    	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
;;;610    }
;;;611    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupDelete||, CODE, READONLY, ALIGN=1

                  vEventGroupDelete PROC
;;;573    
;;;574    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
000000  b570              PUSH     {r4-r6,lr}
;;;575    {
000002  4605              MOV      r5,r0
;;;576    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;577    const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
000004  1d04              ADDS     r4,r0,#4
;;;578    
;;;579    	vTaskSuspendAll();
000006  f7fffffe          BL       vTaskSuspendAll
;;;580    	{
;;;581    		traceEVENT_GROUP_DELETE( xEventGroup );
;;;582    
;;;583    		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
;;;584    		{
;;;585    			/* Unblock the task, returning 0 as the event list is being deleted
;;;586    			and	cannot therefore have any bits set. */
;;;587    			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
;;;588    			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
00000a  f04f7600          MOV      r6,#0x2000000
00000e  e003              B        |L3.24|
                  |L3.16|
000010  4631              MOV      r1,r6
000012  68e0              LDR      r0,[r4,#0xc]
000014  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L3.24|
000018  6820              LDR      r0,[r4,#0]            ;583
00001a  2800              CMP      r0,#0                 ;583
00001c  d1f8              BNE      |L3.16|
;;;589    		}
;;;590    
;;;591    		vPortFree( pxEventBits );
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       vPortFree
;;;592    	}
;;;593    	( void ) xTaskResumeAll();
000024  e8bd4070          POP      {r4-r6,lr}
000028  f7ffbffe          B.W      xTaskResumeAll
;;;594    }
;;;595    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupSetBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupSetBitsCallback PROC
;;;598    an interrupt. */
;;;599    void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
000000  f7ffbffe          B.W      xEventGroupSetBits
;;;600    {
;;;601    	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
;;;602    }
;;;603    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupClearBits||, CODE, READONLY, ALIGN=1

                  xEventGroupClearBits PROC
;;;421    
;;;422    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
000000  b570              PUSH     {r4-r6,lr}
;;;423    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;424    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;425    EventBits_t uxReturn;
;;;426    
;;;427    	/* Check the user is not attempting to clear the bits used by the kernel
;;;428    	itself. */
;;;429    	configASSERT( xEventGroup );
;;;430    	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
;;;431    
;;;432    	taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;433    	{
;;;434    		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
;;;435    
;;;436    		/* The value returned is the event group value prior to the bits being
;;;437    		cleared. */
;;;438    		uxReturn = pxEventBits->uxEventBits;
;;;439    
;;;440    		/* Clear the bits. */
;;;441    		pxEventBits->uxEventBits &= ~uxBitsToClear;
00000a  6825              LDR      r5,[r4,#0]
00000c  ea250006          BIC      r0,r5,r6
;;;442    	}
;;;443    	taskEXIT_CRITICAL();
000010  6020              STR      r0,[r4,#0]
000012  f7fffffe          BL       vPortExitCritical
;;;444    
;;;445    	return uxReturn;
000016  4628              MOV      r0,r5
;;;446    }
000018  bd70              POP      {r4-r6,pc}
;;;447    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupCreate||, CODE, READONLY, ALIGN=1

                  xEventGroupCreate PROC
;;;137    
;;;138    EventGroupHandle_t xEventGroupCreate( void )
000000  b510              PUSH     {r4,lr}
;;;139    {
;;;140    EventGroup_t *pxEventBits;
;;;141    
;;;142    	pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
000002  2018              MOVS     r0,#0x18
000004  f7fffffe          BL       pvPortMalloc
000008  0004              MOVS     r4,r0
;;;143    	if( pxEventBits != NULL )
00000a  d004              BEQ      |L6.22|
;;;144    	{
;;;145    		pxEventBits->uxEventBits = 0;
00000c  2000              MOVS     r0,#0
;;;146    		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
00000e  6020              STR      r0,[r4,#0]
000010  1d20              ADDS     r0,r4,#4
000012  f7fffffe          BL       vListInitialise
                  |L6.22|
;;;147    		traceEVENT_GROUP_CREATE( pxEventBits );
;;;148    	}
;;;149    	else
;;;150    	{
;;;151    		traceEVENT_GROUP_CREATE_FAILED();
;;;152    	}
;;;153    
;;;154    	return ( EventGroupHandle_t ) pxEventBits;
000016  4620              MOV      r0,r4
;;;155    }
000018  bd10              POP      {r4,pc}
;;;156    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupGetBitsFromISR||, CODE, READONLY, ALIGN=1

                  xEventGroupGetBitsFromISR PROC
;;;463    
;;;464    EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
000000  2210              MOVS     r2,#0x10
000002  f3ef8111          MRS      r1,BASEPRI
000006  f3828811          MSR      BASEPRI,r2
00000a  f3bf8f4f          DSB      
00000e  f3bf8f6f          ISB      
;;;465    {
;;;466    UBaseType_t uxSavedInterruptStatus;
;;;467    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;468    EventBits_t uxReturn;
;;;469    
;;;470    	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;471    	{
;;;472    		uxReturn = pxEventBits->uxEventBits;
000012  6800              LDR      r0,[r0,#0]
000014  f3818811          MSR      BASEPRI,r1
;;;473    	}
;;;474    	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;475    
;;;476    	return uxReturn;
;;;477    }
000018  4770              BX       lr
;;;478    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSetBits||, CODE, READONLY, ALIGN=1

                  xEventGroupSetBits PROC
;;;479    
;;;480    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;481    {
000004  4688              MOV      r8,r1
000006  4604              MOV      r4,r0
;;;482    ListItem_t *pxListItem, *pxNext;
;;;483    ListItem_t const *pxListEnd;
;;;484    List_t *pxList;
;;;485    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
000008  2500              MOVS     r5,#0
;;;486    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;487    BaseType_t xMatchFound = pdFALSE;
;;;488    
;;;489    	/* Check the user is not attempting to set the bits used by the kernel
;;;490    	itself. */
;;;491    	configASSERT( xEventGroup );
;;;492    	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
;;;493    
;;;494    	pxList = &( pxEventBits->xTasksWaitingForBits );
00000a  1d06              ADDS     r6,r0,#4
;;;495    	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
00000c  f100070c          ADD      r7,r0,#0xc
;;;496    	vTaskSuspendAll();
000010  f7fffffe          BL       vTaskSuspendAll
;;;497    	{
;;;498    		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
;;;499    
;;;500    		pxListItem = listGET_HEAD_ENTRY( pxList );
;;;501    
;;;502    		/* Set the bits. */
;;;503    		pxEventBits->uxEventBits |= uxBitsToSet;
000014  6821              LDR      r1,[r4,#0]
000016  68f0              LDR      r0,[r6,#0xc]
000018  ea410108          ORR      r1,r1,r8
;;;504    
;;;505    		/* See if the new bit value should unblock any tasks. */
;;;506    		while( pxListItem != pxListEnd )
00001c  6021              STR      r1,[r4,#0]
00001e  e017              B        |L8.80|
                  |L8.32|
000020  e9d01600          LDRD     r1,r6,[r0,#0]
;;;507    		{
;;;508    			pxNext = listGET_NEXT( pxListItem );
;;;509    			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
;;;510    			xMatchFound = pdFALSE;
;;;511    
;;;512    			/* Split the bits waited for from the control bits. */
;;;513    			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
000024  f001427f          AND      r2,r1,#0xff000000
;;;514    			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
;;;515    
;;;516    			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
000028  0153              LSLS     r3,r2,#5
00002a  6823              LDR      r3,[r4,#0]
00002c  f021417f          BIC      r1,r1,#0xff000000     ;514
000030  d402              BMI      |L8.56|
;;;517    			{
;;;518    				/* Just looking for single bit being set. */
;;;519    				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
000032  420b              TST      r3,r1
000034  d103              BNE      |L8.62|
000036  e00a              B        |L8.78|
                  |L8.56|
;;;520    				{
;;;521    					xMatchFound = pdTRUE;
;;;522    				}
;;;523    				else
;;;524    				{
;;;525    					mtCOVERAGE_TEST_MARKER();
;;;526    				}
;;;527    			}
;;;528    			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
000038  ea310303          BICS     r3,r1,r3
00003c  d107              BNE      |L8.78|
                  |L8.62|
;;;529    			{
;;;530    				/* All bits are set. */
;;;531    				xMatchFound = pdTRUE;
;;;532    			}
;;;533    			else
;;;534    			{
;;;535    				/* Need all bits to be set, but not all the bits were set. */
;;;536    			}
;;;537    
;;;538    			if( xMatchFound != pdFALSE )
;;;539    			{
;;;540    				/* The bits match.  Should the bits be cleared on exit? */
;;;541    				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
00003e  01d2              LSLS     r2,r2,#7
000040  d500              BPL      |L8.68|
;;;542    				{
;;;543    					uxBitsToClear |= uxBitsWaitedFor;
000042  430d              ORRS     r5,r5,r1
                  |L8.68|
;;;544    				}
;;;545    				else
;;;546    				{
;;;547    					mtCOVERAGE_TEST_MARKER();
;;;548    				}
;;;549    
;;;550    				/* Store the actual event flag value in the task's event list
;;;551    				item before removing the task from the event list.  The
;;;552    				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
;;;553    				that is was unblocked due to its required bits matching, rather
;;;554    				than because it timed out. */
;;;555    				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
000044  6821              LDR      r1,[r4,#0]
000046  f0417100          ORR      r1,r1,#0x2000000
00004a  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L8.78|
;;;556    			}
;;;557    
;;;558    			/* Move onto the next list item.  Note pxListItem->pxNext is not
;;;559    			used here as the list item may have been removed from the event list
;;;560    			and inserted into the ready/pending reading list. */
;;;561    			pxListItem = pxNext;
00004e  4630              MOV      r0,r6
                  |L8.80|
000050  42b8              CMP      r0,r7                 ;506
000052  d1e5              BNE      |L8.32|
;;;562    		}
;;;563    
;;;564    		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
;;;565    		bit was set in the control word. */
;;;566    		pxEventBits->uxEventBits &= ~uxBitsToClear;
000054  6820              LDR      r0,[r4,#0]
000056  43a8              BICS     r0,r0,r5
;;;567    	}
;;;568    	( void ) xTaskResumeAll();
000058  6020              STR      r0,[r4,#0]
00005a  f7fffffe          BL       xTaskResumeAll
;;;569    
;;;570    	return pxEventBits->uxEventBits;
00005e  6820              LDR      r0,[r4,#0]
;;;571    }
000060  e8bd81f0          POP      {r4-r8,pc}
;;;572    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSync||, CODE, READONLY, ALIGN=2

                  xEventGroupSync PROC
;;;157    
;;;158    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;159    {
000004  461f              MOV      r7,r3
000006  4615              MOV      r5,r2
000008  4688              MOV      r8,r1
00000a  4604              MOV      r4,r0
;;;160    EventBits_t uxOriginalBitValue, uxReturn;
;;;161    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;162    BaseType_t xAlreadyYielded;
;;;163    BaseType_t xTimeoutOccurred = pdFALSE;
;;;164    
;;;165    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
;;;166    	configASSERT( uxBitsToWaitFor != 0 );
;;;167    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;168    	{
;;;169    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;170    	}
;;;171    	#endif
;;;172    
;;;173    	vTaskSuspendAll();
00000c  f7fffffe          BL       vTaskSuspendAll
;;;174    	{
;;;175    		uxOriginalBitValue = pxEventBits->uxEventBits;
;;;176    
;;;177    		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
000010  4641              MOV      r1,r8
000012  4620              MOV      r0,r4
000014  6826              LDR      r6,[r4,#0]
000016  f7fffffe          BL       xEventGroupSetBits
;;;178    
;;;179    		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
00001a  ea460608          ORR      r6,r6,r8
00001e  ea350006          BICS     r0,r5,r6
000022  d008              BEQ      |L9.54|
;;;180    		{
;;;181    			/* All the rendezvous bits are now set - no need to block. */
;;;182    			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
;;;183    
;;;184    			/* Rendezvous always clear the bits.  They will have been cleared
;;;185    			already unless this is the only task in the rendezvous. */
;;;186    			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
;;;187    
;;;188    			xTicksToWait = 0;
;;;189    		}
;;;190    		else
;;;191    		{
;;;192    			if( xTicksToWait != ( TickType_t ) 0 )
000024  b167              CBZ      r7,|L9.64|
;;;193    			{
;;;194    				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
;;;195    
;;;196    				/* Store the bits that the calling task is waiting for in the
;;;197    				task's event list item so the kernel knows when a match is
;;;198    				found.  Then enter the blocked state. */
;;;199    				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
000026  f04561a0          ORR      r1,r5,#0x5000000
00002a  463a              MOV      r2,r7
00002c  1d20              ADDS     r0,r4,#4
00002e  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;200    
;;;201    				/* This assignment is obsolete as uxReturn will get set after
;;;202    				the task unblocks, but some compilers mistakenly generate a
;;;203    				warning about uxReturn being returned without being set if the
;;;204    				assignment is omitted. */
;;;205    				uxReturn = 0;
000032  2600              MOVS     r6,#0
000034  e005              B        |L9.66|
                  |L9.54|
000036  6820              LDR      r0,[r4,#0]            ;186
000038  43a8              BICS     r0,r0,r5              ;186
00003a  2700              MOVS     r7,#0                 ;188
00003c  6020              STR      r0,[r4,#0]            ;188
00003e  e000              B        |L9.66|
                  |L9.64|
;;;206    			}
;;;207    			else
;;;208    			{
;;;209    				/* The rendezvous bits were not set, but no block time was
;;;210    				specified - just return the current event bit value. */
;;;211    				uxReturn = pxEventBits->uxEventBits;
000040  6826              LDR      r6,[r4,#0]
                  |L9.66|
;;;212    			}
;;;213    		}
;;;214    	}
;;;215    	xAlreadyYielded = xTaskResumeAll();
000042  f7fffffe          BL       xTaskResumeAll
;;;216    
;;;217    	if( xTicksToWait != ( TickType_t ) 0 )
000046  b1d7              CBZ      r7,|L9.126|
;;;218    	{
;;;219    		if( xAlreadyYielded == pdFALSE )
000048  b938              CBNZ     r0,|L9.90|
;;;220    		{
;;;221    			portYIELD_WITHIN_API();
00004a  490e              LDR      r1,|L9.132|
00004c  f04f5080          MOV      r0,#0x10000000
000050  6008              STR      r0,[r1,#0]
000052  f3bf8f4f          DSB      
000056  f3bf8f6f          ISB      
                  |L9.90|
;;;222    		}
;;;223    		else
;;;224    		{
;;;225    			mtCOVERAGE_TEST_MARKER();
;;;226    		}
;;;227    
;;;228    		/* The task blocked to wait for its required bits to be set - at this
;;;229    		point either the required bits were set or the block time expired.  If
;;;230    		the required bits were set they will have been stored in the task's
;;;231    		event list item, and they should now be retrieved then cleared. */
;;;232    		uxReturn = uxTaskResetEventItemValue();
00005a  f7fffffe          BL       uxTaskResetEventItemValue
00005e  4606              MOV      r6,r0
;;;233    
;;;234    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
000060  0180              LSLS     r0,r0,#6
000062  d40a              BMI      |L9.122|
;;;235    		{
;;;236    			/* The task timed out, just return the current event bit value. */
;;;237    			taskENTER_CRITICAL();
000064  f7fffffe          BL       vPortEnterCritical
;;;238    			{
;;;239    				uxReturn = pxEventBits->uxEventBits;
;;;240    
;;;241    				/* Although the task got here because it timed out before the
;;;242    				bits it was waiting for were set, it is possible that since it
;;;243    				unblocked another task has set the bits.  If this is the case
;;;244    				then it needs to clear the bits before exiting. */
;;;245    				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
000068  6826              LDR      r6,[r4,#0]
00006a  ea350006          BICS     r0,r5,r6
00006e  d102              BNE      |L9.118|
;;;246    				{
;;;247    					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
000070  ea260005          BIC      r0,r6,r5
000074  6020              STR      r0,[r4,#0]
                  |L9.118|
;;;248    				}
;;;249    				else
;;;250    				{
;;;251    					mtCOVERAGE_TEST_MARKER();
;;;252    				}
;;;253    			}
;;;254    			taskEXIT_CRITICAL();
000076  f7fffffe          BL       vPortExitCritical
                  |L9.122|
;;;255    
;;;256    			xTimeoutOccurred = pdTRUE;
;;;257    		}
;;;258    		else
;;;259    		{
;;;260    			/* The task unblocked because the bits were set. */
;;;261    		}
;;;262    
;;;263    		/* Control bits might be set as the task had blocked should not be
;;;264    		returned. */
;;;265    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
00007a  f026467f          BIC      r6,r6,#0xff000000
                  |L9.126|
;;;266    	}
;;;267    
;;;268    	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
;;;269    
;;;270    	return uxReturn;
00007e  4630              MOV      r0,r6
;;;271    }
000080  e8bd81f0          POP      {r4-r8,pc}
;;;272    /*-----------------------------------------------------------*/
                          ENDP

                  |L9.132|
                          DCD      0xe000ed04

                          AREA ||i.xEventGroupWaitBits||, CODE, READONLY, ALIGN=2

                  xEventGroupWaitBits PROC
;;;273    
;;;274    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;275    {
000004  469a              MOV      r10,r3
000006  4690              MOV      r8,r2
000008  460e              MOV      r6,r1
00000a  4604              MOV      r4,r0
;;;276    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;277    EventBits_t uxReturn, uxControlBits = 0;
00000c  2500              MOVS     r5,#0
;;;278    BaseType_t xWaitConditionMet, xAlreadyYielded;
;;;279    BaseType_t xTimeoutOccurred = pdFALSE;
;;;280    
;;;281    	/* Check the user is not attempting to wait on the bits used by the kernel
;;;282    	itself, and that at least one bit is being requested. */
;;;283    	configASSERT( xEventGroup );
;;;284    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
;;;285    	configASSERT( uxBitsToWaitFor != 0 );
;;;286    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;287    	{
;;;288    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;289    	}
;;;290    	#endif
;;;291    
;;;292    	vTaskSuspendAll();
00000e  f8dd9020          LDR      r9,[sp,#0x20]
000012  f7fffffe          BL       vTaskSuspendAll
;;;293    	{
;;;294    		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
;;;295    
;;;296    		/* Check to see if the wait condition is already met or not. */
;;;297    		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
000016  6827              LDR      r7,[r4,#0]
000018  4652              MOV      r2,r10
00001a  4631              MOV      r1,r6
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       prvTestWaitCondition
;;;298    
;;;299    		if( xWaitConditionMet != pdFALSE )
000022  b148              CBZ      r0,|L10.56|
;;;300    		{
;;;301    			/* The wait condition has already been met so there is no need to
;;;302    			block. */
;;;303    			uxReturn = uxCurrentEventBits;
000024  463d              MOV      r5,r7
;;;304    			xTicksToWait = ( TickType_t ) 0;
000026  f04f0900          MOV      r9,#0
;;;305    
;;;306    			/* Clear the wait bits if requested to do so. */
;;;307    			if( xClearOnExit != pdFALSE )
00002a  f1b80f00          CMP      r8,#0
00002e  d017              BEQ      |L10.96|
;;;308    			{
;;;309    				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
000030  6820              LDR      r0,[r4,#0]
000032  43b0              BICS     r0,r0,r6
000034  6020              STR      r0,[r4,#0]
000036  e013              B        |L10.96|
                  |L10.56|
;;;310    			}
;;;311    			else
;;;312    			{
;;;313    				mtCOVERAGE_TEST_MARKER();
;;;314    			}
;;;315    		}
;;;316    		else if( xTicksToWait == ( TickType_t ) 0 )
000038  f1b90f00          CMP      r9,#0
00003c  d017              BEQ      |L10.110|
;;;317    		{
;;;318    			/* The wait condition has not been met, but no block time was
;;;319    			specified, so just return the current value. */
;;;320    			uxReturn = uxCurrentEventBits;
;;;321    		}
;;;322    		else
;;;323    		{
;;;324    			/* The task is going to block to wait for its required bits to be
;;;325    			set.  uxControlBits are used to remember the specified behaviour of
;;;326    			this call to xEventGroupWaitBits() - for use when the event bits
;;;327    			unblock the task. */
;;;328    			if( xClearOnExit != pdFALSE )
00003e  f1b80f00          CMP      r8,#0
000042  d001              BEQ      |L10.72|
;;;329    			{
;;;330    				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
000044  f04f7580          MOV      r5,#0x1000000
                  |L10.72|
;;;331    			}
;;;332    			else
;;;333    			{
;;;334    				mtCOVERAGE_TEST_MARKER();
;;;335    			}
;;;336    
;;;337    			if( xWaitForAllBits != pdFALSE )
000048  f1ba0f00          CMP      r10,#0
00004c  d001              BEQ      |L10.82|
;;;338    			{
;;;339    				uxControlBits |= eventWAIT_FOR_ALL_BITS;
00004e  f0456580          ORR      r5,r5,#0x4000000
                  |L10.82|
;;;340    			}
;;;341    			else
;;;342    			{
;;;343    				mtCOVERAGE_TEST_MARKER();
;;;344    			}
;;;345    
;;;346    			/* Store the bits that the calling task is waiting for in the
;;;347    			task's event list item so the kernel knows when a match is
;;;348    			found.  Then enter the blocked state. */
;;;349    			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
000052  ea460105          ORR      r1,r6,r5
000056  464a              MOV      r2,r9
000058  1d20              ADDS     r0,r4,#4
00005a  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;350    
;;;351    			/* This is obsolete as it will get set after the task unblocks, but
;;;352    			some compilers mistakenly generate a warning about the variable
;;;353    			being returned without being set if it is not done. */
;;;354    			uxReturn = 0;
00005e  2500              MOVS     r5,#0
                  |L10.96|
;;;355    
;;;356    			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
;;;357    		}
;;;358    	}
;;;359    	xAlreadyYielded = xTaskResumeAll();
000060  f7fffffe          BL       xTaskResumeAll
;;;360    
;;;361    	if( xTicksToWait != ( TickType_t ) 0 )
000064  f1b90f00          CMP      r9,#0
000068  d023              BEQ      |L10.178|
;;;362    	{
;;;363    		if( xAlreadyYielded == pdFALSE )
00006a  b110              CBZ      r0,|L10.114|
00006c  e009              B        |L10.130|
                  |L10.110|
00006e  463d              MOV      r5,r7                 ;320
000070  e7f6              B        |L10.96|
                  |L10.114|
;;;364    		{
;;;365    			portYIELD_WITHIN_API();
000072  4911              LDR      r1,|L10.184|
000074  f04f5080          MOV      r0,#0x10000000
000078  6008              STR      r0,[r1,#0]
00007a  f3bf8f4f          DSB      
00007e  f3bf8f6f          ISB      
                  |L10.130|
;;;366    		}
;;;367    		else
;;;368    		{
;;;369    			mtCOVERAGE_TEST_MARKER();
;;;370    		}
;;;371    
;;;372    		/* The task blocked to wait for its required bits to be set - at this
;;;373    		point either the required bits were set or the block time expired.  If
;;;374    		the required bits were set they will have been stored in the task's
;;;375    		event list item, and they should now be retrieved then cleared. */
;;;376    		uxReturn = uxTaskResetEventItemValue();
000082  f7fffffe          BL       uxTaskResetEventItemValue
000086  4605              MOV      r5,r0
;;;377    
;;;378    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
000088  0180              LSLS     r0,r0,#6
00008a  d410              BMI      |L10.174|
;;;379    		{
;;;380    			taskENTER_CRITICAL();
00008c  f7fffffe          BL       vPortEnterCritical
;;;381    			{
;;;382    				/* The task timed out, just return the current event bit value. */
;;;383    				uxReturn = pxEventBits->uxEventBits;
;;;384    
;;;385    				/* It is possible that the event bits were updated between this
;;;386    				task leaving the Blocked state and running again. */
;;;387    				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
000090  6825              LDR      r5,[r4,#0]
000092  4652              MOV      r2,r10
000094  4631              MOV      r1,r6
000096  4628              MOV      r0,r5
000098  f7fffffe          BL       prvTestWaitCondition
00009c  b128              CBZ      r0,|L10.170|
;;;388    				{
;;;389    					if( xClearOnExit != pdFALSE )
00009e  f1b80f00          CMP      r8,#0
0000a2  d002              BEQ      |L10.170|
;;;390    					{
;;;391    						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0000a4  6820              LDR      r0,[r4,#0]
0000a6  43b0              BICS     r0,r0,r6
0000a8  6020              STR      r0,[r4,#0]
                  |L10.170|
;;;392    					}
;;;393    					else
;;;394    					{
;;;395    						mtCOVERAGE_TEST_MARKER();
;;;396    					}
;;;397    				}
;;;398    				else
;;;399    				{
;;;400    					mtCOVERAGE_TEST_MARKER();
;;;401    				}
;;;402    			}
;;;403    			taskEXIT_CRITICAL();
0000aa  f7fffffe          BL       vPortExitCritical
                  |L10.174|
;;;404    
;;;405    			/* Prevent compiler warnings when trace macros are not used. */
;;;406    			xTimeoutOccurred = pdFALSE;
;;;407    		}
;;;408    		else
;;;409    		{
;;;410    			/* The task unblocked because the bits were set. */
;;;411    		}
;;;412    
;;;413    		/* The task blocked so control bits may have been set. */
;;;414    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
0000ae  f025457f          BIC      r5,r5,#0xff000000
                  |L10.178|
;;;415    	}
;;;416    	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
;;;417    
;;;418    	return uxReturn;
0000b2  4628              MOV      r0,r5
;;;419    }
0000b4  e8bd87f0          POP      {r4-r10,pc}
;;;420    /*-----------------------------------------------------------*/
                          ENDP

                  |L10.184|
                          DCD      0xe000ed04

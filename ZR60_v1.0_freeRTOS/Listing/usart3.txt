; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\usart3.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\usart3.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\usart3.crf ..\..\Complex\usart3\usart3.c]
                          THUMB

                          AREA ||i.SetUSART_BaudRate||, CODE, READONLY, ALIGN=2

                  SetUSART_BaudRate PROC
;;;93     
;;;94     void SetUSART_BaudRate(USART_TypeDef* USARTx, uint32_t Le_w_BaudRate)
000000  b57f              PUSH     {r0-r6,lr}
;;;95     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;96     	uint32_t tmpreg = 0x00, apbclock = 0x00;
;;;97     	uint32_t integerdivider = 0x00;
;;;98     	uint32_t fractionaldivider = 0x00;
;;;99     	RCC_ClocksTypeDef RCC_ClocksStatus;
;;;100    	/*---------------------------- USART BRR Configuration -----------------------*/
;;;101    	/* Configure the USART Baud Rate */
;;;102    	RCC_GetClocksFreq(&RCC_ClocksStatus);
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       RCC_GetClocksFreq
;;;103    
;;;104    	if ((USARTx == USART1) || (USARTx == USART6))
00000c  4819              LDR      r0,|L1.116|
00000e  4284              CMP      r4,r0
000010  d002              BEQ      |L1.24|
000012  4819              LDR      r0,|L1.120|
000014  4284              CMP      r4,r0
000016  d101              BNE      |L1.28|
                  |L1.24|
;;;105    	{
;;;106    		apbclock = RCC_ClocksStatus.PCLK2_Frequency;
000018  9803              LDR      r0,[sp,#0xc]
00001a  e000              B        |L1.30|
                  |L1.28|
;;;107    	}
;;;108    	else
;;;109    	{
;;;110    		apbclock = RCC_ClocksStatus.PCLK1_Frequency;
00001c  9802              LDR      r0,[sp,#8]
                  |L1.30|
;;;111    	}
;;;112    
;;;113    	/* Determine the integer part */
;;;114    	if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
00001e  89a1              LDRH     r1,[r4,#0xc]
000020  0409              LSLS     r1,r1,#16
;;;115    	{
;;;116    		/* Integer part computing in case Oversampling mode is 8 Samples */
;;;117    		integerdivider = ((25 * apbclock) / (2 * (Le_w_BaudRate)));    
;;;118    	}
;;;119    	else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;120    	{
;;;121    		/* Integer part computing in case Oversampling mode is 16 Samples */
;;;122    		integerdivider = ((25 * apbclock) / (4 * (Le_w_BaudRate)));    
000022  eb0001c0          ADD      r1,r0,r0,LSL #3
000026  eb011000          ADD      r0,r1,r0,LSL #4
00002a  d501              BPL      |L1.48|
00002c  0069              LSLS     r1,r5,#1              ;117
00002e  e000              B        |L1.50|
                  |L1.48|
000030  00a9              LSLS     r1,r5,#2
                  |L1.50|
000032  fbb0f0f1          UDIV     r0,r0,r1
;;;123    	}
;;;124    	tmpreg = (integerdivider / 100) << 4;
000036  2264              MOVS     r2,#0x64
000038  fbb0f1f2          UDIV     r1,r0,r2
00003c  0109              LSLS     r1,r1,#4
;;;125    
;;;126    	/* Determine the fractional part */
;;;127    	fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
00003e  090b              LSRS     r3,r1,#4
000040  f06f0518          MVN      r5,#0x18
000044  436b              MULS     r3,r5,r3
000046  eb000083          ADD      r0,r0,r3,LSL #2
;;;128    
;;;129    	/* Implement the fractional part in the register */
;;;130    	if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
00004a  89a3              LDRH     r3,[r4,#0xc]
00004c  041d              LSLS     r5,r3,#16
;;;131    	{
;;;132    		tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
00004e  f04f0332          MOV      r3,#0x32
000052  d506              BPL      |L1.98|
000054  eb0300c0          ADD      r0,r3,r0,LSL #3
000058  fbb0f0f2          UDIV     r0,r0,r2
00005c  f0000007          AND      r0,r0,#7
000060  e005              B        |L1.110|
                  |L1.98|
;;;133    	}
;;;134    	else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;135    	{
;;;136    		tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
000062  eb031000          ADD      r0,r3,r0,LSL #4
000066  fbb0f0f2          UDIV     r0,r0,r2
00006a  f000000f          AND      r0,r0,#0xf
                  |L1.110|
00006e  4308              ORRS     r0,r0,r1
;;;137    	}
;;;138    
;;;139    	/* Write to USART BRR register */
;;;140    	USARTx->BRR = (uint16_t)tmpreg;
000070  8120              STRH     r0,[r4,#8]
;;;141     }
000072  bd7f              POP      {r0-r6,pc}
;;;142    
                          ENDP

                  |L1.116|
                          DCD      0x40011000
                  |L1.120|
                          DCD      0x40011400

                          AREA ||i.USART3_Config||, CODE, READONLY, ALIGN=2

                  USART3_Config PROC
;;;47       */
;;;48     void USART3_Config(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;49     {
000002  b087              SUB      sp,sp,#0x1c
;;;50     	GPIO_InitTypeDef GPIO_InitStructure;
;;;51     	USART_InitTypeDef USART_InitStructure;
;;;52     		
;;;53     	RCC_AHB1PeriphClockCmd( UART3_USART_RX_GPIO_CLK|UART3_USART_TX_GPIO_CLK, ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;54     
;;;55     	/* 使能 UART 时钟 */
;;;56     	RCC_APB1PeriphClockCmd(UART3_USART_CLK, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0488              LSLS     r0,r1,#18
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;57     
;;;58     	/* 连接 PXx 到 USARTx_Tx*/
;;;59     	GPIO_PinAFConfig(UART3_USART_RX_GPIO_PORT,UART3_USART_RX_SOURCE, UART3_USART_RX_AF);
000014  4f27              LDR      r7,|L2.180|
000016  2207              MOVS     r2,#7
000018  210b              MOVS     r1,#0xb
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       GPIO_PinAFConfig
;;;60     
;;;61     	/*  连接 PXx 到 USARTx__Rx*/
;;;62     	GPIO_PinAFConfig(UART3_USART_TX_GPIO_PORT,UART3_USART_TX_SOURCE,UART3_USART_TX_AF);
000020  2207              MOVS     r2,#7
000022  210a              MOVS     r1,#0xa
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       GPIO_PinAFConfig
;;;63     
;;;64     	/* 配置Tx引脚为复用功能  */
;;;65     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;66     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
00002a  2501              MOVS     r5,#1
00002c  2400              MOVS     r4,#0                 ;65
00002e  f88d4006          STRB     r4,[sp,#6]            ;65
000032  f88d5007          STRB     r5,[sp,#7]
;;;67     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000036  2602              MOVS     r6,#2
;;;68     
;;;69     	GPIO_InitStructure.GPIO_Pin = UART3_USART_TX_PIN  ;
000038  02a8              LSLS     r0,r5,#10
00003a  f88d6004          STRB     r6,[sp,#4]            ;67
;;;70     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  9000              STR      r0,[sp,#0]
000040  f88d6005          STRB     r6,[sp,#5]
;;;71     	GPIO_Init(UART3_USART_TX_GPIO_PORT, &GPIO_InitStructure);
000044  4669              MOV      r1,sp
000046  4638              MOV      r0,r7
000048  f7fffffe          BL       GPIO_Init
;;;72     
;;;73     	/* 配置Rx引脚为复用功能 */
;;;74     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;75     	GPIO_InitStructure.GPIO_Pin = UART3_USART_RX_PIN;
00004c  02e8              LSLS     r0,r5,#11
;;;76     	GPIO_Init(UART3_USART_RX_GPIO_PORT, &GPIO_InitStructure);
00004e  9000              STR      r0,[sp,#0]
000050  f88d6004          STRB     r6,[sp,#4]            ;74
000054  4669              MOV      r1,sp
000056  4638              MOV      r0,r7
000058  f7fffffe          BL       GPIO_Init
;;;77     			
;;;78     	/* 配置串口RS232_USART 模式 */
;;;79     	USART_InitStructure.USART_BaudRate = UART3_USART_BAUDRATE;
00005c  f44f30e1          MOV      r0,#0x1c200
;;;80     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000060  9002              STR      r0,[sp,#8]
;;;81     	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;82     	USART_InitStructure.USART_Parity = USART_Parity_No ;
000062  f8ad4010          STRH     r4,[sp,#0x10]
;;;83     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;84     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000066  200c              MOVS     r0,#0xc
;;;85     	USART_Init(UART3_USART, &USART_InitStructure); 
000068  4e13              LDR      r6,|L2.184|
00006a  f8ad400c          STRH     r4,[sp,#0xc]          ;80
00006e  f8ad0012          STRH     r0,[sp,#0x12]         ;84
000072  f8ad400e          STRH     r4,[sp,#0xe]          ;81
000076  f8ad4014          STRH     r4,[sp,#0x14]         ;83
00007a  a902              ADD      r1,sp,#8
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       USART_Init
000082  2027              MOVS     r0,#0x27
000084  f88d0018          STRB     r0,[sp,#0x18]
000088  f88d5019          STRB     r5,[sp,#0x19]
00008c  f88d401a          STRB     r4,[sp,#0x1a]
000090  f88d501b          STRB     r5,[sp,#0x1b]
000094  a806              ADD      r0,sp,#0x18
000096  f7fffffe          BL       NVIC_Init
;;;86     
;;;87     	NVIC_Configuration();
;;;88     	/*配置串口接收中断*/
;;;89     	USART_ITConfig(UART3_USART, USART_IT_RXNE, ENABLE);
00009a  2201              MOVS     r2,#1
00009c  f2405125          MOV      r1,#0x525
0000a0  4630              MOV      r0,r6
0000a2  f7fffffe          BL       USART_ITConfig
;;;90     
;;;91     	USART_Cmd(UART3_USART, ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  4630              MOV      r0,r6
0000aa  f7fffffe          BL       USART_Cmd
;;;92     }
0000ae  b007              ADD      sp,sp,#0x1c
0000b0  bdf0              POP      {r4-r7,pc}
;;;93     
                          ENDP

0000b2  0000              DCW      0x0000
                  |L2.180|
                          DCD      0x40020400
                  |L2.184|
                          DCD      0x40004800

;*** Start embedded assembler ***

#line 1 "..\\..\\Complex\\usart3\\usart3.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_usart3_c_69968c15____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_usart3_c_69968c15____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_usart3_c_69968c15____REVSH|
#line 153
|__asm___8_usart3_c_69968c15____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_usart3_c_69968c15____RRX|
#line 328
|__asm___8_usart3_c_69968c15____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

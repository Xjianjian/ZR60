; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\dhcp.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\dhcp.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\dhcp.crf ..\..\Lwip\lwip-1.4.1\src\core\dhcp.c]
                          THUMB

                          AREA ||i.dhcp_arp_reply||, CODE, READONLY, ALIGN=2

                  dhcp_arp_reply PROC
;;;802     */
;;;803    void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
000000  b158              CBZ      r0,|L1.26|
;;;804    {
;;;805      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
;;;806      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
;;;807      /* is a DHCP client doing an ARP check? */
;;;808      if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
000002  6a42              LDR      r2,[r0,#0x24]
000004  2a00              CMP      r2,#0
000006  d00b              BEQ      |L1.32|
000008  7b13              LDRB     r3,[r2,#0xc]
00000a  2b08              CMP      r3,#8
00000c  d108              BNE      |L1.32|
;;;809        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
;;;810          ip4_addr_get_u32(addr)));
;;;811        /* did a host respond with the address we
;;;812           were offered by the DHCP server? */
;;;813        if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
00000e  6809              LDR      r1,[r1,#0]
000010  6a52              LDR      r2,[r2,#0x24]
000012  4291              CMP      r1,r2
000014  d104              BNE      |L1.32|
;;;814          /* we will not accept the offered address */
;;;815          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
;;;816            ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
;;;817          dhcp_decline(netif);
000016  f7ffbffe          B.W      dhcp_decline
                  |L1.26|
00001a  a002              ADR      r0,|L1.36|
00001c  f7ffbffe          B.W      __2printf
                  |L1.32|
;;;818        }
;;;819      }
;;;820    }
000020  4770              BX       lr
;;;821    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
000024  6e657469          DCB      "netif != NULL",0
000028  6620213d
00002c  204e554c
000030  4c00    
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i.dhcp_bind||, CODE, READONLY, ALIGN=2

                  dhcp_bind PROC
;;;926    static void
;;;927    dhcp_bind(struct netif *netif)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;928    {
000004  0005              MOVS     r5,r0
000006  d017              BEQ      |L2.56|
;;;929      u32_t timeout;
;;;930      struct dhcp *dhcp;
;;;931      ip_addr_t sn_mask, gw_addr;
;;;932      LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
;;;933      dhcp = netif->dhcp;
;;;934      LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
000008  6a6c              LDR      r4,[r5,#0x24]
00000a  b1bc              CBZ      r4,|L2.60|
;;;935      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;936    
;;;937      /* temporary DHCP lease? */
;;;938      if (dhcp->offered_t1_renew != 0xffffffffUL) {
00000c  6b62              LDR      r2,[r4,#0x34]
;;;939        /* set renewal period timer */
;;;940        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
;;;941        timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
00000e  f04f013c          MOV      r1,#0x3c
000012  1c50              ADDS     r0,r2,#1              ;938
;;;942        if(timeout > 0xffff) {
000014  f44f3780          MOV      r7,#0x10000
;;;943          timeout = 0xffff;
;;;944        }
;;;945        dhcp->t1_timeout = (u16_t)timeout;
;;;946        if (dhcp->t1_timeout == 0) {
;;;947          dhcp->t1_timeout = 1;
000018  f04f0601          MOV      r6,#1
00001c  f64f73ff          MOV      r3,#0xffff            ;943
000020  d012              BEQ      |L2.72|
000022  321e              ADDS     r2,r2,#0x1e           ;938
000024  fbb2f0f1          UDIV     r0,r2,r1              ;941
000028  42b8              CMP      r0,r7                 ;942
00002a  d300              BCC      |L2.46|
00002c  4618              MOV      r0,r3                 ;943
                  |L2.46|
00002e  0402              LSLS     r2,r0,#16             ;945
000030  0c12              LSRS     r2,r2,#16             ;945
000032  83a2              STRH     r2,[r4,#0x1c]         ;945
000034  d007              BEQ      |L2.70|
000036  e007              B        |L2.72|
                  |L2.56|
000038  a025              ADR      r0,|L2.208|
00003a  e000              B        |L2.62|
                  |L2.60|
00003c  a02b              ADR      r0,|L2.236|
                  |L2.62|
00003e  f7fffffe          BL       __2printf
                  |L2.66|
;;;948        }
;;;949        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
;;;950      }
;;;951      /* set renewal period timer */
;;;952      if (dhcp->offered_t2_rebind != 0xffffffffUL) {
;;;953        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
;;;954        timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;955        if(timeout > 0xffff) {
;;;956          timeout = 0xffff;
;;;957        }
;;;958        dhcp->t2_timeout = (u16_t)timeout;
;;;959        if (dhcp->t2_timeout == 0) {
;;;960          dhcp->t2_timeout = 1;
;;;961        }
;;;962        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
;;;963      }
;;;964    
;;;965      /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
;;;966      if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
;;;967        dhcp->t1_timeout = 0;
;;;968      }
;;;969    
;;;970      if (dhcp->subnet_mask_given) {
;;;971        /* copy offered network mask */
;;;972        ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
;;;973      } else {
;;;974        /* subnet mask not given, choose a safe subnet mask given the network class */
;;;975        u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
;;;976        if (first_octet <= 127) {
;;;977          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
;;;978        } else if (first_octet >= 192) {
;;;979          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
;;;980        } else {
;;;981          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
;;;982        }
;;;983      }
;;;984    
;;;985      ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
;;;986      /* gateway address not given? */
;;;987      if (ip_addr_isany(&gw_addr)) {
;;;988        /* copy network address */
;;;989        ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
;;;990        /* use first host address on network as gateway */
;;;991        ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
;;;992      }
;;;993    
;;;994    #if LWIP_DHCP_AUTOIP_COOP
;;;995      if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;996        autoip_stop(netif);
;;;997        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;998      }
;;;999    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1000   
;;;1001     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
;;;1002       ip4_addr_get_u32(&dhcp->offered_ip_addr)));
;;;1003     netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
;;;1004     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
;;;1005       ip4_addr_get_u32(&sn_mask)));
;;;1006     netif_set_netmask(netif, &sn_mask);
;;;1007     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
;;;1008       ip4_addr_get_u32(&gw_addr)));
;;;1009     netif_set_gw(netif, &gw_addr);
;;;1010     /* bring the interface up */
;;;1011     netif_set_up(netif);
;;;1012     /* netif is now bound to DHCP leased address */
;;;1013     dhcp_set_state(dhcp, DHCP_BOUND);
;;;1014   }
000042  e8bd81fc          POP      {r2-r8,pc}
                  |L2.70|
000046  83a6              STRH     r6,[r4,#0x1c]         ;947
                  |L2.72|
000048  6ba2              LDR      r2,[r4,#0x38]         ;952
00004a  1c50              ADDS     r0,r2,#1              ;952
00004c  d00a              BEQ      |L2.100|
00004e  321e              ADDS     r2,r2,#0x1e           ;952
000050  fbb2f1f1          UDIV     r1,r2,r1              ;954
000054  42b9              CMP      r1,r7                 ;955
000056  d300              BCC      |L2.90|
000058  4619              MOV      r1,r3                 ;956
                  |L2.90|
00005a  040a              LSLS     r2,r1,#16             ;958
00005c  0c12              LSRS     r2,r2,#16             ;958
00005e  83e2              STRH     r2,[r4,#0x1e]         ;958
000060  d100              BNE      |L2.100|
000062  83e6              STRH     r6,[r4,#0x1e]         ;960
                  |L2.100|
000064  8ba1              LDRH     r1,[r4,#0x1c]         ;966
000066  8be0              LDRH     r0,[r4,#0x1e]         ;966
000068  4281              CMP      r1,r0                 ;966
00006a  d302              BCC      |L2.114|
00006c  b108              CBZ      r0,|L2.114|
00006e  2000              MOVS     r0,#0                 ;967
000070  83a0              STRH     r0,[r4,#0x1c]         ;967
                  |L2.114|
000072  7ba0              LDRB     r0,[r4,#0xe]          ;970
000074  b108              CBZ      r0,|L2.122|
000076  6aa0              LDR      r0,[r4,#0x28]         ;972
000078  e009              B        |L2.142|
                  |L2.122|
00007a  f8942024          LDRB     r2,[r4,#0x24]         ;975
00007e  2a7f              CMP      r2,#0x7f              ;976
000080  d801              BHI      |L2.134|
000082  20ff              MOVS     r0,#0xff              ;977
000084  e003              B        |L2.142|
                  |L2.134|
000086  2ac0              CMP      r2,#0xc0              ;978
000088  d303              BCC      |L2.146|
00008a  f06f407f          MVN      r0,#0xff000000        ;979
                  |L2.142|
00008e  9000              STR      r0,[sp,#0]            ;977
000090  e000              B        |L2.148|
                  |L2.146|
000092  9300              STR      r3,[sp,#0]            ;981
                  |L2.148|
000094  6ae0              LDR      r0,[r4,#0x2c]         ;985
000096  9001              STR      r0,[sp,#4]            ;987
000098  b928              CBNZ     r0,|L2.166|
00009a  6a60              LDR      r0,[r4,#0x24]         ;989
00009c  9900              LDR      r1,[sp,#0]            ;989
00009e  4008              ANDS     r0,r0,r1              ;989
0000a0  f0407080          ORR      r0,r0,#0x1000000      ;991
0000a4  9001              STR      r0,[sp,#4]            ;991
                  |L2.166|
0000a6  f1040124          ADD      r1,r4,#0x24           ;1003
0000aa  4628              MOV      r0,r5                 ;1003
0000ac  f7fffffe          BL       netif_set_ipaddr
0000b0  4669              MOV      r1,sp                 ;1006
0000b2  4628              MOV      r0,r5                 ;1006
0000b4  f7fffffe          BL       netif_set_netmask
0000b8  a901              ADD      r1,sp,#4              ;1009
0000ba  4628              MOV      r0,r5                 ;1009
0000bc  f7fffffe          BL       netif_set_gw
0000c0  4628              MOV      r0,r5                 ;1011
0000c2  f7fffffe          BL       netif_set_up
0000c6  210a              MOVS     r1,#0xa               ;1013
0000c8  4620              MOV      r0,r4                 ;1013
0000ca  f7fffffe          BL       dhcp_set_state
0000ce  e7b8              B        |L2.66|
;;;1015   
                          ENDP

                  |L2.208|
0000d0  64686370          DCB      "dhcp_bind: netif != NULL",0
0000d4  5f62696e
0000d8  643a206e
0000dc  65746966
0000e0  20213d20
0000e4  4e554c4c
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L2.236|
0000ec  64686370          DCB      "dhcp_bind: dhcp != NULL",0
0000f0  5f62696e
0000f4  643a2064
0000f8  68637020
0000fc  213d204e
000100  554c4c00

                          AREA ||i.dhcp_check||, CODE, READONLY, ALIGN=1

                  dhcp_check PROC
;;;224    static void
;;;225    dhcp_check(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;226    {
;;;227      struct dhcp *dhcp = netif->dhcp;
;;;228      err_t result;
;;;229      u16_t msecs;
;;;230      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
;;;231        (s16_t)netif->name[1]));
;;;232      dhcp_set_state(dhcp, DHCP_CHECKING);
000002  6a44              LDR      r4,[r0,#0x24]
000004  4605              MOV      r5,r0                 ;226
000006  2108              MOVS     r1,#8
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dhcp_set_state
;;;233      /* create an ARP query for the offered IP address, expecting that no host
;;;234         responds, as the IP address should not be in use. */
;;;235      result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
00000e  2200              MOVS     r2,#0
000010  f1040124          ADD      r1,r4,#0x24
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       etharp_query
;;;236      if (result != ERR_OK) {
;;;237        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
;;;238      }
;;;239      dhcp->tries++;
00001a  7b60              LDRB     r0,[r4,#0xd]
;;;240      msecs = 500;
;;;241      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
;;;242      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
;;;243    }
00001c  f24031e7          MOV      r1,#0x3e7
000020  1c40              ADDS     r0,r0,#1              ;239
000022  7360              STRB     r0,[r4,#0xd]          ;239
000024  f44f70fa          MOV      r0,#0x1f4             ;240
000028  fbb1f0f0          UDIV     r0,r1,r0              ;241
00002c  8360              STRH     r0,[r4,#0x1a]         ;241
00002e  bd70              POP      {r4-r6,pc}
;;;244    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP


                          AREA ||i.dhcp_cleanup||, CODE, READONLY, ALIGN=2

                  dhcp_cleanup PROC
;;;605     */
;;;606    void dhcp_cleanup(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;607    {
000002  0004              MOVS     r4,r0
000004  d102              BNE      |L4.12|
;;;608      LWIP_ASSERT("netif != NULL", netif != NULL);
000006  a005              ADR      r0,|L4.28|
000008  f7fffffe          BL       __2printf
                  |L4.12|
;;;609    
;;;610      if (netif->dhcp != NULL) {
00000c  6a60              LDR      r0,[r4,#0x24]
00000e  2800              CMP      r0,#0
000010  d003              BEQ      |L4.26|
;;;611        mem_free(netif->dhcp);
000012  f7fffffe          BL       mem_free
;;;612        netif->dhcp = NULL;
000016  2000              MOVS     r0,#0
000018  6260              STR      r0,[r4,#0x24]
                  |L4.26|
;;;613      }
;;;614    }
00001a  bd10              POP      {r4,pc}
;;;615    
                          ENDP

                  |L4.28|
00001c  6e657469          DCB      "netif != NULL",0
000020  6620213d
000024  204e554c
000028  4c00    
00002a  00                DCB      0
00002b  00                DCB      0

                          AREA ||i.dhcp_coarse_tmr||, CODE, READONLY, ALIGN=2

                  dhcp_coarse_tmr PROC
;;;336    void
;;;337    dhcp_coarse_tmr()
000000  4816              LDR      r0,|L5.92|
;;;338    {
000002  b510              PUSH     {r4,lr}
000004  6804              LDR      r4,[r0,#0]  ; netif_list
000006  e025              B        |L5.84|
                  |L5.8|
;;;339      struct netif *netif = netif_list;
;;;340      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
;;;341      /* iterate through all network interfaces */
;;;342      while (netif != NULL) {
;;;343        /* only act on DHCP configured interfaces */
;;;344        if (netif->dhcp != NULL) {
000008  6a60              LDR      r0,[r4,#0x24]
00000a  b310              CBZ      r0,|L5.82|
;;;345          /* timer is active (non zero), and triggers (zeroes) now? */
;;;346          if (netif->dhcp->t2_timeout-- == 1) {
00000c  8bc1              LDRH     r1,[r0,#0x1e]
00000e  1e4a              SUBS     r2,r1,#1
000010  83c2              STRH     r2,[r0,#0x1e]
000012  2901              CMP      r1,#1
000014  d006              BEQ      |L5.36|
;;;347            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
;;;348            /* this clients' rebind timeout triggered */
;;;349            dhcp_t2_timeout(netif);
;;;350          /* timer is active (non zero), and triggers (zeroes) now */
;;;351          } else if (netif->dhcp->t1_timeout-- == 1) {
000016  6a61              LDR      r1,[r4,#0x24]
000018  8b88              LDRH     r0,[r1,#0x1c]
00001a  1e42              SUBS     r2,r0,#1
00001c  838a              STRH     r2,[r1,#0x1c]
00001e  2801              CMP      r0,#1
000020  d00c              BEQ      |L5.60|
000022  e016              B        |L5.82|
                  |L5.36|
000024  6a61              LDR      r1,[r4,#0x24]
000026  4620              MOV      r0,r4                 ;349
000028  7b09              LDRB     r1,[r1,#0xc]          ;349
00002a  2901              CMP      r1,#1                 ;349
00002c  d003              BEQ      |L5.54|
00002e  290a              CMP      r1,#0xa               ;349
000030  d001              BEQ      |L5.54|
000032  2905              CMP      r1,#5                 ;349
000034  d10d              BNE      |L5.82|
                  |L5.54|
000036  f7fffffe          BL       dhcp_rebind
00003a  e00a              B        |L5.82|
                  |L5.60|
00003c  6a61              LDR      r1,[r4,#0x24]         ;349
;;;352            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
;;;353            /* this clients' renewal timeout triggered */
;;;354            dhcp_t1_timeout(netif);
00003e  4620              MOV      r0,r4
000040  7b09              LDRB     r1,[r1,#0xc]
000042  2901              CMP      r1,#1
000044  d003              BEQ      |L5.78|
000046  290a              CMP      r1,#0xa
000048  d001              BEQ      |L5.78|
00004a  2905              CMP      r1,#5
00004c  d101              BNE      |L5.82|
                  |L5.78|
00004e  f7fffffe          BL       dhcp_renew
                  |L5.82|
;;;355          }
;;;356        }
;;;357        /* proceed to next netif */
;;;358        netif = netif->next;
000052  6824              LDR      r4,[r4,#0]
                  |L5.84|
000054  2c00              CMP      r4,#0                 ;342
000056  d1d7              BNE      |L5.8|
;;;359      }
;;;360    }
000058  bd10              POP      {r4,pc}
;;;361    
                          ENDP

00005a  0000              DCW      0x0000
                  |L5.92|
                          DCD      netif_list

                          AREA ||i.dhcp_create_msg||, CODE, READONLY, ALIGN=2

                  dhcp_create_msg PROC
;;;1640   static err_t
;;;1641   dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1642   {
000004  4616              MOV      r6,r2
000006  460c              MOV      r4,r1
000008  0005              MOVS     r5,r0
00000a  d01f              BEQ      |L6.76|
;;;1643     u16_t i;
;;;1644   #ifndef DHCP_GLOBAL_XID
;;;1645     /** default global transaction identifier starting value (easy to match
;;;1646      *  with a packet analyser). We simply increment for each new request.
;;;1647      *  Predefine DHCP_GLOBAL_XID to a better value or a function call to generate one
;;;1648      *  at runtime, any supporting function prototypes can be defined in DHCP_GLOBAL_XID_HEADER */
;;;1649   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1650     static u32_t xid;
;;;1651   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1652     static u32_t xid = 0xABCD0000;
;;;1653   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1654   #else
;;;1655     if (!xid_initialised) {
;;;1656       xid = DHCP_GLOBAL_XID;
;;;1657       xid_initialised = !xid_initialised;
;;;1658     }
;;;1659   #endif
;;;1660     LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
;;;1661     LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
00000c  2c00              CMP      r4,#0
00000e  d024              BEQ      |L6.90|
;;;1662     LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
000010  6920              LDR      r0,[r4,#0x10]
000012  b110              CBZ      r0,|L6.26|
000014  a04d              ADR      r0,|L6.332|
000016  f7fffffe          BL       __2printf
                  |L6.26|
;;;1663     LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
00001a  6960              LDR      r0,[r4,#0x14]
00001c  b110              CBZ      r0,|L6.36|
00001e  a055              ADR      r0,|L6.372|
000020  f7fffffe          BL       __2printf
                  |L6.36|
;;;1664     dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
000024  2200              MOVS     r2,#0
000026  f44f779a          MOV      r7,#0x134
00002a  4639              MOV      r1,r7
00002c  4610              MOV      r0,r2
00002e  f7fffffe          BL       pbuf_alloc
;;;1665     if (dhcp->p_out == NULL) {
000032  6120              STR      r0,[r4,#0x10]
000034  2800              CMP      r0,#0
000036  d016              BEQ      |L6.102|
;;;1666       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;1667         ("dhcp_create_msg(): could not allocate pbuf\n"));
;;;1668       return ERR_MEM;
;;;1669     }
;;;1670     LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
000038  8940              LDRH     r0,[r0,#0xa]
00003a  42b8              CMP      r0,r7
00003c  d202              BCS      |L6.68|
00003e  a057              ADR      r0,|L6.412|
000040  f7fffffe          BL       __2printf
                  |L6.68|
;;;1671              (dhcp->p_out->len >= sizeof(struct dhcp_msg)));
;;;1672   
;;;1673     /* reuse transaction identifier in retransmissions */
;;;1674     if (dhcp->tries == 0) {
000044  7b61              LDRB     r1,[r4,#0xd]
;;;1675   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1676       xid = LWIP_RAND();
;;;1677   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1678       xid++;
000046  4865              LDR      r0,|L6.476|
000048  b181              CBZ      r1,|L6.108|
00004a  e012              B        |L6.114|
                  |L6.76|
00004c  a064              ADR      r0,|L6.480|
00004e  f7fffffe          BL       __2printf
000052  f06f000d          MVN      r0,#0xd               ;1660
                  |L6.86|
;;;1679   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1680     }
;;;1681     dhcp->xid = xid;
;;;1682     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
;;;1683                 ("transaction id xid(%"X32_F")\n", xid));
;;;1684   
;;;1685     dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
;;;1686   
;;;1687     dhcp->msg_out->op = DHCP_BOOTREQUEST;
;;;1688     /* TODO: make link layer independent */
;;;1689     dhcp->msg_out->htype = DHCP_HTYPE_ETH;
;;;1690     dhcp->msg_out->hlen = netif->hwaddr_len;
;;;1691     dhcp->msg_out->hops = 0;
;;;1692     dhcp->msg_out->xid = htonl(dhcp->xid);
;;;1693     dhcp->msg_out->secs = 0;
;;;1694     /* we don't need the broadcast flag since we can receive unicast traffic
;;;1695        before being fully configured! */
;;;1696     dhcp->msg_out->flags = 0;
;;;1697     ip_addr_set_zero(&dhcp->msg_out->ciaddr);
;;;1698     /* set ciaddr to netif->ip_addr based on message_type and state */
;;;1699     if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
;;;1700         ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
;;;1701          ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
;;;1702       ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
;;;1703     }
;;;1704     ip_addr_set_zero(&dhcp->msg_out->yiaddr);
;;;1705     ip_addr_set_zero(&dhcp->msg_out->siaddr);
;;;1706     ip_addr_set_zero(&dhcp->msg_out->giaddr);
;;;1707     for (i = 0; i < DHCP_CHADDR_LEN; i++) {
;;;1708       /* copy netif hardware address, pad with zeroes */
;;;1709       dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
;;;1710     }
;;;1711     for (i = 0; i < DHCP_SNAME_LEN; i++) {
;;;1712       dhcp->msg_out->sname[i] = 0;
;;;1713     }
;;;1714     for (i = 0; i < DHCP_FILE_LEN; i++) {
;;;1715       dhcp->msg_out->file[i] = 0;
;;;1716     }
;;;1717     dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
;;;1718     dhcp->options_out_len = 0;
;;;1719     /* fill options field with an incrementing array (for debugging purposes) */
;;;1720     for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
;;;1721       dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
;;;1722     }
;;;1723     /* Add option MESSAGE_TYPE */
;;;1724     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
;;;1725     dhcp_option_byte(dhcp, message_type);
;;;1726     return ERR_OK;
;;;1727   }
000056  e8bd81f0          POP      {r4-r8,pc}
                  |L6.90|
00005a  a069              ADR      r0,|L6.512|
00005c  f7fffffe          BL       __2printf
000060  f06f0005          MVN      r0,#5                 ;1661
000064  e7f7              B        |L6.86|
                  |L6.102|
000066  f04f30ff          MOV      r0,#0xffffffff        ;1668
00006a  e7f4              B        |L6.86|
                  |L6.108|
00006c  6801              LDR      r1,[r0,#0]            ;1678  ; xid
00006e  1c49              ADDS     r1,r1,#1              ;1678
000070  6001              STR      r1,[r0,#0]            ;1678  ; xid
                  |L6.114|
000072  6800              LDR      r0,[r0,#0]            ;1681  ; xid
000074  6020              STR      r0,[r4,#0]            ;1685
000076  6920              LDR      r0,[r4,#0x10]         ;1685
000078  2101              MOVS     r1,#1                 ;1687
00007a  2700              MOVS     r7,#0                 ;1691
00007c  6840              LDR      r0,[r0,#4]            ;1685
00007e  6160              STR      r0,[r4,#0x14]         ;1687
000080  7001              STRB     r1,[r0,#0]            ;1687
000082  6960              LDR      r0,[r4,#0x14]         ;1689
000084  7041              STRB     r1,[r0,#1]            ;1689
000086  6961              LDR      r1,[r4,#0x14]         ;1690
000088  f895002a          LDRB     r0,[r5,#0x2a]         ;1690
00008c  7088              STRB     r0,[r1,#2]            ;1690
00008e  6960              LDR      r0,[r4,#0x14]         ;1691
000090  70c7              STRB     r7,[r0,#3]            ;1691
000092  6820              LDR      r0,[r4,#0]            ;1692
000094  f7fffffe          BL       lwip_htonl
000098  6961              LDR      r1,[r4,#0x14]         ;1692
00009a  2e08              CMP      r6,#8                 ;1699
00009c  6048              STR      r0,[r1,#4]            ;1692
00009e  6960              LDR      r0,[r4,#0x14]         ;1693
0000a0  8107              STRH     r7,[r0,#8]            ;1693
0000a2  6960              LDR      r0,[r4,#0x14]         ;1696
0000a4  8147              STRH     r7,[r0,#0xa]          ;1696
0000a6  6960              LDR      r0,[r4,#0x14]         ;1697
0000a8  60c7              STR      r7,[r0,#0xc]          ;1697
0000aa  d008              BEQ      |L6.190|
0000ac  2e04              CMP      r6,#4                 ;1699
0000ae  d006              BEQ      |L6.190|
0000b0  2e03              CMP      r6,#3                 ;1700
0000b2  d107              BNE      |L6.196|
0000b4  7b20              LDRB     r0,[r4,#0xc]          ;1701
0000b6  2805              CMP      r0,#5                 ;1701
0000b8  d001              BEQ      |L6.190|
0000ba  2804              CMP      r0,#4                 ;1701
0000bc  d102              BNE      |L6.196|
                  |L6.190|
0000be  6961              LDR      r1,[r4,#0x14]         ;1702
0000c0  6868              LDR      r0,[r5,#4]            ;1702
0000c2  60c8              STR      r0,[r1,#0xc]          ;1702
                  |L6.196|
0000c4  6960              LDR      r0,[r4,#0x14]         ;1704
0000c6  6107              STR      r7,[r0,#0x10]         ;1704
0000c8  6960              LDR      r0,[r4,#0x14]         ;1705
0000ca  6147              STR      r7,[r0,#0x14]         ;1705
0000cc  6960              LDR      r0,[r4,#0x14]         ;1706
0000ce  6187              STR      r7,[r0,#0x18]         ;1706
0000d0  2000              MOVS     r0,#0                 ;1707
                  |L6.210|
0000d2  f895102a          LDRB     r1,[r5,#0x2a]         ;1709
0000d6  4281              CMP      r1,r0                 ;1709
0000d8  d903              BLS      |L6.226|
0000da  1829              ADDS     r1,r5,r0              ;1709
0000dc  f891102b          LDRB     r1,[r1,#0x2b]         ;1709
0000e0  e000              B        |L6.228|
                  |L6.226|
0000e2  2100              MOVS     r1,#0                 ;1709
                  |L6.228|
0000e4  f100021c          ADD      r2,r0,#0x1c           ;1709
0000e8  6963              LDR      r3,[r4,#0x14]         ;1709
0000ea  1c40              ADDS     r0,r0,#1              ;1709
0000ec  b280              UXTH     r0,r0                 ;1707
0000ee  5499              STRB     r1,[r3,r2]            ;1709
0000f0  2810              CMP      r0,#0x10              ;1707
0000f2  d3ee              BCC      |L6.210|
0000f4  2000              MOVS     r0,#0                 ;1711
                  |L6.246|
0000f6  f100012c          ADD      r1,r0,#0x2c           ;1712
0000fa  6962              LDR      r2,[r4,#0x14]         ;1712
0000fc  1c40              ADDS     r0,r0,#1              ;1712
0000fe  b280              UXTH     r0,r0                 ;1711
000100  5457              STRB     r7,[r2,r1]            ;1712
000102  2840              CMP      r0,#0x40              ;1711
000104  d3f7              BCC      |L6.246|
000106  2000              MOVS     r0,#0                 ;1714
                  |L6.264|
000108  f100016c          ADD      r1,r0,#0x6c           ;1715
00010c  6962              LDR      r2,[r4,#0x14]         ;1715
00010e  1c40              ADDS     r0,r0,#1              ;1715
000110  b280              UXTH     r0,r0                 ;1714
000112  5457              STRB     r7,[r2,r1]            ;1715
000114  2880              CMP      r0,#0x80              ;1714
000116  d3f7              BCC      |L6.264|
000118  6961              LDR      r1,[r4,#0x14]         ;1717
00011a  4841              LDR      r0,|L6.544|
00011c  f8c100ec          STR      r0,[r1,#0xec]         ;1717
000120  8327              STRH     r7,[r4,#0x18]         ;1718
000122  2000              MOVS     r0,#0                 ;1720
                  |L6.292|
000124  6962              LDR      r2,[r4,#0x14]         ;1721
000126  f10001f0          ADD      r1,r0,#0xf0           ;1721
00012a  5450              STRB     r0,[r2,r1]            ;1721
00012c  1c40              ADDS     r0,r0,#1              ;1721
00012e  b280              UXTH     r0,r0                 ;1720
000130  2844              CMP      r0,#0x44              ;1720
000132  d3f7              BCC      |L6.292|
000134  2201              MOVS     r2,#1                 ;1724
000136  2135              MOVS     r1,#0x35              ;1724
000138  4620              MOV      r0,r4                 ;1724
00013a  f7fffffe          BL       dhcp_option
00013e  4631              MOV      r1,r6                 ;1725
000140  4620              MOV      r0,r4                 ;1725
000142  f7fffffe          BL       dhcp_option_byte
000146  2000              MOVS     r0,#0                 ;1726
000148  e785              B        |L6.86|
;;;1728   
                          ENDP

00014a  0000              DCW      0x0000
                  |L6.332|
00014c  64686370          DCB      "dhcp_create_msg: dhcp->p_out == NULL",0
000150  5f637265
000154  6174655f
000158  6d73673a
00015c  20646863
000160  702d3e70
000164  5f6f7574
000168  203d3d20
00016c  4e554c4c
000170  00      
000171  00                DCB      0
000172  00                DCB      0
000173  00                DCB      0
                  |L6.372|
000174  64686370          DCB      "dhcp_create_msg: dhcp->msg_out == NULL",0
000178  5f637265
00017c  6174655f
000180  6d73673a
000184  20646863
000188  702d3e6d
00018c  73675f6f
000190  7574203d
000194  3d204e55
000198  4c4c00  
00019b  00                DCB      0
                  |L6.412|
00019c  64686370          DCB      "dhcp_create_msg: check that first pbuf can hold struct "
0001a0  5f637265
0001a4  6174655f
0001a8  6d73673a
0001ac  20636865
0001b0  636b2074
0001b4  68617420
0001b8  66697273
0001bc  74207062
0001c0  75662063
0001c4  616e2068
0001c8  6f6c6420
0001cc  73747275
0001d0  637420  
0001d3  64686370          DCB      "dhcp_msg",0
0001d7  5f6d7367
0001db  00      
                  |L6.476|
                          DCD      ||.data||
                  |L6.480|
0001e0  64686370          DCB      "dhcp_create_msg: netif != NULL",0
0001e4  5f637265
0001e8  6174655f
0001ec  6d73673a
0001f0  206e6574
0001f4  69662021
0001f8  3d204e55
0001fc  4c4c00  
0001ff  00                DCB      0
                  |L6.512|
000200  64686370          DCB      "dhcp_create_msg: dhcp != NULL",0
000204  5f637265
000208  6174655f
00020c  6d73673a
000210  20646863
000214  7020213d
000218  204e554c
00021c  4c00    
00021e  00                DCB      0
00021f  00                DCB      0
                  |L6.544|
                          DCD      0x63538263

                          AREA ||i.dhcp_decline||, CODE, READONLY, ALIGN=2

                  dhcp_decline PROC
;;;831    static err_t
;;;832    dhcp_decline(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;833    {
;;;834      struct dhcp *dhcp = netif->dhcp;
;;;835      err_t result = ERR_OK;
;;;836      u16_t msecs;
;;;837      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
;;;838      dhcp_set_state(dhcp, DHCP_BACKING_OFF);
000002  6a44              LDR      r4,[r0,#0x24]
000004  4606              MOV      r6,r0                 ;833
000006  210c              MOVS     r1,#0xc
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dhcp_set_state
;;;839      /* create and initialize the DHCP message header */
;;;840      result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
00000e  2204              MOVS     r2,#4
000010  4621              MOV      r1,r4
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       dhcp_create_msg
000018  0005              MOVS     r5,r0
;;;841      if (result == ERR_OK) {
00001a  d11e              BNE      |L7.90|
;;;842        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
00001c  2204              MOVS     r2,#4
00001e  2132              MOVS     r1,#0x32
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       dhcp_option
;;;843        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000026  6a60              LDR      r0,[r4,#0x24]
000028  f7fffffe          BL       lwip_ntohl
00002c  4601              MOV      r1,r0
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       dhcp_option_long
;;;844    
;;;845        dhcp_option_trailer(dhcp);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       dhcp_option_trailer
;;;846        /* resize pbuf to reflect true size of options */
;;;847        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
00003a  8b20              LDRH     r0,[r4,#0x18]
00003c  30f0              ADDS     r0,r0,#0xf0
00003e  b281              UXTH     r1,r0
000040  6920              LDR      r0,[r4,#0x10]
000042  f7fffffe          BL       pbuf_realloc
;;;848    
;;;849        /* per section 4.4.4, broadcast DECLINE messages */
;;;850        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000046  9600              STR      r6,[sp,#0]
000048  2343              MOVS     r3,#0x43
00004a  4a0a              LDR      r2,|L7.116|
00004c  6921              LDR      r1,[r4,#0x10]
00004e  6860              LDR      r0,[r4,#4]
000050  f7fffffe          BL       udp_sendto_if
;;;851        dhcp_delete_msg(dhcp);
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       dhcp_delete_msg
                  |L7.90|
;;;852        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
;;;853      } else {
;;;854        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;855          ("dhcp_decline: could not allocate DHCP request\n"));
;;;856      }
;;;857      dhcp->tries++;
00005a  7b60              LDRB     r0,[r4,#0xd]
;;;858      msecs = 10*1000;
;;;859      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00005c  f44f71fa          MOV      r1,#0x1f4
000060  1c40              ADDS     r0,r0,#1              ;857
000062  7360              STRB     r0,[r4,#0xd]          ;857
000064  f6421003          MOV      r0,#0x2903            ;833
000068  fbb0f0f1          UDIV     r0,r0,r1
00006c  8360              STRH     r0,[r4,#0x1a]
;;;860      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
;;;861      return result;
00006e  4628              MOV      r0,r5
;;;862    }
000070  bdf8              POP      {r3-r7,pc}
;;;863    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP

000072  0000              DCW      0x0000
                  |L7.116|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_delete_msg||, CODE, READONLY, ALIGN=2

                  dhcp_delete_msg PROC
;;;1734   static void
;;;1735   dhcp_delete_msg(struct dhcp *dhcp)
000000  b510              PUSH     {r4,lr}
;;;1736   {
000002  0004              MOVS     r4,r0
000004  d002              BEQ      |L8.12|
;;;1737     LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
;;;1738     LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
000006  6920              LDR      r0,[r4,#0x10]
000008  b128              CBZ      r0,|L8.22|
00000a  e007              B        |L8.28|
                  |L8.12|
00000c  e8bd4010          POP      {r4,lr}               ;1737
000010  a009              ADR      r0,|L8.56|
000012  f7ffbffe          B.W      __2printf
                  |L8.22|
000016  a010              ADR      r0,|L8.88|
000018  f7fffffe          BL       __2printf
                  |L8.28|
;;;1739     LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
00001c  6960              LDR      r0,[r4,#0x14]
00001e  b910              CBNZ     r0,|L8.38|
000020  a017              ADR      r0,|L8.128|
000022  f7fffffe          BL       __2printf
                  |L8.38|
;;;1740     if (dhcp->p_out != NULL) {
000026  6920              LDR      r0,[r4,#0x10]
000028  b108              CBZ      r0,|L8.46|
;;;1741       pbuf_free(dhcp->p_out);
00002a  f7fffffe          BL       pbuf_free
                  |L8.46|
;;;1742     }
;;;1743     dhcp->p_out = NULL;
00002e  2000              MOVS     r0,#0
;;;1744     dhcp->msg_out = NULL;
000030  6120              STR      r0,[r4,#0x10]
000032  6160              STR      r0,[r4,#0x14]
;;;1745   }
000034  bd10              POP      {r4,pc}
;;;1746   
                          ENDP

000036  0000              DCW      0x0000
                  |L8.56|
000038  64686370          DCB      "dhcp_delete_msg: dhcp != NULL",0
00003c  5f64656c
000040  6574655f
000044  6d73673a
000048  20646863
00004c  7020213d
000050  204e554c
000054  4c00    
000056  00                DCB      0
000057  00                DCB      0
                  |L8.88|
000058  64686370          DCB      "dhcp_delete_msg: dhcp->p_out != NULL",0
00005c  5f64656c
000060  6574655f
000064  6d73673a
000068  20646863
00006c  702d3e70
000070  5f6f7574
000074  20213d20
000078  4e554c4c
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L8.128|
000080  64686370          DCB      "dhcp_delete_msg: dhcp->msg_out != NULL",0
000084  5f64656c
000088  6574655f
00008c  6d73673a
000090  20646863
000094  702d3e6d
000098  73675f6f
00009c  75742021
0000a0  3d204e55
0000a4  4c4c00  
0000a7  00                DCB      0

                          AREA ||i.dhcp_discover||, CODE, READONLY, ALIGN=2

                  dhcp_discover PROC
;;;871    static err_t
;;;872    dhcp_discover(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;873    {
;;;874      struct dhcp *dhcp = netif->dhcp;
;;;875      err_t result = ERR_OK;
;;;876      u16_t msecs;
;;;877      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
;;;878      ip_addr_set_any(&dhcp->offered_ip_addr);
000002  6a44              LDR      r4,[r0,#0x24]
000004  4606              MOV      r6,r0                 ;873
000006  2000              MOVS     r0,#0
;;;879      dhcp_set_state(dhcp, DHCP_SELECTING);
000008  6260              STR      r0,[r4,#0x24]
00000a  2106              MOVS     r1,#6
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       dhcp_set_state
;;;880      /* create and initialize the DHCP message header */
;;;881      result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
000012  2201              MOVS     r2,#1
000014  4621              MOV      r1,r4
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       dhcp_create_msg
00001c  0005              MOVS     r5,r0
;;;882      if (result == ERR_OK) {
00001e  d130              BNE      |L9.130|
;;;883        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
;;;884    
;;;885        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000020  2202              MOVS     r2,#2
000022  2139              MOVS     r1,#0x39
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       dhcp_option
;;;886        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
00002a  8d31              LDRH     r1,[r6,#0x28]
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       dhcp_option_short
;;;887    
;;;888        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
000032  2204              MOVS     r2,#4
000034  2137              MOVS     r1,#0x37
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       dhcp_option
;;;889        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
00003c  2101              MOVS     r1,#1
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       dhcp_option_byte
;;;890        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
000044  2103              MOVS     r1,#3
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       dhcp_option_byte
;;;891        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
00004c  211c              MOVS     r1,#0x1c
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       dhcp_option_byte
;;;892        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
000054  2106              MOVS     r1,#6
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       dhcp_option_byte
;;;893    
;;;894        dhcp_option_trailer(dhcp);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       dhcp_option_trailer
;;;895    
;;;896        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
;;;897        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000062  8b20              LDRH     r0,[r4,#0x18]
000064  30f0              ADDS     r0,r0,#0xf0
000066  b281              UXTH     r1,r0
000068  6920              LDR      r0,[r4,#0x10]
00006a  f7fffffe          BL       pbuf_realloc
;;;898    
;;;899        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
;;;900        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
00006e  9600              STR      r6,[sp,#0]
000070  2343              MOVS     r3,#0x43
000072  4a11              LDR      r2,|L9.184|
000074  6921              LDR      r1,[r4,#0x10]
000076  6860              LDR      r0,[r4,#4]
000078  f7fffffe          BL       udp_sendto_if
;;;901        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
;;;902        dhcp_delete_msg(dhcp);
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       dhcp_delete_msg
                  |L9.130|
;;;903        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
;;;904      } else {
;;;905        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
;;;906      }
;;;907      dhcp->tries++;
000082  7b60              LDRB     r0,[r4,#0xd]
000084  1c40              ADDS     r0,r0,#1
000086  b2c1              UXTB     r1,r0
000088  7361              STRB     r1,[r4,#0xd]
;;;908    #if LWIP_DHCP_AUTOIP_COOP
;;;909      if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
;;;910        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
;;;911        autoip_start(netif);
;;;912      }
;;;913    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;914      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
00008a  2906              CMP      r1,#6
00008c  d202              BCS      |L9.148|
00008e  2001              MOVS     r0,#1
000090  4088              LSLS     r0,r0,r1
000092  e000              B        |L9.150|
                  |L9.148|
000094  203c              MOVS     r0,#0x3c
                  |L9.150|
000096  eb000140          ADD      r1,r0,r0,LSL #1
00009a  ebc110c0          RSB      r0,r1,r0,LSL #7
00009e  f64f71ff          MOV      r1,#0xffff
0000a2  ea0100c0          AND      r0,r1,r0,LSL #3
;;;915      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000a6  f44f71fa          MOV      r1,#0x1f4
0000aa  f20010f3          ADD      r0,r0,#0x1f3
0000ae  fbb0f0f1          UDIV     r0,r0,r1
0000b2  8360              STRH     r0,[r4,#0x1a]
;;;916      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
;;;917      return result;
0000b4  4628              MOV      r0,r5
;;;918    }
0000b6  bdf8              POP      {r3-r7,pc}
;;;919    
                          ENDP

                  |L9.184|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_fine_tmr||, CODE, READONLY, ALIGN=2

                  dhcp_fine_tmr PROC
;;;368    void
;;;369    dhcp_fine_tmr()
000000  b570              PUSH     {r4-r6,lr}
;;;370    {
;;;371      struct netif *netif = netif_list;
000002  480b              LDR      r0,|L10.48|
000004  2500              MOVS     r5,#0
000006  6804              LDR      r4,[r0,#0]            ;370  ; netif_list
000008  e00e              B        |L10.40|
                  |L10.10|
;;;372      /* loop through netif's */
;;;373      while (netif != NULL) {
;;;374        /* only act on DHCP configured interfaces */
;;;375        if (netif->dhcp != NULL) {
00000a  6a60              LDR      r0,[r4,#0x24]
00000c  b158              CBZ      r0,|L10.38|
;;;376          /* timer is active (non zero), and is about to trigger now */      
;;;377          if (netif->dhcp->request_timeout > 1) {
00000e  8b41              LDRH     r1,[r0,#0x1a]
000010  2901              CMP      r1,#1
000012  d903              BLS      |L10.28|
000014  f1a10101          SUB      r1,r1,#1
;;;378            netif->dhcp->request_timeout--;
000018  8341              STRH     r1,[r0,#0x1a]
00001a  e004              B        |L10.38|
                  |L10.28|
;;;379          }
;;;380          else if (netif->dhcp->request_timeout == 1) {
00001c  d103              BNE      |L10.38|
;;;381            netif->dhcp->request_timeout--;
00001e  8345              STRH     r5,[r0,#0x1a]
;;;382            /* { netif->dhcp->request_timeout == 0 } */
;;;383            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
;;;384            /* this client's request timeout triggered */
;;;385            dhcp_timeout(netif);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       dhcp_timeout
                  |L10.38|
;;;386          }
;;;387        }
;;;388        /* proceed to next network interface */
;;;389        netif = netif->next;
000026  6824              LDR      r4,[r4,#0]
                  |L10.40|
000028  2c00              CMP      r4,#0                 ;373
00002a  d1ee              BNE      |L10.10|
;;;390      }
;;;391    }
00002c  bd70              POP      {r4-r6,pc}
;;;392    
                          ENDP

00002e  0000              DCW      0x0000
                  |L10.48|
                          DCD      netif_list

                          AREA ||i.dhcp_handle_ack||, CODE, READONLY, ALIGN=2

                  dhcp_handle_ack PROC
;;;507    static void
;;;508    dhcp_handle_ack(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;509    {
;;;510      struct dhcp *dhcp = netif->dhcp;
;;;511    #if LWIP_DNS
;;;512      u8_t n;
;;;513    #endif /* LWIP_DNS */
;;;514    
;;;515      /* clear options we might not get from the ACK */
;;;516      ip_addr_set_zero(&dhcp->offered_sn_mask);
000002  6a44              LDR      r4,[r0,#0x24]
000004  2000              MOVS     r0,#0
;;;517      ip_addr_set_zero(&dhcp->offered_gw_addr);
;;;518    #if LWIP_DHCP_BOOTP_FILE
;;;519      ip_addr_set_zero(&dhcp->offered_si_addr);
;;;520    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;521    
;;;522      /* lease time given? */
;;;523      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
000006  4d1e              LDR      r5,|L11.128|
000008  62a0              STR      r0,[r4,#0x28]         ;517
00000a  62e0              STR      r0,[r4,#0x2c]
00000c  78e9              LDRB     r1,[r5,#3]  ; dhcp_rx_options_given
;;;524        /* remember offered lease time */
;;;525        dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
00000e  f1a50628          SUB      r6,r5,#0x28
000012  b109              CBZ      r1,|L11.24|
000014  68f1              LDR      r1,[r6,#0xc]  ; dhcp_rx_options_val
000016  6321              STR      r1,[r4,#0x30]
                  |L11.24|
;;;526      }
;;;527      /* renewal period given? */
;;;528      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
000018  7929              LDRB     r1,[r5,#4]  ; dhcp_rx_options_given
00001a  b109              CBZ      r1,|L11.32|
;;;529        /* remember given renewal period */
;;;530        dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
00001c  6931              LDR      r1,[r6,#0x10]  ; dhcp_rx_options_val
00001e  e001              B        |L11.36|
                  |L11.32|
;;;531      } else {
;;;532        /* calculate safe periods for renewal */
;;;533        dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
000020  6b21              LDR      r1,[r4,#0x30]
000022  0849              LSRS     r1,r1,#1
                  |L11.36|
;;;534      }
;;;535    
;;;536      /* renewal period given? */
;;;537      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
000024  6361              STR      r1,[r4,#0x34]
000026  7969              LDRB     r1,[r5,#5]  ; dhcp_rx_options_given
000028  b109              CBZ      r1,|L11.46|
;;;538        /* remember given rebind period */
;;;539        dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
00002a  6971              LDR      r1,[r6,#0x14]  ; dhcp_rx_options_val
00002c  e000              B        |L11.48|
                  |L11.46|
;;;540      } else {
;;;541        /* calculate safe periods for rebinding */
;;;542        dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
00002e  6b21              LDR      r1,[r4,#0x30]
                  |L11.48|
;;;543      }
;;;544    
;;;545      /* (y)our internet address */
;;;546      ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
000030  63a1              STR      r1,[r4,#0x38]
000032  68a1              LDR      r1,[r4,#8]
000034  6909              LDR      r1,[r1,#0x10]
;;;547    
;;;548    #if LWIP_DHCP_BOOTP_FILE
;;;549      /* copy boot server address,
;;;550         boot file name copied in dhcp_parse_reply if not overloaded */
;;;551      ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
;;;552    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;553    
;;;554      /* subnet mask given? */
;;;555      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
000036  6261              STR      r1,[r4,#0x24]
000038  79a9              LDRB     r1,[r5,#6]  ; dhcp_rx_options_given
00003a  b121              CBZ      r1,|L11.70|
;;;556        /* remember given subnet mask */
;;;557        ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
00003c  69b0              LDR      r0,[r6,#0x18]  ; dhcp_rx_options_val
00003e  f7fffffe          BL       lwip_htonl
;;;558        dhcp->subnet_mask_given = 1;
000042  62a0              STR      r0,[r4,#0x28]
000044  2001              MOVS     r0,#1
                  |L11.70|
;;;559      } else {
;;;560        dhcp->subnet_mask_given = 0;
000046  73a0              STRB     r0,[r4,#0xe]
;;;561      }
;;;562    
;;;563      /* gateway router */
;;;564      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
000048  79e8              LDRB     r0,[r5,#7]  ; dhcp_rx_options_given
00004a  b118              CBZ      r0,|L11.84|
;;;565        ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
00004c  69f0              LDR      r0,[r6,#0x1c]  ; dhcp_rx_options_val
00004e  f7fffffe          BL       lwip_htonl
000052  62e0              STR      r0,[r4,#0x2c]
                  |L11.84|
;;;566      }
;;;567      
;;;568    #if LWIP_DNS
;;;569      /* DNS servers */
;;;570      n = 0;
000054  2400              MOVS     r4,#0
;;;571      while(dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n) && (n < DNS_MAX_SERVERS)) {
000056  e00b              B        |L11.112|
                  |L11.88|
;;;572        ip_addr_t dns_addr;
;;;573        ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
000058  eb060084          ADD      r0,r6,r4,LSL #2
00005c  6a00              LDR      r0,[r0,#0x20]
00005e  f7fffffe          BL       lwip_htonl
;;;574        dns_setserver(n, &dns_addr);
000062  9000              STR      r0,[sp,#0]
000064  4669              MOV      r1,sp
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       dns_setserver
00006c  1c64              ADDS     r4,r4,#1
;;;575        n++;
00006e  b2e4              UXTB     r4,r4
                  |L11.112|
000070  1928              ADDS     r0,r5,r4              ;571
000072  7a00              LDRB     r0,[r0,#8]            ;571
000074  2800              CMP      r0,#0                 ;571
000076  d001              BEQ      |L11.124|
000078  2c02              CMP      r4,#2                 ;571
00007a  d3ed              BCC      |L11.88|
                  |L11.124|
;;;576      }
;;;577    #endif /* LWIP_DNS */
;;;578    }
00007c  bdf8              POP      {r3-r7,pc}
;;;579    
                          ENDP

00007e  0000              DCW      0x0000
                  |L11.128|
                          DCD      ||.bss||+0x28

                          AREA ||i.dhcp_inform||, CODE, READONLY, ALIGN=2

                  dhcp_inform PROC
;;;711    void
;;;712    dhcp_inform(struct netif *netif)
000000  b530              PUSH     {r4,r5,lr}
;;;713    {
000002  b091              SUB      sp,sp,#0x44
000004  0005              MOVS     r5,r0
000006  d00c              BEQ      |L12.34|
;;;714      struct dhcp dhcp;
;;;715      err_t result = ERR_OK;
;;;716      struct udp_pcb *pcb;
;;;717    
;;;718      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
;;;719    
;;;720      memset(&dhcp, 0, sizeof(struct dhcp));
000008  213c              MOVS     r1,#0x3c
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       __aeabi_memclr4
;;;721      dhcp_set_state(&dhcp, DHCP_INFORM);
000010  2108              MOVS     r1,#8
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       dhcp_set_state
;;;722    
;;;723      if ((netif->dhcp != NULL) && (netif->dhcp->pcb != NULL)) {
000018  6a68              LDR      r0,[r5,#0x24]
00001a  b138              CBZ      r0,|L12.44|
00001c  6844              LDR      r4,[r0,#4]
00001e  b99c              CBNZ     r4,|L12.72|
000020  e004              B        |L12.44|
                  |L12.34|
000022  a01e              ADR      r0,|L12.156|
000024  f7fffffe          BL       __2printf
                  |L12.40|
;;;724        /* re-use existing pcb */
;;;725        pcb = netif->dhcp->pcb;
;;;726      } else {
;;;727        pcb = udp_new();
;;;728        if (pcb == NULL) {
;;;729          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
;;;730          return;
;;;731        }
;;;732        dhcp.pcb = pcb;
;;;733        ip_set_option(dhcp.pcb, SOF_BROADCAST);
;;;734        udp_bind(dhcp.pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
;;;735        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
;;;736      }
;;;737      /* create and initialize the DHCP message header */
;;;738      result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
;;;739      if (result == ERR_OK) {
;;;740        dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
;;;741        dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
;;;742    
;;;743        dhcp_option_trailer(&dhcp);
;;;744    
;;;745        pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
;;;746    
;;;747        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
;;;748        udp_sendto_if(pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
;;;749        dhcp_delete_msg(&dhcp);
;;;750      } else {
;;;751        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
;;;752      }
;;;753    
;;;754      if (dhcp.pcb != NULL) {
;;;755        /* otherwise, the existing pcb was used */
;;;756        udp_remove(dhcp.pcb);
;;;757      }
;;;758    }
000028  b011              ADD      sp,sp,#0x44
00002a  bd30              POP      {r4,r5,pc}
                  |L12.44|
00002c  f7fffffe          BL       udp_new
000030  0004              MOVS     r4,r0                 ;727
000032  d0f9              BEQ      |L12.40|
000034  9402              STR      r4,[sp,#8]            ;733
000036  7a20              LDRB     r0,[r4,#8]            ;733
000038  2244              MOVS     r2,#0x44              ;734
00003a  f0400020          ORR      r0,r0,#0x20           ;733
00003e  7220              STRB     r0,[r4,#8]            ;733
000040  491a              LDR      r1,|L12.172|
000042  9802              LDR      r0,[sp,#8]            ;734
000044  f7fffffe          BL       udp_bind
                  |L12.72|
000048  2208              MOVS     r2,#8                 ;738
00004a  a901              ADD      r1,sp,#4              ;738
00004c  4628              MOV      r0,r5                 ;738
00004e  f7fffffe          BL       dhcp_create_msg
000052  b9e0              CBNZ     r0,|L12.142|
000054  2202              MOVS     r2,#2                 ;740
000056  2139              MOVS     r1,#0x39              ;740
000058  a801              ADD      r0,sp,#4              ;740
00005a  f7fffffe          BL       dhcp_option
00005e  8d29              LDRH     r1,[r5,#0x28]         ;741
000060  a801              ADD      r0,sp,#4              ;741
000062  f7fffffe          BL       dhcp_option_short
000066  a801              ADD      r0,sp,#4              ;743
000068  f7fffffe          BL       dhcp_option_trailer
00006c  f8bd001c          LDRH     r0,[sp,#0x1c]         ;745
000070  30f0              ADDS     r0,r0,#0xf0           ;745
000072  b281              UXTH     r1,r0                 ;745
000074  9805              LDR      r0,[sp,#0x14]         ;745
000076  f7fffffe          BL       pbuf_realloc
00007a  9500              STR      r5,[sp,#0]            ;748
00007c  2343              MOVS     r3,#0x43              ;748
00007e  4a0c              LDR      r2,|L12.176|
000080  4620              MOV      r0,r4                 ;748
000082  9905              LDR      r1,[sp,#0x14]         ;748
000084  f7fffffe          BL       udp_sendto_if
000088  a801              ADD      r0,sp,#4              ;749
00008a  f7fffffe          BL       dhcp_delete_msg
                  |L12.142|
00008e  9802              LDR      r0,[sp,#8]            ;754
000090  2800              CMP      r0,#0                 ;754
000092  d0c9              BEQ      |L12.40|
000094  f7fffffe          BL       udp_remove
000098  e7c6              B        |L12.40|
;;;759    
                          ENDP

00009a  0000              DCW      0x0000
                  |L12.156|
00009c  6e657469          DCB      "netif != NULL",0
0000a0  6620213d
0000a4  204e554c
0000a8  4c00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L12.172|
                          DCD      ip_addr_any
                  |L12.176|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_network_changed||, CODE, READONLY, ALIGN=1

                  dhcp_network_changed PROC
;;;765    void
;;;766    dhcp_network_changed(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;767    {
000002  6a44              LDR      r4,[r0,#0x24]
000004  4605              MOV      r5,r0
000006  2c00              CMP      r4,#0
000008  d01a              BEQ      |L13.64|
;;;768      struct dhcp *dhcp = netif->dhcp;
;;;769      if (!dhcp)
;;;770        return;
;;;771      switch (dhcp->state) {
00000a  7b21              LDRB     r1,[r4,#0xc]
00000c  2600              MOVS     r6,#0
00000e  2904              CMP      r1,#4
000010  d00e              BEQ      |L13.48|
000012  dc04              BGT      |L13.30|
000014  2900              CMP      r1,#0
000016  d013              BEQ      |L13.64|
000018  2903              CMP      r1,#3
00001a  d104              BNE      |L13.38|
00001c  e008              B        |L13.48|
                  |L13.30|
00001e  2905              CMP      r1,#5
000020  d006              BEQ      |L13.48|
000022  290a              CMP      r1,#0xa
000024  d004              BEQ      |L13.48|
                  |L13.38|
;;;772      case DHCP_REBINDING:
;;;773      case DHCP_RENEWING:
;;;774      case DHCP_BOUND:
;;;775      case DHCP_REBOOTING:
;;;776        netif_set_down(netif);
;;;777        dhcp->tries = 0;
;;;778        dhcp_reboot(netif);
;;;779        break;
;;;780      case DHCP_OFF:
;;;781        /* stay off */
;;;782        break;
;;;783      default:
;;;784        dhcp->tries = 0;
000026  7366              STRB     r6,[r4,#0xd]
;;;785    #if LWIP_DHCP_AUTOIP_COOP
;;;786        if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;787          autoip_stop(netif);
;;;788          dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;789        }
;;;790    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;791        dhcp_discover(netif);
000028  e8bd4070          POP      {r4-r6,lr}
00002c  f7ffbffe          B.W      dhcp_discover
                  |L13.48|
000030  f7fffffe          BL       netif_set_down
000034  7366              STRB     r6,[r4,#0xd]          ;777
000036  4628              MOV      r0,r5                 ;778
000038  e8bd4070          POP      {r4-r6,lr}            ;778
00003c  f7ffbffe          B.W      dhcp_reboot
                  |L13.64|
;;;792        break;
;;;793      }
;;;794    }
000040  bd70              POP      {r4-r6,pc}
;;;795    
                          ENDP


                          AREA ||i.dhcp_option||, CODE, READONLY, ALIGN=2

                  dhcp_option PROC
;;;1267   static void
;;;1268   dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
000000  b570              PUSH     {r4-r6,lr}
;;;1269   {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;1270     LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
000006  8b01              LDRH     r1,[r0,#0x18]
000008  1c90              ADDS     r0,r2,#2
00000a  4408              ADD      r0,r0,r1
00000c  4615              MOV      r5,r2                 ;1269
00000e  2844              CMP      r0,#0x44
000010  d902              BLS      |L14.24|
000012  4809              LDR      r0,|L14.56|
000014  f7fffffe          BL       __2printf
                  |L14.24|
;;;1271     dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
000018  8b20              LDRH     r0,[r4,#0x18]
00001a  6961              LDR      r1,[r4,#0x14]
00001c  4401              ADD      r1,r1,r0
00001e  1c40              ADDS     r0,r0,#1
000020  8320              STRH     r0,[r4,#0x18]
000022  f88160f0          STRB     r6,[r1,#0xf0]
;;;1272     dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
000026  8b20              LDRH     r0,[r4,#0x18]
000028  6961              LDR      r1,[r4,#0x14]
00002a  4401              ADD      r1,r1,r0
00002c  1c40              ADDS     r0,r0,#1
00002e  8320              STRH     r0,[r4,#0x18]
000030  f88150f0          STRB     r5,[r1,#0xf0]
;;;1273   }
000034  bd70              POP      {r4-r6,pc}
;;;1274   /*
                          ENDP

000036  0000              DCW      0x0000
                  |L14.56|
                          DCD      ||.conststring||

                          AREA ||i.dhcp_option_byte||, CODE, READONLY, ALIGN=2

                  dhcp_option_byte PROC
;;;1278   static void
;;;1279   dhcp_option_byte(struct dhcp *dhcp, u8_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;1280   {
000002  4604              MOV      r4,r0
;;;1281     LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
000004  8b00              LDRH     r0,[r0,#0x18]
000006  460d              MOV      r5,r1                 ;1280
000008  2844              CMP      r0,#0x44
00000a  d302              BCC      |L15.18|
00000c  a005              ADR      r0,|L15.36|
00000e  f7fffffe          BL       __2printf
                  |L15.18|
;;;1282     dhcp->msg_out->options[dhcp->options_out_len++] = value;
000012  8b20              LDRH     r0,[r4,#0x18]
000014  6961              LDR      r1,[r4,#0x14]
000016  4401              ADD      r1,r1,r0
000018  1c40              ADDS     r0,r0,#1
00001a  8320              STRH     r0,[r4,#0x18]
00001c  f88150f0          STRB     r5,[r1,#0xf0]
;;;1283   }
000020  bd70              POP      {r4-r6,pc}
;;;1284   
                          ENDP

000022  0000              DCW      0x0000
                  |L15.36|
000024  64686370          DCB      "dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_"
000028  5f6f7074
00002c  696f6e5f
000030  62797465
000034  3a206468
000038  63702d3e
00003c  6f707469
000040  6f6e735f
000044  6f75745f
000048  6c656e20
00004c  3c204448
000050  43505f4f
000054  5054494f
000058  4e535f  
00005b  4c454e00          DCB      "LEN",0
00005f  00                DCB      0

                          AREA ||i.dhcp_option_long||, CODE, READONLY, ALIGN=2

                  dhcp_option_long PROC
;;;1293   static void
;;;1294   dhcp_option_long(struct dhcp *dhcp, u32_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;1295   {
000002  4604              MOV      r4,r0
;;;1296     LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
000004  8b00              LDRH     r0,[r0,#0x18]
000006  460d              MOV      r5,r1                 ;1295
000008  1d00              ADDS     r0,r0,#4
00000a  2844              CMP      r0,#0x44
00000c  d902              BLS      |L16.20|
00000e  a011              ADR      r0,|L16.84|
000010  f7fffffe          BL       __2printf
                  |L16.20|
;;;1297     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
000014  8b20              LDRH     r0,[r4,#0x18]
000016  6962              LDR      r2,[r4,#0x14]
000018  0e29              LSRS     r1,r5,#24
00001a  4402              ADD      r2,r2,r0
00001c  1c40              ADDS     r0,r0,#1
00001e  8320              STRH     r0,[r4,#0x18]
000020  f88210f0          STRB     r1,[r2,#0xf0]
;;;1298     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
000024  8b20              LDRH     r0,[r4,#0x18]
000026  6962              LDR      r2,[r4,#0x14]
000028  0c29              LSRS     r1,r5,#16
00002a  4402              ADD      r2,r2,r0
00002c  1c40              ADDS     r0,r0,#1
00002e  8320              STRH     r0,[r4,#0x18]
000030  f88210f0          STRB     r1,[r2,#0xf0]
;;;1299     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
000034  8b20              LDRH     r0,[r4,#0x18]
000036  6962              LDR      r2,[r4,#0x14]
000038  0a29              LSRS     r1,r5,#8
00003a  4402              ADD      r2,r2,r0
00003c  1c40              ADDS     r0,r0,#1
00003e  8320              STRH     r0,[r4,#0x18]
000040  f88210f0          STRB     r1,[r2,#0xf0]
;;;1300     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
000044  8b20              LDRH     r0,[r4,#0x18]
000046  6961              LDR      r1,[r4,#0x14]
000048  4401              ADD      r1,r1,r0
00004a  1c40              ADDS     r0,r0,#1
00004c  8320              STRH     r0,[r4,#0x18]
00004e  f88150f0          STRB     r5,[r1,#0xf0]
;;;1301   }
000052  bd70              POP      {r4-r6,pc}
;;;1302   
                          ENDP

                  |L16.84|
000054  64686370          DCB      "dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPT"
000058  5f6f7074
00005c  696f6e5f
000060  6c6f6e67
000064  3a206468
000068  63702d3e
00006c  6f707469
000070  6f6e735f
000074  6f75745f
000078  6c656e20
00007c  2b203420
000080  3c3d2044
000084  4843505f
000088  4f5054  
00008b  494f4e53          DCB      "IONS_LEN",0
00008f  5f4c454e
000093  00      

                          AREA ||i.dhcp_option_short||, CODE, READONLY, ALIGN=2

                  dhcp_option_short PROC
;;;1285   static void
;;;1286   dhcp_option_short(struct dhcp *dhcp, u16_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;1287   {
000002  4604              MOV      r4,r0
;;;1288     LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
000004  8b00              LDRH     r0,[r0,#0x18]
000006  460d              MOV      r5,r1                 ;1287
000008  1c80              ADDS     r0,r0,#2
00000a  2844              CMP      r0,#0x44
00000c  d902              BLS      |L17.20|
00000e  4809              LDR      r0,|L17.52|
000010  f7fffffe          BL       __2printf
                  |L17.20|
;;;1289     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
000014  8b20              LDRH     r0,[r4,#0x18]
000016  6962              LDR      r2,[r4,#0x14]
000018  0a29              LSRS     r1,r5,#8
00001a  4402              ADD      r2,r2,r0
00001c  1c40              ADDS     r0,r0,#1
00001e  8320              STRH     r0,[r4,#0x18]
000020  f88210f0          STRB     r1,[r2,#0xf0]
;;;1290     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
000024  8b20              LDRH     r0,[r4,#0x18]
000026  6961              LDR      r1,[r4,#0x14]
000028  4401              ADD      r1,r1,r0
00002a  1c40              ADDS     r0,r0,#1
00002c  8320              STRH     r0,[r4,#0x18]
00002e  f88150f0          STRB     r5,[r1,#0xf0]
;;;1291   }
000032  bd70              POP      {r4-r6,pc}
;;;1292   
                          ENDP

                  |L17.52|
                          DCD      ||.conststring||+0x48

                          AREA ||i.dhcp_option_trailer||, CODE, READONLY, ALIGN=2

                  dhcp_option_trailer PROC
;;;1755   static void
;;;1756   dhcp_option_trailer(struct dhcp *dhcp)
000000  b510              PUSH     {r4,lr}
;;;1757   {
000002  0004              MOVS     r4,r0
000004  d002              BEQ      |L18.12|
;;;1758     LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
;;;1759     LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
000006  6960              LDR      r0,[r4,#0x14]
000008  b128              CBZ      r0,|L18.22|
00000a  e007              B        |L18.28|
                  |L18.12|
00000c  e8bd4010          POP      {r4,lr}               ;1758
000010  a00f              ADR      r0,|L18.80|
000012  f7ffbffe          B.W      __2printf
                  |L18.22|
000016  a017              ADR      r0,|L18.116|
000018  f7fffffe          BL       __2printf
                  |L18.28|
;;;1760     LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
00001c  8b20              LDRH     r0,[r4,#0x18]
00001e  2844              CMP      r0,#0x44
000020  d302              BCC      |L18.40|
000022  a01f              ADR      r0,|L18.160|
000024  f7fffffe          BL       __2printf
                  |L18.40|
;;;1761     dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
000028  8b20              LDRH     r0,[r4,#0x18]
00002a  6962              LDR      r2,[r4,#0x14]
00002c  21ff              MOVS     r1,#0xff
00002e  4402              ADD      r2,r2,r0
000030  1c40              ADDS     r0,r0,#1
000032  8320              STRH     r0,[r4,#0x18]
000034  f88210f0          STRB     r1,[r2,#0xf0]
000038  2100              MOVS     r1,#0
;;;1762     /* packet is too small, or not 4 byte aligned? */
;;;1763     while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
00003a  e005              B        |L18.72|
                  |L18.60|
;;;1764            (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
;;;1765       /* add a fill/padding byte */
;;;1766       dhcp->msg_out->options[dhcp->options_out_len++] = 0;
00003c  6962              LDR      r2,[r4,#0x14]
00003e  4402              ADD      r2,r2,r0
000040  1c40              ADDS     r0,r0,#1
000042  8320              STRH     r0,[r4,#0x18]
000044  f88210f0          STRB     r1,[r2,#0xf0]
                  |L18.72|
000048  8b20              LDRH     r0,[r4,#0x18]         ;1763
00004a  2844              CMP      r0,#0x44              ;1763
00004c  d3f6              BCC      |L18.60|
;;;1767     }
;;;1768   }
00004e  bd10              POP      {r4,pc}
;;;1769   
                          ENDP

                  |L18.80|
000050  64686370          DCB      "dhcp_option_trailer: dhcp != NULL",0
000054  5f6f7074
000058  696f6e5f
00005c  74726169
000060  6c65723a
000064  20646863
000068  7020213d
00006c  204e554c
000070  4c00    
000072  00                DCB      0
000073  00                DCB      0
                  |L18.116|
000074  64686370          DCB      "dhcp_option_trailer: dhcp->msg_out != NULL\n",0
000078  5f6f7074
00007c  696f6e5f
000080  74726169
000084  6c65723a
000088  20646863
00008c  702d3e6d
000090  73675f6f
000094  75742021
000098  3d204e55
00009c  4c4c0a00
                  |L18.160|
0000a0  64686370          DCB      "dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIO"
0000a4  5f6f7074
0000a8  696f6e5f
0000ac  74726169
0000b0  6c65723a
0000b4  20646863
0000b8  702d3e6f
0000bc  7074696f
0000c0  6e735f6f
0000c4  75745f6c
0000c8  656e203c
0000cc  20444843
0000d0  505f4f50
0000d4  54494f  
0000d7  4e535f4c          DCB      "NS_LEN\n",0
0000db  454e0a00
0000df  00                DCB      0

                          AREA ||i.dhcp_parse_reply||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                  dhcp_parse_reply PROC
;;;1336   static err_t
;;;1337   dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1338   {
000004  b083              SUB      sp,sp,#0xc
;;;1339     u8_t *options;
;;;1340     u16_t offset;
;;;1341     u16_t offset_max;
;;;1342     u16_t options_idx;
;;;1343     u16_t options_idx_max;
;;;1344     struct pbuf *q;
;;;1345     int parse_file_as_options = 0;
000006  2100              MOVS     r1,#0
000008  4604              MOV      r4,r0                 ;1338
;;;1346     int parse_sname_as_options = 0;
00000a  468b              MOV      r11,r1
;;;1347   
;;;1348     /* clear received options */
;;;1349     dhcp_clear_all_options(dhcp);
00000c  9101              STR      r1,[sp,#4]
00000e  210a              MOVS     r1,#0xa
000010  4886              LDR      r0,|L19.556|
000012  f7fffffe          BL       __aeabi_memclr4
;;;1350     /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
;;;1351     if (p->len < DHCP_SNAME_OFS) {
000016  9804              LDR      r0,[sp,#0x10]
000018  8940              LDRH     r0,[r0,#0xa]
00001a  282c              CMP      r0,#0x2c
00001c  d314              BCC      |L19.72|
;;;1352       return ERR_BUF;
;;;1353     }
;;;1354     dhcp->msg_in = (struct dhcp_msg *)p->payload;
00001e  9904              LDR      r1,[sp,#0x10]
;;;1355   #if LWIP_DHCP_BOOTP_FILE
;;;1356     /* clear boot file name */
;;;1357     dhcp->boot_file_name[0] = 0;
;;;1358   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1359   
;;;1360     /* parse options */
;;;1361   
;;;1362     /* start with options field */
;;;1363     options_idx = DHCP_OPTIONS_OFS;
000020  26f0              MOVS     r6,#0xf0
000022  6848              LDR      r0,[r1,#4]            ;1354
;;;1364     /* parse options to the end of the received packet */
;;;1365     options_idx_max = p->tot_len;
000024  60a0              STR      r0,[r4,#8]
000026  9804              LDR      r0,[sp,#0x10]
000028  8900              LDRH     r0,[r0,#8]
                  |L19.42|
;;;1366   again:
;;;1367     q = p;
;;;1368     while((q != NULL) && (options_idx >= q->len)) {
00002a  9f04              LDR      r7,[sp,#0x10]
00002c  e004              B        |L19.56|
                  |L19.46|
;;;1369       options_idx -= q->len;
00002e  1a72              SUBS     r2,r6,r1
;;;1370       options_idx_max -= q->len;
000030  1a40              SUBS     r0,r0,r1
;;;1371       q = q->next;
000032  683f              LDR      r7,[r7,#0]
000034  b296              UXTH     r6,r2                 ;1369
000036  b280              UXTH     r0,r0                 ;1370
                  |L19.56|
000038  b137              CBZ      r7,|L19.72|
00003a  8979              LDRH     r1,[r7,#0xa]          ;1368
00003c  42b1              CMP      r1,r6                 ;1368
00003e  d9f6              BLS      |L19.46|
;;;1372     }
;;;1373     if (q == NULL) {
;;;1374       return ERR_BUF;
;;;1375     }
;;;1376     offset = options_idx;
;;;1377     offset_max = options_idx_max;
000040  4680              MOV      r8,r0
;;;1378     options = (u8_t*)q->payload;
;;;1379     /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
;;;1380     while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
000042  f8d7a004          LDR      r10,[r7,#4]
000046  e0c6              B        |L19.470|
                  |L19.72|
000048  f06f0001          MVN      r0,#1                 ;1374
                  |L19.76|
;;;1381       u8_t op = options[offset];
;;;1382       u8_t len;
;;;1383       u8_t decode_len = 0;
;;;1384       int decode_idx = -1;
;;;1385       u16_t val_offset = offset + 2;
;;;1386       /* len byte might be in the next pbuf */
;;;1387       if (offset + 1 < q->len) {
;;;1388         len = options[offset + 1];
;;;1389       } else {
;;;1390         len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
;;;1391       }
;;;1392       /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
;;;1393       decode_len = len;
;;;1394       switch(op) {
;;;1395         /* case(DHCP_OPTION_END): handled above */
;;;1396         case(DHCP_OPTION_PAD):
;;;1397           /* special option: no len encoded */
;;;1398           decode_len = len = 0;
;;;1399           /* will be increased below */
;;;1400           offset--;
;;;1401           break;
;;;1402         case(DHCP_OPTION_SUBNET_MASK):
;;;1403           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1404           decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
;;;1405           break;
;;;1406         case(DHCP_OPTION_ROUTER):
;;;1407           decode_len = 4; /* only copy the first given router */
;;;1408           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1409           decode_idx = DHCP_OPTION_IDX_ROUTER;
;;;1410           break;
;;;1411         case(DHCP_OPTION_DNS_SERVER):
;;;1412           /* special case: there might be more than one server */
;;;1413           LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
;;;1414           /* limit number of DNS servers */
;;;1415           decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
;;;1416           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1417           decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
;;;1418           break;
;;;1419         case(DHCP_OPTION_LEASE_TIME):
;;;1420           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1421           decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
;;;1422           break;
;;;1423         case(DHCP_OPTION_OVERLOAD):
;;;1424           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1425           decode_idx = DHCP_OPTION_IDX_OVERLOAD;
;;;1426           break;
;;;1427         case(DHCP_OPTION_MESSAGE_TYPE):
;;;1428           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1429           decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
;;;1430           break;
;;;1431         case(DHCP_OPTION_SERVER_ID):
;;;1432           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1433           decode_idx = DHCP_OPTION_IDX_SERVER_ID;
;;;1434           break;
;;;1435         case(DHCP_OPTION_T1):
;;;1436           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1437           decode_idx = DHCP_OPTION_IDX_T1;
;;;1438           break;
;;;1439         case(DHCP_OPTION_T2):
;;;1440           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1441           decode_idx = DHCP_OPTION_IDX_T2;
;;;1442           break;
;;;1443         default:
;;;1444           decode_len = 0;
;;;1445           LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
;;;1446           break;
;;;1447       }
;;;1448       offset += len + 2;
;;;1449       if (decode_len > 0) {
;;;1450         u32_t value = 0;
;;;1451         u16_t copy_len;
;;;1452   decode_next:
;;;1453         LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
;;;1454         if (!dhcp_option_given(dhcp, decode_idx)) {
;;;1455           copy_len = LWIP_MIN(decode_len, 4);
;;;1456           pbuf_copy_partial(q, &value, copy_len, val_offset);
;;;1457           if (decode_len > 4) {
;;;1458             /* decode more than one u32_t */
;;;1459             LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
;;;1460             dhcp_got_option(dhcp, decode_idx);
;;;1461             dhcp_set_option_value(dhcp, decode_idx, htonl(value));
;;;1462             decode_len -= 4;
;;;1463             val_offset += 4;
;;;1464             decode_idx++;
;;;1465             goto decode_next;
;;;1466           } else if (decode_len == 4) {
;;;1467             value = ntohl(value);
;;;1468           } else {
;;;1469             LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
;;;1470             value = ((u8_t*)&value)[0];
;;;1471           }
;;;1472           dhcp_got_option(dhcp, decode_idx);
;;;1473           dhcp_set_option_value(dhcp, decode_idx, value);
;;;1474         }
;;;1475       }
;;;1476       if (offset >= q->len) {
;;;1477         offset -= q->len;
;;;1478         offset_max -= q->len;
;;;1479         if ((offset < offset_max) && offset_max) {
;;;1480           q = q->next;
;;;1481           LWIP_ASSERT("next pbuf was null", q);
;;;1482           options = (u8_t*)q->payload;
;;;1483         } else {
;;;1484           // We've run out of bytes, probably no end marker. Don't proceed.
;;;1485           break;
;;;1486         }
;;;1487       }
;;;1488     }
;;;1489     /* is this an overloaded message? */
;;;1490     if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
;;;1491       u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1492       dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1493       if (overload == DHCP_OVERLOAD_FILE) {
;;;1494         parse_file_as_options = 1;
;;;1495         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
;;;1496       } else if (overload == DHCP_OVERLOAD_SNAME) {
;;;1497         parse_sname_as_options = 1;
;;;1498         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
;;;1499       } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
;;;1500         parse_sname_as_options = 1;
;;;1501         parse_file_as_options = 1;
;;;1502         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
;;;1503       } else {
;;;1504         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
;;;1505       }
;;;1506   #if LWIP_DHCP_BOOTP_FILE
;;;1507       if (!parse_file_as_options) {
;;;1508         /* only do this for ACK messages */
;;;1509         if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) &&
;;;1510           (dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) == DHCP_ACK))
;;;1511         /* copy bootp file name, don't care for sname (server hostname) */
;;;1512         pbuf_copy_partial(p, dhcp->boot_file_name, DHCP_FILE_LEN-1, DHCP_FILE_OFS);
;;;1513         /* make sure the string is really NULL-terminated */
;;;1514         dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
;;;1515       }
;;;1516   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1517     }
;;;1518     if (parse_file_as_options) {
;;;1519       /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
;;;1520       parse_file_as_options = 0;
;;;1521       options_idx = DHCP_FILE_OFS;
;;;1522       options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
;;;1523       goto again;
;;;1524     } else if (parse_sname_as_options) {
;;;1525       parse_sname_as_options = 0;
;;;1526       options_idx = DHCP_SNAME_OFS;
;;;1527       options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
;;;1528       goto again;
;;;1529     }
;;;1530     return ERR_OK;
;;;1531   }
00004c  b005              ADD      sp,sp,#0x14
00004e  e8bd8ff0          POP      {r4-r11,pc}
                  |L19.82|
000052  1cb0              ADDS     r0,r6,#2              ;1385
000054  fa1ff980          UXTH     r9,r0                 ;1385
000058  897a              LDRH     r2,[r7,#0xa]          ;1387
00005a  1c70              ADDS     r0,r6,#1              ;1387
00005c  f04f34ff          MOV      r4,#0xffffffff        ;1384
000060  4282              CMP      r2,r0                 ;1387
000062  d903              BLS      |L19.108|
000064  eb0a0006          ADD      r0,r10,r6             ;1388
000068  7840              LDRB     r0,[r0,#1]            ;1388
00006a  e003              B        |L19.116|
                  |L19.108|
00006c  6838              LDR      r0,[r7,#0]            ;1390
00006e  b108              CBZ      r0,|L19.116|
000070  6840              LDR      r0,[r0,#4]            ;1390
000072  7800              LDRB     r0,[r0,#0]            ;1390
                  |L19.116|
000074  2934              CMP      r1,#0x34              ;1394
000076  4605              MOV      r5,r0                 ;1393
000078  d046              BEQ      |L19.264|
00007a  dc0b              BGT      |L19.148|
00007c  2903              CMP      r1,#3                 ;1394
00007e  d02d              BEQ      |L19.220|
000080  dc03              BGT      |L19.138|
000082  b301              CBZ      r1,|L19.198|
000084  2901              CMP      r1,#1                 ;1394
000086  d10d              BNE      |L19.164|
000088  e022              B        |L19.208|
                  |L19.138|
00008a  2906              CMP      r1,#6                 ;1394
00008c  d02d              BEQ      |L19.234|
00008e  2933              CMP      r1,#0x33              ;1394
000090  d108              BNE      |L19.164|
000092  e035              B        |L19.256|
                  |L19.148|
000094  2935              CMP      r1,#0x35              ;1394
000096  d03d              BEQ      |L19.276|
000098  2936              CMP      r1,#0x36              ;1394
00009a  d03f              BEQ      |L19.284|
00009c  293a              CMP      r1,#0x3a              ;1394
00009e  d042              BEQ      |L19.294|
0000a0  293b              CMP      r1,#0x3b              ;1394
0000a2  d044              BEQ      |L19.302|
                  |L19.164|
0000a4  2500              MOVS     r5,#0                 ;1444
                  |L19.166|
0000a6  4430              ADD      r0,r0,r6              ;1448
0000a8  1c80              ADDS     r0,r0,#2              ;1448
0000aa  b286              UXTH     r6,r0                 ;1448
0000ac  2d00              CMP      r5,#0                 ;1449
0000ae  d07c              BEQ      |L19.426|
0000b0  2000              MOVS     r0,#0                 ;1450
0000b2  9000              STR      r0,[sp,#0]            ;1450
                  |L19.180|
0000b4  2c0a              CMP      r4,#0xa               ;1453
0000b6  d302              BCC      |L19.190|
0000b8  a05d              ADR      r0,|L19.560|
0000ba  f7fffffe          BL       __2printf
                  |L19.190|
0000be  485b              LDR      r0,|L19.556|
0000c0  5d00              LDRB     r0,[r0,r4]            ;1454
0000c2  b378              CBZ      r0,|L19.292|
0000c4  e071              B        |L19.426|
                  |L19.198|
0000c6  2000              MOVS     r0,#0                 ;1398
0000c8  1e76              SUBS     r6,r6,#1              ;1398
0000ca  4605              MOV      r5,r0                 ;1398
0000cc  b2b6              UXTH     r6,r6                 ;1400
0000ce  e7ea              B        |L19.166|
                  |L19.208|
0000d0  2804              CMP      r0,#4                 ;1403
0000d2  d001              BEQ      |L19.216|
                  |L19.212|
0000d4  a05b              ADR      r0,|L19.580|
0000d6  e055              B        |L19.388|
                  |L19.216|
0000d8  2406              MOVS     r4,#6                 ;1404
0000da  e7e4              B        |L19.166|
                  |L19.220|
0000dc  2504              MOVS     r5,#4                 ;1407
0000de  2804              CMP      r0,#4                 ;1408
0000e0  d201              BCS      |L19.230|
                  |L19.226|
0000e2  a05b              ADR      r0,|L19.592|
0000e4  e04e              B        |L19.388|
                  |L19.230|
0000e6  2407              MOVS     r4,#7                 ;1409
0000e8  e7dd              B        |L19.166|
                  |L19.234|
0000ea  0781              LSLS     r1,r0,#30             ;1413
0000ec  d001              BEQ      |L19.242|
0000ee  a05d              ADR      r0,|L19.612|
0000f0  e048              B        |L19.388|
                  |L19.242|
0000f2  2808              CMP      r0,#8                 ;1415
0000f4  d300              BCC      |L19.248|
0000f6  2508              MOVS     r5,#8                 ;1415
                  |L19.248|
0000f8  42a8              CMP      r0,r5                 ;1416
0000fa  d3f2              BCC      |L19.226|
0000fc  2408              MOVS     r4,#8                 ;1417
0000fe  e7d2              B        |L19.166|
                  |L19.256|
000100  2804              CMP      r0,#4                 ;1420
000102  d1e7              BNE      |L19.212|
000104  2403              MOVS     r4,#3                 ;1421
000106  e7ce              B        |L19.166|
                  |L19.264|
000108  2801              CMP      r0,#1                 ;1424
00010a  d001              BEQ      |L19.272|
                  |L19.268|
00010c  a059              ADR      r0,|L19.628|
00010e  e039              B        |L19.388|
                  |L19.272|
000110  2400              MOVS     r4,#0                 ;1425
000112  e7c8              B        |L19.166|
                  |L19.276|
000114  2801              CMP      r0,#1                 ;1428
000116  d1f9              BNE      |L19.268|
000118  2401              MOVS     r4,#1                 ;1429
00011a  e7c4              B        |L19.166|
                  |L19.284|
00011c  2804              CMP      r0,#4                 ;1432
00011e  d1d9              BNE      |L19.212|
000120  2402              MOVS     r4,#2                 ;1433
000122  e7c0              B        |L19.166|
                  |L19.292|
000124  e007              B        |L19.310|
                  |L19.294|
000126  2804              CMP      r0,#4                 ;1436
000128  d1d4              BNE      |L19.212|
00012a  2404              MOVS     r4,#4                 ;1437
00012c  e7bb              B        |L19.166|
                  |L19.302|
00012e  2804              CMP      r0,#4                 ;1440
000130  d1d0              BNE      |L19.212|
000132  2405              MOVS     r4,#5                 ;1441
000134  e7b7              B        |L19.166|
                  |L19.310|
000136  2d04              CMP      r5,#4                 ;1455
000138  d201              BCS      |L19.318|
00013a  462a              MOV      r2,r5                 ;1455
00013c  e000              B        |L19.320|
                  |L19.318|
00013e  2204              MOVS     r2,#4                 ;1455
                  |L19.320|
000140  464b              MOV      r3,r9                 ;1456
000142  4669              MOV      r1,sp                 ;1456
000144  4638              MOV      r0,r7                 ;1456
000146  f7fffffe          BL       pbuf_copy_partial
00014a  2d04              CMP      r5,#4                 ;1457
00014c  d915              BLS      |L19.378|
00014e  07a8              LSLS     r0,r5,#30             ;1459
000150  d001              BEQ      |L19.342|
000152  a04b              ADR      r0,|L19.640|
000154  e016              B        |L19.388|
                  |L19.342|
000156  4935              LDR      r1,|L19.556|
000158  2001              MOVS     r0,#1                 ;1460
00015a  5508              STRB     r0,[r1,r4]            ;1460
00015c  9800              LDR      r0,[sp,#0]            ;1461
00015e  f7fffffe          BL       lwip_htonl
000162  4932              LDR      r1,|L19.556|
000164  1f2d              SUBS     r5,r5,#4              ;1461
000166  3928              SUBS     r1,r1,#0x28           ;1461
000168  b2ed              UXTB     r5,r5                 ;1462
00016a  f8410024          STR      r0,[r1,r4,LSL #2]     ;1461
00016e  f1090004          ADD      r0,r9,#4              ;1463
000172  fa1ff980          UXTH     r9,r0                 ;1463
000176  1c64              ADDS     r4,r4,#1              ;1463
000178  e79c              B        |L19.180|
                  |L19.378|
00017a  2d04              CMP      r5,#4                 ;1466
00017c  d007              BEQ      |L19.398|
00017e  2d01              CMP      r5,#1                 ;1469
000180  d009              BEQ      |L19.406|
000182  a044              ADR      r0,|L19.660|
                  |L19.388|
000184  f7fffffe          BL       __2printf
000188  f06f0005          MVN      r0,#5                 ;1469
                  |L19.396|
00018c  e75e              B        |L19.76|
                  |L19.398|
00018e  9800              LDR      r0,[sp,#0]            ;1467
000190  f7fffffe          BL       lwip_ntohl
000194  e001              B        |L19.410|
                  |L19.406|
000196  f89d0000          LDRB     r0,[sp,#0]            ;1470
                  |L19.410|
00019a  9000              STR      r0,[sp,#0]            ;1472
00019c  4823              LDR      r0,|L19.556|
00019e  2101              MOVS     r1,#1                 ;1472
0001a0  5501              STRB     r1,[r0,r4]            ;1472
0001a2  3828              SUBS     r0,r0,#0x28           ;1473
0001a4  9900              LDR      r1,[sp,#0]            ;1473
0001a6  f8401024          STR      r1,[r0,r4,LSL #2]     ;1473
                  |L19.426|
0001aa  8978              LDRH     r0,[r7,#0xa]          ;1476
0001ac  42b0              CMP      r0,r6                 ;1476
0001ae  d811              BHI      |L19.468|
0001b0  1a31              SUBS     r1,r6,r0              ;1477
0001b2  eba80000          SUB      r0,r8,r0              ;1478
0001b6  b28e              UXTH     r6,r1                 ;1477
0001b8  fa1ff880          UXTH     r8,r0                 ;1478
0001bc  4546              CMP      r6,r8                 ;1479
0001be  d211              BCS      |L19.484|
0001c0  f1b80f00          CMP      r8,#0                 ;1479
0001c4  d00e              BEQ      |L19.484|
0001c6  683f              LDR      r7,[r7,#0]            ;1480
0001c8  b917              CBNZ     r7,|L19.464|
0001ca  a037              ADR      r0,|L19.680|
0001cc  f7fffffe          BL       __2printf
                  |L19.464|
0001d0  f8d7a004          LDR      r10,[r7,#4]           ;1482
                  |L19.468|
0001d4  b137              CBZ      r7,|L19.484|
                  |L19.470|
0001d6  f81a1006          LDRB     r1,[r10,r6]           ;1380
0001da  29ff              CMP      r1,#0xff              ;1380
0001dc  d002              BEQ      |L19.484|
0001de  4546              CMP      r6,r8                 ;1380
0001e0  f4ffaf37          BCC      |L19.82|
                  |L19.484|
0001e4  4911              LDR      r1,|L19.556|
0001e6  7808              LDRB     r0,[r1,#0]            ;1490  ; dhcp_rx_options_given
0001e8  b168              CBZ      r0,|L19.518|
0001ea  f1a10028          SUB      r0,r1,#0x28           ;1491
0001ee  2200              MOVS     r2,#0                 ;1492
0001f0  6800              LDR      r0,[r0,#0]            ;1491  ; dhcp_rx_options_val
0001f2  700a              STRB     r2,[r1,#0]            ;1492
0001f4  2801              CMP      r0,#1                 ;1493
0001f6  d008              BEQ      |L19.522|
0001f8  2802              CMP      r0,#2                 ;1496
0001fa  d002              BEQ      |L19.514|
0001fc  2803              CMP      r0,#3                 ;1499
0001fe  d009              BEQ      |L19.532|
000200  e001              B        |L19.518|
                  |L19.514|
000202  f04f0b01          MOV      r11,#1                ;1497
                  |L19.518|
000206  9801              LDR      r0,[sp,#4]            ;1518
000208  b138              CBZ      r0,|L19.538|
                  |L19.522|
00020a  2000              MOVS     r0,#0                 ;1520
00020c  266c              MOVS     r6,#0x6c              ;1521
00020e  9001              STR      r0,[sp,#4]            ;1522
000210  20ec              MOVS     r0,#0xec              ;1522
000212  e70a              B        |L19.42|
                  |L19.532|
000214  f04f0b01          MOV      r11,#1                ;1500
000218  e7f7              B        |L19.522|
                  |L19.538|
00021a  f1bb0f00          CMP      r11,#0                ;1524
00021e  f04f0000          MOV      r0,#0                 ;1530
000222  d0b3              BEQ      |L19.396|
000224  4683              MOV      r11,r0                ;1525
000226  262c              MOVS     r6,#0x2c              ;1526
000228  206c              MOVS     r0,#0x6c              ;1527
00022a  e6fe              B        |L19.42|
;;;1532   
                          ENDP

                  |L19.556|
                          DCD      ||.bss||+0x28
                  |L19.560|
000230  63686563          DCB      "check decode_idx",0
000234  6b206465
000238  636f6465
00023c  5f696478
000240  00      
000241  00                DCB      0
000242  00                DCB      0
000243  00                DCB      0
                  |L19.580|
000244  6c656e20          DCB      "len == 4",0
000248  3d3d2034
00024c  00      
00024d  00                DCB      0
00024e  00                DCB      0
00024f  00                DCB      0
                  |L19.592|
000250  6c656e20          DCB      "len >= decode_len",0
000254  3e3d2064
000258  65636f64
00025c  655f6c65
000260  6e00    
000262  00                DCB      0
000263  00                DCB      0
                  |L19.612|
000264  6c656e20          DCB      "len % 4 == 0",0
000268  25203420
00026c  3d3d2030
000270  00      
000271  00                DCB      0
000272  00                DCB      0
000273  00                DCB      0
                  |L19.628|
000274  6c656e20          DCB      "len == 1",0
000278  3d3d2031
00027c  00      
00027d  00                DCB      0
00027e  00                DCB      0
00027f  00                DCB      0
                  |L19.640|
000280  6465636f          DCB      "decode_len % 4 == 0",0
000284  64655f6c
000288  656e2025
00028c  2034203d
000290  3d203000
                  |L19.660|
000294  696e7661          DCB      "invalid decode_len",0
000298  6c696420
00029c  6465636f
0002a0  64655f6c
0002a4  656e00  
0002a7  00                DCB      0
                  |L19.680|
0002a8  6e657874          DCB      "next pbuf was null",0
0002ac  20706275
0002b0  66207761
0002b4  73206e75
0002b8  6c6c00  
0002bb  00                DCB      0

                          AREA ||i.dhcp_rebind||, CODE, READONLY, ALIGN=2

                  dhcp_rebind PROC
;;;1075   static err_t
;;;1076   dhcp_rebind(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1077   {
;;;1078     struct dhcp *dhcp = netif->dhcp;
;;;1079     err_t result;
;;;1080     u16_t msecs;
;;;1081     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
;;;1082     dhcp_set_state(dhcp, DHCP_REBINDING);
000002  6a44              LDR      r4,[r0,#0x24]
000004  4605              MOV      r5,r0                 ;1077
000006  2104              MOVS     r1,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dhcp_set_state
;;;1083   
;;;1084     /* create and initialize the DHCP message header */
;;;1085     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
00000e  2203              MOVS     r2,#3
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       dhcp_create_msg
000018  0006              MOVS     r6,r0
;;;1086     if (result == ERR_OK) {
00001a  d11b              BNE      |L20.84|
;;;1087       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
00001c  2202              MOVS     r2,#2
00001e  2139              MOVS     r1,#0x39
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       dhcp_option
;;;1088       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000026  8d29              LDRH     r1,[r5,#0x28]
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       dhcp_option_short
;;;1089   
;;;1090   #if LWIP_NETIF_HOSTNAME
;;;1091       dhcp_option_hostname(dhcp, netif);
;;;1092   #endif /* LWIP_NETIF_HOSTNAME */
;;;1093   
;;;1094   #if 0
;;;1095       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;1096       dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;1097   
;;;1098       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1099       dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;1100   #endif
;;;1101   
;;;1102       dhcp_option_trailer(dhcp);
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       dhcp_option_trailer
;;;1103   
;;;1104       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000034  8b20              LDRH     r0,[r4,#0x18]
000036  30f0              ADDS     r0,r0,#0xf0
000038  b281              UXTH     r1,r0
00003a  6920              LDR      r0,[r4,#0x10]
00003c  f7fffffe          BL       pbuf_realloc
;;;1105   
;;;1106       /* broadcast to server */
;;;1107       udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000040  9500              STR      r5,[sp,#0]
000042  2343              MOVS     r3,#0x43
000044  4a0f              LDR      r2,|L20.132|
000046  6921              LDR      r1,[r4,#0x10]
000048  6860              LDR      r0,[r4,#4]
00004a  f7fffffe          BL       udp_sendto_if
;;;1108       dhcp_delete_msg(dhcp);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       dhcp_delete_msg
                  |L20.84|
;;;1109       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
;;;1110     } else {
;;;1111       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
;;;1112     }
;;;1113     dhcp->tries++;
000054  7b60              LDRB     r0,[r4,#0xd]
000056  1c40              ADDS     r0,r0,#1
000058  b2c0              UXTB     r0,r0
00005a  7360              STRB     r0,[r4,#0xd]
;;;1114     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
00005c  280a              CMP      r0,#0xa
00005e  d204              BCS      |L20.106|
000060  f44f717a          MOV      r1,#0x3e8
000064  fb10f001          SMULBB   r0,r0,r1
000068  e001              B        |L20.110|
                  |L20.106|
00006a  f2427010          MOV      r0,#0x2710
                  |L20.110|
00006e  b280              UXTH     r0,r0
;;;1115     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000070  f44f71fa          MOV      r1,#0x1f4
000074  f20010f3          ADD      r0,r0,#0x1f3
000078  fbb0f0f1          UDIV     r0,r0,r1
00007c  8360              STRH     r0,[r4,#0x1a]
;;;1116     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
;;;1117     return result;
00007e  4630              MOV      r0,r6
;;;1118   }
000080  bdf8              POP      {r3-r7,pc}
;;;1119   
                          ENDP

000082  0000              DCW      0x0000
                  |L20.132|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_reboot||, CODE, READONLY, ALIGN=2

                  dhcp_reboot PROC
;;;1125   static err_t
;;;1126   dhcp_reboot(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1127   {
;;;1128     struct dhcp *dhcp = netif->dhcp;
;;;1129     err_t result;
;;;1130     u16_t msecs;
;;;1131     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
;;;1132     dhcp_set_state(dhcp, DHCP_REBOOTING);
000002  6a44              LDR      r4,[r0,#0x24]
000004  4606              MOV      r6,r0                 ;1127
000006  2103              MOVS     r1,#3
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dhcp_set_state
;;;1133   
;;;1134     /* create and initialize the DHCP message header */
;;;1135     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
00000e  2203              MOVS     r2,#3
000010  4621              MOV      r1,r4
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       dhcp_create_msg
000018  0005              MOVS     r5,r0
;;;1136     if (result == ERR_OK) {
00001a  d128              BNE      |L21.110|
;;;1137       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
00001c  2202              MOVS     r2,#2
00001e  2139              MOVS     r1,#0x39
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       dhcp_option
;;;1138       dhcp_option_short(dhcp, 576);
000026  f44f7110          MOV      r1,#0x240
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       dhcp_option_short
;;;1139   
;;;1140       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000030  2204              MOVS     r2,#4
000032  2132              MOVS     r1,#0x32
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       dhcp_option
;;;1141       dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
00003a  6a60              LDR      r0,[r4,#0x24]
00003c  f7fffffe          BL       lwip_ntohl
000040  4601              MOV      r1,r0
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       dhcp_option_long
;;;1142   
;;;1143       dhcp_option_trailer(dhcp);
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       dhcp_option_trailer
;;;1144   
;;;1145       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
00004e  8b20              LDRH     r0,[r4,#0x18]
000050  30f0              ADDS     r0,r0,#0xf0
000052  b281              UXTH     r1,r0
000054  6920              LDR      r0,[r4,#0x10]
000056  f7fffffe          BL       pbuf_realloc
;;;1146   
;;;1147       /* broadcast to server */
;;;1148       udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
00005a  9600              STR      r6,[sp,#0]
00005c  2343              MOVS     r3,#0x43
00005e  4a0f              LDR      r2,|L21.156|
000060  6921              LDR      r1,[r4,#0x10]
000062  6860              LDR      r0,[r4,#4]
000064  f7fffffe          BL       udp_sendto_if
;;;1149       dhcp_delete_msg(dhcp);
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       dhcp_delete_msg
                  |L21.110|
;;;1150       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
;;;1151     } else {
;;;1152       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
;;;1153     }
;;;1154     dhcp->tries++;
00006e  7b60              LDRB     r0,[r4,#0xd]
000070  1c40              ADDS     r0,r0,#1
000072  b2c0              UXTB     r0,r0
000074  7360              STRB     r0,[r4,#0xd]
;;;1155     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
000076  280a              CMP      r0,#0xa
000078  d204              BCS      |L21.132|
00007a  f44f717a          MOV      r1,#0x3e8
00007e  fb10f001          SMULBB   r0,r0,r1
000082  e001              B        |L21.136|
                  |L21.132|
000084  f2427010          MOV      r0,#0x2710
                  |L21.136|
000088  b280              UXTH     r0,r0
;;;1156     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00008a  f44f71fa          MOV      r1,#0x1f4
00008e  f20010f3          ADD      r0,r0,#0x1f3
000092  fbb0f0f1          UDIV     r0,r0,r1
000096  8360              STRH     r0,[r4,#0x1a]
;;;1157     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
;;;1158     return result;
000098  4628              MOV      r0,r5
;;;1159   }
00009a  bdf8              POP      {r3-r7,pc}
;;;1160   
                          ENDP

                  |L21.156|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_recv||, CODE, READONLY, ALIGN=2

                  dhcp_recv PROC
;;;1536   static void
;;;1537   dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1538   {
;;;1539     struct netif *netif = (struct netif *)arg;
;;;1540     struct dhcp *dhcp = netif->dhcp;
;;;1541     struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
000004  6a44              LDR      r4,[r0,#0x24]
000006  4605              MOV      r5,r0                 ;1538
;;;1542     u8_t msg_type;
;;;1543     u8_t i;
;;;1544     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void*)p,
;;;1545       ip4_addr1_16(addr), ip4_addr2_16(addr), ip4_addr3_16(addr), ip4_addr4_16(addr), port));
;;;1546     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
;;;1547     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
;;;1548     /* prevent warnings about unused arguments */
;;;1549     LWIP_UNUSED_ARG(pcb);
;;;1550     LWIP_UNUSED_ARG(addr);
;;;1551     LWIP_UNUSED_ARG(port);
;;;1552   
;;;1553     LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
000008  6856              LDR      r6,[r2,#4]
00000a  68a0              LDR      r0,[r4,#8]            ;1538
00000c  4617              MOV      r7,r2                 ;1538
00000e  b110              CBZ      r0,|L22.22|
000010  a040              ADR      r0,|L22.276|
000012  f7fffffe          BL       __2printf
                  |L22.22|
;;;1554   
;;;1555     if (p->len < DHCP_MIN_REPLY_LEN) {
000016  8978              LDRH     r0,[r7,#0xa]
000018  f04f0800          MOV      r8,#0
00001c  282c              CMP      r0,#0x2c
00001e  d372              BCC      |L22.262|
;;;1556       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
;;;1557       goto free_pbuf_and_return;
;;;1558     }
;;;1559   
;;;1560     if (reply_msg->op != DHCP_BOOTREPLY) {
000020  7830              LDRB     r0,[r6,#0]
000022  2802              CMP      r0,#2
000024  d16f              BNE      |L22.262|
;;;1561       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
;;;1562       goto free_pbuf_and_return;
;;;1563     }
;;;1564     /* iterate through hardware address and match against DHCP message */
;;;1565     for (i = 0; i < netif->hwaddr_len; i++) {
000026  2000              MOVS     r0,#0
000028  f895102a          LDRB     r1,[r5,#0x2a]
00002c  e008              B        |L22.64|
                  |L22.46|
;;;1566       if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
00002e  182a              ADDS     r2,r5,r0
000030  1833              ADDS     r3,r6,r0
000032  f892202b          LDRB     r2,[r2,#0x2b]
000036  7f1b              LDRB     r3,[r3,#0x1c]
000038  429a              CMP      r2,r3
00003a  d164              BNE      |L22.262|
00003c  1c40              ADDS     r0,r0,#1
00003e  b2c0              UXTB     r0,r0                 ;1565
                  |L22.64|
000040  4281              CMP      r1,r0                 ;1565
000042  d8f4              BHI      |L22.46|
;;;1567         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
;;;1568           ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
;;;1569           (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
;;;1570         goto free_pbuf_and_return;
;;;1571       }
;;;1572     }
;;;1573     /* match transaction ID against what we expected */
;;;1574     if (ntohl(reply_msg->xid) != dhcp->xid) {
000044  6870              LDR      r0,[r6,#4]
000046  f7fffffe          BL       lwip_ntohl
00004a  6821              LDR      r1,[r4,#0]
00004c  4288              CMP      r0,r1
00004e  d15a              BNE      |L22.262|
;;;1575       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
;;;1576         ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
;;;1577       goto free_pbuf_and_return;
;;;1578     }
;;;1579     /* option fields could be unfold? */
;;;1580     if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
000050  4639              MOV      r1,r7
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dhcp_parse_reply
000058  bb00              CBNZ     r0,|L22.156|
;;;1581       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;1582         ("problem unfolding DHCP message - too short on memory?\n"));
;;;1583       goto free_pbuf_and_return;
;;;1584     }
;;;1585   
;;;1586     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
;;;1587     /* obtain pointer to DHCP message type */
;;;1588     if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
00005a  4933              LDR      r1,|L22.296|
00005c  7848              LDRB     r0,[r1,#1]  ; dhcp_rx_options_given
00005e  b1e8              CBZ      r0,|L22.156|
;;;1589       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
;;;1590       goto free_pbuf_and_return;
;;;1591     }
;;;1592   
;;;1593     /* read DHCP message type */
;;;1594     msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
000060  f1a10228          SUB      r2,r1,#0x28
000064  7910              LDRB     r0,[r2,#4]  ; dhcp_rx_options_val
;;;1595     /* message type is DHCP ACK? */
;;;1596     if (msg_type == DHCP_ACK) {
000066  2805              CMP      r0,#5
000068  d004              BEQ      |L22.116|
;;;1597       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
;;;1598       /* in requesting state? */
;;;1599       if (dhcp->state == DHCP_REQUESTING) {
;;;1600         dhcp_handle_ack(netif);
;;;1601   #if DHCP_DOES_ARP_CHECK
;;;1602         /* check if the acknowledged lease address is already in use */
;;;1603         dhcp_check(netif);
;;;1604   #else
;;;1605         /* bind interface to the acknowledged lease address */
;;;1606         dhcp_bind(netif);
;;;1607   #endif
;;;1608       }
;;;1609       /* already bound to the given lease address? */
;;;1610       else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
;;;1611         dhcp_bind(netif);
;;;1612       }
;;;1613     }
;;;1614     /* received a DHCP_NAK in appropriate state? */
;;;1615     else if ((msg_type == DHCP_NAK) &&
00006a  2806              CMP      r0,#6
00006c  d017              BEQ      |L22.158|
;;;1616       ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
;;;1617        (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
;;;1618       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
;;;1619       dhcp_handle_nak(netif);
;;;1620     }
;;;1621     /* received a DHCP_OFFER in DHCP_SELECTING state? */
;;;1622     else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
00006e  2802              CMP      r0,#2
000070  d036              BEQ      |L22.224|
000072  e048              B        |L22.262|
                  |L22.116|
000074  7b20              LDRB     r0,[r4,#0xc]          ;1599
000076  2801              CMP      r0,#1                 ;1599
000078  d006              BEQ      |L22.136|
00007a  2803              CMP      r0,#3                 ;1610
00007c  d00b              BEQ      |L22.150|
00007e  2804              CMP      r0,#4                 ;1610
000080  d009              BEQ      |L22.150|
000082  2805              CMP      r0,#5                 ;1610
000084  d007              BEQ      |L22.150|
000086  e03e              B        |L22.262|
                  |L22.136|
000088  4628              MOV      r0,r5                 ;1600
00008a  f7fffffe          BL       dhcp_handle_ack
00008e  4628              MOV      r0,r5                 ;1603
000090  f7fffffe          BL       dhcp_check
000094  e037              B        |L22.262|
                  |L22.150|
000096  4628              MOV      r0,r5                 ;1611
000098  f7fffffe          BL       dhcp_bind
                  |L22.156|
00009c  e033              B        |L22.262|
                  |L22.158|
00009e  7b20              LDRB     r0,[r4,#0xc]          ;1616
0000a0  2803              CMP      r0,#3                 ;1616
0000a2  d005              BEQ      |L22.176|
0000a4  2801              CMP      r0,#1                 ;1616
0000a6  d003              BEQ      |L22.176|
0000a8  2804              CMP      r0,#4                 ;1617
0000aa  d001              BEQ      |L22.176|
0000ac  2805              CMP      r0,#5                 ;1617
0000ae  d12a              BNE      |L22.262|
                  |L22.176|
0000b0  4628              MOV      r0,r5                 ;1617
0000b2  6a6e              LDR      r6,[r5,#0x24]         ;1617
0000b4  f7fffffe          BL       netif_set_down
0000b8  491c              LDR      r1,|L22.300|
0000ba  4628              MOV      r0,r5                 ;1617
0000bc  f7fffffe          BL       netif_set_ipaddr
0000c0  491a              LDR      r1,|L22.300|
0000c2  4628              MOV      r0,r5                 ;1617
0000c4  f7fffffe          BL       netif_set_gw
0000c8  4918              LDR      r1,|L22.300|
0000ca  4628              MOV      r0,r5                 ;1617
0000cc  f7fffffe          BL       netif_set_netmask
0000d0  210c              MOVS     r1,#0xc               ;1617
0000d2  4630              MOV      r0,r6                 ;1617
0000d4  f7fffffe          BL       dhcp_set_state
0000d8  4628              MOV      r0,r5                 ;1617
0000da  f7fffffe          BL       dhcp_discover
0000de  e012              B        |L22.262|
                  |L22.224|
0000e0  7b20              LDRB     r0,[r4,#0xc]
0000e2  2806              CMP      r0,#6
0000e4  d10f              BNE      |L22.262|
;;;1623       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
;;;1624       dhcp->request_timeout = 0;
0000e6  f8a4801a          STRH     r8,[r4,#0x1a]
;;;1625       /* remember offered lease */
;;;1626       dhcp_handle_offer(netif);
0000ea  462e              MOV      r6,r5
0000ec  6a6d              LDR      r5,[r5,#0x24]
0000ee  7888              LDRB     r0,[r1,#2]  ; dhcp_rx_options_given
0000f0  b148              CBZ      r0,|L22.262|
0000f2  6890              LDR      r0,[r2,#8]  ; dhcp_rx_options_val
0000f4  f7fffffe          BL       lwip_htonl
0000f8  6228              STR      r0,[r5,#0x20]
0000fa  68a8              LDR      r0,[r5,#8]
0000fc  6900              LDR      r0,[r0,#0x10]
0000fe  6268              STR      r0,[r5,#0x24]
000100  4630              MOV      r0,r6
000102  f7fffffe          BL       dhcp_select
                  |L22.262|
;;;1627     }
;;;1628   free_pbuf_and_return:
;;;1629     dhcp->msg_in = NULL;
;;;1630     pbuf_free(p);
000106  4638              MOV      r0,r7
000108  f8c48008          STR      r8,[r4,#8]
00010c  e8bd41f0          POP      {r4-r8,lr}
000110  f7ffbffe          B.W      pbuf_free
;;;1631   }
;;;1632   
                          ENDP

                  |L22.276|
000114  7265706c          DCB      "reply wasn't freed",0
000118  79207761
00011c  736e2774
000120  20667265
000124  656400  
000127  00                DCB      0
                  |L22.296|
                          DCD      ||.bss||+0x28
                  |L22.300|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_release||, CODE, READONLY, ALIGN=2

                  dhcp_release PROC
;;;1167   err_t
;;;1168   dhcp_release(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1169   {
;;;1170     struct dhcp *dhcp = netif->dhcp;
;;;1171     err_t result;
;;;1172     u16_t msecs;
;;;1173     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
;;;1174   
;;;1175     /* idle DHCP client */
;;;1176     dhcp_set_state(dhcp, DHCP_OFF);
000002  6a44              LDR      r4,[r0,#0x24]
000004  4605              MOV      r5,r0                 ;1169
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dhcp_set_state
;;;1177     /* clean old DHCP offer */
;;;1178     ip_addr_set_zero(&dhcp->server_ip_addr);
00000e  2000              MOVS     r0,#0
;;;1179     ip_addr_set_zero(&dhcp->offered_ip_addr);
000010  6220              STR      r0,[r4,#0x20]
;;;1180     ip_addr_set_zero(&dhcp->offered_sn_mask);
000012  6260              STR      r0,[r4,#0x24]
;;;1181     ip_addr_set_zero(&dhcp->offered_gw_addr);
000014  62a0              STR      r0,[r4,#0x28]
;;;1182   #if LWIP_DHCP_BOOTP_FILE
;;;1183     ip_addr_set_zero(&dhcp->offered_si_addr);
;;;1184   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1185     dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
000016  62e0              STR      r0,[r4,#0x2c]
000018  63a0              STR      r0,[r4,#0x38]
00001a  6360              STR      r0,[r4,#0x34]
;;;1186     
;;;1187     /* create and initialize the DHCP message header */
;;;1188     result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
00001c  6320              STR      r0,[r4,#0x30]
00001e  2207              MOVS     r2,#7
000020  4621              MOV      r1,r4
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       dhcp_create_msg
000028  0006              MOVS     r6,r0
;;;1189     if (result == ERR_OK) {
00002a  d113              BNE      |L23.84|
;;;1190       dhcp_option_trailer(dhcp);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       dhcp_option_trailer
;;;1191   
;;;1192       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000032  8b20              LDRH     r0,[r4,#0x18]
000034  30f0              ADDS     r0,r0,#0xf0
000036  b281              UXTH     r1,r0
000038  6920              LDR      r0,[r4,#0x10]
00003a  f7fffffe          BL       pbuf_realloc
;;;1193   
;;;1194       udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
00003e  9500              STR      r5,[sp,#0]
000040  2343              MOVS     r3,#0x43
000042  f1040220          ADD      r2,r4,#0x20
000046  6921              LDR      r1,[r4,#0x10]
000048  6860              LDR      r0,[r4,#4]
00004a  f7fffffe          BL       udp_sendto_if
;;;1195       dhcp_delete_msg(dhcp);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       dhcp_delete_msg
                  |L23.84|
;;;1196       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
;;;1197     } else {
;;;1198       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
;;;1199     }
;;;1200     dhcp->tries++;
000054  7b60              LDRB     r0,[r4,#0xd]
000056  1c40              ADDS     r0,r0,#1
000058  b2c0              UXTB     r0,r0
00005a  7360              STRB     r0,[r4,#0xd]
;;;1201     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
00005c  280a              CMP      r0,#0xa
00005e  d204              BCS      |L23.106|
000060  f44f717a          MOV      r1,#0x3e8
000064  fb10f001          SMULBB   r0,r0,r1
000068  e001              B        |L23.110|
                  |L23.106|
00006a  f2427010          MOV      r0,#0x2710
                  |L23.110|
00006e  b280              UXTH     r0,r0
;;;1202     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000070  f44f71fa          MOV      r1,#0x1f4
000074  f20010f3          ADD      r0,r0,#0x1f3
000078  fbb0f0f1          UDIV     r0,r0,r1
00007c  8360              STRH     r0,[r4,#0x1a]
;;;1203     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
;;;1204     /* bring the interface down */
;;;1205     netif_set_down(netif);
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       netif_set_down
;;;1206     /* remove IP address from interface */
;;;1207     netif_set_ipaddr(netif, IP_ADDR_ANY);
000084  4906              LDR      r1,|L23.160|
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       netif_set_ipaddr
;;;1208     netif_set_gw(netif, IP_ADDR_ANY);
00008c  4904              LDR      r1,|L23.160|
00008e  4628              MOV      r0,r5
000090  f7fffffe          BL       netif_set_gw
;;;1209     netif_set_netmask(netif, IP_ADDR_ANY);
000094  4902              LDR      r1,|L23.160|
000096  4628              MOV      r0,r5
000098  f7fffffe          BL       netif_set_netmask
;;;1210     
;;;1211     return result;
00009c  4630              MOV      r0,r6
;;;1212   }
00009e  bdf8              POP      {r3-r7,pc}
;;;1213   
                          ENDP

                  |L23.160|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_renew||, CODE, READONLY, ALIGN=1

                  dhcp_renew PROC
;;;1021   err_t
;;;1022   dhcp_renew(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1023   {
;;;1024     struct dhcp *dhcp = netif->dhcp;
;;;1025     err_t result;
;;;1026     u16_t msecs;
;;;1027     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
;;;1028     dhcp_set_state(dhcp, DHCP_RENEWING);
000002  6a44              LDR      r4,[r0,#0x24]
000004  4605              MOV      r5,r0                 ;1023
000006  2105              MOVS     r1,#5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dhcp_set_state
;;;1029   
;;;1030     /* create and initialize the DHCP message header */
;;;1031     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
00000e  2203              MOVS     r2,#3
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       dhcp_create_msg
000018  0006              MOVS     r6,r0
;;;1032     if (result == ERR_OK) {
00001a  d11c              BNE      |L24.86|
;;;1033       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
00001c  2202              MOVS     r2,#2
00001e  2139              MOVS     r1,#0x39
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       dhcp_option
;;;1034       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000026  8d29              LDRH     r1,[r5,#0x28]
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       dhcp_option_short
;;;1035   
;;;1036   #if 0
;;;1037       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;1038       dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;1039   #endif
;;;1040   
;;;1041   #if 0
;;;1042       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1043       dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;1044   #endif
;;;1045   
;;;1046   #if LWIP_NETIF_HOSTNAME
;;;1047       dhcp_option_hostname(dhcp, netif);
;;;1048   #endif /* LWIP_NETIF_HOSTNAME */
;;;1049   
;;;1050       /* append DHCP message trailer */
;;;1051       dhcp_option_trailer(dhcp);
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       dhcp_option_trailer
;;;1052   
;;;1053       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000034  8b20              LDRH     r0,[r4,#0x18]
000036  30f0              ADDS     r0,r0,#0xf0
000038  b281              UXTH     r1,r0
00003a  6920              LDR      r0,[r4,#0x10]
00003c  f7fffffe          BL       pbuf_realloc
;;;1054   
;;;1055       udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
000040  9500              STR      r5,[sp,#0]
000042  2343              MOVS     r3,#0x43
000044  f1040220          ADD      r2,r4,#0x20
000048  6921              LDR      r1,[r4,#0x10]
00004a  6860              LDR      r0,[r4,#4]
00004c  f7fffffe          BL       udp_sendto_if
;;;1056       dhcp_delete_msg(dhcp);
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       dhcp_delete_msg
                  |L24.86|
;;;1057   
;;;1058       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
;;;1059     } else {
;;;1060       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
;;;1061     }
;;;1062     dhcp->tries++;
000056  7b60              LDRB     r0,[r4,#0xd]
000058  1c40              ADDS     r0,r0,#1
00005a  b2c0              UXTB     r0,r0
00005c  7360              STRB     r0,[r4,#0xd]
;;;1063     /* back-off on retries, but to a maximum of 20 seconds */
;;;1064     msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
00005e  280a              CMP      r0,#0xa
000060  d204              BCS      |L24.108|
000062  f44f61fa          MOV      r1,#0x7d0
000066  fb10f001          SMULBB   r0,r0,r1
00006a  e001              B        |L24.112|
                  |L24.108|
00006c  f6446020          MOV      r0,#0x4e20
                  |L24.112|
000070  b280              UXTH     r0,r0
;;;1065     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000072  f44f71fa          MOV      r1,#0x1f4
000076  f20010f3          ADD      r0,r0,#0x1f3
00007a  fbb0f0f1          UDIV     r0,r0,r1
00007e  8360              STRH     r0,[r4,#0x1a]
;;;1066     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
;;;1067     return result;
000080  4630              MOV      r0,r6
;;;1068   }
000082  bdf8              POP      {r3-r7,pc}
;;;1069   
                          ENDP


                          AREA ||i.dhcp_select||, CODE, READONLY, ALIGN=2

                  dhcp_select PROC
;;;282    static err_t
;;;283    dhcp_select(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;284    {
;;;285      struct dhcp *dhcp = netif->dhcp;
;;;286      err_t result;
;;;287      u16_t msecs;
;;;288    
;;;289      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;290      dhcp_set_state(dhcp, DHCP_REQUESTING);
000002  6a44              LDR      r4,[r0,#0x24]
000004  4606              MOV      r6,r0                 ;284
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dhcp_set_state
;;;291    
;;;292      /* create and initialize the DHCP message header */
;;;293      result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
00000e  2203              MOVS     r2,#3
000010  4621              MOV      r1,r4
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       dhcp_create_msg
000018  0005              MOVS     r5,r0
;;;294      if (result == ERR_OK) {
00001a  d148              BNE      |L25.174|
;;;295        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
00001c  2202              MOVS     r2,#2
00001e  2139              MOVS     r1,#0x39
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       dhcp_option
;;;296        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000026  8d31              LDRH     r1,[r6,#0x28]
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       dhcp_option_short
;;;297    
;;;298        /* MUST request the offered IP address */
;;;299        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
00002e  2204              MOVS     r2,#4
000030  2132              MOVS     r1,#0x32
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       dhcp_option
;;;300        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000038  6a60              LDR      r0,[r4,#0x24]
00003a  f7fffffe          BL       lwip_ntohl
00003e  4601              MOV      r1,r0
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       dhcp_option_long
;;;301    
;;;302        dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
000046  2204              MOVS     r2,#4
000048  2136              MOVS     r1,#0x36
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       dhcp_option
;;;303        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
000050  6a20              LDR      r0,[r4,#0x20]
000052  f7fffffe          BL       lwip_ntohl
000056  4601              MOV      r1,r0
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       dhcp_option_long
;;;304    
;;;305        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
00005e  2204              MOVS     r2,#4
000060  2137              MOVS     r1,#0x37
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       dhcp_option
;;;306        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
000068  2101              MOVS     r1,#1
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       dhcp_option_byte
;;;307        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
000070  2103              MOVS     r1,#3
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       dhcp_option_byte
;;;308        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
000078  211c              MOVS     r1,#0x1c
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       dhcp_option_byte
;;;309        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
000080  2106              MOVS     r1,#6
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       dhcp_option_byte
;;;310    
;;;311    #if LWIP_NETIF_HOSTNAME
;;;312        dhcp_option_hostname(dhcp, netif);
;;;313    #endif /* LWIP_NETIF_HOSTNAME */
;;;314    
;;;315        dhcp_option_trailer(dhcp);
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       dhcp_option_trailer
;;;316        /* shrink the pbuf to the actual content length */
;;;317        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
00008e  8b20              LDRH     r0,[r4,#0x18]
000090  30f0              ADDS     r0,r0,#0xf0
000092  b281              UXTH     r1,r0
000094  6920              LDR      r0,[r4,#0x10]
000096  f7fffffe          BL       pbuf_realloc
;;;318    
;;;319        /* send broadcast to any DHCP server */
;;;320        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
00009a  9600              STR      r6,[sp,#0]
00009c  2343              MOVS     r3,#0x43
00009e  4a11              LDR      r2,|L25.228|
0000a0  6921              LDR      r1,[r4,#0x10]
0000a2  6860              LDR      r0,[r4,#4]
0000a4  f7fffffe          BL       udp_sendto_if
;;;321        dhcp_delete_msg(dhcp);
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       dhcp_delete_msg
                  |L25.174|
;;;322        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
;;;323      } else {
;;;324        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
;;;325      }
;;;326      dhcp->tries++;
0000ae  7b60              LDRB     r0,[r4,#0xd]
0000b0  1c40              ADDS     r0,r0,#1
0000b2  b2c1              UXTB     r1,r0
0000b4  7361              STRB     r1,[r4,#0xd]
;;;327      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
0000b6  2906              CMP      r1,#6
0000b8  d202              BCS      |L25.192|
0000ba  2001              MOVS     r0,#1
0000bc  4088              LSLS     r0,r0,r1
0000be  e000              B        |L25.194|
                  |L25.192|
0000c0  203c              MOVS     r0,#0x3c
                  |L25.194|
0000c2  eb000140          ADD      r1,r0,r0,LSL #1
0000c6  ebc110c0          RSB      r0,r1,r0,LSL #7
0000ca  f64f71ff          MOV      r1,#0xffff
0000ce  ea0100c0          AND      r0,r1,r0,LSL #3
;;;328      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000d2  f44f71fa          MOV      r1,#0x1f4
0000d6  f20010f3          ADD      r0,r0,#0x1f3
0000da  fbb0f0f1          UDIV     r0,r0,r1
0000de  8360              STRH     r0,[r4,#0x1a]
;;;329      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
;;;330      return result;
0000e0  4628              MOV      r0,r5
;;;331    }
0000e2  bdf8              POP      {r3-r7,pc}
;;;332    
                          ENDP

                  |L25.228|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_set_state||, CODE, READONLY, ALIGN=1

                  dhcp_set_state PROC
;;;1252   static void
;;;1253   dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
000000  7b02              LDRB     r2,[r0,#0xc]
;;;1254   {
;;;1255     if (new_state != dhcp->state) {
000002  428a              CMP      r2,r1
000004  d003              BEQ      |L26.14|
;;;1256       dhcp->state = new_state;
000006  7301              STRB     r1,[r0,#0xc]
;;;1257       dhcp->tries = 0;
000008  2100              MOVS     r1,#0
00000a  7341              STRB     r1,[r0,#0xd]
;;;1258       dhcp->request_timeout = 0;
00000c  8341              STRH     r1,[r0,#0x1a]
                  |L26.14|
;;;1259     }
;;;1260   }
00000e  4770              BX       lr
;;;1261   
                          ENDP


                          AREA ||i.dhcp_set_struct||, CODE, READONLY, ALIGN=2

                  dhcp_set_struct PROC
;;;586    void
;;;587    dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
000000  b570              PUSH     {r4-r6,lr}
;;;588    {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d102              BNE      |L27.14|
;;;589      LWIP_ASSERT("netif != NULL", netif != NULL);
000008  a008              ADR      r0,|L27.44|
00000a  f7fffffe          BL       __2printf
                  |L27.14|
;;;590      LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
00000e  b915              CBNZ     r5,|L27.22|
000010  a00a              ADR      r0,|L27.60|
000012  f7fffffe          BL       __2printf
                  |L27.22|
;;;591      LWIP_ASSERT("netif already has a struct dhcp set", netif->dhcp == NULL);
000016  6a60              LDR      r0,[r4,#0x24]
000018  b110              CBZ      r0,|L27.32|
00001a  a00c              ADR      r0,|L27.76|
00001c  f7fffffe          BL       __2printf
                  |L27.32|
;;;592    
;;;593      /* clear data structure */
;;;594      memset(dhcp, 0, sizeof(struct dhcp));
000020  213c              MOVS     r1,#0x3c
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       __aeabi_memclr4
;;;595      /* dhcp_set_state(&dhcp, DHCP_OFF); */
;;;596      netif->dhcp = dhcp;
000028  6265              STR      r5,[r4,#0x24]
;;;597    }
00002a  bd70              POP      {r4-r6,pc}
;;;598    
                          ENDP

                  |L27.44|
00002c  6e657469          DCB      "netif != NULL",0
000030  6620213d
000034  204e554c
000038  4c00    
00003a  00                DCB      0
00003b  00                DCB      0
                  |L27.60|
00003c  64686370          DCB      "dhcp != NULL",0
000040  20213d20
000044  4e554c4c
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L27.76|
00004c  6e657469          DCB      "netif already has a struct dhcp set",0
000050  6620616c
000054  72656164
000058  79206861
00005c  73206120
000060  73747275
000064  63742064
000068  68637020
00006c  73657400

                          AREA ||i.dhcp_start||, CODE, READONLY, ALIGN=2

                  dhcp_start PROC
;;;628    err_t
;;;629    dhcp_start(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;630    {
000002  0005              MOVS     r5,r0
;;;631      struct dhcp *dhcp;
;;;632      err_t result = ERR_OK;
;;;633    
;;;634      LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
000004  f06f060d          MVN      r6,#0xd
000008  d040              BEQ      |L28.140|
;;;635      dhcp = netif->dhcp;
;;;636      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;637      /* Remove the flag that says this netif is handled by DHCP,
;;;638         it is set when we succeeded starting. */
;;;639      netif->flags &= ~NETIF_FLAG_DHCP;
00000a  f8950031          LDRB     r0,[r5,#0x31]
00000e  6a6c              LDR      r4,[r5,#0x24]
000010  f0200008          BIC      r0,r0,#8
000014  f8850031          STRB     r0,[r5,#0x31]
;;;640    
;;;641      /* check hwtype of the netif */
;;;642      if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
000018  0680              LSLS     r0,r0,#26
00001a  d542              BPL      |L28.162|
;;;643        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
;;;644        return ERR_ARG;
;;;645      }
;;;646    
;;;647      /* check MTU of the netif */
;;;648      if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
00001c  8d28              LDRH     r0,[r5,#0x28]
;;;649        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
;;;650        return ERR_MEM;
00001e  1136              ASRS     r6,r6,#4
000020  f5b07f10          CMP      r0,#0x240             ;648
000024  d33d              BCC      |L28.162|
;;;651      }
;;;652    
;;;653      /* no DHCP client attached yet? */
;;;654      if (dhcp == NULL) {
000026  2c00              CMP      r4,#0
000028  d034              BEQ      |L28.148|
;;;655        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
;;;656        dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
;;;657        if (dhcp == NULL) {
;;;658          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
;;;659          return ERR_MEM;
;;;660        }
;;;661        /* store this dhcp client in the netif */
;;;662        netif->dhcp = dhcp;
;;;663        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
;;;664      /* already has DHCP client attached */
;;;665      } else {
;;;666        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
;;;667        if (dhcp->pcb != NULL) {
00002a  6860              LDR      r0,[r4,#4]
00002c  b108              CBZ      r0,|L28.50|
;;;668          udp_remove(dhcp->pcb);
00002e  f7fffffe          BL       udp_remove
                  |L28.50|
;;;669        }
;;;670        LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
000032  6920              LDR      r0,[r4,#0x10]
000034  b110              CBZ      r0,|L28.60|
000036  a01f              ADR      r0,|L28.180|
000038  f7fffffe          BL       __2printf
                  |L28.60|
;;;671        LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
00003c  68a0              LDR      r0,[r4,#8]
00003e  b110              CBZ      r0,|L28.70|
000040  a022              ADR      r0,|L28.204|
000042  f7fffffe          BL       __2printf
                  |L28.70|
;;;672      }
;;;673        
;;;674      /* clear data structure */
;;;675      memset(dhcp, 0, sizeof(struct dhcp));
000046  213c              MOVS     r1,#0x3c
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       __aeabi_memclr4
;;;676      /* dhcp_set_state(&dhcp, DHCP_OFF); */
;;;677      /* allocate UDP PCB */
;;;678      dhcp->pcb = udp_new();
00004e  f7fffffe          BL       udp_new
;;;679      if (dhcp->pcb == NULL) {
000052  6060              STR      r0,[r4,#4]
000054  b328              CBZ      r0,|L28.162|
;;;680        LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
;;;681        return ERR_MEM;
;;;682      }
;;;683      ip_set_option(dhcp->pcb, SOF_BROADCAST);
000056  7a01              LDRB     r1,[r0,#8]
;;;684      /* set up local and remote port for the pcb */
;;;685      udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
000058  2244              MOVS     r2,#0x44
00005a  f0410120          ORR      r1,r1,#0x20           ;683
00005e  7201              STRB     r1,[r0,#8]            ;683
000060  491f              LDR      r1,|L28.224|
000062  6860              LDR      r0,[r4,#4]
000064  f7fffffe          BL       udp_bind
;;;686      udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
000068  2243              MOVS     r2,#0x43
00006a  491d              LDR      r1,|L28.224|
00006c  6860              LDR      r0,[r4,#4]
00006e  f7fffffe          BL       udp_connect
;;;687      /* set up the recv callback and argument */
;;;688      udp_recv(dhcp->pcb, dhcp_recv, netif);
000072  462a              MOV      r2,r5
000074  491b              LDR      r1,|L28.228|
000076  6860              LDR      r0,[r4,#4]
000078  f7fffffe          BL       udp_recv
;;;689      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
;;;690      /* (re)start the DHCP negotiation */
;;;691      result = dhcp_discover(netif);
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       dhcp_discover
;;;692      if (result != ERR_OK) {
000082  b180              CBZ      r0,|L28.166|
;;;693        /* free resources allocated above */
;;;694        dhcp_stop(netif);
000084  4628              MOV      r0,r5
000086  f7fffffe          BL       dhcp_stop
;;;695        return ERR_MEM;
00008a  e00a              B        |L28.162|
                  |L28.140|
00008c  a016              ADR      r0,|L28.232|
00008e  f7fffffe          BL       __2printf
000092  e006              B        |L28.162|
                  |L28.148|
000094  203c              MOVS     r0,#0x3c              ;656
000096  f7fffffe          BL       mem_malloc
00009a  0004              MOVS     r4,r0                 ;656
00009c  d001              BEQ      |L28.162|
00009e  626c              STR      r4,[r5,#0x24]         ;662
0000a0  e7d1              B        |L28.70|
                  |L28.162|
0000a2  4630              MOV      r0,r6                 ;681
;;;696      }
;;;697      /* Set the flag that says this netif is handled by DHCP. */
;;;698      netif->flags |= NETIF_FLAG_DHCP;
;;;699      return result;
;;;700    }
0000a4  bd70              POP      {r4-r6,pc}
                  |L28.166|
0000a6  f8151f31          LDRB     r1,[r5,#0x31]!        ;698
0000aa  f0410108          ORR      r1,r1,#8              ;698
0000ae  7029              STRB     r1,[r5,#0]            ;698
0000b0  bd70              POP      {r4-r6,pc}
;;;701    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L28.180|
0000b4  70627566          DCB      "pbuf p_out wasn't freed",0
0000b8  20705f6f
0000bc  75742077
0000c0  61736e27
0000c4  74206672
0000c8  65656400
                  |L28.204|
0000cc  7265706c          DCB      "reply wasn't freed",0
0000d0  79207761
0000d4  736e2774
0000d8  20667265
0000dc  656400  
0000df  00                DCB      0
                  |L28.224|
                          DCD      ip_addr_any
                  |L28.228|
                          DCD      dhcp_recv
                  |L28.232|
0000e8  6e657469          DCB      "netif != NULL",0
0000ec  6620213d
0000f0  204e554c
0000f4  4c00    
0000f6  00                DCB      0
0000f7  00                DCB      0

                          AREA ||i.dhcp_stop||, CODE, READONLY, ALIGN=2

                  dhcp_stop PROC
;;;1219   void
;;;1220   dhcp_stop(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;1221   {
000002  b1c0              CBZ      r0,|L29.54|
;;;1222     struct dhcp *dhcp;
;;;1223     LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
;;;1224     dhcp = netif->dhcp;
000004  f8504f24          LDR      r4,[r0,#0x24]!
;;;1225     /* Remove the flag that says this netif is handled by DHCP. */
;;;1226     netif->flags &= ~NETIF_FLAG_DHCP;
000008  7b41              LDRB     r1,[r0,#0xd]
;;;1227   
;;;1228     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
;;;1229     /* netif is DHCP configured? */
;;;1230     if (dhcp != NULL) {
00000a  2c00              CMP      r4,#0
00000c  f0210108          BIC      r1,r1,#8              ;1226
000010  7341              STRB     r1,[r0,#0xd]          ;1226
000012  d015              BEQ      |L29.64|
;;;1231   #if LWIP_DHCP_AUTOIP_COOP
;;;1232       if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;1233         autoip_stop(netif);
;;;1234         dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;1235       }
;;;1236   #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1237   
;;;1238       if (dhcp->pcb != NULL) {
000014  6860              LDR      r0,[r4,#4]
000016  b118              CBZ      r0,|L29.32|
;;;1239         udp_remove(dhcp->pcb);
000018  f7fffffe          BL       udp_remove
;;;1240         dhcp->pcb = NULL;
00001c  2000              MOVS     r0,#0
00001e  6060              STR      r0,[r4,#4]
                  |L29.32|
;;;1241       }
;;;1242       LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
000020  68a0              LDR      r0,[r4,#8]
000022  b110              CBZ      r0,|L29.42|
000024  a007              ADR      r0,|L29.68|
000026  f7fffffe          BL       __2printf
                  |L29.42|
;;;1243       dhcp_set_state(dhcp, DHCP_OFF);
00002a  4620              MOV      r0,r4
00002c  e8bd4010          POP      {r4,lr}
000030  2100              MOVS     r1,#0
000032  f7ffbffe          B.W      dhcp_set_state
                  |L29.54|
000036  e8bd4010          POP      {r4,lr}               ;1223
00003a  a007              ADR      r0,|L29.88|
00003c  f7ffbffe          B.W      __2printf
                  |L29.64|
;;;1244     }
;;;1245   }
000040  bd10              POP      {r4,pc}
;;;1246   
                          ENDP

000042  0000              DCW      0x0000
                  |L29.68|
000044  7265706c          DCB      "reply wasn't freed",0
000048  79207761
00004c  736e2774
000050  20667265
000054  656400  
000057  00                DCB      0
                  |L29.88|
000058  64686370          DCB      "dhcp_stop: netif != NULL",0
00005c  5f73746f
000060  703a206e
000064  65746966
000068  20213d20
00006c  4e554c4c
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.dhcp_timeout||, CODE, READONLY, ALIGN=1

                  dhcp_timeout PROC
;;;401    static void
;;;402    dhcp_timeout(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;403    {
;;;404      struct dhcp *dhcp = netif->dhcp;
;;;405      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
;;;406      /* back-off period has passed, or server selection timed out */
;;;407      if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
000002  6a42              LDR      r2,[r0,#0x24]
000004  4604              MOV      r4,r0                 ;403
000006  7b11              LDRB     r1,[r2,#0xc]
000008  290c              CMP      r1,#0xc
00000a  d013              BEQ      |L30.52|
00000c  2906              CMP      r1,#6
00000e  d011              BEQ      |L30.52|
;;;408        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
;;;409        dhcp_discover(netif);
;;;410      /* receiving the requested lease timed out */
;;;411      } else if (dhcp->state == DHCP_REQUESTING) {
000010  2901              CMP      r1,#1
000012  d013              BEQ      |L30.60|
;;;412        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
;;;413        if (dhcp->tries <= 5) {
;;;414          dhcp_select(netif);
;;;415        } else {
;;;416          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
;;;417          dhcp_release(netif);
;;;418          dhcp_discover(netif);
;;;419        }
;;;420    #if DHCP_DOES_ARP_CHECK
;;;421      /* received no ARP reply for the offered address (which is good) */
;;;422      } else if (dhcp->state == DHCP_CHECKING) {
000014  2908              CMP      r1,#8
000016  d01e              BEQ      |L30.86|
;;;423        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
;;;424        if (dhcp->tries <= 1) {
;;;425          dhcp_check(netif);
;;;426        /* no ARP replies on the offered address,
;;;427           looks like the IP address is indeed free */
;;;428        } else {
;;;429          /* bind the interface to the offered address */
;;;430          dhcp_bind(netif);
;;;431        }
;;;432    #endif /* DHCP_DOES_ARP_CHECK */
;;;433      }
;;;434      /* did not get response to renew request? */
;;;435      else if (dhcp->state == DHCP_RENEWING) {
000018  2905              CMP      r1,#5
00001a  d028              BEQ      |L30.110|
;;;436        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
;;;437        /* just retry renewal */
;;;438        /* note that the rebind timer will eventually time-out if renew does not work */
;;;439        dhcp_renew(netif);
;;;440      /* did not get response to rebind request? */
;;;441      } else if (dhcp->state == DHCP_REBINDING) {
00001c  2904              CMP      r1,#4
00001e  d02a              BEQ      |L30.118|
;;;442        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
;;;443        if (dhcp->tries <= 8) {
;;;444          dhcp_rebind(netif);
;;;445        } else {
;;;446          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
;;;447          dhcp_release(netif);
;;;448          dhcp_discover(netif);
;;;449        }
;;;450      } else if (dhcp->state == DHCP_REBOOTING) {
000020  2903              CMP      r1,#3
000022  d130              BNE      |L30.134|
;;;451        if (dhcp->tries < REBOOT_TRIES) {
000024  7b50              LDRB     r0,[r2,#0xd]
000026  2802              CMP      r0,#2
000028  d213              BCS      |L30.82|
;;;452          dhcp_reboot(netif);
00002a  4620              MOV      r0,r4
00002c  e8bd4010          POP      {r4,lr}
000030  f7ffbffe          B.W      dhcp_reboot
                  |L30.52|
000034  e8bd4010          POP      {r4,lr}               ;409
000038  f7ffbffe          B.W      dhcp_discover
                  |L30.60|
00003c  7b50              LDRB     r0,[r2,#0xd]          ;413
00003e  2805              CMP      r0,#5                 ;413
000040  d804              BHI      |L30.76|
000042  4620              MOV      r0,r4                 ;414
000044  e8bd4010          POP      {r4,lr}               ;414
000048  f7ffbffe          B.W      dhcp_select
                  |L30.76|
00004c  4620              MOV      r0,r4                 ;417
00004e  f7fffffe          BL       dhcp_release
                  |L30.82|
;;;453        } else {
;;;454          dhcp_discover(netif);
000052  4620              MOV      r0,r4
000054  e7ee              B        |L30.52|
                  |L30.86|
000056  7b50              LDRB     r0,[r2,#0xd]          ;424
000058  2801              CMP      r0,#1                 ;424
00005a  4620              MOV      r0,r4                 ;430
00005c  d803              BHI      |L30.102|
00005e  e8bd4010          POP      {r4,lr}               ;425
000062  f7ffbffe          B.W      dhcp_check
                  |L30.102|
000066  e8bd4010          POP      {r4,lr}               ;430
00006a  f7ffbffe          B.W      dhcp_bind
                  |L30.110|
00006e  e8bd4010          POP      {r4,lr}               ;439
000072  f7ffbffe          B.W      dhcp_renew
                  |L30.118|
000076  7b50              LDRB     r0,[r2,#0xd]          ;443
000078  2808              CMP      r0,#8                 ;443
00007a  d8e7              BHI      |L30.76|
00007c  4620              MOV      r0,r4                 ;444
00007e  e8bd4010          POP      {r4,lr}               ;444
000082  f7ffbffe          B.W      dhcp_rebind
                  |L30.134|
;;;455        }
;;;456      }
;;;457    }
000086  bd10              POP      {r4,pc}
;;;458    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  dhcp_rx_options_val
                          %        40
                  dhcp_rx_options_given
                          %        10

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  64686370          DCB      "dhcp_option: dhcp->options_out_len + 2 + option_len <= "
000004  5f6f7074
000008  696f6e3a
00000c  20646863
000010  702d3e6f
000014  7074696f
000018  6e735f6f
00001c  75745f6c
000020  656e202b
000024  2032202b
000028  206f7074
00002c  696f6e5f
000030  6c656e20
000034  3c3d20  
000037  44484350          DCB      "DHCP_OPTIONS_LEN",0
00003b  5f4f5054
00003f  494f4e53
000043  5f4c454e
000047  00      
000048  64686370          DCB      "dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OP"
00004c  5f6f7074
000050  696f6e5f
000054  73686f72
000058  743a2064
00005c  6863702d
000060  3e6f7074
000064  696f6e73
000068  5f6f7574
00006c  5f6c656e
000070  202b2032
000074  203c3d20
000078  44484350
00007c  5f4f50  
00007f  54494f4e          DCB      "TIONS_LEN",0
000083  535f4c45
000087  4e00    

                          AREA ||.data||, DATA, ALIGN=2

                  xid
                          DCD      0xabcd0000

; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\diskio.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\diskio.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\diskio.crf ..\..\Complex\FATFS\diskio.c]
                          THUMB

                          AREA ||i.disk_initialize||, CODE, READONLY, ALIGN=1

                  disk_initialize PROC
;;;44     
;;;45     DSTATUS disk_initialize (
000000  0001              MOVS     r1,r0
;;;46     	BYTE pdrv				/* Physical drive nmuber (0..) */
;;;47     )
;;;48     {
;;;49     
;;;50     	DSTATUS status = STA_NOINIT;
000002  f04f0001          MOV      r0,#1
000006  d003              BEQ      |L1.16|
;;;51     	FLASH_DEBUG_FUNC() ;
;;;52     	switch (pdrv) {
000008  2901              CMP      r1,#1
00000a  d101              BNE      |L1.16|
;;;53     		case ATA:	/* SD CARD */
;;;54     			#if FATFS_USE_SDIO == 1
;;;55     			//	status = TM_FATFS_SD_SDIO_disk_initialize();	/* SDIO communication */
;;;56     			#endif
;;;57     			break;
;;;58     		case SPI_FLASH:
;;;59     			#if	FATFS_FLASH_SPI ==1
;;;60     			status = TM_FATFS_FLASH_SPI_disk_initialize();	/* SDIO communication */
00000c  f7ffbffe          B.W      TM_FATFS_FLASH_SPI_disk_initialize
                  |L1.16|
;;;61     			#endif
;;;62     			break;
;;;63     
;;;64     		default:
;;;65     			status = STA_NOINIT;
;;;66     	}
;;;67     	return status;
;;;68     }
000010  4770              BX       lr
;;;69     
                          ENDP


                          AREA ||i.disk_ioctl||, CODE, READONLY, ALIGN=1

                  disk_ioctl PROC
;;;177    #if _USE_IOCTL
;;;178    DRESULT disk_ioctl (
000000  460b              MOV      r3,r1
;;;179    	BYTE pdrv,		/* Physical drive nmuber (0..) */
;;;180    	BYTE cmd,		/* Control code */
;;;181    	void *buff		/* Buffer to send/receive control data */
;;;182    )
;;;183    {
000002  0001              MOVS     r1,r0
;;;184    	DRESULT status = RES_PARERR;
000004  f04f0004          MOV      r0,#4
000008  d005              BEQ      |L2.22|
;;;185    	switch (pdrv) {
00000a  2901              CMP      r1,#1
00000c  d103              BNE      |L2.22|
;;;186    		case ATA:	/* SD CARD */
;;;187    			#if FATFS_USE_SDIO == 1
;;;188    			//	status = TM_FATFS_SD_SDIO_disk_ioctl(cmd, buff);					/* SDIO communication */
;;;189    			#endif
;;;190    			break;
;;;191    		case SPI_FLASH:
;;;192    			#if	FATFS_FLASH_SPI ==1
;;;193    			status = TM_FATFS_FLASH_SPI_disk_ioctl(cmd, buff);	/* SDIO communication */
00000e  4611              MOV      r1,r2
000010  4618              MOV      r0,r3
000012  f7ffbffe          B.W      TM_FATFS_FLASH_SPI_disk_ioctl
                  |L2.22|
;;;194    			#endif
;;;195    		break;
;;;196    		default:
;;;197    			status = RES_PARERR;
;;;198    	}
;;;199    	return status;
;;;200    }
000016  4770              BX       lr
;;;201    #endif
                          ENDP


                          AREA ||i.disk_read||, CODE, READONLY, ALIGN=1

                  disk_read PROC
;;;106    
;;;107    DRESULT disk_read (
000000  b430              PUSH     {r4,r5}
;;;108    	BYTE pdrv,		/* Physical drive nmuber (0..) */
;;;109    	BYTE *buff,		/* Data buffer to store read data */
;;;110    	DWORD sector,	/* Sector address (LBA) */
;;;111    	UINT count		/* Number of sectors to read (1..128) */
;;;112    )
;;;113    {
000002  460d              MOV      r5,r1
000004  0001              MOVS     r1,r0
000006  4614              MOV      r4,r2
;;;114    	DRESULT status = RES_PARERR;
000008  f04f0004          MOV      r0,#4
00000c  d007              BEQ      |L3.30|
;;;115    	switch (pdrv) {
00000e  2901              CMP      r1,#1
000010  d105              BNE      |L3.30|
;;;116    		case ATA:	/* SD CARD */
;;;117    			#if FATFS_USE_SDIO == 1
;;;118    			//	status = TM_FATFS_SD_SDIO_disk_read(buff, sector, count);	/* SDIO communication */
;;;119    			#endif
;;;120    			break;
;;;121    		case SPI_FLASH:
;;;122    			#if	FATFS_FLASH_SPI ==1
;;;123    			status = TM_FATFS_FLASH_SPI_disk_read(buff, sector, count);	/* SDIO communication */
000012  4621              MOV      r1,r4
000014  4628              MOV      r0,r5
000016  bc30              POP      {r4,r5}
000018  461a              MOV      r2,r3
00001a  f7ffbffe          B.W      TM_FATFS_FLASH_SPI_disk_read
                  |L3.30|
;;;124    			#endif
;;;125    		break;
;;;126    		default:
;;;127    			status = RES_PARERR;
;;;128    	}
;;;129    	return status;
;;;130    }
00001e  bc30              POP      {r4,r5}
000020  4770              BX       lr
;;;131    
                          ENDP


                          AREA ||i.disk_status||, CODE, READONLY, ALIGN=1

                  disk_status PROC
;;;75     
;;;76     DSTATUS disk_status (
000000  0001              MOVS     r1,r0
;;;77     	BYTE pdrv		/* Physical drive nmuber (0..) */
;;;78     )
;;;79     {
;;;80     
;;;81     	DSTATUS status = STA_NOINIT;
000002  f04f0001          MOV      r0,#1
000006  d003              BEQ      |L4.16|
;;;82     	
;;;83     	switch (pdrv) {
000008  2901              CMP      r1,#1
00000a  d101              BNE      |L4.16|
;;;84     		case ATA:	/* SD CARD */
;;;85     			#if FATFS_USE_SDIO == 1
;;;86     			//	status = TM_FATFS_SD_SDIO_disk_status();	/* SDIO communication */
;;;87     			#endif
;;;88     			break;
;;;89     		case SPI_FLASH:
;;;90     			#if	FATFS_FLASH_SPI ==1
;;;91     			status = TM_FATFS_FLASH_SPI_disk_status();	/* SDIO communication */
00000c  f7ffbffe          B.W      TM_FATFS_FLASH_SPI_disk_status
                  |L4.16|
;;;92     			#endif
;;;93     			break;
;;;94     
;;;95     		default:
;;;96     			status = STA_NOINIT;
;;;97     	}
;;;98     	return status;
;;;99     }
000010  4770              BX       lr
;;;100    
                          ENDP


                          AREA ||i.disk_write||, CODE, READONLY, ALIGN=1

                  disk_write PROC
;;;138    #if _USE_WRITE
;;;139    DRESULT disk_write (
000000  b430              PUSH     {r4,r5}
;;;140    	BYTE pdrv,			/* Physical drive nmuber (0..) */
;;;141    	const BYTE *buff,	/* Data to be written */
;;;142    	DWORD sector,		/* Sector address (LBA) */
;;;143    	UINT count			/* Number of sectors to write (1..128) */
;;;144    )
;;;145    {
000002  460d              MOV      r5,r1
000004  4601              MOV      r1,r0
000006  4614              MOV      r4,r2
;;;146    	DRESULT status = RES_PARERR;
000008  2004              MOVS     r0,#4
00000a  b14b              CBZ      r3,|L5.32|
;;;147    	if (!count) {
;;;148    		return RES_PARERR;		/* Check parameter */
;;;149    	}
;;;150    	
;;;151    	switch (pdrv) {
00000c  2900              CMP      r1,#0
00000e  d008              BEQ      |L5.34|
000010  2901              CMP      r1,#1
000012  d106              BNE      |L5.34|
;;;152    		case ATA:	/* SD CARD */
;;;153    			#if FATFS_USE_SDIO == 1
;;;154    				//status = TM_FATFS_SD_SDIO_disk_write((BYTE *)buff, sector, count);	/* SDIO communication */
;;;155    			#endif
;;;156    		break;
;;;157    
;;;158    		case SPI_FLASH:
;;;159    			#if	FATFS_FLASH_SPI ==1
;;;160    			status = TM_FATFS_FLASH_SPI_disk_write((BYTE *)buff, sector, count);	/* SDIO communication */
000014  4621              MOV      r1,r4
000016  4628              MOV      r0,r5
000018  bc30              POP      {r4,r5}
00001a  461a              MOV      r2,r3
00001c  f7ffbffe          B.W      TM_FATFS_FLASH_SPI_disk_write
                  |L5.32|
000020  2004              MOVS     r0,#4                 ;148
                  |L5.34|
;;;161    			#endif
;;;162    		break;
;;;163    		default:
;;;164    			status = RES_PARERR;
;;;165    	}
;;;166    	return status;
;;;167    }
000022  bc30              POP      {r4,r5}
000024  4770              BX       lr
;;;168    #endif
                          ENDP


                          AREA ||i.get_fattime||, CODE, READONLY, ALIGN=2

                  get_fattime PROC
;;;202    
;;;203    __weak DWORD get_fattime(void) {
000000  4800              LDR      r0,|L6.4|
;;;204    	/* Returns current time packed into a DWORD variable */
;;;205    	return	  ((DWORD)(2013 - 1980) << 25)	/* Year 2013 */
;;;206    			| ((DWORD)7 << 21)				/* Month 7 */
;;;207    			| ((DWORD)28 << 16)				/* Mday 28 */
;;;208    			| ((DWORD)0 << 11)				/* Hour 0 */
;;;209    			| ((DWORD)0 << 5)				/* Min 0 */
;;;210    			| ((DWORD)0 >> 1);				/* Sec 0 */
;;;211    }
000002  4770              BX       lr
;;;212    
                          ENDP

                  |L6.4|
                          DCD      0x42fc0000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  6469736b          DCB      0x64,0x69,0x73,0x6b
000004  5f696e69          DCB      0x5f,0x69,0x6e,0x69
000008  7469616c          DCB      0x74,0x69,0x61,0x6c
00000c  697a6500          DCB      0x69,0x7a,0x65,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\Complex\\FATFS\\diskio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_diskio_c_b3252454____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_diskio_c_b3252454____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_diskio_c_b3252454____REVSH|
#line 153
|__asm___8_diskio_c_b3252454____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_diskio_c_b3252454____RRX|
#line 328
|__asm___8_diskio_c_b3252454____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

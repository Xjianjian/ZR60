; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\netconf.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\netconf.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\netconf.crf ..\..\Lwip\App\netconf.c]
                          THUMB

                          AREA ||i.LwIP_DHCP_Process_Handle||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  LwIP_DHCP_Process_Handle PROC
;;;240    */
;;;241    void LwIP_DHCP_Process_Handle()
000000  b538              PUSH     {r3-r5,lr}
;;;242    {
;;;243      struct ip_addr ipaddr;
;;;244      struct ip_addr netmask;
;;;245      struct ip_addr gw;
;;;246    
;;;247      switch (DHCP_state)
000002  4d2e              LDR      r5,|L1.188|
000004  7828              LDRB     r0,[r5,#0]  ; DHCP_state
000006  2400              MOVS     r4,#0
000008  2801              CMP      r0,#1
00000a  d01f              BEQ      |L1.76|
00000c  2802              CMP      r0,#2
00000e  d154              BNE      |L1.186|
;;;248      {
;;;249    		case DHCP_START:
;;;250    		{
;;;251    			DHCP_state = DHCP_WAIT_ADDRESS;
;;;252    			dhcp_start(&gnetif);
;;;253    			/* IP address should be set to 0 
;;;254    			 every time we want to assign a new DHCP address */
;;;255    			IPaddress = 0;
;;;256    #ifdef SERIAL_DEBUG
;;;257    			printf("\n     Looking for    \n");
;;;258    			printf("     DHCP server    \n");
;;;259    			printf("     please wait... \n");
;;;260    #endif /* SERIAL_DEBUG */
;;;261    		}
;;;262    		break;
;;;263    		case DHCP_WAIT_ADDRESS:
;;;264    		{
;;;265    			/* Read the new IP address */
;;;266    			IPaddress = gnetif.ip_addr.addr;
000010  492b              LDR      r1,|L1.192|
000012  6848              LDR      r0,[r1,#4]  ; gnetif
;;;267    			if (IPaddress!=0) 
000014  6068              STR      r0,[r5,#4]  ; IPaddress
000016  2800              CMP      r0,#0
000018  d029              BEQ      |L1.110|
;;;268    			{
;;;269    				DHCP_state = DHCP_ADDRESS_ASSIGNED;	
00001a  2003              MOVS     r0,#3
00001c  7028              STRB     r0,[r5,#0]
;;;270    				/* Stop DHCP */
;;;271    				dhcp_stop(&gnetif);
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       dhcp_stop
;;;272    #ifdef SERIAL_DEBUG
;;;273    				printf("\n¡¾7¡¿ IP address assigned by a DHCP server  ¡Ì\n");
000024  a027              ADR      r0,|L1.196|
000026  f7fffffe          BL       __2printf
;;;274    				printf("\nIP: %d.%d.%d.%d\n",(uint8_t)(IPaddress),(uint8_t)(IPaddress >> 8), \
00002a  6868              LDR      r0,[r5,#4]  ; IPaddress
00002c  0e01              LSRS     r1,r0,#24
00002e  9100              STR      r1,[sp,#0]
000030  b2c1              UXTB     r1,r0
000032  f3c04307          UBFX     r3,r0,#16,#8
000036  f3c02207          UBFX     r2,r0,#8,#8
00003a  a02f              ADR      r0,|L1.248|
00003c  f7fffffe          BL       __2printf
;;;275    										   (uint8_t)(IPaddress >> 16),(uint8_t)(IPaddress >> 24));
;;;276    				printf("\nNETMASK: %d.%d.%d.%d\n",NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
000040  23ff              MOVS     r3,#0xff
000042  461a              MOV      r2,r3
000044  4619              MOV      r1,r3
000046  a031              ADR      r0,|L1.268|
000048  9400              STR      r4,[sp,#0]
00004a  e034              B        |L1.182|
                  |L1.76|
00004c  2002              MOVS     r0,#2                 ;251
00004e  7028              STRB     r0,[r5,#0]            ;251
000050  481b              LDR      r0,|L1.192|
000052  f7fffffe          BL       dhcp_start
000056  a033              ADR      r0,|L1.292|
000058  606c              STR      r4,[r5,#4]            ;257  ; IPaddress
00005a  f7fffffe          BL       __2printf
00005e  a037              ADR      r0,|L1.316|
000060  f7fffffe          BL       __2printf
000064  e8bd4038          POP      {r3-r5,lr}            ;259
000068  a03a              ADR      r0,|L1.340|
00006a  f7ffbffe          B.W      __2printf
                  |L1.110|
;;;277    				//USART_PRINTF_IP("Gateway: %d.%d.%d.%d\n",GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
;;;278    				// LED1_ON;
;;;279    #endif /* SERIAL_DEBUG */
;;;280    		  }
;;;281    		  else
;;;282    		  {
;;;283    			/* DHCP timeout */
;;;284    			if (gnetif.dhcp->tries > MAX_DHCP_TRIES)
00006e  6a48              LDR      r0,[r1,#0x24]  ; gnetif
000070  7b40              LDRB     r0,[r0,#0xd]
000072  2804              CMP      r0,#4
000074  d921              BLS      |L1.186|
;;;285    			{
;;;286    				DHCP_state = DHCP_TIMEOUT;
000076  2004              MOVS     r0,#4
000078  7028              STRB     r0,[r5,#0]
;;;287    				/* Stop DHCP */
;;;288    				dhcp_stop(&gnetif);
00007a  4811              LDR      r0,|L1.192|
00007c  f7fffffe          BL       dhcp_stop
;;;289    				/* Static address used */
;;;290    				IP4_ADDR(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
;;;291    				IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
;;;292    				IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
;;;293    				//netif_set_addr(&gnetif, &ipaddr , &netmask, &gw);
;;;294    #ifdef SERIAL_DEBUG
;;;295    				printf("\n    DHCP timeout    \n");
000080  a03a              ADR      r0,|L1.364|
000082  f7fffffe          BL       __2printf
;;;296    				printf("  Static IP address   \n");
000086  a03f              ADR      r0,|L1.388|
000088  f7fffffe          BL       __2printf
;;;297    				printf("IP: %d.%d.%d.%d\n",IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
00008c  2006              MOVS     r0,#6
00008e  2300              MOVS     r3,#0
000090  9000              STR      r0,[sp,#0]
000092  461a              MOV      r2,r3
000094  210a              MOVS     r1,#0xa
000096  a041              ADR      r0,|L1.412|
000098  f7fffffe          BL       __2printf
;;;298    				printf("NETMASK: %d.%d.%d.%d\n",NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
00009c  23ff              MOVS     r3,#0xff
00009e  461a              MOV      r2,r3
0000a0  4619              MOV      r1,r3
0000a2  a043              ADR      r0,|L1.432|
0000a4  9400              STR      r4,[sp,#0]
0000a6  f7fffffe          BL       __2printf
;;;299    				printf("Gateway: %d.%d.%d.%d\n",GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
0000aa  2001              MOVS     r0,#1
0000ac  2300              MOVS     r3,#0
0000ae  9000              STR      r0,[sp,#0]
0000b0  461a              MOV      r2,r3
0000b2  210a              MOVS     r1,#0xa
0000b4  a044              ADR      r0,|L1.456|
                  |L1.182|
0000b6  f7fffffe          BL       __2printf
                  |L1.186|
;;;300    			 // LED1_ON;
;;;301    #endif /* SERIAL_DEBUG */
;;;302    			}
;;;303    		  }
;;;304    		}
;;;305    		break;
;;;306    	  default: break;
;;;307      }
;;;308    }
0000ba  bd38              POP      {r3-r5,pc}
;;;309    #endif
                          ENDP

                  |L1.188|
                          DCD      ||.data||
                  |L1.192|
                          DCD      ||.bss||
                  |L1.196|
0000c4  0aa1be37          DCB      "\n",161,190,"7",161,191," IP address assigned by a DHCP"
0000c8  a1bf2049
0000cc  50206164
0000d0  64726573
0000d4  73206173
0000d8  7369676e
0000dc  65642062
0000e0  79206120
0000e4  44484350
0000e8  20736572          DCB      " server  ",161,204,"\n",0
0000ec  76657220
0000f0  20a1cc0a
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L1.248|
0000f8  0a49503a          DCB      "\nIP: %d.%d.%d.%d\n",0
0000fc  2025642e
000100  25642e25
000104  642e2564
000108  0a00    
00010a  00                DCB      0
00010b  00                DCB      0
                  |L1.268|
00010c  0a4e4554          DCB      "\nNETMASK: %d.%d.%d.%d\n",0
000110  4d41534b
000114  3a202564
000118  2e25642e
00011c  25642e25
000120  640a00  
000123  00                DCB      0
                  |L1.292|
000124  0a202020          DCB      "\n     Looking for    \n",0
000128  20204c6f
00012c  6f6b696e
000130  6720666f
000134  72202020
000138  200a00  
00013b  00                DCB      0
                  |L1.316|
00013c  20202020          DCB      "     DHCP server    \n",0
000140  20444843
000144  50207365
000148  72766572
00014c  20202020
000150  0a00    
000152  00                DCB      0
000153  00                DCB      0
                  |L1.340|
000154  20202020          DCB      "     please wait... \n",0
000158  20706c65
00015c  61736520
000160  77616974
000164  2e2e2e20
000168  0a00    
00016a  00                DCB      0
00016b  00                DCB      0
                  |L1.364|
00016c  0a202020          DCB      "\n    DHCP timeout    \n",0
000170  20444843
000174  50207469
000178  6d656f75
00017c  74202020
000180  200a00  
000183  00                DCB      0
                  |L1.388|
000184  20205374          DCB      "  Static IP address   \n",0
000188  61746963
00018c  20495020
000190  61646472
000194  65737320
000198  20200a00
                  |L1.412|
00019c  49503a20          DCB      "IP: %d.%d.%d.%d\n",0
0001a0  25642e25
0001a4  642e2564
0001a8  2e25640a
0001ac  00      
0001ad  00                DCB      0
0001ae  00                DCB      0
0001af  00                DCB      0
                  |L1.432|
0001b0  4e45544d          DCB      "NETMASK: %d.%d.%d.%d\n",0
0001b4  41534b3a
0001b8  2025642e
0001bc  25642e25
0001c0  642e2564
0001c4  0a00    
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L1.456|
0001c8  47617465          DCB      "Gateway: %d.%d.%d.%d\n",0
0001cc  7761793a
0001d0  2025642e
0001d4  25642e25
0001d8  642e2564
0001dc  0a00    
0001de  00                DCB      0
0001df  00                DCB      0

                          AREA ||i.LwIP_Init||, CODE, READONLY, ALIGN=2

                  LwIP_Init PROC
;;;70     */
;;;71     void LwIP_Init(void)
000000  b510              PUSH     {r4,lr}
;;;72     {
000002  b086              SUB      sp,sp,#0x18
;;;73       struct ip_addr ipaddr;
;;;74       struct ip_addr netmask;
;;;75       struct ip_addr gw;
;;;76     #ifdef USE_LCD
;;;77       uint8_t iptab[4] = {0};
;;;78       uint8_t iptxt[20];
;;;79     #endif
;;;80       
;;;81       /* Initializes the dynamic memory heap defined by MEM_SIZE.*/
;;;82       mem_init();
000004  f7fffffe          BL       mem_init
;;;83       
;;;84       /* Initializes the memory pools defined by MEMP_NUM_x.*/
;;;85       memp_init();
000008  f7fffffe          BL       memp_init
;;;86       
;;;87     #ifdef USE_DHCP
;;;88       ipaddr.addr = 0;
00000c  2000              MOVS     r0,#0
;;;89       netmask.addr = 0;
00000e  9003              STR      r0,[sp,#0xc]
;;;90       gw.addr = 0;
000010  9004              STR      r0,[sp,#0x10]
;;;91     #else
;;;92       IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
;;;93       IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
;;;94       IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
;;;95       printf("\n  Static IP address   \n");
;;;96       printf("\n  IP: %d.%d.%d.%d\n",IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
;;;97       printf("\n  NETMASK: %d.%d.%d.%d\n",NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
;;;98       printf("\n  Gateway: %d.%d.%d.%d\n",GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
;;;99     #endif  
;;;100    
;;;101      /* - netif_add(struct netif *netif, struct ip_addr *ipaddr,
;;;102      struct ip_addr *netmask, struct ip_addr *gw,
;;;103      void *state, err_t (* init)(struct netif *netif),
;;;104      err_t (* input)(struct pbuf *p, struct netif *netif))
;;;105    
;;;106      Adds your network interface to the netif_list. Allocate a struct
;;;107      netif and pass a pointer to this structure as the first argument.
;;;108      Give pointers to cleared ip_addr structures when using DHCP,
;;;109      or fill them with sane numbers otherwise. The state pointer may be NULL.
;;;110    
;;;111      The init function pointer must point to a initialization function for
;;;112      your ethernet netif interface. The following code illustrates it's use.*/
;;;113      netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
000012  4a18              LDR      r2,|L2.116|
000014  4918              LDR      r1,|L2.120|
000016  9005              STR      r0,[sp,#0x14]
000018  e88d0007          STM      sp,{r0-r2}
00001c  ab05              ADD      r3,sp,#0x14
00001e  aa04              ADD      r2,sp,#0x10
000020  a903              ADD      r1,sp,#0xc
000022  4816              LDR      r0,|L2.124|
000024  f7fffffe          BL       netif_add
;;;114    
;;;115      /*  Registers the default network interface.*/
;;;116      netif_set_default(&gnetif);
000028  4814              LDR      r0,|L2.124|
00002a  f7fffffe          BL       netif_set_default
;;;117    
;;;118      if (EthStatus == (ETH_INIT_FLAG | ETH_LINK_FLAG))
00002e  4814              LDR      r0,|L2.128|
000030  6800              LDR      r0,[r0,#0]  ; EthStatus
;;;119      { 
;;;120        /* Set Ethernet link flag */
;;;121        gnetif.flags |= NETIF_FLAG_LINK_UP;
;;;122    
;;;123        /* When the netif is fully configured this function must be called.*/
;;;124        netif_set_up(&gnetif);
;;;125    #ifdef USE_DHCP
;;;126        DHCP_state = DHCP_START;
000032  4c14              LDR      r4,|L2.132|
000034  2811              CMP      r0,#0x11              ;118
;;;127    #else
;;;128    #ifdef SERIAL_DEBUG
;;;129    		//USART_PRINTF_S("\n  Static IP address   \n");
;;;130    		//USART_PRINTF_IP("IP: %d.%d.%d.%d\n",IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
;;;131    		//USART_PRINTF_IP("NETMASK: %d.%d.%d.%d\n",NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
;;;132    		//USART_PRINTF_IP("Gateway: %d.%d.%d.%d\n",GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
;;;133    #endif /* SERIAL_DEBUG */
;;;134    #endif /* USE_DHCP */
;;;135      }
;;;136      else
;;;137      {
;;;138        /*  When the netif link is down this function must be called.*/
;;;139        netif_set_down(&gnetif);
000036  4811              LDR      r0,|L2.124|
000038  d011              BEQ      |L2.94|
00003a  f7fffffe          BL       netif_set_down
;;;140    #ifdef USE_DHCP
;;;141        DHCP_state = DHCP_LINK_DOWN;
00003e  2005              MOVS     r0,#5
000040  7020              STRB     r0,[r4,#0]
;;;142    #endif /* USE_DHCP */
;;;143    #ifdef SERIAL_DEBUG
;;;144    		printf("\n  Network Cable is  \n");
000042  a011              ADR      r0,|L2.136|
000044  f7fffffe          BL       __2printf
;;;145    		printf("    not connected   \n");
000048  a015              ADR      r0,|L2.160|
00004a  f7fffffe          BL       __2printf
                  |L2.78|
;;;146    #endif /* SERIAL_DEBUG */
;;;147      }
;;;148    
;;;149    	/* Set the link callback function, this function is called on change of link status*/
;;;150    	netif_set_link_callback(&gnetif, ETH_link_callback);
00004e  491a              LDR      r1,|L2.184|
000050  480a              LDR      r0,|L2.124|
000052  f7fffffe          BL       netif_set_link_callback
;;;151      
;;;152      	lwip_init();
000056  f7fffffe          BL       lwip_init
;;;153    }
00005a  b006              ADD      sp,sp,#0x18
00005c  bd10              POP      {r4,pc}
                  |L2.94|
00005e  f8101f31          LDRB     r1,[r0,#0x31]!        ;121  ; gnetif
000062  f0410110          ORR      r1,r1,#0x10           ;121
000066  7001              STRB     r1,[r0,#0]            ;121
000068  4804              LDR      r0,|L2.124|
00006a  f7fffffe          BL       netif_set_up
00006e  2001              MOVS     r0,#1                 ;126
000070  7020              STRB     r0,[r4,#0]            ;126
000072  e7ec              B        |L2.78|
;;;154    
                          ENDP

                  |L2.116|
                          DCD      ethernet_input
                  |L2.120|
                          DCD      ethernetif_init
                  |L2.124|
                          DCD      ||.bss||
                  |L2.128|
                          DCD      EthStatus
                  |L2.132|
                          DCD      ||.data||
                  |L2.136|
000088  0a20204e          DCB      "\n  Network Cable is  \n",0
00008c  6574776f
000090  726b2043
000094  61626c65
000098  20697320
00009c  200a00  
00009f  00                DCB      0
                  |L2.160|
0000a0  20202020          DCB      "    not connected   \n",0
0000a4  6e6f7420
0000a8  636f6e6e
0000ac  65637465
0000b0  64202020
0000b4  0a00    
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L2.184|
                          DCD      ETH_link_callback

                          AREA ||i.LwIP_Periodic_Handle||, CODE, READONLY, ALIGN=2

                  LwIP_Periodic_Handle PROC
;;;170    */
;;;171    void LwIP_Periodic_Handle(__IO uint64_t localtime)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;172    {
;;;173    #if LWIP_TCP
;;;174      /* TCP periodic process every 250 ms */
;;;175      if ((localtime - TCPTimer) >= TCP_TMR_INTERVAL)
000002  4c42              LDR      r4,|L3.268|
000004  e9dd2000          LDRD     r2,r0,[sp,#0]
000008  e9d41302          LDRD     r1,r3,[r4,#8]
00000c  1a51              SUBS     r1,r2,r1
00000e  eb600003          SBC      r0,r0,r3
000012  39fa              SUBS     r1,r1,#0xfa
000014  f1700000          SBCS     r0,r0,#0
000018  d305              BCC      |L3.38|
00001a  e9dd0100          LDRD     r0,r1,[sp,#0]         ;172
00001e  e9c40102          STRD     r0,r1,[r4,#8]         ;172
;;;176      {
;;;177        TCPTimer =  localtime;
;;;178        tcp_tmr();
000022  f7fffffe          BL       tcp_tmr
                  |L3.38|
000026  e9dd2100          LDRD     r2,r1,[sp,#0]
00002a  e9d40304          LDRD     r0,r3,[r4,#0x10]
00002e  1a12              SUBS     r2,r2,r0
000030  eb610103          SBC      r1,r1,r3
;;;179      }
;;;180    #endif
;;;181      
;;;182      /* ARP periodic process every 5s */
;;;183      if ((localtime - ARPTimer) >= ARP_TMR_INTERVAL)
000034  f2413088          MOV      r0,#0x1388
000038  1a10              SUBS     r0,r2,r0
00003a  f1710000          SBCS     r0,r1,#0
00003e  d305              BCC      |L3.76|
000040  e9dd0100          LDRD     r0,r1,[sp,#0]
000044  e9c40104          STRD     r0,r1,[r4,#0x10]
;;;184      {
;;;185        ARPTimer =  localtime;
;;;186        etharp_tmr();
000048  f7fffffe          BL       etharp_tmr
                  |L3.76|
00004c  e9dd1000          LDRD     r1,r0,[sp,#0]
000050  e9d42306          LDRD     r2,r3,[r4,#0x18]
000054  1a89              SUBS     r1,r1,r2
000056  eb600003          SBC      r0,r0,r3
;;;187      }
;;;188    	
;;;189    	/* Check link status periodically */
;;;190    	if ((localtime - LinkTimer) >= LINK_TIMER_INTERVAL) 
00005a  f44f727a          MOV      r2,#0x3e8
00005e  1a89              SUBS     r1,r1,r2
000060  f1700000          SBCS     r0,r0,#0
000064  d306              BCC      |L3.116|
000066  e9dd0100          LDRD     r0,r1,[sp,#0]
00006a  e9c40106          STRD     r0,r1,[r4,#0x18]
;;;191    	{
;;;192    		LinkTimer = localtime;
;;;193    		ETH_CheckLinkStatus(ETHERNET_PHY_ADDRESS);
00006e  2000              MOVS     r0,#0
000070  f7fffffe          BL       ETH_CheckLinkStatus
                  |L3.116|
000074  e9dd1000          LDRD     r1,r0,[sp,#0]
000078  e9d42308          LDRD     r2,r3,[r4,#0x20]
00007c  1a89              SUBS     r1,r1,r2
00007e  eb600003          SBC      r0,r0,r3
;;;194    	}
;;;195    	
;;;196    #ifdef USE_DHCP
;;;197      /* Fine DHCP periodic process every 500ms */
;;;198      if ((localtime - DHCPfineTimer) >= DHCP_FINE_TIMER_MSECS)
000082  f44f72fa          MOV      r2,#0x1f4
000086  1a89              SUBS     r1,r1,r2
000088  f1700000          SBCS     r0,r0,#0
00008c  d315              BCC      |L3.186|
00008e  e9dd0100          LDRD     r0,r1,[sp,#0]
000092  e9c40108          STRD     r0,r1,[r4,#0x20]
;;;199      {
;;;200        DHCPfineTimer =  localtime;
;;;201        dhcp_fine_tmr();
000096  f7fffffe          BL       dhcp_fine_tmr
;;;202        if ((DHCP_state != DHCP_ADDRESS_ASSIGNED) && 
00009a  7820              LDRB     r0,[r4,#0]  ; DHCP_state
00009c  2803              CMP      r0,#3
00009e  d00c              BEQ      |L3.186|
;;;203            (DHCP_state != DHCP_TIMEOUT) &&
0000a0  7820              LDRB     r0,[r4,#0]  ; DHCP_state
0000a2  2804              CMP      r0,#4
0000a4  d009              BEQ      |L3.186|
;;;204              (DHCP_state != DHCP_LINK_DOWN))
0000a6  7820              LDRB     r0,[r4,#0]  ; DHCP_state
0000a8  2805              CMP      r0,#5
0000aa  d006              BEQ      |L3.186|
;;;205        {
;;;206    #ifdef SERIAL_DEBUG
;;;207    			LED1_TOGGLE;
0000ac  4818              LDR      r0,|L3.272|
0000ae  6801              LDR      r1,[r0,#0]
0000b0  f0810140          EOR      r1,r1,#0x40
0000b4  6001              STR      r1,[r0,#0]
;;;208    			//printf("\nFine DHCP periodic process every 500ms\n");
;;;209    #endif /* SERIAL_DEBUG */
;;;210          
;;;211          /* process DHCP state machine */
;;;212          LwIP_DHCP_Process_Handle();
0000b6  f7fffffe          BL       LwIP_DHCP_Process_Handle
                  |L3.186|
0000ba  e9dd2100          LDRD     r2,r1,[sp,#0]
0000be  e9d4030a          LDRD     r0,r3,[r4,#0x28]
0000c2  1a10              SUBS     r0,r2,r0
0000c4  eb610103          SBC      r1,r1,r3
;;;213        }
;;;214      }
;;;215    
;;;216      /* DHCP Coarse periodic process every 60s */
;;;217      if ((localtime - DHCPcoarseTimer) >= DHCP_COARSE_TIMER_MSECS)
0000c8  f64e2260          MOV      r2,#0xea60
0000cc  1a80              SUBS     r0,r0,r2
0000ce  f1710000          SBCS     r0,r1,#0
0000d2  d305              BCC      |L3.224|
0000d4  e9dd0100          LDRD     r0,r1,[sp,#0]
0000d8  e9c4010a          STRD     r0,r1,[r4,#0x28]
;;;218      {
;;;219        DHCPcoarseTimer =  localtime;
;;;220        dhcp_coarse_tmr();
0000dc  f7fffffe          BL       dhcp_coarse_tmr
                  |L3.224|
0000e0  e9dd0100          LDRD     r0,r1,[sp,#0]
0000e4  e9d4230c          LDRD     r2,r3,[r4,#0x30]
0000e8  1a80              SUBS     r0,r0,r2
0000ea  eb610103          SBC      r1,r1,r3
;;;221      }
;;;222    
;;;223    #endif
;;;224    #if LWIP_DNS
;;;225    
;;;226      if ((localtime - DNSTimer) >= DNS_TMR_INTERVAL) 
0000ee  f44f727a          MOV      r2,#0x3e8
0000f2  1a80              SUBS     r0,r0,r2
0000f4  f1710000          SBCS     r0,r1,#0
0000f8  d307              BCC      |L3.266|
0000fa  e9dd0100          LDRD     r0,r1,[sp,#0]
0000fe  e9c4010c          STRD     r0,r1,[r4,#0x30]
;;;227      { 
;;;228    	  DNSTimer =  localtime; 
;;;229    	  dns_tmr(); 
000102  e8bd401c          POP      {r2-r4,lr}
000106  f7ffbffe          B.W      dns_tmr
                  |L3.266|
;;;230      } 
;;;231    
;;;232    #endif
;;;233    }
00010a  bd1c              POP      {r2-r4,pc}
;;;234    
                          ENDP

                  |L3.268|
                          DCD      ||.data||
                  |L3.272|
                          DCD      0x40021414

                          AREA ||i.LwIP_Pkt_Handle||, CODE, READONLY, ALIGN=2

                  LwIP_Pkt_Handle PROC
;;;159    */
;;;160    void LwIP_Pkt_Handle(void)
000000  4801              LDR      r0,|L4.8|
;;;161    {
;;;162      /* Read a received packet from the Ethernet buffers and send it to the lwIP for handling */
;;;163      ethernetif_input(&gnetif);
000002  f7ffbffe          B.W      ethernetif_input
;;;164    }
;;;165    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  gnetif
                          %        56

                          AREA ||.data||, DATA, ALIGN=3

                  DHCP_state
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  IPaddress
                          DCD      0x00000000
                  TCPTimer
000008  00000000          DCQ      0x0000000000000000
00000c  00000000
                  ARPTimer
000010  00000000          DCQ      0x0000000000000000
000014  00000000
                  LinkTimer
000018  00000000          DCQ      0x0000000000000000
00001c  00000000
                  DHCPfineTimer
000020  00000000          DCQ      0x0000000000000000
000024  00000000
                  DHCPcoarseTimer
000028  00000000          DCQ      0x0000000000000000
00002c  00000000
                  DNSTimer
000030  00000000          DCQ      0x0000000000000000
000034  00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Lwip\\App\\netconf.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_netconf_c_TCPTimer____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_netconf_c_TCPTimer____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_netconf_c_TCPTimer____REVSH|
#line 153
|__asm___9_netconf_c_TCPTimer____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_netconf_c_TCPTimer____RRX|
#line 328
|__asm___9_netconf_c_TCPTimer____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

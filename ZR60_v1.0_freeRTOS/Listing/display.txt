; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\display.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\display.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\display.crf ..\..\Complex\display\display.c]
                          THUMB

                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=1

                  LCD_Init PROC
;;;56     	
;;;57     void LCD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59     	I2C_Write_Byte(0x27,0x08);
000002  2108              MOVS     r1,#8
000004  2027              MOVS     r0,#0x27
000006  f7fffffe          BL       I2C_Write_Byte
;;;60     	Write_Command(0x0F);
00000a  200f              MOVS     r0,#0xf
00000c  f7fffffe          BL       Write_Command
;;;61     	Write_Command(0x28);
000010  2028              MOVS     r0,#0x28
000012  f7fffffe          BL       Write_Command
;;;62     	//Write_Command(0x32);//数据4位
;;;63     	I2C_Write_Byte(0x27,0x0C);
000016  210c              MOVS     r1,#0xc
000018  2027              MOVS     r0,#0x27
00001a  f7fffffe          BL       I2C_Write_Byte
;;;64     	I2C_Write_Byte(0x27,0x08);
00001e  2108              MOVS     r1,#8
000020  2027              MOVS     r0,#0x27
000022  f7fffffe          BL       I2C_Write_Byte
;;;65     	Write_Command(0x28);
000026  2028              MOVS     r0,#0x28
000028  f7fffffe          BL       Write_Command
;;;66     	Write_Command(0x01);//光标清0
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       Write_Command
;;;67     	Write_Command(0x0C);//开显示、无光标、不闪烁
000032  200c              MOVS     r0,#0xc
000034  f7fffffe          BL       Write_Command
;;;68     	Write_Command(0x06);//光标加一、整屏不移动
000038  e8bd4010          POP      {r4,lr}
00003c  2006              MOVS     r0,#6
00003e  f7ffbffe          B.W      Write_Command
;;;69     }
;;;70     
                          ENDP


                          AREA ||i.Write_Command||, CODE, READONLY, ALIGN=1

                  Write_Command PROC
;;;19     
;;;20     void Write_Command(unsigned char com)
000000  b570              PUSH     {r4-r6,lr}
;;;21     {
000002  4605              MOV      r5,r0
;;;22             unsigned char com1,com2;
;;;23             com1 = com|0x0F;
000004  f040040f          ORR      r4,r0,#0xf
;;;24             delay_10us(100);
000008  2064              MOVS     r0,#0x64
00000a  f7fffffe          BL       delay_10us
;;;25             I2C_Write_Byte(0x27,com1&0xFC);
00000e  f00401fc          AND      r1,r4,#0xfc
000012  2027              MOVS     r0,#0x27
000014  f7fffffe          BL       I2C_Write_Byte
;;;26             delay_10us(50);
000018  2032              MOVS     r0,#0x32
00001a  f7fffffe          BL       delay_10us
;;;27             I2C_Write_Byte(0x27,com1&0xF8);
00001e  f00401f8          AND      r1,r4,#0xf8
000022  2027              MOVS     r0,#0x27
000024  f7fffffe          BL       I2C_Write_Byte
;;;28      
;;;29             com2 = com<<4;
000028  0128              LSLS     r0,r5,#4
;;;30             com2 |= 0x0F;
00002a  f040040f          ORR      r4,r0,#0xf
;;;31             delay_10us(100);
00002e  2064              MOVS     r0,#0x64
000030  f7fffffe          BL       delay_10us
;;;32             I2C_Write_Byte(0x27,com2&0xFC);
000034  f00401fc          AND      r1,r4,#0xfc
000038  2027              MOVS     r0,#0x27
00003a  f7fffffe          BL       I2C_Write_Byte
;;;33             delay_10us(50);
00003e  2032              MOVS     r0,#0x32
000040  f7fffffe          BL       delay_10us
;;;34             I2C_Write_Byte(0x27,com2&0xF8);
000044  f00401f8          AND      r1,r4,#0xf8
000048  e8bd4070          POP      {r4-r6,lr}
00004c  2027              MOVS     r0,#0x27
00004e  f7ffbffe          B.W      I2C_Write_Byte
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.Write_Data||, CODE, READONLY, ALIGN=1

                  Write_Data PROC
;;;37     //写数据
;;;38     uint8_t Write_Data(uint8_t data)
000000  b570              PUSH     {r4-r6,lr}
;;;39     {
000002  4605              MOV      r5,r0
;;;40       uint8_t com1,com2;
;;;41       com1 = data|0x0F;
000004  f040040f          ORR      r4,r0,#0xf
;;;42       delay_10us(100);
000008  2064              MOVS     r0,#0x64
00000a  f7fffffe          BL       delay_10us
;;;43       I2C_Write_Byte(0x27,com1&0xFD);
00000e  f00401fd          AND      r1,r4,#0xfd
000012  2027              MOVS     r0,#0x27
000014  f7fffffe          BL       I2C_Write_Byte
;;;44       delay_10us(50);
000018  2032              MOVS     r0,#0x32
00001a  f7fffffe          BL       delay_10us
;;;45       I2C_Write_Byte(0x27,com1&0xF9);
00001e  f00401f9          AND      r1,r4,#0xf9
000022  2027              MOVS     r0,#0x27
000024  f7fffffe          BL       I2C_Write_Byte
;;;46      
;;;47       com2 = data<<4;
000028  0128              LSLS     r0,r5,#4
;;;48       com2 |= 0x0F;
00002a  f040040f          ORR      r4,r0,#0xf
;;;49       delay_10us(100);
00002e  2064              MOVS     r0,#0x64
000030  f7fffffe          BL       delay_10us
;;;50       I2C_Write_Byte(0x27,com2&0xFD);
000034  f00401fd          AND      r1,r4,#0xfd
000038  2027              MOVS     r0,#0x27
00003a  f7fffffe          BL       I2C_Write_Byte
;;;51       delay_10us(50);
00003e  2032              MOVS     r0,#0x32
000040  f7fffffe          BL       delay_10us
;;;52       I2C_Write_Byte(0x27,com2&0xF9);
000044  f00401f9          AND      r1,r4,#0xf9
000048  2027              MOVS     r0,#0x27
00004a  f7fffffe          BL       I2C_Write_Byte
;;;53     	
;;;54     	return 1U;
00004e  2001              MOVS     r0,#1
;;;55     }
000050  bd70              POP      {r4-r6,pc}
;;;56     	
                          ENDP


                          AREA ||i.display||, CODE, READONLY, ALIGN=1

                  display PROC
;;;71     
;;;72     void display(uint8_t *buf,int n)
000000  b570              PUSH     {r4-r6,lr}
;;;73     {
000002  000d              MOVS     r5,r1
000004  4606              MOV      r6,r0
000006  d500              BPL      |L4.10|
;;;74     	u8 i,m;
;;;75     
;;;76     	if(n < 0)
;;;77     	 n = 0;
000008  2500              MOVS     r5,#0
                  |L4.10|
;;;78     	//		Write_Command(0x01);
;;;79     	Write_Command(0x80);//第一行数据
00000a  2080              MOVS     r0,#0x80
00000c  f7fffffe          BL       Write_Command
;;;80     	for(m = 0;m < n;m++)
000010  2400              MOVS     r4,#0
000012  e004              B        |L4.30|
                  |L4.20|
;;;81     			Write_Data(buf[m]);
000014  5d30              LDRB     r0,[r6,r4]
000016  f7fffffe          BL       Write_Data
00001a  1c64              ADDS     r4,r4,#1
00001c  b2e4              UXTB     r4,r4                 ;80
                  |L4.30|
00001e  42ac              CMP      r4,r5                 ;80
000020  dbf8              BLT      |L4.20|
;;;82     	for(i = n ;i < 16;i++)
000022  b2ec              UXTB     r4,r5
000024  e004              B        |L4.48|
                  |L4.38|
;;;83     			Write_Data(' ');
000026  2020              MOVS     r0,#0x20
000028  f7fffffe          BL       Write_Data
00002c  1c64              ADDS     r4,r4,#1
00002e  b2e4              UXTB     r4,r4                 ;82
                  |L4.48|
000030  2c10              CMP      r4,#0x10              ;82
000032  d3f8              BCC      |L4.38|
;;;84     	Write_Command(0x80+0x40);//第二行数据
000034  20c0              MOVS     r0,#0xc0
000036  f7fffffe          BL       Write_Command
;;;85     	for(i=0;i<16;i++)
00003a  2400              MOVS     r4,#0
                  |L4.60|
;;;86     		Write_Data(' ');	
00003c  2020              MOVS     r0,#0x20
00003e  f7fffffe          BL       Write_Data
000042  1c64              ADDS     r4,r4,#1
000044  b2e4              UXTB     r4,r4                 ;85
000046  2c10              CMP      r4,#0x10              ;85
000048  d3f8              BCC      |L4.60|
;;;87     }
00004a  bd70              POP      {r4-r6,pc}
;;;88     
                          ENDP


                          AREA ||i.display_time||, CODE, READONLY, ALIGN=2

                  display_time PROC
;;;88     
;;;89     void display_time(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;90     {
000002  b089              SUB      sp,sp,#0x24
;;;91     	u8 i;
;;;92     
;;;93     	struct rtc_time tm;
;;;94     	if(hym8563_read_datetime(&tm) == 0)
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       hym8563_read_datetime
;;;95     	{
;;;96     		//printf("读取hym8563日期时间成功\n");
;;;97     	}
;;;98     	
;;;99     		Write_Command(0x80);//第一行
00000a  2080              MOVS     r0,#0x80
00000c  f7fffffe          BL       Write_Command
;;;100    
;;;101    		Write_Data(LCD1602_Table[tm.tm_year/1000]);
000010  9805              LDR      r0,[sp,#0x14]
000012  f44f717a          MOV      r1,#0x3e8
000016  fb90f0f1          SDIV     r0,r0,r1
00001a  4e4d              LDR      r6,|L5.336|
00001c  5c30              LDRB     r0,[r6,r0]
00001e  f7fffffe          BL       Write_Data
;;;102    		Write_Data( LCD1602_Table[tm.tm_year/100%10]);
000022  9805              LDR      r0,[sp,#0x14]
000024  2164              MOVS     r1,#0x64
000026  fb90f0f1          SDIV     r0,r0,r1
00002a  250a              MOVS     r5,#0xa
00002c  fb90f1f5          SDIV     r1,r0,r5
000030  fb050011          MLS      r0,r5,r1,r0
000034  5c30              LDRB     r0,[r6,r0]
000036  f7fffffe          BL       Write_Data
;;;103    		Write_Data( LCD1602_Table[tm.tm_year/10%10]);
00003a  9805              LDR      r0,[sp,#0x14]
00003c  fb90f0f5          SDIV     r0,r0,r5
000040  fb90f1f5          SDIV     r1,r0,r5
000044  fb050011          MLS      r0,r5,r1,r0
000048  5c30              LDRB     r0,[r6,r0]
00004a  f7fffffe          BL       Write_Data
;;;104    		Write_Data( LCD1602_Table[tm.tm_year%10]);
00004e  9805              LDR      r0,[sp,#0x14]
000050  fb90f1f5          SDIV     r1,r0,r5
000054  fb050011          MLS      r0,r5,r1,r0
000058  5c30              LDRB     r0,[r6,r0]
00005a  f7fffffe          BL       Write_Data
;;;105    		Write_Data(':');
00005e  203a              MOVS     r0,#0x3a
000060  f7fffffe          BL       Write_Data
;;;106    		Write_Data( LCD1602_Table[tm.tm_mon/10]);
000064  9804              LDR      r0,[sp,#0x10]
000066  fb90f0f5          SDIV     r0,r0,r5
00006a  5c30              LDRB     r0,[r6,r0]
00006c  f7fffffe          BL       Write_Data
;;;107    		Write_Data( LCD1602_Table[tm.tm_mon%10]);
000070  9804              LDR      r0,[sp,#0x10]
000072  fb90f1f5          SDIV     r1,r0,r5
000076  fb050011          MLS      r0,r5,r1,r0
00007a  5c30              LDRB     r0,[r6,r0]
00007c  f7fffffe          BL       Write_Data
;;;108    		Write_Data(':');
000080  203a              MOVS     r0,#0x3a
000082  f7fffffe          BL       Write_Data
;;;109    		Write_Data( LCD1602_Table[tm.tm_mday/10]);
000086  9803              LDR      r0,[sp,#0xc]
000088  fb90f0f5          SDIV     r0,r0,r5
00008c  5c30              LDRB     r0,[r6,r0]
00008e  f7fffffe          BL       Write_Data
;;;110    		Write_Data( LCD1602_Table[tm.tm_mday%10]);	
000092  9803              LDR      r0,[sp,#0xc]
000094  fb90f1f5          SDIV     r1,r0,r5
000098  fb050011          MLS      r0,r5,r1,r0
00009c  5c30              LDRB     r0,[r6,r0]
00009e  f7fffffe          BL       Write_Data
;;;111    		Write_Data('(');
0000a2  2028              MOVS     r0,#0x28
0000a4  f7fffffe          BL       Write_Data
;;;112    		Write_Data( LCD1602_Table[tm.tm_wday%10]);
0000a8  9806              LDR      r0,[sp,#0x18]
0000aa  fb90f1f5          SDIV     r1,r0,r5
0000ae  fb050011          MLS      r0,r5,r1,r0
0000b2  5c30              LDRB     r0,[r6,r0]
0000b4  f7fffffe          BL       Write_Data
;;;113    		Write_Data(')');
0000b8  2029              MOVS     r0,#0x29
0000ba  f7fffffe          BL       Write_Data
;;;114    		for(i = 13;i < 16;i++)
0000be  240d              MOVS     r4,#0xd
;;;115    			Write_Data(DIS_DAT[i]);
0000c0  f106070b          ADD      r7,r6,#0xb
                  |L5.196|
0000c4  5d38              LDRB     r0,[r7,r4]
0000c6  f7fffffe          BL       Write_Data
0000ca  1c64              ADDS     r4,r4,#1
0000cc  b2e4              UXTB     r4,r4                 ;114
0000ce  2c10              CMP      r4,#0x10              ;114
0000d0  d3f8              BCC      |L5.196|
;;;116    	
;;;117    		Write_Command(0x80 + 0x40);//第二行
0000d2  20c0              MOVS     r0,#0xc0
0000d4  f7fffffe          BL       Write_Command
;;;118    		
;;;119    		Write_Data(LCD1602_Table[tm.tm_hour/10]);
0000d8  9802              LDR      r0,[sp,#8]
0000da  fb90f0f5          SDIV     r0,r0,r5
0000de  5c30              LDRB     r0,[r6,r0]
0000e0  f7fffffe          BL       Write_Data
;;;120    		Write_Data( LCD1602_Table[tm.tm_hour%10]);
0000e4  9802              LDR      r0,[sp,#8]
0000e6  fb90f1f5          SDIV     r1,r0,r5
0000ea  fb050011          MLS      r0,r5,r1,r0
0000ee  5c30              LDRB     r0,[r6,r0]
0000f0  f7fffffe          BL       Write_Data
;;;121    		Write_Data(':');
0000f4  203a              MOVS     r0,#0x3a
0000f6  f7fffffe          BL       Write_Data
;;;122    		Write_Data( LCD1602_Table[tm.tm_min/10]);
0000fa  9801              LDR      r0,[sp,#4]
0000fc  fb90f0f5          SDIV     r0,r0,r5
000100  5c30              LDRB     r0,[r6,r0]
000102  f7fffffe          BL       Write_Data
;;;123    		Write_Data( LCD1602_Table[tm.tm_min%10]);
000106  9801              LDR      r0,[sp,#4]
000108  fb90f1f5          SDIV     r1,r0,r5
00010c  fb050011          MLS      r0,r5,r1,r0
000110  5c30              LDRB     r0,[r6,r0]
000112  f7fffffe          BL       Write_Data
;;;124    		Write_Data(':');
000116  203a              MOVS     r0,#0x3a
000118  f7fffffe          BL       Write_Data
;;;125    		Write_Data( LCD1602_Table[tm.tm_sec/10]);
00011c  9800              LDR      r0,[sp,#0]
00011e  fb90f0f5          SDIV     r0,r0,r5
000122  5c30              LDRB     r0,[r6,r0]
000124  f7fffffe          BL       Write_Data
;;;126    		Write_Data( LCD1602_Table[tm.tm_sec%10]);
000128  9800              LDR      r0,[sp,#0]
00012a  fb90f1f5          SDIV     r1,r0,r5
00012e  fb050011          MLS      r0,r5,r1,r0
000132  5c30              LDRB     r0,[r6,r0]
000134  f7fffffe          BL       Write_Data
;;;127    		for(i = 8;i < 16;i++)
;;;128    		Write_Data(DIS_TIME[i]);
000138  4d05              LDR      r5,|L5.336|
00013a  2408              MOVS     r4,#8                 ;127
00013c  351c              ADDS     r5,r5,#0x1c
                  |L5.318|
00013e  5d28              LDRB     r0,[r5,r4]
000140  f7fffffe          BL       Write_Data
000144  1c64              ADDS     r4,r4,#1
000146  b2e4              UXTB     r4,r4                 ;127
000148  2c10              CMP      r4,#0x10              ;127
00014a  d3f8              BCC      |L5.318|
;;;129    }
00014c  b009              ADD      sp,sp,#0x24
00014e  bdf0              POP      {r4-r7,pc}
                          ENDP

                  |L5.336|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=0

                  LCD1602_Table
000000  30313233          DCB      0x30,0x31,0x32,0x33
000004  34353637          DCB      0x34,0x35,0x36,0x37
000008  383900            DCB      0x38,0x39,0x00
                  DIS_DAT
00000b  32                DCB      0x32
00000c  3031373a          DCB      0x30,0x31,0x37,0x3a
000010  31313a32          DCB      0x31,0x31,0x3a,0x32
000014  31283129          DCB      0x31,0x28,0x31,0x29
000018  20202000          DCB      0x20,0x20,0x20,0x00
                  DIS_TIME
00001c  48483a4d          DCB      0x48,0x48,0x3a,0x4d
000020  4d3a5353          DCB      0x4d,0x3a,0x53,0x53
000024  20202020          DCB      0x20,0x20,0x20,0x20
000028  20202020          DCB      0x20,0x20,0x20,0x20
00002c  00                DCB      0x00

                          AREA ||area_number.9||, DATA, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.data||
                  now_time
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Complex\\display\\display.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_display_c_65163b9a____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_display_c_65163b9a____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_display_c_65163b9a____REVSH|
#line 153
|__asm___9_display_c_65163b9a____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_display_c_65163b9a____RRX|
#line 328
|__asm___9_display_c_65163b9a____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

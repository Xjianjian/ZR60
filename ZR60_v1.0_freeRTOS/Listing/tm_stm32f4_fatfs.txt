; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\tm_stm32f4_fatfs.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\tm_stm32f4_fatfs.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\tm_stm32f4_fatfs.crf ..\..\Complex\FATFS\tm_stm32f4_fatfs.c]
                          THUMB

                          AREA ||i.TM_FATFS_DriveSize||, CODE, READONLY, ALIGN=2

                  TM_FATFS_DriveSize PROC
;;;20     
;;;21     FRESULT TM_FATFS_DriveSize(uint32_t* total, uint32_t* free) {
000000  b57c              PUSH     {r2-r6,lr}
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;22     	FATFS *fs;
;;;23         DWORD fre_clust;
;;;24     	FRESULT res;
;;;25     
;;;26         /* Get volume information and free clusters of drive */
;;;27         res = f_getfree("0:", &fre_clust, &fs);
000006  466a              MOV      r2,sp
000008  a901              ADD      r1,sp,#4
00000a  a00a              ADR      r0,|L1.52|
00000c  f7fffffe          BL       f_getfree
;;;28         if (res != FR_OK) {
000010  2800              CMP      r0,#0
000012  d10d              BNE      |L1.48|
;;;29     		return res;
;;;30     	}
;;;31     
;;;32         /* Get total sectors and free sectors */
;;;33         *total = (fs->n_fatent - 2) * fs->csize / 2;
000014  9800              LDR      r0,[sp,#0]
000016  6981              LDR      r1,[r0,#0x18]
000018  7880              LDRB     r0,[r0,#2]
00001a  1e89              SUBS     r1,r1,#2
00001c  4341              MULS     r1,r0,r1
00001e  0848              LSRS     r0,r1,#1
;;;34         *free = fre_clust * fs->csize / 2;
000020  6028              STR      r0,[r5,#0]
000022  9800              LDR      r0,[sp,#0]
000024  9901              LDR      r1,[sp,#4]
000026  7880              LDRB     r0,[r0,#2]
000028  4348              MULS     r0,r1,r0
00002a  0840              LSRS     r0,r0,#1
;;;35     	
;;;36     	/* Return OK */
;;;37     	return FR_OK;
00002c  6020              STR      r0,[r4,#0]
00002e  2000              MOVS     r0,#0
                  |L1.48|
;;;38     }
000030  bd7c              POP      {r2-r6,pc}
;;;39     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
000034  303a00            DCB      "0:",0
000037  00                DCB      0

                          AREA ||i.TM_FATFS_TruncateBeginning||, CODE, READONLY, ALIGN=1

                  TM_FATFS_TruncateBeginning PROC
;;;58     
;;;59     FRESULT TM_FATFS_TruncateBeginning(FIL* fil, uint32_t index) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4682              MOV      r10,r0
;;;60     	uint8_t Buffer[FATFS_TRUNCATE_BUFFER_SIZE];			/* Buffer for temporary data */
;;;61     
;;;62     	uint32_t FileSize = f_size(fil);					/* Size of file */
000006  68c0              LDR      r0,[r0,#0xc]
000008  b0c2              SUB      sp,sp,#0x108          ;59
;;;63     	uint32_t ReadIndex = index;							/* Starting read index */
;;;64     	uint32_t WriteIndex = 0;							/* We have to write at beginning */
;;;65     	uint32_t TotalSize = FileSize - ReadIndex;			/* New file size after truncate */
00000a  eba00401          SUB      r4,r0,r1
00000e  1e0d              SUBS     r5,r1,#0              ;63
000010  f04f0700          MOV      r7,#0                 ;64
;;;66     	uint32_t NewSize = TotalSize;						/* Save new file size */
000014  46a1              MOV      r9,r4
000016  d010              BEQ      |L2.58|
;;;67     	uint32_t BlockSize;									/* Block size for read operation */
;;;68     	uint32_t Read;										/* Read bytes */
;;;69     	uint32_t Written;									/* Written bytes */
;;;70     	FRESULT fr;											/* Result typedef */
;;;71     	
;;;72     	/* Index is 0 or file is empty, nothing to do */
;;;73     	if (index == 0 || FileSize == 0) {
000018  b178              CBZ      r0,|L2.58|
;;;74     		return FR_OK;
;;;75     	}
;;;76     	
;;;77     	/* Check if index is more than file size, truncate all */
;;;78     	if (index > FileSize) {
;;;79     		fr = f_lseek(fil, 0);								/* Go to beginning */
;;;80     		if (fr) return fr;									/* Check for success */
;;;81     		return f_truncate(fil);								/* Truncate file from new end to actual end */
;;;82     	}
;;;83     	
;;;84     	/* Until we have available data in file after user specific index */
;;;85     	while (TotalSize > 0) {
;;;86     		/* Calculate new block size for new read operation */
;;;87     		BlockSize = (TotalSize > FATFS_TRUNCATE_BUFFER_SIZE) ? (FATFS_TRUNCATE_BUFFER_SIZE) : (TotalSize);
00001a  f44f7880          MOV      r8,#0x100
00001e  4285              CMP      r5,r0                 ;78
000020  d932              BLS      |L2.136|
000022  2100              MOVS     r1,#0                 ;79
000024  4650              MOV      r0,r10                ;79
000026  f7fffffe          BL       f_lseek
00002a  2800              CMP      r0,#0                 ;80
00002c  d102              BNE      |L2.52|
00002e  4650              MOV      r0,r10                ;81
000030  f7fffffe          BL       f_truncate
                  |L2.52|
;;;88     	
;;;89     		fr = f_lseek(fil, ReadIndex);						/* Go to the read index */
;;;90     		if (fr) return fr;									/* Check for success */
;;;91     		fr = f_read(fil, &Buffer, BlockSize, &Read);		/* Read data */
;;;92     		if (fr) return fr;									/* Check for success */
;;;93     
;;;94     		fr = f_lseek(fil, WriteIndex);						/* Go back to the write index */
;;;95     		if (fr) return fr;									/* Check for success */
;;;96     		fr = f_write(fil, &Buffer, BlockSize, &Written);/* Write data */
;;;97     		if (fr) return fr;									/* Check for success */
;;;98     
;;;99     		TotalSize -= BlockSize;								/* Calculate new total size we have more to move everything */
;;;100    		ReadIndex += Read;									/* Calculate new read pointer */
;;;101    		WriteIndex += Written;								/* Calculate new write pointer */
;;;102    	}
;;;103    	
;;;104    	fr = f_lseek(fil, NewSize);								/* Move pointer to the "end" of new file */
;;;105    	if (fr) return fr;										/* Check for success */
;;;106    	fr =  f_truncate(fil);									/* Truncate file from new end to actual end */
;;;107    	return f_lseek(fil, 0);									/* Move pointer to the beginning */
;;;108    }
000034  b042              ADD      sp,sp,#0x108
000036  e8bd87f0          POP      {r4-r10,pc}
                  |L2.58|
00003a  2000              MOVS     r0,#0                 ;74
00003c  e7fa              B        |L2.52|
                  |L2.62|
00003e  4646              MOV      r6,r8                 ;87
000040  42b4              CMP      r4,r6                 ;87
000042  d800              BHI      |L2.70|
000044  4626              MOV      r6,r4                 ;87
                  |L2.70|
000046  4629              MOV      r1,r5                 ;89
000048  4650              MOV      r0,r10                ;89
00004a  f7fffffe          BL       f_lseek
00004e  2800              CMP      r0,#0                 ;90
000050  d1f0              BNE      |L2.52|
000052  ab40              ADD      r3,sp,#0x100          ;91
000054  4632              MOV      r2,r6                 ;91
000056  4669              MOV      r1,sp                 ;91
000058  4650              MOV      r0,r10                ;91
00005a  f7fffffe          BL       f_read
00005e  2800              CMP      r0,#0                 ;92
000060  d1e8              BNE      |L2.52|
000062  4639              MOV      r1,r7                 ;94
000064  4650              MOV      r0,r10                ;94
000066  f7fffffe          BL       f_lseek
00006a  2800              CMP      r0,#0                 ;95
00006c  d1e2              BNE      |L2.52|
00006e  ab41              ADD      r3,sp,#0x104          ;96
000070  4632              MOV      r2,r6                 ;96
000072  4669              MOV      r1,sp                 ;96
000074  4650              MOV      r0,r10                ;96
000076  f7fffffe          BL       f_write
00007a  2800              CMP      r0,#0                 ;97
00007c  d1da              BNE      |L2.52|
00007e  9840              LDR      r0,[sp,#0x100]        ;100
000080  1ba4              SUBS     r4,r4,r6              ;99
000082  4405              ADD      r5,r5,r0              ;100
000084  9841              LDR      r0,[sp,#0x104]        ;101
000086  4407              ADD      r7,r7,r0              ;101
                  |L2.136|
000088  2c00              CMP      r4,#0                 ;85
00008a  d1d8              BNE      |L2.62|
00008c  4649              MOV      r1,r9                 ;104
00008e  4650              MOV      r0,r10                ;104
000090  f7fffffe          BL       f_lseek
000094  2800              CMP      r0,#0                 ;105
000096  d1cd              BNE      |L2.52|
000098  4650              MOV      r0,r10                ;106
00009a  f7fffffe          BL       f_truncate
00009e  2100              MOVS     r1,#0                 ;107
0000a0  4650              MOV      r0,r10                ;107
0000a2  f7fffffe          BL       f_lseek
0000a6  e7c5              B        |L2.52|
                          ENDP


                          AREA ||i.TM_FATFS_USBDriveSize||, CODE, READONLY, ALIGN=2

                  TM_FATFS_USBDriveSize PROC
;;;39     
;;;40     FRESULT TM_FATFS_USBDriveSize(uint32_t* total, uint32_t* free) {
000000  b57c              PUSH     {r2-r6,lr}
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;41     	FATFS *fs;
;;;42         DWORD fre_clust;
;;;43     	FRESULT res;
;;;44     
;;;45         /* Get volume information and free clusters of drive */
;;;46         res = f_getfree("1:", &fre_clust, &fs);
000006  466a              MOV      r2,sp
000008  a901              ADD      r1,sp,#4
00000a  a00a              ADR      r0,|L3.52|
00000c  f7fffffe          BL       f_getfree
;;;47         if (res != FR_OK) {
000010  2800              CMP      r0,#0
000012  d10d              BNE      |L3.48|
;;;48     		return res;
;;;49     	}
;;;50     
;;;51         /* Get total sectors and free sectors */
;;;52         *total = (fs->n_fatent - 2) * fs->csize / 2;
000014  9800              LDR      r0,[sp,#0]
000016  6981              LDR      r1,[r0,#0x18]
000018  7880              LDRB     r0,[r0,#2]
00001a  1e89              SUBS     r1,r1,#2
00001c  4341              MULS     r1,r0,r1
00001e  0848              LSRS     r0,r1,#1
;;;53         *free = fre_clust * fs->csize / 2;
000020  6028              STR      r0,[r5,#0]
000022  9800              LDR      r0,[sp,#0]
000024  9901              LDR      r1,[sp,#4]
000026  7880              LDRB     r0,[r0,#2]
000028  4348              MULS     r0,r1,r0
00002a  0840              LSRS     r0,r0,#1
;;;54     	
;;;55     	/* Return OK */
;;;56     	return FR_OK;
00002c  6020              STR      r0,[r4,#0]
00002e  2000              MOVS     r0,#0
                  |L3.48|
;;;57     }
000030  bd7c              POP      {r2-r6,pc}
;;;58     
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
000034  313a00            DCB      "1:",0
000037  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\Complex\\FATFS\\tm_stm32f4_fatfs.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_tm_stm32f4_fatfs_c_f37542ed____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_tm_stm32f4_fatfs_c_f37542ed____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_tm_stm32f4_fatfs_c_f37542ed____REVSH|
#line 153
|__asm___18_tm_stm32f4_fatfs_c_f37542ed____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_tm_stm32f4_fatfs_c_f37542ed____RRX|
#line 328
|__asm___18_tm_stm32f4_fatfs_c_f37542ed____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

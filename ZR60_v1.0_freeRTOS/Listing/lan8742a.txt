; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\lan8742a.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\lan8742a.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\lan8742a.crf ..\..\Lwip\Bsp\LAN8742A\LAN8742A.c]
                          THUMB

                          AREA ||i.ETH_BSP_Config||, CODE, READONLY, ALIGN=2

                  ETH_BSP_Config PROC
;;;61       */
;;;62     void ETH_BSP_Config(void)
000000  b508              PUSH     {r3,lr}
;;;63     {
;;;64       /* Configure the GPIO ports for ethernet pins */
;;;65       ETH_GPIO_Config();
000002  f7fffffe          BL       ETH_GPIO_Config
;;;66     
;;;67       /* Configure the Ethernet MAC/DMA */
;;;68       ETH_MACDMA_Config();
000006  f7fffffe          BL       ETH_MACDMA_Config
00000a  203d              MOVS     r0,#0x3d
00000c  f88d0000          STRB     r0,[sp,#0]
000010  2002              MOVS     r0,#2
000012  f88d0001          STRB     r0,[sp,#1]
000016  2000              MOVS     r0,#0
000018  f88d0002          STRB     r0,[sp,#2]
00001c  2001              MOVS     r0,#1
00001e  f88d0003          STRB     r0,[sp,#3]
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       NVIC_Init
;;;69     
;;;70       ETH_NVIC_Config();//ÅäÖÃÖÐ¶Ï
;;;71       /* Get Ethernet link status*/
;;;72       if(GET_PHY_LINK_STATUS())
000028  2101              MOVS     r1,#1
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       ETH_ReadPHYRegister
000030  0740              LSLS     r0,r0,#29
000032  d504              BPL      |L1.62|
;;;73       {
;;;74         EthStatus |= ETH_LINK_FLAG;
000034  4802              LDR      r0,|L1.64|
000036  6841              LDR      r1,[r0,#4]  ; EthStatus
000038  f0410110          ORR      r1,r1,#0x10
00003c  6041              STR      r1,[r0,#4]  ; EthStatus
                  |L1.62|
;;;75       }
;;;76     }
00003e  bd08              POP      {r3,pc}
;;;77     
                          ENDP

                  |L1.64|
                          DCD      ||.data||

                          AREA ||i.ETH_CheckLinkStatus||, CODE, READONLY, ALIGN=2

                  ETH_CheckLinkStatus PROC
;;;280    /* It checks link status for ethernet controller */
;;;281    void ETH_CheckLinkStatus(uint16_t PHYAddress) 
000000  b570              PUSH     {r4-r6,lr}
;;;282    {
;;;283    	static uint8_t status = 0;
;;;284    	uint32_t t = GET_PHY_LINK_STATUS();
000002  2101              MOVS     r1,#1
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       ETH_ReadPHYRegister
;;;285    	
;;;286    	/* If we have link and previous check was not yet */
;;;287    	if (t && !status) {
00000a  4c0b              LDR      r4,|L2.56|
00000c  f0100f04          TST      r0,#4                 ;284
000010  f04f0501          MOV      r5,#1                 ;284
;;;288    		/* Set link up */
;;;289    		netif_set_link_up(&gnetif);
;;;290    		
;;;291    		status = 1;
;;;292    	}	
;;;293    	/* If we don't have link and it was on previous check */
;;;294    	if (!t && status) {
000014  7860              LDRB     r0,[r4,#1]  ; status
000016  d006              BEQ      |L2.38|
000018  2800              CMP      r0,#0                 ;287
00001a  d103              BNE      |L2.36|
00001c  4807              LDR      r0,|L2.60|
00001e  f7fffffe          BL       netif_set_link_up
000022  7065              STRB     r5,[r4,#1]            ;291
                  |L2.36|
;;;295    		EthLinkStatus = 1;
;;;296    		/* Set link down */
;;;297    		netif_set_link_down(&gnetif);
;;;298    			
;;;299    		status = 0;
;;;300    	}
;;;301    }
000024  bd70              POP      {r4-r6,pc}
                  |L2.38|
000026  2800              CMP      r0,#0                 ;294
000028  d0fc              BEQ      |L2.36|
00002a  7025              STRB     r5,[r4,#0]            ;295
00002c  4803              LDR      r0,|L2.60|
00002e  f7fffffe          BL       netif_set_link_down
000032  2000              MOVS     r0,#0                 ;299
000034  7060              STRB     r0,[r4,#1]            ;299
000036  bd70              POP      {r4-r6,pc}
;;;302    
                          ENDP

                  |L2.56|
                          DCD      ||.data||
                  |L2.60|
                          DCD      gnetif

                          AREA ||i.ETH_EXTERN_GetSpeedAndDuplex||, CODE, READONLY, ALIGN=1

                  ETH_EXTERN_GetSpeedAndDuplex PROC
;;;414    
;;;415    void ETH_EXTERN_GetSpeedAndDuplex(uint32_t PHYAddress, ETH_InitTypeDef* ETH_InitStruct) 
000000  b510              PUSH     {r4,lr}
;;;416    {
000002  460c              MOV      r4,r1
;;;417    	uint32_t RegValue;
;;;418    
;;;419    /* LAN8720A */
;;;420    	/* Read status register, register number 31 = 0x1F */
;;;421    	RegValue = ETH_ReadPHYRegister(ETHERNET_PHY_ADDRESS, 0x1F);
000004  211f              MOVS     r1,#0x1f
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       ETH_ReadPHYRegister
;;;422    	/* Mask out bits which are not for speed and link indication, bits 4:2 are used */
;;;423    	RegValue = (RegValue >> 2) & 0x07;
00000c  f3c00082          UBFX     r0,r0,#2,#3
000010  2100              MOVS     r1,#0
;;;424    
;;;425    	/* Switch statement */
;;;426    	switch (RegValue) {
000012  2801              CMP      r0,#1
000014  d00b              BEQ      |L3.46|
;;;427    		case 1: /* Base 10, half-duplex */
;;;428    			ETH_InitStruct->ETH_Speed = ETH_Speed_10M;
;;;429    			ETH_InitStruct->ETH_Mode = ETH_Mode_HalfDuplex;
;;;430    			break;
;;;431    		case 2: /* Base 100, half-duplex */
;;;432    			ETH_InitStruct->ETH_Speed = ETH_Speed_100M;
000016  f44f4380          MOV      r3,#0x4000
00001a  2802              CMP      r0,#2                 ;426
00001c  d009              BEQ      |L3.50|
;;;433    			ETH_InitStruct->ETH_Mode = ETH_Mode_HalfDuplex;
;;;434    			break;
;;;435    		case 5: /* Base 10, full-duplex */
;;;436    			ETH_InitStruct->ETH_Speed = ETH_Speed_10M;
;;;437    			ETH_InitStruct->ETH_Mode = ETH_Mode_FullDuplex;
00001e  10da              ASRS     r2,r3,#3
000020  2805              CMP      r0,#5                 ;426
000022  d009              BEQ      |L3.56|
000024  2806              CMP      r0,#6                 ;426
000026  d101              BNE      |L3.44|
;;;438    			break;
;;;439    		case 6: /* Base 100, full-duplex */
;;;440    			ETH_InitStruct->ETH_Speed = ETH_Speed_100M;
000028  6163              STR      r3,[r4,#0x14]
                  |L3.42|
;;;441    			ETH_InitStruct->ETH_Mode = ETH_Mode_FullDuplex;
00002a  6222              STR      r2,[r4,#0x20]
                  |L3.44|
;;;442    			break;
;;;443    		default:
;;;444    			break;
;;;445    	}
;;;446    /* LAN8720A */	  
;;;447    }
00002c  bd10              POP      {r4,pc}
                  |L3.46|
00002e  6161              STR      r1,[r4,#0x14]         ;430
000030  e000              B        |L3.52|
                  |L3.50|
000032  6163              STR      r3,[r4,#0x14]         ;432
                  |L3.52|
000034  6221              STR      r1,[r4,#0x20]         ;433
000036  bd10              POP      {r4,pc}
                  |L3.56|
000038  6161              STR      r1,[r4,#0x14]         ;438
00003a  e7f6              B        |L3.42|
;;;448    /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
                          ENDP


                          AREA ||i.ETH_GPIO_Config||, CODE, READONLY, ALIGN=2

                  ETH_GPIO_Config PROC
;;;183      */
;;;184    void ETH_GPIO_Config(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;185    {
;;;186        GPIO_InitTypeDef GPIO_InitStructure;
;;;187    
;;;188    /* Enable GPIOs clocks */
;;;189      RCC_AHB1PeriphClockCmd(ETH_MDIO_GPIO_CLK            | ETH_MDC_GPIO_CLK          |
000004  2101              MOVS     r1,#1
000006  2045              MOVS     r0,#0x45
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;190                             ETH_RMII_REF_CLK_GPIO_CLK    | ETH_RMII_CRS_DV_GPIO_CLK  |
;;;191                             ETH_RMII_RXD0_GPIO_CLK       | ETH_RMII_RXD1_GPIO_CLK    |
;;;192                             ETH_RMII_TX_EN_GPIO_CLK      | ETH_RMII_TXD0_GPIO_CLK    |
;;;193                             ETH_RMII_TXD1_GPIO_CLK , ENABLE);
;;;194    
;;;195      /* Enable SYSCFG clock */
;;;196      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  038d              LSLS     r5,r1,#14
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;197    
;;;198    
;;;199      /* MII/RMII Media interface selection --------------------------------------*/
;;;200    #ifdef MII_MODE /* Mode MII with STM324xG-EVAL  */
;;;201     #ifdef PHY_CLOCK_MCO
;;;202    
;;;203      /* Output HSE clock (25MHz) on MCO pin (PA8) to clock the PHY */
;;;204      RCC_MCO1Config(RCC_MCO1Source_HSE, RCC_MCO1Div_1);
;;;205     #endif /* PHY_CLOCK_MCO */
;;;206    
;;;207      SYSCFG_ETH_MediaInterfaceConfig(SYSCFG_ETH_MediaInterface_MII);
;;;208    #elif defined RMII_MODE  /* Mode RMII with STM324xG-EVAL */
;;;209    
;;;210      SYSCFG_ETH_MediaInterfaceConfig(SYSCFG_ETH_MediaInterface_RMII);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       SYSCFG_ETH_MediaInterfaceConfig
;;;211    #endif
;;;212    
;;;213    
;;;214    
;;;215    /* Ethernet pins configuration ************************************************/
;;;216       /*
;;;217            ETH_MDIO -------------------------> PA2
;;;218            ETH_MDC --------------------------> PC1
;;;219            ETH_MII_RX_CLK/ETH_RMII_REF_CLK---> PA1
;;;220            ETH_MII_RX_DV/ETH_RMII_CRS_DV ----> PA7
;;;221            ETH_MII_RXD0/ETH_RMII_RXD0 -------> PC4
;;;222            ETH_MII_RXD1/ETH_RMII_RXD1 -------> PC5
;;;223            ETH_MII_TX_EN/ETH_RMII_TX_EN -----> PB11
;;;224            ETH_MII_TXD0/ETH_RMII_TXD0 -------> PG13
;;;225            ETH_MII_TXD1/ETH_RMII_TXD1 -------> PG14
;;;226    				ETH_NRST -------------------------> PI1
;;;227                                                      */
;;;228    
;;;229       /* Configure ETH_MDIO */
;;;230      GPIO_InitStructure.GPIO_Pin = ETH_MDIO_PIN;
00001c  2004              MOVS     r0,#4
;;;231    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00001e  9000              STR      r0,[sp,#0]
000020  2003              MOVS     r0,#3
000022  f88d0005          STRB     r0,[sp,#5]
;;;232      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000026  2402              MOVS     r4,#2
000028  f88d4004          STRB     r4,[sp,#4]
;;;233      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002c  2000              MOVS     r0,#0
00002e  f88d0006          STRB     r0,[sp,#6]
;;;234      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000032  2001              MOVS     r0,#1
;;;235      GPIO_Init(ETH_MDIO_PORT, &GPIO_InitStructure);
000034  4e32              LDR      r6,|L4.256|
000036  f88d0007          STRB     r0,[sp,#7]            ;234
00003a  4669              MOV      r1,sp
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       GPIO_Init
;;;236      GPIO_PinAFConfig(ETH_MDIO_PORT, ETH_MDIO_SOURCE, ETH_MDIO_AF);
000042  220b              MOVS     r2,#0xb
000044  2102              MOVS     r1,#2
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       GPIO_PinAFConfig
;;;237    	
;;;238    	/* Configure ETH_MDC */
;;;239      GPIO_InitStructure.GPIO_Pin = ETH_MDC_PIN;
;;;240      GPIO_Init(ETH_MDC_PORT, &GPIO_InitStructure);
00004c  4f2d              LDR      r7,|L4.260|
00004e  4669              MOV      r1,sp
000050  4638              MOV      r0,r7
000052  9400              STR      r4,[sp,#0]
000054  f7fffffe          BL       GPIO_Init
;;;241      GPIO_PinAFConfig(ETH_MDC_PORT, ETH_MDC_SOURCE, ETH_MDC_AF);
000058  220b              MOVS     r2,#0xb
00005a  2101              MOVS     r1,#1
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       GPIO_PinAFConfig
;;;242    	
;;;243    	/* Configure ETH_RMII_REF_CLK */
;;;244      GPIO_InitStructure.GPIO_Pin = ETH_RMII_REF_CLK_PIN;
;;;245      GPIO_Init(ETH_RMII_REF_CLK_PORT, &GPIO_InitStructure);
000062  4669              MOV      r1,sp
000064  4630              MOV      r0,r6
000066  9400              STR      r4,[sp,#0]
000068  f7fffffe          BL       GPIO_Init
;;;246      GPIO_PinAFConfig(ETH_RMII_REF_CLK_PORT, ETH_RMII_REF_CLK_SOURCE, ETH_RMII_REF_CLK_AF);
00006c  220b              MOVS     r2,#0xb
00006e  2101              MOVS     r1,#1
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       GPIO_PinAFConfig
;;;247    	
;;;248    	/* Configure ETH_RMII_CRS_DV */
;;;249      GPIO_InitStructure.GPIO_Pin = ETH_RMII_CRS_DV_PIN;
000076  2080              MOVS     r0,#0x80
;;;250      GPIO_Init(ETH_RMII_CRS_DV_PORT, &GPIO_InitStructure);
000078  9000              STR      r0,[sp,#0]
00007a  4669              MOV      r1,sp
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       GPIO_Init
;;;251      GPIO_PinAFConfig(ETH_RMII_CRS_DV_PORT, ETH_RMII_CRS_DV_SOURCE, ETH_RMII_CRS_DV_AF);
000082  220b              MOVS     r2,#0xb
000084  2107              MOVS     r1,#7
000086  4630              MOV      r0,r6
000088  f7fffffe          BL       GPIO_PinAFConfig
;;;252    	
;;;253    	/* Configure ETH_RMII_RXD0 */
;;;254      GPIO_InitStructure.GPIO_Pin = ETH_RMII_RXD0_PIN;
00008c  2010              MOVS     r0,#0x10
;;;255      GPIO_Init(ETH_RMII_RXD0_PORT, &GPIO_InitStructure);
00008e  9000              STR      r0,[sp,#0]
000090  4669              MOV      r1,sp
000092  4638              MOV      r0,r7
000094  f7fffffe          BL       GPIO_Init
;;;256      GPIO_PinAFConfig(ETH_RMII_RXD0_PORT, ETH_RMII_RXD0_SOURCE, ETH_RMII_RXD0_AF);
000098  220b              MOVS     r2,#0xb
00009a  2104              MOVS     r1,#4
00009c  4638              MOV      r0,r7
00009e  f7fffffe          BL       GPIO_PinAFConfig
;;;257    	
;;;258    	/* Configure ETH_RMII_RXD1 */
;;;259      GPIO_InitStructure.GPIO_Pin = ETH_RMII_RXD1_PIN;
0000a2  2020              MOVS     r0,#0x20
;;;260      GPIO_Init(ETH_RMII_RXD1_PORT, &GPIO_InitStructure);
0000a4  9000              STR      r0,[sp,#0]
0000a6  4669              MOV      r1,sp
0000a8  4638              MOV      r0,r7
0000aa  f7fffffe          BL       GPIO_Init
;;;261      GPIO_PinAFConfig(ETH_RMII_RXD1_PORT, ETH_RMII_RXD1_SOURCE, ETH_RMII_RXD1_AF);
0000ae  220b              MOVS     r2,#0xb
0000b0  2105              MOVS     r1,#5
0000b2  4638              MOV      r0,r7
0000b4  f7fffffe          BL       GPIO_PinAFConfig
;;;262    	
;;;263    	/* Configure ETH_RMII_TX_EN */
;;;264      GPIO_InitStructure.GPIO_Pin = ETH_RMII_TX_EN_PIN;
0000b8  02a0              LSLS     r0,r4,#10
;;;265      GPIO_Init(ETH_RMII_TX_EN_PORT, &GPIO_InitStructure);
0000ba  4c13              LDR      r4,|L4.264|
0000bc  9000              STR      r0,[sp,#0]
0000be  4669              MOV      r1,sp
0000c0  4620              MOV      r0,r4
0000c2  f7fffffe          BL       GPIO_Init
;;;266      GPIO_PinAFConfig(ETH_RMII_TX_EN_PORT, ETH_RMII_TX_EN_SOURCE, ETH_RMII_TX_EN_AF);
0000c6  220b              MOVS     r2,#0xb
0000c8  4611              MOV      r1,r2
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       GPIO_PinAFConfig
;;;267    	
;;;268    	/* Configure ETH_RMII_TXD0 */
;;;269      GPIO_InitStructure.GPIO_Pin = ETH_RMII_TXD0_PIN;
0000d0  1068              ASRS     r0,r5,#1
;;;270      GPIO_Init(ETH_RMII_TXD0_PORT, &GPIO_InitStructure);
0000d2  9000              STR      r0,[sp,#0]
0000d4  4669              MOV      r1,sp
0000d6  4620              MOV      r0,r4
0000d8  f7fffffe          BL       GPIO_Init
;;;271      GPIO_PinAFConfig(ETH_RMII_TXD0_PORT, ETH_RMII_TXD0_SOURCE, ETH_RMII_TXD0_AF);
0000dc  220b              MOVS     r2,#0xb
0000de  210d              MOVS     r1,#0xd
0000e0  4620              MOV      r0,r4
0000e2  f7fffffe          BL       GPIO_PinAFConfig
;;;272    	
;;;273    	/* Configure ETH_RMII_TXD1 */
;;;274      GPIO_InitStructure.GPIO_Pin = ETH_RMII_TXD1_PIN;
;;;275      GPIO_Init(ETH_RMII_TXD1_PORT, &GPIO_InitStructure);
0000e6  4669              MOV      r1,sp
0000e8  4620              MOV      r0,r4
0000ea  9500              STR      r5,[sp,#0]
0000ec  f7fffffe          BL       GPIO_Init
;;;276      GPIO_PinAFConfig(ETH_RMII_TXD1_PORT, ETH_RMII_TXD1_SOURCE, ETH_RMII_TXD1_AF);		
0000f0  220b              MOVS     r2,#0xb
0000f2  210e              MOVS     r1,#0xe
0000f4  4620              MOV      r0,r4
0000f6  f7fffffe          BL       GPIO_PinAFConfig
;;;277    }
0000fa  e8bd81fc          POP      {r2-r8,pc}
;;;278    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L4.256|
                          DCD      0x40020000
                  |L4.260|
                          DCD      0x40020800
                  |L4.264|
                          DCD      0x40021800

                          AREA ||i.ETH_MACDMA_Config||, CODE, READONLY, ALIGN=2

                  ETH_MACDMA_Config PROC
;;;95       */
;;;96     static void ETH_MACDMA_Config(void)
000000  b510              PUSH     {r4,lr}
;;;97     {
;;;98       /* Enable ETHERNET clock  */
;;;99       RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_ETH_MAC | RCC_AHB1Periph_ETH_MAC_Tx |
000002  2101              MOVS     r1,#1
000004  f04f6060          MOV      r0,#0xe000000
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;100                            RCC_AHB1Periph_ETH_MAC_Rx, ENABLE);
;;;101                            
;;;102      /* Reset ETHERNET on AHB Bus */
;;;103      ETH_DeInit();
00000c  f7fffffe          BL       ETH_DeInit
;;;104    
;;;105      /* Software reset */
;;;106      ETH_SoftwareReset();
000010  f7fffffe          BL       ETH_SoftwareReset
                  |L5.20|
;;;107    
;;;108      /* Wait for software reset */
;;;109      while (ETH_GetSoftwareResetStatus() == SET);
000014  f7fffffe          BL       ETH_GetSoftwareResetStatus
000018  2801              CMP      r0,#1
00001a  d0fb              BEQ      |L5.20|
;;;110    
;;;111      /* ETHERNET Configuration --------------------------------------------------*/
;;;112      /* Call ETH_StructInit if you don't like to configure all ETH_InitStructure parameter */
;;;113      ETH_StructInit(&ETH_InitStructure);
00001c  481a              LDR      r0,|L5.136|
00001e  f7fffffe          BL       ETH_StructInit
;;;114    
;;;115      /* Fill ETH_InitStructure parametrs */
;;;116      /*------------------------   MAC   -----------------------------------*/
;;;117    	/* ¿ªÆôÍøÂç×ÔÊÊÓ¦¹¦ÄÜ */
;;;118      ETH_InitStructure.ETH_AutoNegotiation = ETH_AutoNegotiation_Enable;
000022  4819              LDR      r0,|L5.136|
000024  2101              MOVS     r1,#1
;;;119    //  ETH_InitStructure.ETH_AutoNegotiation = ETH_AutoNegotiation_Disable; 
;;;120    //  ETH_InitStructure.ETH_Speed = ETH_Speed_10M;
;;;121    //  ETH_InitStructure.ETH_Mode = ETH_Mode_FullDuplex;   
;;;122      /* ¹Ø±Õ·´À¡ */
;;;123      ETH_InitStructure.ETH_LoopbackMode = ETH_LoopbackMode_Disable;
;;;124    	/* ¹Ø±ÕÖØ´«¹¦ÄÜ */
;;;125      ETH_InitStructure.ETH_RetryTransmission = ETH_RetryTransmission_Disable;
000026  f44f7200          MOV      r2,#0x200
00002a  f8401b1c          STR      r1,[r0],#0x1c         ;118  ; ETH_InitStructure
00002e  2100              MOVS     r1,#0                 ;123
000030  f8401b0c          STR      r1,[r0],#0xc          ;123  ; ETH_InitStructure
000034  e8e02103          STRD     r2,r1,[r0],#0xc
;;;126    	/* ¹Ø±Õ×Ô¶¯È¥³ýPDA/CRC¹¦ÄÜ  */
;;;127      ETH_InitStructure.ETH_AutomaticPadCRCStrip = ETH_AutomaticPadCRCStrip_Disable;
;;;128    	/* ¹Ø±Õ½ÓÊÕËùÓÐµÄÖ¡ */
;;;129      ETH_InitStructure.ETH_ReceiveAll = ETH_ReceiveAll_Enable;
000038  0592              LSLS     r2,r2,#22
;;;130    	/* ÔÊÐí½ÓÊÕËùÓÐ¹ã²¥Ö¡ */
;;;131      ETH_InitStructure.ETH_BroadcastFramesReception = ETH_BroadcastFramesReception_Enable;
;;;132    	/* ¹Ø±Õ»ìºÏÄ£Ê½µÄµØÖ·¹ýÂË  */
;;;133      ETH_InitStructure.ETH_PromiscuousMode = ETH_PromiscuousMode_Disable;
00003a  6101              STR      r1,[r0,#0x10]  ; ETH_InitStructure
;;;134    	/* ¶ÔÓÚ×é²¥µØÖ·Ê¹ÓÃÍêÃÀµØÖ·¹ýÂË    */
;;;135      ETH_InitStructure.ETH_MulticastFramesFilter = ETH_MulticastFramesFilter_Perfect;
00003c  6181              STR      r1,[r0,#0x18]  ; ETH_InitStructure
;;;136    	/* ¶Ôµ¥²¥µØÖ·Ê¹ÓÃÍêÃÀµØÖ·¹ýÂË  */
;;;137      ETH_InitStructure.ETH_UnicastFramesFilter = ETH_UnicastFramesFilter_Perfect;
00003e  61c1              STR      r1,[r0,#0x1c]  ; ETH_InitStructure
;;;138    //#ifdef CHECKSUM_BY_HARDWARE
;;;139    	/* ¿ªÆôipv4ºÍTCP/UDP/ICMPµÄÖ¡Ð£ÑéºÍÐ¶ÔØ   */
;;;140      ETH_InitStructure.ETH_ChecksumOffload = ETH_ChecksumOffload_Enable;
000040  6042              STR      r2,[r0,#4]  ; ETH_InitStructure
000042  6201              STR      r1,[r0,#0x20]  ; ETH_InitStructure
000044  0d52              LSRS     r2,r2,#21
000046  f8402c10          STR      r2,[r0,#-0x10]  ; ETH_InitStructure
;;;141    //#endif
;;;142    
;;;143      /*------------------------   DMA   -----------------------------------*/  
;;;144    
;;;145      /* When we use the Checksum offload feature, we need to enable the Store and Forward mode:
;;;146      the store and forward guarantee that a whole frame is stored in the FIFO, so the MAC can insert/verify the checksum, 
;;;147      if the checksum is OK the DMA can handle the frame otherwise the frame is dropped */
;;;148    	/*µ±ÎÒÃÇÊ¹ÓÃÖ¡Ð£ÑéºÍÐ¶ÔØ¹¦ÄÜµÄÊ±ºò£¬Ò»¶¨ÒªÊ¹ÄÜ´æ´¢×ª·¢Ä£Ê½,´æ´¢×ª·¢Ä£Ê½ÖÐÒª±£Ö¤Õû¸öÖ¡´æ´¢ÔÚFIFOÖÐ,
;;;149    	ÕâÑùMACÄÜ²åÈë/Ê¶±ð³öÖ¡Ð£ÑéÖµ,µ±ÕæÐ£ÑéÕýÈ·µÄÊ±ºòDMA¾Í¿ÉÒÔ´¦ÀíÖ¡,·ñÔò¾Í¶ªÆúµô¸ÃÖ¡*/
;;;150    	
;;;151    	/* ¿ªÆô¶ªÆúTCP/IP´íÎóÖ¡ */
;;;152      ETH_InitStructure.ETH_DropTCPIPChecksumErrorFrame = ETH_DropTCPIPChecksumErrorFrame_Enable;
;;;153    	/* ¿ªÆô½ÓÊÕÊý¾ÝµÄ´æ´¢×ª·¢Ä£Ê½  */
;;;154      ETH_InitStructure.ETH_ReceiveStoreForward = ETH_ReceiveStoreForward_Enable;
00004a  03d2              LSLS     r2,r2,#15
;;;155    	/* ¿ªÆô·¢ËÍÊý¾ÝµÄ´æ´¢×ª·¢Ä£Ê½   */
;;;156      ETH_InitStructure.ETH_TransmitStoreForward = ETH_TransmitStoreForward_Enable;
00004c  1113              ASRS     r3,r2,#4
00004e  6583              STR      r3,[r0,#0x58]  ; ETH_InitStructure
000050  e9c01213          STRD     r1,r2,[r0,#0x4c]
;;;157    
;;;158    	/* ½ûÖ¹×ª·¢´íÎóÖ¡ */
;;;159      ETH_InitStructure.ETH_ForwardErrorFrames = ETH_ForwardErrorFrames_Disable;
;;;160    	/* ²»×ª·¢¹ýÐ¡µÄºÃÖ¡ */
;;;161      ETH_InitStructure.ETH_ForwardUndersizedGoodFrames = ETH_ForwardUndersizedGoodFrames_Disable;
000054  6601              STR      r1,[r0,#0x60]  ; ETH_InitStructure
;;;162    	/* ´ò¿ª´¦ÀíµÚ¶þÖ¡¹¦ÄÜ */
;;;163      ETH_InitStructure.ETH_SecondFrameOperate = ETH_SecondFrameOperate_Enable;
000056  6641              STR      r1,[r0,#0x64]  ; ETH_InitStructure
000058  2104              MOVS     r1,#4
00005a  e9c0121b          STRD     r1,r2,[r0,#0x6c]
;;;164    	/* ¿ªÆôDMA´«ÊäµÄµØÖ·¶ÔÆë¹¦ÄÜ */
;;;165      ETH_InitStructure.ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
;;;166    	/* ¿ªÆô¹Ì¶¨Í»·¢¹¦ÄÜ */
;;;167      ETH_InitStructure.ETH_FixedBurst = ETH_FixedBurst_Enable;
00005e  0389              LSLS     r1,r1,#14
;;;168    	/* DMA·¢ËÍµÄ×î´óÍ»·¢³¤¶ÈÎª32¸ö½ÚÅÄ */
;;;169      ETH_InitStructure.ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
000060  6741              STR      r1,[r0,#0x74]  ; ETH_InitStructure
000062  0189              LSLS     r1,r1,#6
;;;170    	/*DMA½ÓÊÕµÄ×î´óÍ»·¢³¤¶ÈÎª32¸ö½ÚÅÄ */
;;;171      ETH_InitStructure.ETH_TxDMABurstLength = ETH_TxDMABurstLength_32Beat;
000064  6781              STR      r1,[r0,#0x78]  ; ETH_InitStructure
000066  1249              ASRS     r1,r1,#9
;;;172      ETH_InitStructure.ETH_DMAArbitration = ETH_DMAArbitration_RoundRobin_RxTx_2_1;
000068  67c1              STR      r1,[r0,#0x7c]  ; ETH_InitStructure
00006a  0049              LSLS     r1,r1,#1
;;;173    
;;;174      /* Configure Ethernet */
;;;175      ETH_DMAITConfig(ETH_DMA_IT_NIS | ETH_DMA_IT_R,ENABLE);//Ê¹ÄÜ½ÓÊÕÖÐ¶Ï
00006c  f8c01084          STR      r1,[r0,#0x84]  ; ETH_InitStructure
000070  2101              MOVS     r1,#1
000072  4806              LDR      r0,|L5.140|
000074  f7fffffe          BL       ETH_DMAITConfig
;;;176      EthStatus = ETH_Init(&ETH_InitStructure, ETHERNET_PHY_ADDRESS);
000078  2100              MOVS     r1,#0
00007a  4803              LDR      r0,|L5.136|
00007c  f7fffffe          BL       ETH_Init
000080  4903              LDR      r1,|L5.144|
000082  6048              STR      r0,[r1,#4]  ; EthStatus
;;;177    }
000084  bd10              POP      {r4,pc}
;;;178    
                          ENDP

000086  0000              DCW      0x0000
                  |L5.136|
                          DCD      ||.bss||
                  |L5.140|
                          DCD      0x00010040
                  |L5.144|
                          DCD      ||.data||

                          AREA ||i.ETH_link_callback||, CODE, READONLY, ALIGN=2

                  ETH_link_callback PROC
;;;307      */
;;;308    void ETH_link_callback(struct netif *netif)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;309    {
;;;310      __IO uint32_t timeout = 0;
000004  2500              MOVS     r5,#0
000006  4604              MOV      r4,r0                 ;309
;;;311     uint32_t tmpreg,RegValue;
;;;312      struct ip_addr ipaddr;
;;;313      struct ip_addr netmask;
;;;314      struct ip_addr gw;
;;;315    
;;;316      if(netif_is_link_up(netif))
000008  9503              STR      r5,[sp,#0xc]
00000a  f8900031          LDRB     r0,[r0,#0x31]
;;;317      {
;;;318        /* Restart the autonegotiation */
;;;319        if(ETH_InitStructure.ETH_AutoNegotiation != ETH_AutoNegotiation_Disable)
;;;320        {
;;;321          /* Reset Timeout counter */
;;;322          timeout = 0;
;;;323    
;;;324          /* Enable auto-negotiation */
;;;325          ETH_WritePHYRegister(ETHERNET_PHY_ADDRESS, PHY_BCR, PHY_AutoNegotiation);
;;;326    
;;;327          /* Wait until the auto-negotiation will be completed */
;;;328          do
;;;329          {
;;;330            timeout++;
;;;331          } while (!(ETH_ReadPHYRegister(ETHERNET_PHY_ADDRESS, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));  
;;;332    
;;;333          /* Reset Timeout counter */
;;;334          timeout = 0;
;;;335    
;;;336          /* Read the result of the auto-negotiation */
;;;337          RegValue = ETH_ReadPHYRegister(ETHERNET_PHY_ADDRESS, PHY_SR);
;;;338        
;;;339          /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
;;;340          if((RegValue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
;;;341          {
;;;342            /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
;;;343            ETH_InitStructure.ETH_Mode = ETH_Mode_FullDuplex;  
;;;344          }
;;;345          else
;;;346          {
;;;347            /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
;;;348            ETH_InitStructure.ETH_Mode = ETH_Mode_HalfDuplex;           
;;;349          }
;;;350          /* Configure the MAC with the speed fixed by the auto-negotiation process */
;;;351          if(RegValue & PHY_SPEED_STATUS)
;;;352          {
;;;353            /* Set Ethernet speed to 10M following the auto-negotiation */    
;;;354            ETH_InitStructure.ETH_Speed = ETH_Speed_10M; 
;;;355          }
;;;356          else
;;;357          {
;;;358            /* Set Ethernet speed to 100M following the auto-negotiation */ 
;;;359            ETH_InitStructure.ETH_Speed = ETH_Speed_100M;      
;;;360          }
;;;361    			
;;;362    //    	/* This is different for every PHY */
;;;363    //			ETH_EXTERN_GetSpeedAndDuplex(ETHERNET_PHY_ADDRESS, &ETH_InitStructure);
;;;364    			
;;;365          /*------------------------ ETHERNET MACCR Re-Configuration --------------------*/
;;;366          /* Get the ETHERNET MACCR value */  
;;;367          tmpreg = ETH->MACCR;
;;;368    
;;;369          /* Set the FES bit according to ETH_Speed value */ 
;;;370          /* Set the DM bit according to ETH_Mode value */ 
;;;371          tmpreg |= (uint32_t)(ETH_InitStructure.ETH_Speed | ETH_InitStructure.ETH_Mode);
;;;372    
;;;373          /* Write to ETHERNET MACCR */
;;;374          ETH->MACCR = (uint32_t)tmpreg;
;;;375    
;;;376          _eth_delay_(ETH_REG_WRITE_DELAY);
;;;377          tmpreg = ETH->MACCR;
;;;378          ETH->MACCR = tmpreg;
;;;379        }
;;;380    
;;;381        /* Restart MAC interface */
;;;382        ETH_Start();
;;;383    
;;;384    #ifdef USE_DHCP
;;;385        ipaddr.addr = 0;
;;;386        netmask.addr = 0;
;;;387        gw.addr = 0;
;;;388        DHCP_state = DHCP_START;
00000e  4e2c              LDR      r6,|L6.192|
000010  06c0              LSLS     r0,r0,#27             ;316
000012  d549              BPL      |L6.168|
000014  4c2b              LDR      r4,|L6.196|
000016  6820              LDR      r0,[r4,#0]            ;319  ; ETH_InitStructure
000018  b390              CBZ      r0,|L6.128|
00001a  2100              MOVS     r1,#0                 ;325
00001c  f44f5280          MOV      r2,#0x1000            ;325
000020  4608              MOV      r0,r1                 ;325
000022  f7fffffe          BL       ETH_WritePHYRegister
000026  4f28              LDR      r7,|L6.200|
                  |L6.40|
000028  9803              LDR      r0,[sp,#0xc]          ;330
00002a  2101              MOVS     r1,#1                 ;331
00002c  1c40              ADDS     r0,r0,#1              ;330
00002e  9003              STR      r0,[sp,#0xc]          ;331
000030  2000              MOVS     r0,#0                 ;331
000032  f7fffffe          BL       ETH_ReadPHYRegister
000036  0680              LSLS     r0,r0,#26             ;331
000038  d402              BMI      |L6.64|
00003a  9803              LDR      r0,[sp,#0xc]          ;331
00003c  42b8              CMP      r0,r7                 ;331
00003e  d3f3              BCC      |L6.40|
                  |L6.64|
000040  211f              MOVS     r1,#0x1f              ;337
000042  2000              MOVS     r0,#0                 ;337
000044  9503              STR      r5,[sp,#0xc]          ;337
000046  f7fffffe          BL       ETH_ReadPHYRegister
00004a  06c1              LSLS     r1,r0,#27             ;340
00004c  d503              BPL      |L6.86|
00004e  f44f6100          MOV      r1,#0x800             ;343
000052  6221              STR      r1,[r4,#0x20]         ;343  ; ETH_InitStructure
000054  e000              B        |L6.88|
                  |L6.86|
000056  6225              STR      r5,[r4,#0x20]         ;348  ; ETH_InitStructure
                  |L6.88|
000058  0740              LSLS     r0,r0,#29             ;351
00005a  d501              BPL      |L6.96|
00005c  6165              STR      r5,[r4,#0x14]         ;354  ; ETH_InitStructure
00005e  e002              B        |L6.102|
                  |L6.96|
000060  f44f4080          MOV      r0,#0x4000            ;359
000064  6160              STR      r0,[r4,#0x14]         ;359  ; ETH_InitStructure
                  |L6.102|
000066  4f19              LDR      r7,|L6.204|
000068  6839              LDR      r1,[r7,#0]            ;367
00006a  6a22              LDR      r2,[r4,#0x20]         ;371  ; ETH_InitStructure
00006c  6960              LDR      r0,[r4,#0x14]         ;371  ; ETH_InitStructure
00006e  4310              ORRS     r0,r0,r2              ;371
000070  4308              ORRS     r0,r0,r1              ;371
000072  6038              STR      r0,[r7,#0]            ;374
000074  f64f70ff          MOV      r0,#0xffff            ;376
000078  f7fffffe          BL       ETH_Delay
00007c  6838              LDR      r0,[r7,#0]            ;377
00007e  6038              STR      r0,[r7,#0]            ;378
                  |L6.128|
000080  f7fffffe          BL       ETH_Start
000084  9500              STR      r5,[sp,#0]            ;386
000086  9501              STR      r5,[sp,#4]            ;387
000088  2001              MOVS     r0,#1
00008a  9502              STR      r5,[sp,#8]
00008c  7030              STRB     r0,[r6,#0]
;;;389    #else
;;;390        IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
;;;391        IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
;;;392        IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
;;;393    #endif /* USE_DHCP */
;;;394    
;;;395        netif_set_addr(&gnetif, &ipaddr , &netmask, &gw);
00008e  ab02              ADD      r3,sp,#8
000090  aa01              ADD      r2,sp,#4
000092  4669              MOV      r1,sp
000094  480e              LDR      r0,|L6.208|
000096  f7fffffe          BL       netif_set_addr
;;;396        
;;;397        /* When the netif is fully configured this function must be called.*/
;;;398        netif_set_up(&gnetif);    
00009a  480d              LDR      r0,|L6.208|
00009c  f7fffffe          BL       netif_set_up
;;;399    
;;;400        EthLinkStatus = 0;
0000a0  480c              LDR      r0,|L6.212|
0000a2  7005              STRB     r5,[r0,#0]
                  |L6.164|
;;;401      }
;;;402      else
;;;403      {
;;;404        ETH_Stop();
;;;405    #ifdef USE_DHCP
;;;406        DHCP_state = DHCP_LINK_DOWN;
;;;407        dhcp_stop(netif);
;;;408    #endif /* USE_DHCP */
;;;409    
;;;410        /*  When the netif link is down this function must be called.*/
;;;411        netif_set_down(&gnetif);
;;;412      }
;;;413    }
0000a4  e8bd81ff          POP      {r0-r8,pc}
                  |L6.168|
0000a8  f7fffffe          BL       ETH_Stop
0000ac  2005              MOVS     r0,#5                 ;406
0000ae  7030              STRB     r0,[r6,#0]            ;406
0000b0  4620              MOV      r0,r4                 ;407
0000b2  f7fffffe          BL       dhcp_stop
0000b6  4806              LDR      r0,|L6.208|
0000b8  f7fffffe          BL       netif_set_down
0000bc  e7f2              B        |L6.164|
;;;414    
                          ENDP

0000be  0000              DCW      0x0000
                  |L6.192|
                          DCD      DHCP_state
                  |L6.196|
                          DCD      ||.bss||
                  |L6.200|
                          DCD      0x0004ffff
                  |L6.204|
                          DCD      0x40028000
                  |L6.208|
                          DCD      gnetif
                  |L6.212|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ETH_InitStructure
                          %        188

                          AREA ||.data||, DATA, ALIGN=2

                  EthLinkStatus
000000  00                DCB      0x00
                  status
000001  000000            DCB      0x00,0x00,0x00
                  EthStatus
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Lwip\\Bsp\\LAN8742A\\LAN8742A.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_LAN8742A_c_2f210e87____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_LAN8742A_c_2f210e87____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_LAN8742A_c_2f210e87____REVSH|
#line 153
|__asm___10_LAN8742A_c_2f210e87____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_LAN8742A_c_2f210e87____RRX|
#line 328
|__asm___10_LAN8742A_c_2f210e87____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\tcp_client_lngconnect.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\tcp_client_lngconnect.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\tcp_client_lngconnect.crf ..\..\Lwip\App\tcp_client_LngConnect.c]
                          THUMB

                          AREA ||i.Gettcp_u_LngConnect_Timeout||, CODE, READONLY, ALIGN=2

                  Gettcp_u_LngConnect_Timeout PROC
;;;749    */
;;;750    uint8 Gettcp_u_LngConnect_Timeout(void)
000000  4801              LDR      r0,|L1.8|
;;;751    {
;;;752    	return Se_u_CnntTimeoutFlg;
000002  78c0              LDRB     r0,[r0,#3]  ; Se_u_CnntTimeoutFlg
;;;753    }
000004  4770              BX       lr
;;;754    #endif /* LWIP_TCP */
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      ||.data||

                          AREA ||i.tcp_LngConnectErr||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tcp_LngConnectErr PROC
;;;291    */
;;;292    static void tcp_LngConnectErr(void *arg,err_t err)
000000  b570              PUSH     {r4-r6,lr}
;;;293    {     
000002  460e              MOV      r6,r1
;;;294    	USART_PRINTF_S("长连接err处理");
000004  a11b              ADR      r1,|L2.116|
000006  a01f              ADR      r0,|L2.132|
000008  f7fffffe          BL       __2printf
00000c  2400              MOVS     r4,#0
;;;295        switch(err)  
;;;296        {   
;;;297            case ERR_MEM:                                            /* Out of memory error.     */  
;;;298                USART_PRINTF_S("\r\n ERR_MEM   \r\n");  
;;;299            break;    
;;;300            case ERR_BUF:                                            /* Buffer error.            */  
;;;301                USART_PRINTF_S("\r\n ERR_BUF   \r\n");  
;;;302            break;  
;;;303            case  ERR_TIMEOUT:                                       /* Timeout.                 */  
;;;304                USART_PRINTF_S("\r\n ERR_TIMEOUT   \r\n");  
;;;305            break;  
;;;306            case ERR_RTE:                                            /* Routing problem.         */        
;;;307    			USART_PRINTF_S("\r\n ERR_RTE   \r\n");  
;;;308            break;  
;;;309    		case ERR_ISCONN:                                          /* Already connected.       */  
;;;310    			USART_PRINTF_S("\r\n ERR_ISCONN   \r\n");  
;;;311            break;  
;;;312            case ERR_ABRT:                                           /* Connection aborted.      */  
;;;313                USART_PRINTF_S("\r\n ERR_ABRT   \r\n");  
;;;314    			client_pcb = NULL;
00000e  4d1e              LDR      r5,|L2.136|
000010  360f              ADDS     r6,r6,#0xf
000012  2e0f              CMP      r6,#0xf               ;295
000014  d21e              BCS      |L2.84|
000016  e8dff006          TBB      [pc,r6]               ;295
00001a  2420              DCB      0x24,0x20
00001c  16181412          DCB      0x16,0x18,0x14,0x12
000020  10221d1e          DCB      0x10,0x22,0x1d,0x1e
000024  260e0c0a          DCB      0x26,0x0e,0x0c,0x0a
000028  0800              DCB      0x08,0x00
00002a  a118              ADR      r1,|L2.140|
00002c  e01c              B        |L2.104|
00002e  a11b              ADR      r1,|L2.156|
000030  e01a              B        |L2.104|
000032  a11e              ADR      r1,|L2.172|
000034  e018              B        |L2.104|
000036  a122              ADR      r1,|L2.192|
000038  e016              B        |L2.104|
00003a  a125              ADR      r1,|L2.208|
00003c  e014              B        |L2.104|
00003e  a129              ADR      r1,|L2.228|
;;;315            break;  
000040  e004              B        |L2.76|
;;;316            case ERR_RST:                                            /* Connection reset.        */       
;;;317                USART_PRINTF_S("\r\n ERR_RST   \r\n");  
000042  a12d              ADR      r1,|L2.248|
;;;318    			client_pcb = NULL;
;;;319            break;  
000044  e002              B        |L2.76|
;;;320            case ERR_CONN:                                           /* Not connected.           */  
;;;321    			USART_PRINTF_S("\r\n ERR_CONN   \r\n");  
000046  a130              ADR      r1,|L2.264|
;;;322            break;  
000048  e00e              B        |L2.104|
;;;323            case ERR_CLSD:                                           /* Connection closed.       */  
;;;324                USART_PRINTF_S("\r\n ERR_CLSD   \r\n"); 
00004a  a134              ADR      r1,|L2.284|
                  |L2.76|
00004c  a00d              ADR      r0,|L2.132|
00004e  f7fffffe          BL       __2printf
;;;325    			client_pcb = NULL;
000052  612c              STR      r4,[r5,#0x10]  ; client_pcb
                  |L2.84|
;;;326            break;  
;;;327            case ERR_VAL:                                            /* Illegal value.           */  
;;;328    			USART_PRINTF_S("\r\n ERR_VAL   \r\n");  
;;;329    			return;  
;;;330            case ERR_ARG:                                            /* Illegal argument.        */  
;;;331                USART_PRINTF_S("\r\n ERR_ARG   \r\n");  
;;;332                return;  
;;;333            case ERR_USE:                                            /* Address in use.          */  
;;;334    			USART_PRINTF_S("\r\n ERR_USE   \r\n");  
;;;335    			return;   
;;;336            case ERR_IF:                                             /* Low-level netif error    */  
;;;337                USART_PRINTF_S("\r\n ERR_IF   \r\n");  
;;;338            break;  
;;;339            case ERR_INPROGRESS:                                     /* Operation in progress    */  
;;;340                USART_PRINTF_S("\r\n ERR_INPROGRESS   \r\n");  
;;;341            break;  
;;;342    		default:
;;;343    		break;
;;;344        }  
;;;345    }
000054  bd70              POP      {r4-r6,pc}
000056  a136              ADR      r1,|L2.304|
000058  e006              B        |L2.104|
00005a  a139              ADR      r1,|L2.320|
00005c  e004              B        |L2.104|
00005e  a13c              ADR      r1,|L2.336|
000060  e002              B        |L2.104|
000062  a13f              ADR      r1,|L2.352|
000064  e000              B        |L2.104|
000066  a142              ADR      r1,|L2.368|
                  |L2.104|
000068  e8bd4070          POP      {r4-r6,lr}            ;340
00006c  a005              ADR      r0,|L2.132|
00006e  f7ffbffe          B.W      __2printf
;;;346    
                          ENDP

000072  0000              DCW      0x0000
                  |L2.116|
000074  b3a4c1ac          DCB      179,164,193,172,189,211,"err",180,166,192,237,0
000078  bdd36572
00007c  72b4a6c0
000080  ed00    
000082  00                DCB      0
000083  00                DCB      0
                  |L2.132|
000084  25730a00          DCB      "%s\n",0
                  |L2.136|
                          DCD      ||.data||
                  |L2.140|
00008c  0d0a2045          DCB      "\r\n ERR_MEM   \r\n",0
000090  52525f4d
000094  454d2020
000098  200d0a00
                  |L2.156|
00009c  0d0a2045          DCB      "\r\n ERR_BUF   \r\n",0
0000a0  52525f42
0000a4  55462020
0000a8  200d0a00
                  |L2.172|
0000ac  0d0a2045          DCB      "\r\n ERR_TIMEOUT   \r\n",0
0000b0  52525f54
0000b4  494d454f
0000b8  55542020
0000bc  200d0a00
                  |L2.192|
0000c0  0d0a2045          DCB      "\r\n ERR_RTE   \r\n",0
0000c4  52525f52
0000c8  54452020
0000cc  200d0a00
                  |L2.208|
0000d0  0d0a2045          DCB      "\r\n ERR_ISCONN   \r\n",0
0000d4  52525f49
0000d8  53434f4e
0000dc  4e202020
0000e0  0d0a00  
0000e3  00                DCB      0
                  |L2.228|
0000e4  0d0a2045          DCB      "\r\n ERR_ABRT   \r\n",0
0000e8  52525f41
0000ec  42525420
0000f0  20200d0a
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L2.248|
0000f8  0d0a2045          DCB      "\r\n ERR_RST   \r\n",0
0000fc  52525f52
000100  53542020
000104  200d0a00
                  |L2.264|
000108  0d0a2045          DCB      "\r\n ERR_CONN   \r\n",0
00010c  52525f43
000110  4f4e4e20
000114  20200d0a
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L2.284|
00011c  0d0a2045          DCB      "\r\n ERR_CLSD   \r\n",0
000120  52525f43
000124  4c534420
000128  20200d0a
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L2.304|
000130  0d0a2045          DCB      "\r\n ERR_VAL   \r\n",0
000134  52525f56
000138  414c2020
00013c  200d0a00
                  |L2.320|
000140  0d0a2045          DCB      "\r\n ERR_ARG   \r\n",0
000144  52525f41
000148  52472020
00014c  200d0a00
                  |L2.336|
000150  0d0a2045          DCB      "\r\n ERR_USE   \r\n",0
000154  52525f55
000158  53452020
00015c  200d0a00
                  |L2.352|
000160  0d0a2045          DCB      "\r\n ERR_IF   \r\n",0
000164  52525f49
000168  46202020
00016c  0d0a00  
00016f  00                DCB      0
                  |L2.368|
000170  0d0a2045          DCB      "\r\n ERR_INPROGRESS   \r\n",0
000174  52525f49
000178  4e50524f
00017c  47524553
000180  53202020
000184  0d0a00  
000187  00                DCB      0

                          AREA ||i.tcp_LngConnect_Connect||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  tcp_LngConnect_Connect PROC
;;;257    */
;;;258    char tcp_LngConnect_Connect(void)
000000  b570              PUSH     {r4-r6,lr}
;;;259    {
;;;260    	char ret;
;;;261    	//struct ip_addr DestIPaddr;
;;;262    	/* create new tcp pcb */
;;;263    	client_pcb = tcp_new();
000002  f7fffffe          BL       tcp_new
000006  4d12              LDR      r5,|L3.80|
;;;264    	if (client_pcb != NULL)
000008  6128              STR      r0,[r5,#0x10]  ; client_pcb
00000a  b1d0              CBZ      r0,|L3.66|
;;;265    	{
;;;266    		tcp_bind(client_pcb, IP_ADDR_ANY, 0); 
00000c  2200              MOVS     r2,#0
00000e  4911              LDR      r1,|L3.84|
000010  f7fffffe          BL       tcp_bind
;;;267    		/* connect to destination address/port */
;;;268    		ret = tcp_connect(client_pcb,&LngConnect_DestIPaddr,9800,tcp_client_connected);
000014  4b10              LDR      r3,|L3.88|
000016  f2426248          MOV      r2,#0x2648
00001a  f1050118          ADD      r1,r5,#0x18
00001e  6928              LDR      r0,[r5,#0x10]  ; client_pcb
000020  f7fffffe          BL       tcp_connect
000024  f01004ff          ANDS     r4,r0,#0xff
;;;269    		if(ERR_OK != ret)
000028  d006              BEQ      |L3.56|
;;;270    		{
;;;271    			memp_free(MEMP_TCP_PCB, client_pcb);
00002a  2002              MOVS     r0,#2
00002c  6929              LDR      r1,[r5,#0x10]  ; client_pcb
00002e  f7fffffe          BL       memp_free
;;;272    			client_pcb = NULL;
000032  2000              MOVS     r0,#0
000034  6128              STR      r0,[r5,#0x10]  ; client_pcb
000036  e009              B        |L3.76|
                  |L3.56|
;;;273    		}
;;;274    		else
;;;275    		{
;;;276    			tcp_err(client_pcb,tcp_LngConnectErr); 
000038  4908              LDR      r1,|L3.92|
00003a  6928              LDR      r0,[r5,#0x10]  ; client_pcb
00003c  f7fffffe          BL       tcp_err
000040  e004              B        |L3.76|
                  |L3.66|
;;;277    		}
;;;278    	}
;;;279    	else
;;;280    	{
;;;281    		ret = ERR_MEM;
000042  24ff              MOVS     r4,#0xff
;;;282    		/* deallocate the pcb */
;;;283    		USART_PRINTF_S("长连接tcp控制块分配失败");
000044  a106              ADR      r1,|L3.96|
000046  a00c              ADR      r0,|L3.120|
000048  f7fffffe          BL       __2printf
                  |L3.76|
;;;284    	}
;;;285    	return ret;
00004c  4620              MOV      r0,r4
;;;286    }
00004e  bd70              POP      {r4-r6,pc}
;;;287    
                          ENDP

                  |L3.80|
                          DCD      ||.data||
                  |L3.84|
                          DCD      ip_addr_any
                  |L3.88|
                          DCD      tcp_client_connected
                  |L3.92|
                          DCD      tcp_LngConnectErr
                  |L3.96|
000060  b3a4c1ac          DCB      179,164,193,172,189,211,"tcp",191,216,214,198,191,233,183
000064  bdd37463
000068  70bfd8d6
00006c  c6bfe9b7
000070  d6c5e4ca          DCB      214,197,228,202,167,176,220,0
000074  a7b0dc00
                  |L3.120|
000078  25730a00          DCB      "%s\n",0

                          AREA ||i.tcp_LngConnect_MainFunction||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tcp_LngConnect_MainFunction PROC
;;;129    ******************************************************/
;;;130    void tcp_LngConnect_MainFunction(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;131    {
;;;132    	//u16_t Le_w_i;
;;;133    	
;;;134    	if(0 == GET_PHY_LINK_STATUS())/* Get Ethernet link status*/
000004  2101              MOVS     r1,#1
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       ETH_ReadPHYRegister
;;;135    	{
;;;136    		Setcp_client_w_CnntTimeout = 0U;
00000c  4d51              LDR      r5,|L4.340|
00000e  0740              LSLS     r0,r0,#29             ;134
000010  f04f0400          MOV      r4,#0                 ;134
000014  d408              BMI      |L4.40|
000016  816c              STRH     r4,[r5,#0xa]
;;;137    		Setcp_client_u_HeartFlg = 0U;
000018  70ac              STRB     r4,[r5,#2]
;;;138    		Setcp_client_w_DelayTimer = 0u;
00001a  80ec              STRH     r4,[r5,#6]
;;;139    		Setcp_client_u_cnntSt = CLIENT_LNGCNNT_IDLE;
00001c  706c              STRB     r4,[r5,#1]
;;;140    		Setcp_client_w_HeartTimer = 0U;
00001e  812c              STRH     r4,[r5,#8]
;;;141    		tcp_LngConnect_disconnect();
000020  e8bd41f0          POP      {r4-r8,lr}
000024  f7ffbffe          B.W      tcp_LngConnect_disconnect
                  |L4.40|
;;;142    		return;
;;;143    	}
;;;144    	
;;;145    	if(Setcp_client_w_HeartTimer >= CLIENT_LNGCNNT_PERIOD)//每33s心跳1次
000028  8928              LDRH     r0,[r5,#8]  ; Setcp_client_w_HeartTimer
00002a  f64111c8          MOV      r1,#0x19c8
00002e  2601              MOVS     r6,#1                 ;134
000030  4288              CMP      r0,r1
000032  d302              BCC      |L4.58|
;;;146    	{
;;;147    		Setcp_client_w_HeartTimer = 0U;
000034  812c              STRH     r4,[r5,#8]
;;;148    		Setcp_client_u_HeartFlg = 1U;
000036  70ae              STRB     r6,[r5,#2]
000038  e001              B        |L4.62|
                  |L4.58|
00003a  1c40              ADDS     r0,r0,#1
;;;149    	}
;;;150    	else
;;;151    	{
;;;152    		Setcp_client_w_HeartTimer++;
00003c  8128              STRH     r0,[r5,#8]
                  |L4.62|
;;;153    	}
;;;154    	
;;;155    	switch(Setcp_client_u_cnntSt)
00003e  7868              LDRB     r0,[r5,#1]  ; Setcp_client_u_cnntSt
000040  b178              CBZ      r0,|L4.98|
000042  2801              CMP      r0,#1
000044  d02e              BEQ      |L4.164|
000046  2802              CMP      r0,#2
000048  d109              BNE      |L4.94|
;;;156    	{
;;;157    		case CLIENT_LNGCNNT_IDLE:
;;;158    		{
;;;159    			if(Setcp_client_w_DelayTimer >= 1000)
;;;160    			{
;;;161    				Setcp_client_w_DelayTimer = 0U;
;;;162    				if(CLIENT_LNGCNNT_DHCP_STATE == DHCP_ADDRESS_ASSIGNED)
;;;163    				{			
;;;164    					if(1U != GetdnsAnalysis_u_ipValidity(LngConnect))
;;;165    					{
;;;166    						return;
;;;167    					}
;;;168    					GetdnsAnalysis_ipAddr(LngConnect,&LngConnect_DestIPaddr);
;;;169    					//IP4_ADDR(&LngConnect_DestIPaddr, 10, 0, 0, 215);
;;;170    					//IP4_ADDR(&LngConnect_DestIPaddr, 10, 0, 0, 16);
;;;171    					if(ERR_OK == tcp_LngConnect_Connect())
;;;172    					{
;;;173    						USART_PRINTF_S("建立长连接...");
;;;174    						Setcp_client_w_CnntTimeout = 0U;
;;;175    						Setcp_client_w_DelayTimer = 0U;
;;;176    						Setcp_client_u_cnntSt = CLIENT_LNGCNNT_CNNT;
;;;177    					}
;;;178    				}
;;;179    			}
;;;180    			else
;;;181    			{
;;;182    				Setcp_client_w_DelayTimer++;
;;;183    			}
;;;184    		}
;;;185    		break;
;;;186    		case CLIENT_LNGCNNT_CNNT:
;;;187    		{		
;;;188    			Setcp_client_w_CnntTimeout++;
;;;189    			if(Setcp_client_w_CnntTimeout >= 15000)
;;;190    			{//回应超时，75s
;;;191    				USART_PRINTF_S("长连接回应超时");
;;;192    				Se_u_CnntTimeoutFlg = 1U;//连接超时标志
;;;193    				SetdnsAnalysis_ipUpdate(LngConnect);//更新ip
;;;194    				Setcp_client_u_cnntSt = CLIENT_LNGCNNT_DISCNNT;
;;;195    				return;
;;;196    			}
;;;197    			
;;;198    			if((client_es->state == ES_CONNECTED) && (ESTABLISHED == client_pcb->state))
;;;199    			{
;;;200    				Setcp_client_w_DelayTimer = 0U;
;;;201    				Se_u_CnntTimeoutFlg = 0U;//连接超时标志
;;;202    				if((1U == Setcp_client_u_HeartFlg) && (GetLngCnnt_PerformCondition))
;;;203    				{//发送心跳==注册别名
;;;204    					Setcp_client_u_HeartFlg = 0U;
;;;205    					//se_w_lng = sizeof(Setcp_Alias.Alias);
;;;206    					memset(Setcp_client_u_TxBuf,0,sizeof(Setcp_client_u_TxBuf));//清0
;;;207    					Json_HexToJson(Setcp_Alias.Alias,&se_w_lng,JSON_HEART_BEAT,Setcp_client_u_TxBuf);
;;;208    					tcp_LngConnect_sendMsg(Setcp_client_u_TxBuf,se_w_lng);					
;;;209    					USART_PRINTF_S("长连接发送心跳报文");
;;;210    					USART_PRINTF_S(Setcp_client_u_TxBuf);
;;;211    				}
;;;212    			}
;;;213    			else//延时等待一段时间
;;;214    			{
;;;215    				if(client_es->state == ES_CLOSING)
;;;216    				{//远端关闭连接
;;;217    					Setcp_client_u_cnntSt = CLIENT_LNGCNNT_DISCNNT;
;;;218    					return;
;;;219    				}
;;;220    				
;;;221    				Setcp_client_w_DelayTimer++;
;;;222    				if(Setcp_client_w_DelayTimer >= 600)
;;;223    				{
;;;224    					USART_PRINTF_S("建立长连接超时");
;;;225    					Se_u_CnntTimeoutCnt++;
;;;226    					if(Se_u_CnntTimeoutCnt >= 3U)
;;;227    					{
;;;228    						Se_u_CnntTimeoutCnt = 0U;
;;;229    						Se_u_CnntTimeoutFlg = 1U;//连接超时标志
;;;230    						SetdnsAnalysis_ipUpdate(LngConnect);//更新ip
;;;231    					}
;;;232    					Setcp_client_u_cnntSt = CLIENT_LNGCNNT_DISCNNT;
;;;233    				}
;;;234    			}
;;;235    		}
;;;236    		break;
;;;237    		case CLIENT_LNGCNNT_DISCNNT:
;;;238    		{
;;;239    			tcp_LngConnect_disconnect();
00004a  f7fffffe          BL       tcp_LngConnect_disconnect
;;;240    			USART_PRINTF_S("长连接断开...");
00004e  a142              ADR      r1,|L4.344|
000050  a045              ADR      r0,|L4.360|
000052  f7fffffe          BL       __2printf
;;;241    			Setcp_client_w_CnntTimeout = 0U;
000056  816c              STRH     r4,[r5,#0xa]
;;;242    			Setcp_client_u_HeartFlg = 0U;
000058  70ac              STRB     r4,[r5,#2]
;;;243    			Setcp_client_w_DelayTimer = 0U;
00005a  80ec              STRH     r4,[r5,#6]
;;;244    			Setcp_client_u_cnntSt = CLIENT_LNGCNNT_IDLE;
00005c  706c              STRB     r4,[r5,#1]
                  |L4.94|
;;;245    		}
;;;246    		break;
;;;247    		default:
;;;248    		break;
;;;249    	}
;;;250    }
00005e  e8bd81f0          POP      {r4-r8,pc}
                  |L4.98|
000062  88e8              LDRH     r0,[r5,#6]            ;159  ; Setcp_client_w_DelayTimer
000064  f5b07f7a          CMP      r0,#0x3e8             ;159
000068  d319              BCC      |L4.158|
00006a  4840              LDR      r0,|L4.364|
00006c  80ec              STRH     r4,[r5,#6]            ;161
00006e  7800              LDRB     r0,[r0,#0]            ;162  ; DHCP_state
000070  2803              CMP      r0,#3                 ;162
000072  d1f4              BNE      |L4.94|
000074  2001              MOVS     r0,#1                 ;164
000076  f7fffffe          BL       GetdnsAnalysis_u_ipValidity
00007a  2801              CMP      r0,#1                 ;164
00007c  d1ef              BNE      |L4.94|
00007e  4935              LDR      r1,|L4.340|
000080  3118              ADDS     r1,r1,#0x18           ;168
000082  f7fffffe          BL       GetdnsAnalysis_ipAddr
000086  f7fffffe          BL       tcp_LngConnect_Connect
00008a  2800              CMP      r0,#0                 ;171
00008c  d1e7              BNE      |L4.94|
00008e  a138              ADR      r1,|L4.368|
000090  a035              ADR      r0,|L4.360|
000092  f7fffffe          BL       __2printf
000096  816c              STRH     r4,[r5,#0xa]          ;174
000098  80ec              STRH     r4,[r5,#6]            ;175
00009a  706e              STRB     r6,[r5,#1]            ;176
00009c  e7df              B        |L4.94|
                  |L4.158|
00009e  1c40              ADDS     r0,r0,#1
0000a0  80e8              STRH     r0,[r5,#6]            ;182
0000a2  e7dc              B        |L4.94|
                  |L4.164|
0000a4  8968              LDRH     r0,[r5,#0xa]          ;188  ; Setcp_client_w_CnntTimeout
0000a6  f6432198          MOV      r1,#0x3a98            ;189
0000aa  1c40              ADDS     r0,r0,#1              ;188
0000ac  b280              UXTH     r0,r0                 ;188
0000ae  2702              MOVS     r7,#2                 ;136
0000b0  8168              STRH     r0,[r5,#0xa]          ;188
0000b2  4288              CMP      r0,r1                 ;189
0000b4  d304              BCC      |L4.192|
0000b6  a132              ADR      r1,|L4.384|
0000b8  a02b              ADR      r0,|L4.360|
0000ba  f7fffffe          BL       __2printf
0000be  e017              B        |L4.240|
                  |L4.192|
0000c0  6968              LDR      r0,[r5,#0x14]         ;198  ; client_es
0000c2  7800              LDRB     r0,[r0,#0]            ;198
0000c4  2801              CMP      r0,#1                 ;198
0000c6  d019              BEQ      |L4.252|
0000c8  2803              CMP      r0,#3                 ;215
0000ca  d015              BEQ      |L4.248|
                  |L4.204|
0000cc  88e8              LDRH     r0,[r5,#6]            ;221  ; Setcp_client_w_DelayTimer
0000ce  1c40              ADDS     r0,r0,#1              ;221
0000d0  b280              UXTH     r0,r0                 ;221
0000d2  80e8              STRH     r0,[r5,#6]            ;221
0000d4  f5b07f16          CMP      r0,#0x258             ;222
0000d8  d3c1              BCC      |L4.94|
0000da  a12d              ADR      r1,|L4.400|
0000dc  a022              ADR      r0,|L4.360|
0000de  f7fffffe          BL       __2printf
0000e2  7928              LDRB     r0,[r5,#4]            ;225  ; Se_u_CnntTimeoutCnt
0000e4  1c40              ADDS     r0,r0,#1              ;225
0000e6  b2c0              UXTB     r0,r0                 ;225
0000e8  7128              STRB     r0,[r5,#4]            ;225
0000ea  2803              CMP      r0,#3                 ;226
0000ec  d304              BCC      |L4.248|
0000ee  712c              STRB     r4,[r5,#4]            ;228
                  |L4.240|
0000f0  70ee              STRB     r6,[r5,#3]            ;192
0000f2  2001              MOVS     r0,#1                 ;193
0000f4  f7fffffe          BL       SetdnsAnalysis_ipUpdate
                  |L4.248|
0000f8  706f              STRB     r7,[r5,#1]            ;232
0000fa  e7b0              B        |L4.94|
                  |L4.252|
0000fc  6928              LDR      r0,[r5,#0x10]         ;198  ; client_pcb
0000fe  7e00              LDRB     r0,[r0,#0x18]         ;198
000100  2804              CMP      r0,#4                 ;198
000102  d1e3              BNE      |L4.204|
000104  80ec              STRH     r4,[r5,#6]            ;200
000106  70ec              STRB     r4,[r5,#3]            ;201
000108  78a8              LDRB     r0,[r5,#2]            ;202  ; Setcp_client_u_HeartFlg
00010a  2801              CMP      r0,#1                 ;202
00010c  d1a7              BNE      |L4.94|
00010e  f7fffffe          BL       Gethttp_CnntTxSt
000112  2800              CMP      r0,#0                 ;202
000114  d1a3              BNE      |L4.94|
000116  f7fffffe          BL       GetStm8_fm17550_iapIdle
00011a  2801              CMP      r0,#1                 ;202
00011c  d19f              BNE      |L4.94|
00011e  70ac              STRB     r4,[r5,#2]            ;204
000120  21c8              MOVS     r1,#0xc8              ;206
000122  481f              LDR      r0,|L4.416|
000124  f7fffffe          BL       __aeabi_memclr
000128  4b1d              LDR      r3,|L4.416|
00012a  490a              LDR      r1,|L4.340|
00012c  2200              MOVS     r2,#0                 ;207
00012e  310c              ADDS     r1,r1,#0xc            ;207
000130  f10300c8          ADD      r0,r3,#0xc8           ;207
000134  f7fffffe          BL       Json_HexToJson
000138  89a9              LDRH     r1,[r5,#0xc]          ;208  ; se_w_lng
00013a  4819              LDR      r0,|L4.416|
00013c  f7fffffe          BL       tcp_LngConnect_sendMsg
000140  a118              ADR      r1,|L4.420|
000142  a009              ADR      r0,|L4.360|
000144  f7fffffe          BL       __2printf
000148  e8bd41f0          POP      {r4-r8,lr}            ;210
00014c  4914              LDR      r1,|L4.416|
00014e  a006              ADR      r0,|L4.360|
000150  f7ffbffe          B.W      __2printf
;;;251    
                          ENDP

                  |L4.340|
                          DCD      ||.data||
                  |L4.344|
000158  b3a4c1ac          DCB      179,164,193,172,189,211,182,207,191,170,"...",0
00015c  bdd3b6cf
000160  bfaa2e2e
000164  2e00    
000166  00                DCB      0
000167  00                DCB      0
                  |L4.360|
000168  25730a00          DCB      "%s\n",0
                  |L4.364|
                          DCD      DHCP_state
                  |L4.368|
000170  bda8c1a2          DCB      189,168,193,162,179,164,193,172,189,211,"...",0
000174  b3a4c1ac
000178  bdd32e2e
00017c  2e00    
00017e  00                DCB      0
00017f  00                DCB      0
                  |L4.384|
000180  b3a4c1ac          DCB      179,164,193,172,189,211,187,216,211,166,179,172,202,177,0
000184  bdd3bbd8
000188  d3a6b3ac
00018c  cab100  
00018f  00                DCB      0
                  |L4.400|
000190  bda8c1a2          DCB      189,168,193,162,179,164,193,172,189,211,179,172,202,177,0
000194  b3a4c1ac
000198  bdd3b3ac
00019c  cab100  
00019f  00                DCB      0
                  |L4.416|
                          DCD      ||.bss||
                  |L4.420|
0001a4  b3a4c1ac          DCB      179,164,193,172,189,211,183,162,203,205,208,196,204,248,177
0001a8  bdd3b7a2
0001ac  cbcdd0c4
0001b0  ccf8b1  
0001b3  a8cec400          DCB      168,206,196,0
0001b7  00                DCB      0

                          AREA ||i.tcp_LngConnect_Parameter||, CODE, READONLY, ALIGN=2

                  tcp_LngConnect_Parameter PROC
;;;95     
;;;96     void tcp_LngConnect_Parameter(void)
000000  b570              PUSH     {r4-r6,lr}
;;;97     {
;;;98     	if(1U == GetMemIf_u_EEVild(EepromCfg_CardInfo))//母卡配置信息有效
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       GetMemIf_u_EEVild
000008  2801              CMP      r0,#1
00000a  d11d              BNE      |L5.72|
;;;99     	{
;;;100    		if(1U == CLIENT_LNGCNNT_DEVICETYPE)//围墙机
00000c  4812              LDR      r0,|L5.88|
00000e  7800              LDRB     r0,[r0,#0]  ; machine_type
;;;101    		{//别名：小区id_3_下标
;;;102    			Json_HexToStr(Setcp_Alias.Alias,sminfo1.community_id,16);
;;;103    			Setcp_Alias.Alias[32U] =  '_';
000010  255f              MOVS     r5,#0x5f
000012  4c12              LDR      r4,|L5.92|
000014  2801              CMP      r0,#1                 ;100
;;;104    			Setcp_Alias.Alias[33U] =  '3';
;;;105    			Setcp_Alias.Alias[34U] =  '_';
;;;106    		}
;;;107    		else//门口机
;;;108    		{//别名：楼栋id_1_下标
;;;109    			Json_HexToStr(Setcp_Alias.Alias,sminfo1.build_id,16);
000016  4912              LDR      r1,|L5.96|
000018  f04f0210          MOV      r2,#0x10
00001c  4620              MOV      r0,r4
00001e  d014              BEQ      |L5.74|
000020  3130              ADDS     r1,r1,#0x30           ;100
000022  f7fffffe          BL       Json_HexToStr
;;;110    			Setcp_Alias.Alias[32U] =  '_';
000026  f8845020          STRB     r5,[r4,#0x20]
;;;111    			Setcp_Alias.Alias[33U] =  '1';
00002a  2031              MOVS     r0,#0x31
                  |L5.44|
00002c  f8840021          STRB     r0,[r4,#0x21]
;;;112    			Setcp_Alias.Alias[34U] =  '_';
;;;113    		}
;;;114    		Json_HexToStr(&Setcp_Alias.Alias[35U],&sminfo1.suffix,1);
000030  490b              LDR      r1,|L5.96|
000032  480a              LDR      r0,|L5.92|
000034  f8845022          STRB     r5,[r4,#0x22]         ;112
000038  2201              MOVS     r2,#1
00003a  3150              ADDS     r1,r1,#0x50
00003c  3023              ADDS     r0,r0,#0x23
00003e  f7fffffe          BL       Json_HexToStr
;;;115    		Setcp_Alias.lng = sizeof(Setcp_Alias.Alias);
000042  2026              MOVS     r0,#0x26
000044  f8840026          STRB     r0,[r4,#0x26]
                  |L5.72|
;;;116    	}
;;;117    }
000048  bd70              POP      {r4-r6,pc}
                  |L5.74|
00004a  f7fffffe          BL       Json_HexToStr
00004e  f8845020          STRB     r5,[r4,#0x20]         ;103
000052  2033              MOVS     r0,#0x33              ;104
000054  e7ea              B        |L5.44|
;;;118    
                          ENDP

000056  0000              DCW      0x0000
                  |L5.88|
                          DCD      machine_type
                  |L5.92|
                          DCD      ||.bss||+0xc8
                  |L5.96|
                          DCD      sminfo1

                          AREA ||i.tcp_LngConnect_disconnect||, CODE, READONLY, ALIGN=2

                  tcp_LngConnect_disconnect PROC
;;;351    */
;;;352    void tcp_LngConnect_disconnect(void)
000000  4802              LDR      r0,|L6.12|
;;;353    {
;;;354    	/* close connection */
;;;355    	tcp_client_connection_close(client_pcb,client_es);
000002  6941              LDR      r1,[r0,#0x14]  ; client_es
000004  6900              LDR      r0,[r0,#0x10]  ; client_pcb
000006  f7ffbffe          B.W      tcp_client_connection_close
;;;356    }
;;;357    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      ||.data||

                          AREA ||i.tcp_LngConnect_parseJson||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tcp_LngConnect_parseJson PROC
;;;537    */
;;;538    static uint8 tcp_LngConnect_parseJson(char * pMsg)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;539    {
;;;540    	cJSON * pJson = cJSON_Parse(pMsg);
000004  f7fffffe          BL       cJSON_Parse
000008  0005              MOVS     r5,r0
;;;541    	if(NULL == pJson)                                                                                         
00000a  d009              BEQ      |L7.32|
;;;542    	{
;;;543    		// parse faild, return
;;;544    		USART_PRINTF_S("接收数据解析成json格式失败");
;;;545    		return 0U;
;;;546    	}
;;;547    	// get string from json
;;;548    	cJSON * pSub_t = cJSON_GetObjectItem(pJson, "t");
00000c  a13a              ADR      r1,|L7.248|
00000e  f7fffffe          BL       cJSON_GetObjectItem
000012  0004              MOVS     r4,r0
;;;549    	if(NULL == pSub_t)
000014  d009              BEQ      |L7.42|
;;;550    	{
;;;551    		//get object named "t" faild
;;;552    		USART_PRINTF_S("获取成员 t 失败");
;;;553    		cJSON_Delete(pJson);
;;;554    		return 0U;
;;;555    	}
;;;556    	if(pSub_t->type == cJSON_String)
000016  68e0              LDR      r0,[r4,#0xc]
000018  2810              CMP      r0,#0x10
00001a  d00b              BEQ      |L7.52|
;;;557    	{
;;;558    		pSub_t->valueint = (int)(Json_DecNumber(&(pSub_t->valuestring[0])));
00001c  6960              LDR      r0,[r4,#0x14]
00001e  e00d              B        |L7.60|
                  |L7.32|
000020  a136              ADR      r1,|L7.252|
000022  a03d              ADR      r0,|L7.280|
000024  f7fffffe          BL       __2printf
000028  e026              B        |L7.120|
                  |L7.42|
00002a  a13c              ADR      r1,|L7.284|
00002c  a03a              ADR      r0,|L7.280|
00002e  f7fffffe          BL       __2printf
000032  e01e              B        |L7.114|
                  |L7.52|
000034  6920              LDR      r0,[r4,#0x10]
000036  f7fffffe          BL       Json_DecNumber
00003a  6160              STR      r0,[r4,#0x14]
                  |L7.60|
;;;559    	}
;;;560    
;;;561    	switch(pSub_t->valueint)
00003c  f1b03fff          CMP      r0,#0xffffffff
000040  d005              BEQ      |L7.78|
000042  b110              CBZ      r0,|L7.74|
000044  2805              CMP      r0,#5
000046  d152              BNE      |L7.238|
000048  e006              B        |L7.88|
                  |L7.74|
;;;562    	{
;;;563    		case 0:
;;;564    		{
;;;565    			USART_PRINTF_S("别名错误");
00004a  a138              ADR      r1,|L7.300|
;;;566    		}
;;;567    		break;
00004c  e000              B        |L7.80|
                  |L7.78|
;;;568    		case (-1):
;;;569    		{
;;;570    			USART_PRINTF_S("长连接心跳正常回应");
00004e  a13a              ADR      r1,|L7.312|
                  |L7.80|
000050  a031              ADR      r0,|L7.280|
000052  f7fffffe          BL       __2printf
000056  e04a              B        |L7.238|
                  |L7.88|
;;;571    		}
;;;572    		break;
;;;573    		case 5://远程开门
;;;574    		{
;;;575    			cJSON * pSubMsg = cJSON_GetObjectItem(pJson, "msg");
000058  a13c              ADR      r1,|L7.332|
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       cJSON_GetObjectItem
000060  0004              MOVS     r4,r0
;;;576    			if(NULL == pSubMsg)
000062  d006              BEQ      |L7.114|
;;;577    			{
;;;578    				cJSON_Delete(pJson);
;;;579    				return 0U;
;;;580    			}
;;;581    
;;;582    			uint16 Le_w_i;
;;;583    			uint16 Le_w_len;
;;;584    			Le_w_len = strlen(pSubMsg->valuestring); 
000064  6920              LDR      r0,[r4,#0x10]
000066  f7fffffe          BL       strlen
;;;585    			for(Le_w_i = 0U;Le_w_i < Le_w_len;Le_w_i++)//msg字符串非标准JSon格式，转化成JSon格式的字符串
00006a  2100              MOVS     r1,#0
00006c  b283              UXTH     r3,r0                 ;584
;;;586    			{
;;;587    				if(pSubMsg->valuestring[Le_w_i] == '\'')
;;;588    				{
;;;589    					pSubMsg->valuestring[Le_w_i] = '"';
00006e  2222              MOVS     r2,#0x22
000070  e00b              B        |L7.138|
                  |L7.114|
000072  4628              MOV      r0,r5                 ;578
000074  f7fffffe          BL       cJSON_Delete
                  |L7.120|
000078  2000              MOVS     r0,#0                 ;579
                  |L7.122|
;;;590    				}
;;;591    			}
;;;592    			cJSON * pJsonMsg = cJSON_Parse(pSubMsg->valuestring);//对msg字符串解析成json格式
;;;593    			if(NULL == pJsonMsg)                                                                                         
;;;594    			{
;;;595    				// parse faild, return
;;;596    				return 0U;
;;;597    			}
;;;598    
;;;599    			cJSON * pSub_ex = cJSON_GetObjectItem(pJsonMsg, "ex");
;;;600    			if(NULL == pSub_ex)
;;;601    			{
;;;602    				cJSON_Delete(pJsonMsg);
;;;603    				cJSON_Delete(pJson);
;;;604    				return 0U;
;;;605    			}	
;;;606    			
;;;607    			if(0 == strcmp("open", cJSON_GetObjectItem(pSub_ex,"m")->valuestring))
;;;608    			{
;;;609    				cJSON * pSubMid = cJSON_GetObjectItem(pJson, "mid");
;;;610    				Setcp_client_u_Open = 1U;//远程开锁标志
;;;611    				memset(Setcp_client_u_TxBuf,0,sizeof(Setcp_client_u_TxBuf));//清0
;;;612    				Json_HexToJson(pSubMid,&se_w_lng,JSON_DEVICE_ECHO_REMOTEUNLOCK,Setcp_client_u_TxBuf);
;;;613    				tcp_LngConnect_sendMsg(Setcp_client_u_TxBuf,se_w_lng);
;;;614    			}
;;;615    			cJSON_Delete(pJsonMsg);
;;;616    		}
;;;617    		break;
;;;618    #ifdef NET_DEBUG
;;;619    		case 24://测试hym8563时钟
;;;620    		{//{"t":24,"time":""}
;;;621    			cJSON * pSubTime = cJSON_GetObjectItem(pJson, "time");
;;;622    			if(NULL == pSubTime)
;;;623    			{
;;;624    				cJSON_Delete(pJson);
;;;625    				return 0U;
;;;626    			}
;;;627    			struct rtc_time  Le_h_tm;
;;;628    			timestamp_timeCalibration(&pSubTime->valuestring[0],0U);//校准时钟芯片时间
;;;629    			(void)hym8563_read_datetime(&Le_h_tm);//读取hym8563日期时间		
;;;630    			//Le_h_tm.tm_year,Le_h_tm.tm_mon,Le_h_tm.tm_mday,Le_h_tm.tm_hour,Le_h_tm.tm_min,Le_h_tm.tm_sec
;;;631    			Setcp_client_u_TxBuf[0] = 't';
;;;632    			Setcp_client_u_TxBuf[1] = ':';
;;;633    			Setcp_client_u_TxBuf[2] = '-';
;;;634    			Setcp_client_u_TxBuf[3] = '2';
;;;635    			Setcp_client_u_TxBuf[4] = '4';
;;;636    			Setcp_client_u_TxBuf[5] = ',';
;;;637    			Setcp_client_u_TxBuf[6] = 't';
;;;638    			Setcp_client_u_TxBuf[7] = 'i';
;;;639    			Setcp_client_u_TxBuf[8] = 'm';
;;;640    			Setcp_client_u_TxBuf[9] = 'e';
;;;641    			Setcp_client_u_TxBuf[10] = ':';
;;;642    			Setcp_client_u_TxBuf[11] = tcp_LngConnect_HexToChar(Le_h_tm.tm_year/1000%10);
;;;643    			Setcp_client_u_TxBuf[12] = tcp_LngConnect_HexToChar(Le_h_tm.tm_year/100%10);
;;;644    			Setcp_client_u_TxBuf[13] = tcp_LngConnect_HexToChar(Le_h_tm.tm_year/10%10);
;;;645    			Setcp_client_u_TxBuf[14] = tcp_LngConnect_HexToChar(Le_h_tm.tm_year%10);
;;;646    			
;;;647    			Setcp_client_u_TxBuf[15] = tcp_LngConnect_HexToChar(Le_h_tm.tm_mon/10%10);
;;;648    			Setcp_client_u_TxBuf[16] = tcp_LngConnect_HexToChar(Le_h_tm.tm_mon%10);
;;;649    			
;;;650    			Setcp_client_u_TxBuf[17] = tcp_LngConnect_HexToChar(Le_h_tm.tm_mday/10%10);
;;;651    			Setcp_client_u_TxBuf[18] = tcp_LngConnect_HexToChar(Le_h_tm.tm_mday%10);
;;;652    			
;;;653    			Setcp_client_u_TxBuf[19] = tcp_LngConnect_HexToChar(Le_h_tm.tm_hour/10%10);
;;;654    			Setcp_client_u_TxBuf[20] = tcp_LngConnect_HexToChar(Le_h_tm.tm_hour%10);
;;;655    			
;;;656    			Setcp_client_u_TxBuf[21] = tcp_LngConnect_HexToChar(Le_h_tm.tm_min/10%10);
;;;657    			Setcp_client_u_TxBuf[22] = tcp_LngConnect_HexToChar(Le_h_tm.tm_min%10);
;;;658    			
;;;659    			Setcp_client_u_TxBuf[23] = tcp_LngConnect_HexToChar(Le_h_tm.tm_sec/10%10);
;;;660    			Setcp_client_u_TxBuf[24] = tcp_LngConnect_HexToChar(Le_h_tm.tm_sec%10);
;;;661    			tcp_LngConnect_sendMsg(Setcp_client_u_TxBuf,25);	
;;;662    		}
;;;663    		break;
;;;664    		case 25://测试黑名单
;;;665    		{//{"t":25,"BList":["卡号1","卡号2",...]}
;;;666    			cJSON * pSubBList = cJSON_GetObjectItem(pJson, "BList");
;;;667    			if(NULL == pSubBList)
;;;668    			{
;;;669    				cJSON_Delete(pJson);
;;;670    				return 0U;
;;;671    			}
;;;672    			
;;;673    			unsigned int BList_size = cJSON_GetArraySize(pSubBList);
;;;674    			USART_PRINTF_D("：黑名单卡号数量%d\n",BList_size);
;;;675    			unsigned int BList_i = 0;
;;;676    			uint8_t BList_cardNum[4U];
;;;677    			cJSON *BList_item;
;;;678    			for(BList_i=0; BList_i< BList_size; BList_i++) 
;;;679    			{
;;;680    				BList_item = cJSON_GetArrayItem(pSubBList, BList_i);
;;;681    				if(strlen(BList_item->valuestring) != 8U)
;;;682    				{
;;;683    					USART_PRINTF_D("卡号编号 %s长度不符\n：",BList_item->valuestring);
;;;684    					continue;
;;;685    				}
;;;686    				tcp_LngConnect_StrToHex(BList_item->valuestring,BList_cardNum);
;;;687    				WrBListCache_BListQueue(BList_cardNum);
;;;688    				USART_PRINTF_D("卡号编号 %d 转换为Hex格式卡号：",BList_i);
;;;689    				USART_PRINTF_CARD_NUM("%x%x%x%x",BList_cardNum[0U],BList_cardNum[1U],BList_cardNum[2U],BList_cardNum[3U]);
;;;690    			}
;;;691    			tcp_LngConnect_sendMsg("t:-25",strlen("t:-25"));
;;;692    		}
;;;693    		break;
;;;694    #endif
;;;695    		default:
;;;696    		break;
;;;697    	}
;;;698    	cJSON_Delete(pJson);
;;;699    	return 1U;
;;;700    }
00007a  e8bd81f0          POP      {r4-r8,pc}
                  |L7.126|
00007e  5c46              LDRB     r6,[r0,r1]            ;587
000080  2e27              CMP      r6,#0x27              ;587
000082  d100              BNE      |L7.134|
000084  5442              STRB     r2,[r0,r1]            ;589
                  |L7.134|
000086  1c49              ADDS     r1,r1,#1              ;589
000088  b289              UXTH     r1,r1                 ;585
                  |L7.138|
00008a  6920              LDR      r0,[r4,#0x10]         ;585
00008c  4299              CMP      r1,r3                 ;585
00008e  d3f6              BCC      |L7.126|
000090  f7fffffe          BL       cJSON_Parse
000094  1e04              SUBS     r4,r0,#0              ;592
000096  d0f0              BEQ      |L7.122|
000098  a12d              ADR      r1,|L7.336|
00009a  f7fffffe          BL       cJSON_GetObjectItem
00009e  b140              CBZ      r0,|L7.178|
0000a0  a12c              ADR      r1,|L7.340|
0000a2  f7fffffe          BL       cJSON_GetObjectItem
0000a6  6901              LDR      r1,[r0,#0x10]         ;607
0000a8  a02b              ADR      r0,|L7.344|
0000aa  f7fffffe          BL       strcmp
0000ae  b120              CBZ      r0,|L7.186|
0000b0  e01a              B        |L7.232|
                  |L7.178|
0000b2  4620              MOV      r0,r4                 ;602
0000b4  f7fffffe          BL       cJSON_Delete
0000b8  e7db              B        |L7.114|
                  |L7.186|
0000ba  a129              ADR      r1,|L7.352|
0000bc  4628              MOV      r0,r5                 ;609
0000be  f7fffffe          BL       cJSON_GetObjectItem
0000c2  4e28              LDR      r6,|L7.356|
0000c4  4607              MOV      r7,r0                 ;609
0000c6  2001              MOVS     r0,#1                 ;610
0000c8  7030              STRB     r0,[r6,#0]            ;610
0000ca  21c8              MOVS     r1,#0xc8              ;611
0000cc  4826              LDR      r0,|L7.360|
0000ce  f7fffffe          BL       __aeabi_memclr
0000d2  4b25              LDR      r3,|L7.360|
0000d4  2205              MOVS     r2,#5                 ;612
0000d6  f106010c          ADD      r1,r6,#0xc            ;612
0000da  4638              MOV      r0,r7                 ;612
0000dc  f7fffffe          BL       Json_HexToJson
0000e0  89b1              LDRH     r1,[r6,#0xc]          ;613  ; se_w_lng
0000e2  4821              LDR      r0,|L7.360|
0000e4  f7fffffe          BL       tcp_LngConnect_sendMsg
                  |L7.232|
0000e8  4620              MOV      r0,r4                 ;615
0000ea  f7fffffe          BL       cJSON_Delete
                  |L7.238|
0000ee  4628              MOV      r0,r5                 ;698
0000f0  f7fffffe          BL       cJSON_Delete
0000f4  2001              MOVS     r0,#1                 ;699
0000f6  e7c0              B        |L7.122|
;;;701    
                          ENDP

                  |L7.248|
0000f8  7400              DCB      "t",0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L7.252|
0000fc  bdd3cad5          DCB      189,211,202,213,202,253,190,221,189,226,206,246,179,201,"j"
000100  cafdbedd
000104  bde2cef6
000108  b3c96a  
00010b  736f6eb8          DCB      "son",184,241,202,189,202,167,176,220,0
00010f  f1cabdca
000113  a7b0dc00
000117  00                DCB      0
                  |L7.280|
000118  25730a00          DCB      "%s\n",0
                  |L7.284|
00011c  bbf1c8a1          DCB      187,241,200,161,179,201,212,177," t ",202,167,176,220,0
000120  b3c9d4b1
000124  207420ca
000128  a7b0dc00
                  |L7.300|
00012c  b1f0c3fb          DCB      177,240,195,251,180,237,206,243,0
000130  b4edcef3
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
                  |L7.312|
000138  b3a4c1ac          DCB      179,164,193,172,189,211,208,196,204,248,213,253,179,163,187
00013c  bdd3d0c4
000140  ccf8d5fd
000144  b3a3bb  
000147  d8d3a600          DCB      216,211,166,0
00014b  00                DCB      0
                  |L7.332|
00014c  6d736700          DCB      "msg",0
                  |L7.336|
000150  657800            DCB      "ex",0
000153  00                DCB      0
                  |L7.340|
000154  6d00              DCB      "m",0
000156  00                DCB      0
000157  00                DCB      0
                  |L7.344|
000158  6f70656e          DCB      "open",0
00015c  00      
00015d  00                DCB      0
00015e  00                DCB      0
00015f  00                DCB      0
                  |L7.352|
000160  6d696400          DCB      "mid",0
                  |L7.356|
                          DCD      ||.data||
                  |L7.360|
                          DCD      ||.bss||

                          AREA ||i.tcp_LngConnect_sendMsg||, CODE, READONLY, ALIGN=2

                  tcp_LngConnect_sendMsg PROC
;;;528    */
;;;529    void tcp_LngConnect_sendMsg(char* data,u16_t len)
000000  460a              MOV      r2,r1
;;;530    {
;;;531    	tcp_write(client_pcb,(char*)data ,len, 1);
000002  4601              MOV      r1,r0
000004  4802              LDR      r0,|L8.16|
000006  2301              MOVS     r3,#1
000008  6900              LDR      r0,[r0,#0x10]  ; client_pcb
00000a  f7ffbffe          B.W      tcp_write
;;;532    	//tcp_output(client_pcb);
;;;533    }
;;;534    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      ||.data||

                          AREA ||i.tcp_client_connected||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  tcp_client_connected PROC
;;;363      */
;;;364    static err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
000000  b570              PUSH     {r4-r6,lr}
;;;365    {
;;;366    	if (err == ERR_OK)   
;;;367    	{
;;;368    		/* allocate structure es to maintain tcp connection informations */
;;;369    		client_es = (struct client *)mem_malloc(sizeof(struct client));
000002  4c1b              LDR      r4,|L9.112|
000004  0016              MOVS     r6,r2                 ;365
000006  460d              MOV      r5,r1                 ;365
000008  d009              BEQ      |L9.30|
;;;370    		if (client_es != NULL)
;;;371    		{
;;;372    			client_es->state = ES_CONNECTED;
;;;373    			client_es->pcb = NULL;
;;;374    			client_es->p_tx = NULL;
;;;375    			/* pass newly allocated es structure as argument to tpcb */
;;;376    			tcp_arg(tpcb, client_es);
;;;377    	  
;;;378    			/* initialize LwIP tcp_recv callback function */ 
;;;379    			tcp_recv(tpcb, tcp_client_recv);
;;;380    	  
;;;381    			/* initialize LwIP tcp_sent callback function */
;;;382    			//tcp_sent(tpcb, tcp_client_sent);
;;;383      
;;;384    			/* initialize LwIP tcp_poll callback function */
;;;385    			tcp_poll(tpcb, tcp_client_poll, 1);
;;;386    			USART_PRINTF_S("长连接建立成功！");
;;;387    			return ERR_OK;
;;;388    		}
;;;389    		else
;;;390    		{
;;;391    			USART_PRINTF_S("长连接structure es分配失败");
;;;392    			/* close connection */
;;;393    			tcp_client_connection_close(tpcb, client_es);
;;;394    			/* return memory allocation error */
;;;395    			return ERR_MEM;  
;;;396    		}
;;;397    	}
;;;398    	else
;;;399    	{
;;;400    		USART_PRINTF_D("长连接连接回调函数 err: %d\n",err);
00000a  4611              MOV      r1,r2
00000c  a019              ADR      r0,|L9.116|
00000e  f7fffffe          BL       __2printf
;;;401    		/* close connection */
;;;402    		tcp_client_connection_close(tpcb, client_es);
000012  4628              MOV      r0,r5
000014  6961              LDR      r1,[r4,#0x14]  ; client_es
000016  f7fffffe          BL       tcp_client_connection_close
;;;403    	}
;;;404    	return err;
00001a  4630              MOV      r0,r6
;;;405    }
00001c  bd70              POP      {r4-r6,pc}
                  |L9.30|
00001e  200c              MOVS     r0,#0xc               ;369
000020  f7fffffe          BL       mem_malloc
000024  6160              STR      r0,[r4,#0x14]         ;369  ; client_es
000026  1e01              SUBS     r1,r0,#0              ;369
000028  d016              BEQ      |L9.88|
00002a  2001              MOVS     r0,#1                 ;372
00002c  7008              STRB     r0,[r1,#0]            ;372
00002e  2000              MOVS     r0,#0                 ;373
000030  6048              STR      r0,[r1,#4]            ;374
000032  6088              STR      r0,[r1,#8]            ;376
000034  4628              MOV      r0,r5                 ;376
000036  f7fffffe          BL       tcp_arg
00003a  4915              LDR      r1,|L9.144|
00003c  4628              MOV      r0,r5                 ;379
00003e  f7fffffe          BL       tcp_recv
000042  2201              MOVS     r2,#1                 ;385
000044  4913              LDR      r1,|L9.148|
000046  4628              MOV      r0,r5                 ;385
000048  f7fffffe          BL       tcp_poll
00004c  a112              ADR      r1,|L9.152|
00004e  a017              ADR      r0,|L9.172|
000050  f7fffffe          BL       __2printf
000054  2000              MOVS     r0,#0                 ;387
000056  bd70              POP      {r4-r6,pc}
                  |L9.88|
000058  a115              ADR      r1,|L9.176|
00005a  a014              ADR      r0,|L9.172|
00005c  f7fffffe          BL       __2printf
000060  4628              MOV      r0,r5                 ;393
000062  6961              LDR      r1,[r4,#0x14]         ;393  ; client_es
000064  f7fffffe          BL       tcp_client_connection_close
000068  f04f30ff          MOV      r0,#0xffffffff        ;395
00006c  bd70              POP      {r4-r6,pc}
;;;406    
                          ENDP

00006e  0000              DCW      0x0000
                  |L9.112|
                          DCD      ||.data||
                  |L9.116|
000074  b3a4c1ac          DCB      179,164,193,172,189,211,193,172,189,211,187,216,181,247,186
000078  bdd3c1ac
00007c  bdd3bbd8
000080  b5f7ba  
000083  afcafd20          DCB      175,202,253," err: %d\n",0
000087  6572723a
00008b  2025640a
00008f  00      
                  |L9.144|
                          DCD      tcp_client_recv
                  |L9.148|
                          DCD      tcp_client_poll
                  |L9.152|
000098  b3a4c1ac          DCB      179,164,193,172,189,211,189,168,193,162,179,201,185,166,163
00009c  bdd3bda8
0000a0  c1a2b3c9
0000a4  b9a6a3  
0000a7  a100              DCB      161,0
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L9.172|
0000ac  25730a00          DCB      "%s\n",0
                  |L9.176|
0000b0  b3a4c1ac          DCB      179,164,193,172,189,211,"structure es",183,214,197,228,202
0000b4  bdd37374
0000b8  72756374
0000bc  75726520
0000c0  6573b7d6
0000c4  c5e4ca  
0000c7  a7b0dc00          DCB      167,176,220,0
0000cb  00                DCB      0

                          AREA ||i.tcp_client_connection_close||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  tcp_client_connection_close PROC
;;;500      */
;;;501    static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct client * es )
000000  b510              PUSH     {r4,lr}
;;;502    {
000002  4604              MOV      r4,r0
000004  b129              CBZ      r1,|L10.18|
;;;503    	if (es != NULL)
;;;504    	{
;;;505    		mem_free(es);
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       mem_free
;;;506    		client_es = NULL;
00000c  490f              LDR      r1,|L10.76|
00000e  2000              MOVS     r0,#0
000010  6148              STR      r0,[r1,#0x14]  ; client_es
                  |L10.18|
;;;507    	}
;;;508    
;;;509    	if(tpcb != NULL)
000012  b1ac              CBZ      r4,|L10.64|
;;;510    	{
;;;511    		/* remove callbacks */
;;;512    		tcp_arg(tpcb,NULL);  
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       tcp_arg
;;;513    		tcp_recv(tpcb,NULL);
00001c  2100              MOVS     r1,#0
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       tcp_recv
;;;514    		tcp_err(tpcb,NULL);
000024  2100              MOVS     r1,#0
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       tcp_err
;;;515    		//tcp_sent(tpcb, NULL);
;;;516    		tcp_poll(tpcb, NULL,0);
00002c  2200              MOVS     r2,#0
00002e  4611              MOV      r1,r2
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       tcp_poll
;;;517    		/* close tcp connection */
;;;518    		tcp_close(tpcb);
000036  4620              MOV      r0,r4
000038  e8bd4010          POP      {r4,lr}
00003c  f7ffbffe          B.W      tcp_close
                  |L10.64|
;;;519    	}
;;;520    	else
;;;521    	{
;;;522    		USART_PRINTF_S("client_pcb == NULL");
000040  e8bd4010          POP      {r4,lr}
000044  a102              ADR      r1,|L10.80|
000046  a007              ADR      r0,|L10.100|
000048  f7ffbffe          B.W      __2printf
;;;523    	}
;;;524    }
;;;525    
                          ENDP

                  |L10.76|
                          DCD      ||.data||
                  |L10.80|
000050  636c6965          DCB      "client_pcb == NULL",0
000054  6e745f70
000058  6362203d
00005c  3d204e55
000060  4c4c00  
000063  00                DCB      0
                  |L10.100|
000064  25730a00          DCB      "%s\n",0

                          AREA ||i.tcp_client_poll||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  tcp_client_poll PROC
;;;475      */
;;;476    static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb)
000000  b510              PUSH     {r4,lr}
;;;477    {
000002  0002              MOVS     r2,r0
000004  460c              MOV      r4,r1
;;;478    	err_t ret_err;
;;;479    	struct client *es;
;;;480    	ret_err = ERR_OK;
000006  f04f0000          MOV      r0,#0
00000a  d108              BNE      |L11.30|
;;;481    	es = (struct client*)arg;
;;;482    	if (es == NULL)
;;;483    	{
;;;484    		USART_PRINTF_S("long connection tcp_poll 回调函数 ret_err = ERR_ABRT");
00000c  a104              ADR      r1,|L11.32|
00000e  a012              ADR      r0,|L11.88|
000010  f7fffffe          BL       __2printf
;;;485    		//if(tpcb != NULL)
;;;486    		{
;;;487    			tcp_abort(tpcb);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       tcp_abort
;;;488    		}
;;;489    		ret_err = ERR_ABRT;
00001a  f06f0009          MVN      r0,#9
                  |L11.30|
;;;490    	}
;;;491    	return ret_err;
;;;492    }
00001e  bd10              POP      {r4,pc}
;;;493    
                          ENDP

                  |L11.32|
000020  6c6f6e67          DCB      "long connection tcp_poll ",187,216,181,247,186,175,202,253
000024  20636f6e
000028  6e656374
00002c  696f6e20
000030  7463705f
000034  706f6c6c
000038  20bbd8b5
00003c  f7baafca
000040  fd      
000041  20726574          DCB      " ret_err = ERR_ABRT",0
000045  5f657272
000049  203d2045
00004d  52525f41
000051  42525400
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L11.88|
000058  25730a00          DCB      "%s\n",0

                          AREA ||i.tcp_client_recv||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tcp_client_recv PROC
;;;413      */
;;;414    static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;415    { 	
000004  461d              MOV      r5,r3
000006  4614              MOV      r4,r2
000008  460f              MOV      r7,r1
00000a  0006              MOVS     r6,r0
00000c  d102              BNE      |L12.20|
;;;416    	struct client *es;
;;;417    	err_t ret_err;
;;;418    	LWIP_ASSERT("arg != NULL",arg != NULL);
00000e  a01c              ADR      r0,|L12.128|
000010  f7fffffe          BL       __2printf
                  |L12.20|
;;;419    	es = (struct client *)arg;
000014  4630              MOV      r0,r6
;;;420    	/* if we receive an empty tcp frame from server => close connection */
;;;421    	if (p == NULL)
;;;422    	{
;;;423    		/* remote host closed connection */
;;;424    		client_es->state  = ES_CLOSING;
000016  4e1d              LDR      r6,|L12.140|
000018  b174              CBZ      r4,|L12.56|
;;;425    
;;;426    		USART_PRINTF_S("长连接接收函数：p==NULL");
;;;427    		ret_err = ERR_OK;
;;;428    	}   
;;;429      /* else : a non empty frame was received from echo server but for some reason err != ERR_OK */
;;;430    	else if(err != ERR_OK)
00001a  b1ad              CBZ      r5,|L12.72|
;;;431    	{
;;;432    		USART_PRINTF_S("长连接接收函数：err!=ERR_OK");
00001c  a11c              ADR      r1,|L12.144|
00001e  a023              ADR      r0,|L12.172|
000020  f7fffffe          BL       __2printf
;;;433    		/* Acknowledge data reception */
;;;434    		tcp_recved(tpcb, p->tot_len); 
000024  8921              LDRH     r1,[r4,#8]
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       tcp_recved
;;;435    		/* free received pbuf*/
;;;436    		pbuf_free(p);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       pbuf_free
;;;437    
;;;438    		ret_err = err;
000032  4628              MOV      r0,r5
                  |L12.52|
;;;439    	}
;;;440    	else if(es->state == ES_CONNECTED)
;;;441    	{
;;;442    		/* Acknowledge data reception */
;;;443    		tcp_recved(tpcb, p->tot_len);  
;;;444    		//memset(LngRecev_buf,0,sizeof(LngRecev_buf));//LngRecev_buf[]清0
;;;445    		//memcpy(LngRecev_buf,p->payload,p->len);
;;;446    		//USART_PRINTF_S(LngRecev_buf);
;;;447    		if(1U == tcp_LngConnect_parseJson(p->payload))
;;;448    		{
;;;449    			Setcp_client_w_CnntTimeout = 0U;
;;;450    		}
;;;451    		
;;;452    		/* free received pbuf*/
;;;453    		pbuf_free(p);
;;;454    		ret_err = ERR_OK;
;;;455    	}
;;;456    	/* data received when connection already closed */
;;;457    	else
;;;458    	{
;;;459    		USART_PRINTF_S("长连接接收到未知数据");
;;;460    		/* Acknowledge data reception */
;;;461    		tcp_recved(tpcb, p->tot_len); 
;;;462    		/* free pbuf and do nothing */
;;;463    		pbuf_free(p);
;;;464    		ret_err = ERR_OK;
;;;465    	}
;;;466    	return ret_err;
;;;467    }
000034  e8bd81f0          POP      {r4-r8,pc}
                  |L12.56|
000038  6971              LDR      r1,[r6,#0x14]         ;424  ; client_es
00003a  2003              MOVS     r0,#3                 ;424
00003c  7008              STRB     r0,[r1,#0]            ;424
00003e  a11c              ADR      r1,|L12.176|
000040  a01a              ADR      r0,|L12.172|
000042  f7fffffe          BL       __2printf
000046  e019              B        |L12.124|
                  |L12.72|
000048  7800              LDRB     r0,[r0,#0]            ;440
00004a  2801              CMP      r0,#1                 ;440
00004c  d008              BEQ      |L12.96|
00004e  a11e              ADR      r1,|L12.200|
000050  a016              ADR      r0,|L12.172|
000052  f7fffffe          BL       __2printf
000056  8921              LDRH     r1,[r4,#8]            ;461
000058  4638              MOV      r0,r7                 ;461
00005a  f7fffffe          BL       tcp_recved
00005e  e00a              B        |L12.118|
                  |L12.96|
000060  8921              LDRH     r1,[r4,#8]            ;443
000062  4638              MOV      r0,r7                 ;443
000064  f7fffffe          BL       tcp_recved
000068  6860              LDR      r0,[r4,#4]            ;447
00006a  f7fffffe          BL       tcp_LngConnect_parseJson
00006e  2801              CMP      r0,#1                 ;447
000070  d101              BNE      |L12.118|
000072  2000              MOVS     r0,#0                 ;449
000074  8170              STRH     r0,[r6,#0xa]          ;449
                  |L12.118|
000076  4620              MOV      r0,r4                 ;453
000078  f7fffffe          BL       pbuf_free
                  |L12.124|
00007c  2000              MOVS     r0,#0                 ;427
00007e  e7d9              B        |L12.52|
;;;468    
                          ENDP

                  |L12.128|
000080  61726720          DCB      "arg != NULL",0
000084  213d204e
000088  554c4c00
                  |L12.140|
                          DCD      ||.data||
                  |L12.144|
000090  b3a4c1ac          DCB      179,164,193,172,189,211,189,211,202,213,186,175,202,253,163
000094  bdd3bdd3
000098  cad5baaf
00009c  cafda3  
00009f  ba657272          DCB      186,"err!=ERR_OK",0
0000a3  213d4552
0000a7  525f4f4b
0000ab  00      
                  |L12.172|
0000ac  25730a00          DCB      "%s\n",0
                  |L12.176|
0000b0  b3a4c1ac          DCB      179,164,193,172,189,211,189,211,202,213,186,175,202,253,163
0000b4  bdd3bdd3
0000b8  cad5baaf
0000bc  cafda3  
0000bf  ba703d3d          DCB      186,"p==NULL",0
0000c3  4e554c4c
0000c7  00      
                  |L12.200|
0000c8  b3a4c1ac          DCB      179,164,193,172,189,211,189,211,202,213,181,189,206,180,214
0000cc  bdd3bdd3
0000d0  cad5b5bd
0000d4  ceb4d6  
0000d7  aacafdbe          DCB      170,202,253,190,221,0
0000db  dd00    
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Setcp_client_u_TxBuf
                          %        200
                  Setcp_Alias
                          %        39

                          AREA ||.data||, DATA, ALIGN=2

                  Setcp_client_u_Open
000000  00                DCB      0x00
                  Setcp_client_u_cnntSt
000001  00                DCB      0x00
                  Setcp_client_u_HeartFlg
000002  00                DCB      0x00
                  Se_u_CnntTimeoutFlg
000003  00                DCB      0x00
                  Se_u_CnntTimeoutCnt
000004  0000              DCB      0x00,0x00
                  Setcp_client_w_DelayTimer
000006  0000              DCW      0x0000
                  Setcp_client_w_HeartTimer
000008  0000              DCW      0x0000
                  Setcp_client_w_CnntTimeout
00000a  0000              DCW      0x0000
                  se_w_lng
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  client_pcb
                          DCD      0x00000000
                  client_es
                          DCD      0x00000000
                  LngConnect_DestIPaddr
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Lwip\\App\\tcp_client_LngConnect.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___23_tcp_client_LngConnect_c_7b69df21____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___23_tcp_client_LngConnect_c_7b69df21____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___23_tcp_client_LngConnect_c_7b69df21____REVSH|
#line 153
|__asm___23_tcp_client_LngConnect_c_7b69df21____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___23_tcp_client_LngConnect_c_7b69df21____RRX|
#line 328
|__asm___23_tcp_client_LngConnect_c_7b69df21____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

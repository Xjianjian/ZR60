L 1 "..\..\Lwip\lwip-1.4.1\src\core\dhcp.c"
N/**
N * @file
N * Dynamic Host Configuration Protocol client
N *
N */
N
N/*
N *
N * Copyright (c) 2001-2004 Leon Woestenberg <leon.woestenberg@gmx.net>
N * Copyright (c) 2001-2004 Axon Digital Design B.V., The Netherlands.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
N * OF SUCH DAMAGE.
N *
N * This file is a contribution to the lwIP TCP/IP stack.
N * The Swedish Institute of Computer Science and Adam Dunkels
N * are specifically granted permission to redistribute this
N * source code.
N *
N * Author: Leon Woestenberg <leon.woestenberg@gmx.net>
N *
N * This is a DHCP client for the lwIP TCP/IP stack. It aims to conform
N * with RFC 2131 and RFC 2132.
N *
N * TODO:
N * - Support for interfaces other than Ethernet (SLIP, PPP, ...)
N *
N * Please coordinate changes and requests with Leon Woestenberg
N * <leon.woestenberg@gmx.net>
N *
N * Integration with your code:
N *
N * In lwip/dhcp.h
N * #define DHCP_COARSE_TIMER_SECS (recommended 60 which is a minute)
N * #define DHCP_FINE_TIMER_MSECS (recommended 500 which equals TCP coarse timer)
N *
N * Then have your application call dhcp_coarse_tmr() and
N * dhcp_fine_tmr() on the defined intervals.
N *
N * dhcp_start(struct netif *netif);
N * starts a DHCP client instance which configures the interface by
N * obtaining an IP address lease and maintaining it.
N *
N * Use dhcp_release(netif) to end the lease and use dhcp_stop(netif)
N * to remove the DHCP client.
N *
N */
N
N#include "lwip/opt.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/opt.h" 1
N/**
N * @file
N *
N * lwIP Options Configuration
N */
N
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_OPT_H__
N#define __LWIP_OPT_H__
N
N/*
N * Include user defined options first. Anything not defined in these files
N * will be set to standard values. Override anything you dont like!
N */
N#include "lwipopts.h"
L 1 "..\..\Lwip\App\lwipopts.h" 1
N/**
N  ******************************************************************************
N  * @file    lwipopts.h
N  * @author  MCD Application Team
N  * @version V1.1.0
N  * @date    31-July-2013
N  * @brief   lwIP Options Configuration.
N  *          This file is based on Utilities\lwip_v1.4.1\src\include\lwip\opt.h 
N  *          and contains the lwIP configuration for the STM32F4x7 demonstration.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N#ifndef __LWIPOPTS_H__
N#define __LWIPOPTS_H__
N
N/**
N * SYS_LIGHTWEIGHT_PROT==1: if you want inter-task protection for certain
N * critical regions during buffer allocation, deallocation and memory
N * allocation and deallocation.
N */
N#define SYS_LIGHTWEIGHT_PROT    0
N
N/**
N * NO_SYS==1: Provides VERY minimal functionality. Otherwise,
N * use lwIP facilities.
N */
N#define NO_SYS                  1
N
N/**
N * NO_SYS_NO_TIMERS==1: Drop support for sys_timeout when NO_SYS==1
N * Mainly for compatibility to old versions.
N */
N#define NO_SYS_NO_TIMERS        1
N
N/* ---------- Memory options ---------- */
N/* MEM_ALIGNMENT: should be set to the alignment of the CPU for which
N   lwIP is compiled. 4 byte alignment -> define MEM_ALIGNMENT to 4, 2
N   byte alignment -> define MEM_ALIGNMENT to 2. */
N#define MEM_ALIGNMENT           4
N
N/* MEM_SIZE: the size of the heap memory. If the application will send
Na lot of data that needs to be copied, this should be set high. */
N#define MEM_SIZE                (20*1024)
N
N/* MEMP_NUM_PBUF: the number of memp struct pbufs. If the application
N   sends a lot of data out of ROM (or other static memory), this
N   should be set high. */
N//#define MEMP_NUM_PBUF           100
N/* MEMP_NUM_UDP_PCB: the number of UDP protocol control blocks. One
N   per active UDP "connection". */
N#define MEMP_NUM_UDP_PCB        12
N/* MEMP_NUM_TCP_PCB: the number of simulatenously active TCP
N   connections. */
N#define MEMP_NUM_TCP_PCB        6
N/* MEMP_NUM_TCP_PCB_LISTEN: the number of listening TCP
N   connections. */
N#define MEMP_NUM_TCP_PCB_LISTEN  1
N/* MEMP_NUM_TCP_SEG: the number of simultaneously queued TCP
N   segments. */
N#define MEMP_NUM_TCP_SEG        40
N/* MEMP_NUM_SYS_TIMEOUT: the number of simulateously active
N   timeouts. */
N#define MEMP_NUM_SYS_TIMEOUT    10
N
N
N/* ---------- Pbuf options ---------- */
N/* PBUF_POOL_SIZE: the number of buffers in the pbuf pool. */
N#define PBUF_POOL_SIZE          8
N
N/* PBUF_POOL_BUFSIZE: the size of each pbuf in the pbuf pool. */
N#define PBUF_POOL_BUFSIZE       (1500 - 40)/* TCP_MSS = (Ethernet MTU - IP header size - TCP header size) */
N
N#define LWIP_DNS                 1
N
N/* ---------- TCP options ---------- */
N#define LWIP_TCP                1
N#define TCP_TTL                 255
N
N/* Controls if TCP should queue segments that arrive out of
N   order. Define to 0 if your device is low on memory. */
N#define TCP_QUEUE_OOSEQ         1
N
N/* TCP Maximum segment size. */
N#define TCP_MSS                 (1500 - 140)/* TCP_MSS = (Ethernet MTU - IP header size - TCP header size) */
N
N/* TCP sender buffer space (bytes). */
N#define TCP_SND_BUF             (4*TCP_MSS)
N
N/*  TCP_SND_QUEUELEN: TCP sender buffer space (pbufs). This must be at least
N  as much as (2 * TCP_SND_BUF/TCP_MSS) for things to work. */
N
N#define TCP_SND_QUEUELEN        (4* TCP_SND_BUF/TCP_MSS)
N
N/* TCP receive window. */
N#define TCP_WND                 (2*TCP_MSS)
N
N
N/* ---------- ICMP options ---------- */
N#define LWIP_ICMP                       1
N
N#define LWIP_ARP                  1 //值1使能
N/* ---------- DHCP options ---------- */
N/* Define LWIP_DHCP to 1 if you want DHCP configuration of
N   interfaces. DHCP is not implemented in lwIP 0.5.1, however, so
N   turning this on does currently not work. */
N#define LWIP_DHCP               1
N
N
N/* ---------- UDP options ---------- */
N#define LWIP_UDP                1
N#define UDP_TTL                 255
N/* ---------- DNS options ---------- */
N#define DNS_TABLE_SIZE               10
N#define DNS_LOCAL_HOSTLIST_IS_DYNAMIC   1
N#define DNS_MAX_TTL               604800//最大生存时间
N/* ---------- Statistics options ---------- */
N#define LWIP_STATS 0
N#define LWIP_PROVIDE_ERRNO     1
N
N/* ---------- link callback options ---------- */
N/* LWIP_NETIF_LINK_CALLBACK==1: Support a callback function from an interface
N * whenever the link changes (i.e., link down)
N */
N#define LWIP_NETIF_LINK_CALLBACK        1
N
N/*
N   --------------------------------------
N   ---------- Checksum options ----------
N   --------------------------------------
N*/
N
N/* 
NThe STM32F4x7 allows computing and verifying the IP, UDP, TCP and ICMP checksums by hardware:
N - To use this feature let the following define uncommented.
N - To disable it and process by CPU comment the  the checksum.
N*/
N#define CHECKSUM_BY_HARDWARE 
N
N
N#ifdef CHECKSUM_BY_HARDWARE
N  /* CHECKSUM_GEN_IP==0: Generate checksums by hardware for outgoing IP packets.*/
N  #define CHECKSUM_GEN_IP                 0
N  /* CHECKSUM_GEN_UDP==0: Generate checksums by hardware for outgoing UDP packets.*/
N  #define CHECKSUM_GEN_UDP                0
N  /* CHECKSUM_GEN_TCP==0: Generate checksums by hardware for outgoing TCP packets.*/
N  #define CHECKSUM_GEN_TCP                0 
N  /* CHECKSUM_CHECK_IP==0: Check checksums by hardware for incoming IP packets.*/
N  #define CHECKSUM_CHECK_IP               0
N  /* CHECKSUM_CHECK_UDP==0: Check checksums by hardware for incoming UDP packets.*/
N  #define CHECKSUM_CHECK_UDP              0
N  /* CHECKSUM_CHECK_TCP==0: Check checksums by hardware for incoming TCP packets.*/
N  #define CHECKSUM_CHECK_TCP              0
N  /* CHECKSUM_CHECK_ICMP==0: Check checksums by hardware for incoming ICMP packets.*/
N  #define CHECKSUM_GEN_ICMP               0
N#else
S  /* CHECKSUM_GEN_IP==1: Generate checksums in software for outgoing IP packets.*/
S  #define CHECKSUM_GEN_IP                 1
S  /* CHECKSUM_GEN_UDP==1: Generate checksums in software for outgoing UDP packets.*/
S  #define CHECKSUM_GEN_UDP                1
S  /* CHECKSUM_GEN_TCP==1: Generate checksums in software for outgoing TCP packets.*/
S  #define CHECKSUM_GEN_TCP                1
S  /* CHECKSUM_CHECK_IP==1: Check checksums in software for incoming IP packets.*/
S  #define CHECKSUM_CHECK_IP               1
S  /* CHECKSUM_CHECK_UDP==1: Check checksums in software for incoming UDP packets.*/
S  #define CHECKSUM_CHECK_UDP              1
S  /* CHECKSUM_CHECK_TCP==1: Check checksums in software for incoming TCP packets.*/
S  #define CHECKSUM_CHECK_TCP              1
S  /* CHECKSUM_CHECK_ICMP==1: Check checksums by hardware for incoming ICMP packets.*/
S  #define CHECKSUM_GEN_ICMP               1
N#endif
N
N
N/*
N   ----------------------------------------------
N   ---------- Sequential layer options ----------
N   ----------------------------------------------
N*/
N/**
N * LWIP_NETCONN==1: Enable Netconn API (require to use api_lib.c)
N */
N#define LWIP_NETCONN                    0
N
N/*
N   ------------------------------------
N   ---------- Socket options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_SOCKET==1: Enable Socket API (require to use sockets.c)
N */
N#define LWIP_SOCKET                     0
N
N#if 0
S/*
S   ----------------------------------------
S   ---------- Lwip Debug options ----------
S   ----------------------------------------
S*/
S//#define LWIP_DEBUG                      1
S#ifndef U8_F
S#define U8_F "c"
S#endif
S
S#ifndef S8_F
S#define S8_F "c"
S#endif
S
S#ifndef X8_F
S#define X8_F "x"
S#endif
S
S#ifndef U16_F
S#define U16_F "u"
S#endif
S
S#ifndef S16_F
S#define S16_F "d"
S#endif
S
S#ifndef X16_F
S#define X16_F "x"
S#endif
S#ifndef U32_F
S#define U32_F "u"
S#endif
S#ifndef S32_F
S#define S32_F "d"
S#endif
S#ifndef X32_F
S#define X32_F "x"
S#endif
S
S
S//extern void UARTprintf(const char *pcString, ...);
S#define LWIP_PLATFORM_DIAG(x) {printf(x);}
S#define LWIP_DEBUG
S
S
S
S#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_OFF
S//#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_WARNING
S//#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_SERIOUS
S//#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_SEVERE
S
S//#define LWIP_DBG_TYPES_ON               LWIP_DBG_ON
S#define LWIP_DBG_TYPES_ON               (LWIP_DBG_ON|LWIP_DBG_TRACE|LWIP_DBG_STATE|LWIP_DBG_FRESH)
S
S//#define ETHARP_DEBUG                    LWIP_DBG_ON     
S//#define NETIF_DEBUG                     LWIP_DBG_ON     
S//#define PBUF_DEBUG                      LWIP_DBG_ON
S//#define API_LIB_DEBUG                   LWIP_DBG_ON
S//#define API_MSG_DEBUG                   LWIP_DBG_ON
S//#define SOCKETS_DEBUG                   LWIP_DBG_ON
S//#define ICMP_DEBUG                      LWIP_DBG_ON
S//#define IGMP_DEBUG                      LWIP_DBG_ON
S//#define INET_DEBUG                      LWIP_DBG_ON
S#define IP_DEBUG                        LWIP_DBG_ON     
S//#define IP_REASS_DEBUG                  LWIP_DBG_ON
S//#define RAW_DEBUG                       LWIP_DBG_ON
S//#define MEM_DEBUG                       LWIP_DBG_ON
S//#define MEMP_DEBUG                      LWIP_DBG_ON
S//#define SYS_DEBUG                       LWIP_DBG_ON
S#define TCP_DEBUG                       LWIP_DBG_ON
S//#define TCP_INPUT_DEBUG                 LWIP_DBG_ON
S//#define TCP_FR_DEBUG                    LWIP_DBG_ON
S//#define TCP_RTO_DEBUG                   LWIP_DBG_ON
S//#define TCP_CWND_DEBUG                  LWIP_DBG_ON
S//#define TCP_WND_DEBUG                   LWIP_DBG_ON
S#define TCP_OUTPUT_DEBUG                LWIP_DBG_ON
S//#define TCP_RST_DEBUG                   LWIP_DBG_ON
S//#define TCP_QLEN_DEBUG                  LWIP_DBG_ON
S//#define UDP_DEBUG                       LWIP_DBG_ON     
S//#define TCPIP_DEBUG                     LWIP_DBG_ON
S//#define PPP_DEBUG                       LWIP_DBG_ON
S//#define SLIP_DEBUG                      LWIP_DBG_ON
S//#define DHCP_DEBUG                      LWIP_DBG_ON     
S//#define AUTOIP_DEBUG                    LWIP_DBG_ON
S//#define SNMP_MSG_DEBUG                  LWIP_DBG_ON
S//#define SNMP_MIB_DEBUG                  LWIP_DBG_ON
S//#define DNS_DEBUG                       LWIP_DBG_ON
N#endif
N#endif /* __LWIPOPTS_H__ */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 46 "..\..\Lwip\lwip-1.4.1\src\include\lwip/opt.h" 2
N#include "lwip/debug.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/debug.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_DEBUG_H__
N#define __LWIP_DEBUG_H__
N
N#include "lwip/arch.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/arch.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_ARCH_H__
N#define __LWIP_ARCH_H__
N
N#ifndef LITTLE_ENDIAN
N#define LITTLE_ENDIAN 1234
N#endif
N
N#ifndef BIG_ENDIAN
N#define BIG_ENDIAN 4321
N#endif
N
N#include "arch/cc.h"
L 1 "..\..\Lwip\lwip-1.4.1\port\arch/cc.h" 1
N/*
N * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __CC_H__
N#define __CC_H__
N
N#include "cpu.h"
L 1 "..\..\Lwip\lwip-1.4.1\port\arch/cpu.h" 1
N/*
N * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __CPU_H__
N#define __CPU_H__
N
N#define BYTE_ORDER LITTLE_ENDIAN
N
N#endif /* __CPU_H__ */
L 36 "..\..\Lwip\lwip-1.4.1\port\arch/cc.h" 2
N
Ntypedef unsigned   char    u8_t;
Ntypedef signed     char    s8_t;
Ntypedef unsigned   short   u16_t;
Ntypedef signed     short   s16_t;
Ntypedef unsigned   long    u32_t;
Ntypedef signed     long    s32_t;
Ntypedef u32_t mem_ptr_t;
Ntypedef int sys_prot_t;
N
N#ifndef U16_F
N#define U16_F "hu"
N#endif
N
N#ifndef S16_F
N#define S16_F "d"
N#endif
N
N#ifndef X16_F
N#define X16_F "hx"
N#endif
N
N#ifndef U32_F
N#define U32_F "u"
N#endif
N
N#ifndef S32_F
N#define S32_F "d"
N#endif
N
N#ifndef X32_F
N#define X32_F "x"
N#endif
N
N#ifndef SZT_F
N#define SZT_F "uz" 
N#endif
N
N
N
N
N
N
N
N
N
N/* define compiler specific symbols */
N#if defined (__ICCARM__)
X#if 0L
S
S#define PACK_STRUCT_BEGIN
S#define PACK_STRUCT_STRUCT 
S#define PACK_STRUCT_END
S#define PACK_STRUCT_FIELD(x) x
S#define PACK_STRUCT_USE_INCLUDES
S
N#elif defined (__CC_ARM)
X#elif 1L
N
N#define PACK_STRUCT_BEGIN __packed
N#define PACK_STRUCT_STRUCT 
N#define PACK_STRUCT_END
N#define PACK_STRUCT_FIELD(x) x
N
N#elif defined (__GNUC__)
S
S#define PACK_STRUCT_BEGIN
S#define PACK_STRUCT_STRUCT __attribute__ ((__packed__))
S#define PACK_STRUCT_END
S#define PACK_STRUCT_FIELD(x) x
S
S#elif defined (__TASKING__)
S
S#define PACK_STRUCT_BEGIN
S#define PACK_STRUCT_STRUCT
S#define PACK_STRUCT_END
S#define PACK_STRUCT_FIELD(x) x
S
N#endif
N
N#define LWIP_PLATFORM_ASSERT(x) printf(x)
N
N#endif /* __CC_H__ */
L 44 "..\..\Lwip\lwip-1.4.1\src\include\lwip/arch.h" 2
N
N/** Temporary: define format string for size_t if not defined in cc.h */
N#ifndef SZT_F
S#define SZT_F U32_F
N#endif /* SZT_F */
N/** Temporary upgrade helper: define format string for u8_t as hex if not
N    defined in cc.h */
N#ifndef X8_F
N#define X8_F  "02x"
N#endif /* X8_F */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#ifndef PACK_STRUCT_BEGIN
S#define PACK_STRUCT_BEGIN
N#endif /* PACK_STRUCT_BEGIN */
N
N#ifndef PACK_STRUCT_END
S#define PACK_STRUCT_END
N#endif /* PACK_STRUCT_END */
N
N#ifndef PACK_STRUCT_FIELD
S#define PACK_STRUCT_FIELD(x) x
N#endif /* PACK_STRUCT_FIELD */
N
N
N#ifndef LWIP_UNUSED_ARG
N#define LWIP_UNUSED_ARG(x) (void)x
N#endif /* LWIP_UNUSED_ARG */ 
N
N
N#ifdef LWIP_PROVIDE_ERRNO
N
N#define  EPERM         1  /* Operation not permitted */
N#define  ENOENT        2  /* No such file or directory */
N#define  ESRCH         3  /* No such process */
N#define  EINTR         4  /* Interrupted system call */
N#define  EIO           5  /* I/O error */
N#define  ENXIO         6  /* No such device or address */
N#define  E2BIG         7  /* Arg list too long */
N#define  ENOEXEC       8  /* Exec format error */
N#define  EBADF         9  /* Bad file number */
N#define  ECHILD       10  /* No child processes */
N#define  EAGAIN       11  /* Try again */
N#define  ENOMEM       12  /* Out of memory */
N#define  EACCES       13  /* Permission denied */
N#define  EFAULT       14  /* Bad address */
N#define  ENOTBLK      15  /* Block device required */
N#define  EBUSY        16  /* Device or resource busy */
N#define  EEXIST       17  /* File exists */
N#define  EXDEV        18  /* Cross-device link */
N#define  ENODEV       19  /* No such device */
N#define  ENOTDIR      20  /* Not a directory */
N#define  EISDIR       21  /* Is a directory */
N#define  EINVAL       22  /* Invalid argument */
N#define  ENFILE       23  /* File table overflow */
N#define  EMFILE       24  /* Too many open files */
N#define  ENOTTY       25  /* Not a typewriter */
N#define  ETXTBSY      26  /* Text file busy */
N#define  EFBIG        27  /* File too large */
N#define  ENOSPC       28  /* No space left on device */
N#define  ESPIPE       29  /* Illegal seek */
N#define  EROFS        30  /* Read-only file system */
N#define  EMLINK       31  /* Too many links */
N#define  EPIPE        32  /* Broken pipe */
N#define  EDOM         33  /* Math argument out of domain of func */
N#define  ERANGE       34  /* Math result not representable */
N#define  EDEADLK      35  /* Resource deadlock would occur */
N#define  ENAMETOOLONG 36  /* File name too long */
N#define  ENOLCK       37  /* No record locks available */
N#define  ENOSYS       38  /* Function not implemented */
N#define  ENOTEMPTY    39  /* Directory not empty */
N#define  ELOOP        40  /* Too many symbolic links encountered */
N#define  EWOULDBLOCK  EAGAIN  /* Operation would block */
N#define  ENOMSG       42  /* No message of desired type */
N#define  EIDRM        43  /* Identifier removed */
N#define  ECHRNG       44  /* Channel number out of range */
N#define  EL2NSYNC     45  /* Level 2 not synchronized */
N#define  EL3HLT       46  /* Level 3 halted */
N#define  EL3RST       47  /* Level 3 reset */
N#define  ELNRNG       48  /* Link number out of range */
N#define  EUNATCH      49  /* Protocol driver not attached */
N#define  ENOCSI       50  /* No CSI structure available */
N#define  EL2HLT       51  /* Level 2 halted */
N#define  EBADE        52  /* Invalid exchange */
N#define  EBADR        53  /* Invalid request descriptor */
N#define  EXFULL       54  /* Exchange full */
N#define  ENOANO       55  /* No anode */
N#define  EBADRQC      56  /* Invalid request code */
N#define  EBADSLT      57  /* Invalid slot */
N
N#define  EDEADLOCK    EDEADLK
N
N#define  EBFONT       59  /* Bad font file format */
N#define  ENOSTR       60  /* Device not a stream */
N#define  ENODATA      61  /* No data available */
N#define  ETIME        62  /* Timer expired */
N#define  ENOSR        63  /* Out of streams resources */
N#define  ENONET       64  /* Machine is not on the network */
N#define  ENOPKG       65  /* Package not installed */
N#define  EREMOTE      66  /* Object is remote */
N#define  ENOLINK      67  /* Link has been severed */
N#define  EADV         68  /* Advertise error */
N#define  ESRMNT       69  /* Srmount error */
N#define  ECOMM        70  /* Communication error on send */
N#define  EPROTO       71  /* Protocol error */
N#define  EMULTIHOP    72  /* Multihop attempted */
N#define  EDOTDOT      73  /* RFS specific error */
N#define  EBADMSG      74  /* Not a data message */
N#define  EOVERFLOW    75  /* Value too large for defined data type */
N#define  ENOTUNIQ     76  /* Name not unique on network */
N#define  EBADFD       77  /* File descriptor in bad state */
N#define  EREMCHG      78  /* Remote address changed */
N#define  ELIBACC      79  /* Can not access a needed shared library */
N#define  ELIBBAD      80  /* Accessing a corrupted shared library */
N#define  ELIBSCN      81  /* .lib section in a.out corrupted */
N#define  ELIBMAX      82  /* Attempting to link in too many shared libraries */
N#define  ELIBEXEC     83  /* Cannot exec a shared library directly */
N#define  EILSEQ       84  /* Illegal byte sequence */
N#define  ERESTART     85  /* Interrupted system call should be restarted */
N#define  ESTRPIPE     86  /* Streams pipe error */
N#define  EUSERS       87  /* Too many users */
N#define  ENOTSOCK     88  /* Socket operation on non-socket */
N#define  EDESTADDRREQ 89  /* Destination address required */
N#define  EMSGSIZE     90  /* Message too long */
N#define  EPROTOTYPE   91  /* Protocol wrong type for socket */
N#define  ENOPROTOOPT  92  /* Protocol not available */
N#define  EPROTONOSUPPORT 93  /* Protocol not supported */
N#define  ESOCKTNOSUPPORT 94  /* Socket type not supported */
N#define  EOPNOTSUPP      95  /* Operation not supported on transport endpoint */
N#define  EPFNOSUPPORT    96  /* Protocol family not supported */
N#define  EAFNOSUPPORT    97  /* Address family not supported by protocol */
N#define  EADDRINUSE      98  /* Address already in use */
N#define  EADDRNOTAVAIL   99  /* Cannot assign requested address */
N#define  ENETDOWN       100  /* Network is down */
N#define  ENETUNREACH    101  /* Network is unreachable */
N#define  ENETRESET      102  /* Network dropped connection because of reset */
N#define  ECONNABORTED   103  /* Software caused connection abort */
N#define  ECONNRESET     104  /* Connection reset by peer */
N#define  ENOBUFS        105  /* No buffer space available */
N#define  EISCONN        106  /* Transport endpoint is already connected */
N#define  ENOTCONN       107  /* Transport endpoint is not connected */
N#define  ESHUTDOWN      108  /* Cannot send after transport endpoint shutdown */
N#define  ETOOMANYREFS   109  /* Too many references: cannot splice */
N#define  ETIMEDOUT      110  /* Connection timed out */
N#define  ECONNREFUSED   111  /* Connection refused */
N#define  EHOSTDOWN      112  /* Host is down */
N#define  EHOSTUNREACH   113  /* No route to host */
N#define  EALREADY       114  /* Operation already in progress */
N#define  EINPROGRESS    115  /* Operation now in progress */
N#define  ESTALE         116  /* Stale NFS file handle */
N#define  EUCLEAN        117  /* Structure needs cleaning */
N#define  ENOTNAM        118  /* Not a XENIX named type file */
N#define  ENAVAIL        119  /* No XENIX semaphores available */
N#define  EISNAM         120  /* Is a named type file */
N#define  EREMOTEIO      121  /* Remote I/O error */
N#define  EDQUOT         122  /* Quota exceeded */
N
N#define  ENOMEDIUM      123  /* No medium found */
N#define  EMEDIUMTYPE    124  /* Wrong medium type */
N
N#ifndef errno
Nextern int errno;
N#endif
N
N#endif /* LWIP_PROVIDE_ERRNO */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_ARCH_H__ */
L 36 "..\..\Lwip\lwip-1.4.1\src\include\lwip/debug.h" 2
N//#include "opt.h"
N/*C标准库文件*/
N#include <string.h>
L 1 "d:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060019
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 39 "..\..\Lwip\lwip-1.4.1\src\include\lwip/debug.h" 2
N#include <stdlib.h>
L 1 "d:\Keil_v5\ARM\ARMCC\Bin\..\include\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998,2014 ARM Limited. All rights reserved.       */
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N#define __ARMCLIB_VERSION 5060019
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define _ARMABI_THROW
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N  /*
N   * Some of these declarations are new in C99.  To access them in C++
N   * you can use -D__USE_C99_STDLIB (or -D__USE_C99ALL).
N   */
N  #ifndef __USE_C99_STDLIB
N    #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X    #if 0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N      #define __USE_C99_STDLIB 1
N    #endif
N  #endif
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N   /* unconditional in non-strict C for consistency of debug info */
N   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X   #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
N   #else
N    typedef unsigned short wchar_t; /* see <stddef.h> */
N   #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
N  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Ntypedef struct lldiv_t { __LONGLONG quot, rem; } lldiv_t;
Xtypedef struct lldiv_t { long long quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
Nextern _ARMABI int __aeabi_MB_CUR_MAX(void);
Xextern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);
N#define MB_CUR_MAX ( __aeabi_MB_CUR_MAX() )
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain a compliant version of the strtod
N    * family of functions.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Nextern _ARMABI double atof(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI int atoi(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI long int atol(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI __LONGLONG atoll(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long long atoll(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern _ARMABI double strtod(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI float strtof(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
Nextern _ARMABI long double strtold(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * same as strtod, but return float and long double respectively.
N    */
N#endif
Nextern _ARMABI long int strtol(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long int strtol(const char * __restrict  ,
N                        char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned long int strtoul(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
N                                       char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N/* C90 reserves all names beginning with 'str' */
Nextern _ARMABI __LONGLONG strtoll(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long long strtoll(const char * __restrict  ,
N                                  char ** __restrict /*endptr*/, int /*base*/)
N                          __attribute__((__nonnull__(1)));
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned __LONGLONG strtoull(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long long strtoull(const char * __restrict  ,
N                                            char ** __restrict /*endptr*/, int /*base*/)
N                                   __attribute__((__nonnull__(1)));
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N
Nextern _ARMABI int rand(void);
Xextern __declspec(__nothrow) int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern _ARMABI void srand(unsigned int /*seed*/);
Xextern __declspec(__nothrow) void srand(unsigned int  );
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nstruct _rand_state { int __x[57]; };
Nextern _ARMABI int _rand_r(struct _rand_state *);
Xextern __declspec(__nothrow) int _rand_r(struct _rand_state *);
Nextern _ARMABI void _srand_r(struct _rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
Nstruct _ANSI_rand_state { int __x[1]; };
Nextern _ARMABI int _ANSI_rand_r(struct _ANSI_rand_state *);
Xextern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
Nextern _ARMABI void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
N   /*
N    * Re-entrant variants of both flavours of rand, which operate on
N    * an explicitly supplied state buffer.
N    */
N
Nextern _ARMABI void *calloc(size_t /*nmemb*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *calloc(size_t  , size_t  );
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void free(void * /*ptr*/);
Xextern __declspec(__nothrow) void free(void *  );
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern _ARMABI void *malloc(size_t /*size*/);
Xextern __declspec(__nothrow) void *malloc(size_t  );
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void *realloc(void * /*ptr*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *realloc(void *  , size_t  );
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
Nextern _ARMABI int posix_memalign(void ** /*ret*/, size_t /*alignment*/, size_t /*size*/);
Xextern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
N   /*
N    * allocates space for an object of size 'size', aligned to a
N    * multiple of 'alignment' (which must be a power of two and at
N    * least 4).
N    *
N    * On success, a pointer to the allocated object is stored in
N    * *ret, and zero is returned. On failure, the return value is
N    * either ENOMEM (allocation failed because no suitable piece of
N    * memory was available) or EINVAL (the 'alignment' parameter was
N    * invalid).
N    */
N#endif
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern _ARMABI void __heapstats(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                        void * /*param*/) __attribute__((__nonnull__(1)));
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern _ARMABI int __heapvalid(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/) __attribute__((__nonnull__(1)));
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern _ARMABI_NORETURN void abort(void);
Xextern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
N
Nextern _ARMABI int atexit(void (* /*func*/)(void)) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
N#if defined(__EDG__) && !defined(__GNUC__)
X#if 1L && !0L
N#define __LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE
N#endif
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE) 
X#if 0L && 1L 
S    /* atexit that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode  
S     */
S    typedef void (* __C_exitfuncptr)();
S    extern "C++"
S    inline int atexit(void (* __func)()) {
S      return atexit((__C_exitfuncptr)__func);
S    }
N#endif
N
N
Nextern _ARMABI_NORETURN void exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern _ARMABI_NORETURN void _Exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
N   /*
N    * causes normal program termination to occur. No functions registered
N    * by the atexit function are called.
N    * In this implementation, all open output streams are flushed, all
N    * open streams are closed, and all files created by the tmpfile function
N    * are removed.
N    * Control is returned to the host environment. The status returned to
N    * the host environment is determined in the same way as for 'exit'.
N    */     
N
Nextern _ARMABI char *getenv(const char * /*name*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
N
Nextern _ARMABI int  system(const char * /*string*/);
Xextern __declspec(__nothrow) int  system(const char *  );
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern _ARMABI_THROW void *bsearch(const void * /*key*/, const void * /*base*/,
Xextern  void *bsearch(const void *  , const void *  ,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* bsearch that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */
S    typedef int (* __C_compareprocptr)(const void *, const void *);
S    extern "C++"
S    void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
S    extern "C++"
S    inline void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) {
S      return bsearch(__key, __base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
N
Nextern _ARMABI_THROW void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
Xextern  void qsort(void *  , size_t  , size_t  ,
N           int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* qsort that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */    
S    extern "C++"
S    void qsort(void * __base, size_t __nmemb, size_t __size,
S               int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
S    extern "C++"
S    inline void qsort(void * __base, size_t __nmemb, size_t __size,
S                      int (* __compar)(const void *, const void *)) {
S      qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
Nextern _ARMABI_PURE int abs(int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) int abs(int  );
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern _ARMABI_PURE div_t div(int /*numer*/, int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) div_t div(int  , int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern _ARMABI_PURE long int labs(long int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long int labs(long int  );
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE long abs(long int x) { return labs(x); }
N#endif
N
Nextern _ARMABI_PURE ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) ldiv_t ldiv(long int  , long int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE ldiv_t div(long int __numer, long int __denom) {
S       return ldiv(__numer, __denom);
S   }
N#endif
N
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI_PURE __LONGLONG llabs(__LONGLONG /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long long llabs(long long  );
N   /*
N    * computes the absolute value of a long long integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE __LONGLONG abs(__LONGLONG x) { return llabs(x); }
N#endif
N
Nextern _ARMABI_PURE lldiv_t lldiv(__LONGLONG /*numer*/, __LONGLONG /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) lldiv_t lldiv(long long  , long long  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE lldiv_t div(__LONGLONG __numer, __LONGLONG __denom) {
S       return lldiv(__numer, __denom);
S   }
N#endif
N#endif
N
N#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern _ARMABI_PURE __sdiv32by16 __rt_sdiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __udiv32by16 __rt_udiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __sdiv64by32 __rt_sdiv64by32(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N#endif
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern _ARMABI unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
Xextern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern _ARMABI int mblen(const char * /*s*/, size_t /*n*/);
Xextern __declspec(__nothrow) int mblen(const char *  , size_t  );
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern _ARMABI int mbtowc(wchar_t * __restrict /*pwc*/,
Xextern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
N                   const char * __restrict /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern _ARMABI int wctomb(char * /*s*/, wchar_t /*wchar*/);
Xextern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern _ARMABI size_t mbstowcs(wchar_t * __restrict /*pwcs*/,
Xextern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
N                      const char * __restrict /*s*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern _ARMABI size_t wcstombs(char * __restrict /*s*/,
Xextern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
N                      const wchar_t * __restrict /*pwcs*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern _ARMABI void __use_realtime_heap(void);
Xextern __declspec(__nothrow) void __use_realtime_heap(void);
Nextern _ARMABI void __use_realtime_division(void);
Xextern __declspec(__nothrow) void __use_realtime_division(void);
Nextern _ARMABI void __use_two_region_memory(void);
Xextern __declspec(__nothrow) void __use_two_region_memory(void);
Nextern _ARMABI void __use_no_heap(void);
Xextern __declspec(__nothrow) void __use_no_heap(void);
Nextern _ARMABI void __use_no_heap_region(void);
Xextern __declspec(__nothrow) void __use_no_heap_region(void);
N
Nextern _ARMABI char const *__C_library_version_string(void);
Xextern __declspec(__nothrow) char const *__C_library_version_string(void);
Nextern _ARMABI int __C_library_version_number(void);
Xextern __declspec(__nothrow) int __C_library_version_number(void);
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDLIB_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __STDLIB_NO_EXPORTS
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::atoll;
S        using ::std::lldiv_t;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::div_t;
S      using ::std::ldiv_t;
S      using ::std::atof;
S      using ::std::atoi;
S      using ::std::atol;
S      using ::std::strtod;
S#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S      using ::std::strtof;
S      using ::std::strtold;
S#endif
S      using ::std::strtol;
S      using ::std::strtoul;
S      using ::std::strtoll;
S      using ::std::strtoull;
S      using ::std::rand;
S      using ::std::srand;
S      using ::std::_rand_state;
S      using ::std::_rand_r;
S      using ::std::_srand_r;
S      using ::std::_ANSI_rand_state;
S      using ::std::_ANSI_rand_r;
S      using ::std::_ANSI_srand_r;
S      using ::std::calloc;
S      using ::std::free;
S      using ::std::malloc;
S      using ::std::realloc;
S#if !defined(__STRICT_ANSI__)
S      using ::std::posix_memalign;
S#endif
S      using ::std::__heapprt;
S      using ::std::__heapstats;
S      using ::std::__heapvalid;
S      using ::std::abort;
S      using ::std::atexit;
S      using ::std::exit;
S      using ::std::_Exit;
S      using ::std::getenv;
S      using ::std::system;
S      using ::std::bsearch;
S      using ::std::qsort;
S      using ::std::abs;
S      using ::std::div;
S      using ::std::labs;
S      using ::std::ldiv;
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::llabs;
S        using ::std::lldiv;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
S      using ::std::__sdiv32by16;
S      using ::std::__udiv32by16;
S      using ::std::__sdiv64by32;
S      using ::std::__rt_sdiv32by16;
S      using ::std::__rt_udiv32by16;
S      using ::std::__rt_sdiv64by32;
S#endif
S      using ::std::__fp_status;
S      using ::std::mblen;
S      using ::std::mbtowc;
S      using ::std::wctomb;
S      using ::std::mbstowcs;
S      using ::std::wcstombs;
S      using ::std::__use_realtime_heap;
S      using ::std::__use_realtime_division;
S      using ::std::__use_two_region_memory;
S      using ::std::__use_no_heap;
S      using ::std::__use_no_heap_region;
S      using ::std::__C_library_version_string;
S      using ::std::__C_library_version_number;
S      using ::std::size_t;
S      using ::std::__aeabi_MB_CUR_MAX;
S    #endif /* __STDLIB_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#undef __LONGLONG
N
N#endif /* __stdlib_h */
N
N/* end of stdlib.h */
L 40 "..\..\Lwip\lwip-1.4.1\src\include\lwip/debug.h" 2
N#include <stdio.h>
L 1 "d:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060019
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 41 "..\..\Lwip\lwip-1.4.1\src\include\lwip/debug.h" 2
N#include "lwipopts.h"
N
N//#define TCP_DEBUG_USART_PRINTF_S(x)    printf("%s\n",x)
N#define TCP_DEBUG_USART_PRINTF_S(x) 
N
N/** lower two bits indicate debug level
N * - 0 all
N * - 1 warning
N * - 2 serious
N * - 3 severe
N */
N#define LWIP_DBG_LEVEL_ALL     0x00
N#define LWIP_DBG_LEVEL_OFF     LWIP_DBG_LEVEL_ALL /* compatibility define only */
N#define LWIP_DBG_LEVEL_WARNING 0x01 /* bad checksums, dropped packets, ... */
N#define LWIP_DBG_LEVEL_SERIOUS 0x02 /* memory allocation failures, ... */
N#define LWIP_DBG_LEVEL_SEVERE  0x03
N#define LWIP_DBG_MASK_LEVEL    0x03
N
N/** flag for LWIP_DEBUGF to enable that debug message */
N#define LWIP_DBG_ON            0x80U
N/** flag for LWIP_DEBUGF to disable that debug message */
N#define LWIP_DBG_OFF           0x00U
N
N/** flag for LWIP_DEBUGF indicating a tracing message (to follow program flow) */
N#define LWIP_DBG_TRACE         0x40U
N/** flag for LWIP_DEBUGF indicating a state debug message (to follow module states) */
N#define LWIP_DBG_STATE         0x20U
N/** flag for LWIP_DEBUGF indicating newly added code, not thoroughly tested yet */
N#define LWIP_DBG_FRESH         0x10U
N/** flag for LWIP_DEBUGF to halt after printing this debug message */
N#define LWIP_DBG_HALT          0x08U
N
N#ifndef LWIP_NOASSERT
N#define LWIP_ASSERT(message, assertion) do { if(!(assertion)) \
N  LWIP_PLATFORM_ASSERT(message); } while(0)
X#define LWIP_ASSERT(message, assertion) do { if(!(assertion))   LWIP_PLATFORM_ASSERT(message); } while(0)
N#else  /* LWIP_NOASSERT */
S#define LWIP_ASSERT(message, assertion) 
N#endif /* LWIP_NOASSERT */
N
N/** if "expression" isn't true, then print "message" and execute "handler" expression */
N#ifndef LWIP_ERROR
N#define LWIP_ERROR(message, expression, handler) do { if (!(expression)) { \
N  LWIP_PLATFORM_ASSERT(message); handler;}} while(0)
X#define LWIP_ERROR(message, expression, handler) do { if (!(expression)) {   LWIP_PLATFORM_ASSERT(message); handler;}} while(0)
N#endif /* LWIP_ERROR */
N
N
N
N//#define LWIP_DEBUG
N#ifdef LWIP_DEBUG
S/** print debug message only if debug message type is enabled...
S *  AND is of correct type AND is at least LWIP_DBG_LEVEL
S */
S#ifndef U8_F
S#define U8_F "c"
S#endif
S
S#ifndef S8_F
S#define S8_F "c"
S#endif
S
S#ifndef X8_F
S#define X8_F "x"
S#endif
S
S#ifndef U16_F
S#define U16_F "u"
S#endif
S
S#ifndef S16_F
S#define S16_F "d"
S#endif
S
S#ifndef X16_F
S#define X16_F "x"
S#endif
S#ifndef U32_F
S#define U32_F "u"
S#endif
S#ifndef S32_F
S#define S32_F "d"
S#endif
S#ifndef X32_F
S#define X32_F "x"
S#endif
S
S#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_OFF
S//#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_WARNING
S//#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_SERIOUS
S//#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_SEVERE
S
S#define LWIP_DBG_TYPES_ON               (LWIP_DBG_ON|LWIP_DBG_TRACE|LWIP_DBG_STATE|LWIP_DBG_FRESH)
S//#define ETHARP_DEBUG                    LWIP_DBG_ON     
S//#define NETIF_DEBUG                     LWIP_DBG_ON     
S//#define PBUF_DEBUG                      LWIP_DBG_ON
S//#define API_LIB_DEBUG                   LWIP_DBG_ON
S//#define API_MSG_DEBUG                   LWIP_DBG_ON
S//#define SOCKETS_DEBUG                   LWIP_DBG_ON
S//#define ICMP_DEBUG                      LWIP_DBG_ON
S//#define IGMP_DEBUG                      LWIP_DBG_ON
S//#define INET_DEBUG                      LWIP_DBG_ON
S//#define IP_DEBUG                        LWIP_DBG_ON     
S//#define IP_REASS_DEBUG                  LWIP_DBG_ON
S#define RAW_DEBUG                       LWIP_DBG_ON
S//#define MEM_DEBUG                       LWIP_DBG_ON
S//#define MEMP_DEBUG                      LWIP_DBG_ON
S//#define SYS_DEBUG                       LWIP_DBG_ON
S#define TCP_DEBUG                       LWIP_DBG_ON
S#define TCP_INPUT_DEBUG                 LWIP_DBG_ON
S#define TCP_FR_DEBUG                    LWIP_DBG_ON
S#define TCP_RTO_DEBUG                   LWIP_DBG_ON
S#define TCP_CWND_DEBUG                  LWIP_DBG_ON
S#define TCP_WND_DEBUG                   LWIP_DBG_ON
S#define TCP_OUTPUT_DEBUG                LWIP_DBG_ON
S#define TCP_RST_DEBUG                   LWIP_DBG_ON
S#define TCP_QLEN_DEBUG                  LWIP_DBG_ON
S//#define UDP_DEBUG                       LWIP_DBG_ON     
S//#define TCPIP_DEBUG                     LWIP_DBG_ON
S//#define PPP_DEBUG                       LWIP_DBG_ON
S//#define SLIP_DEBUG                      LWIP_DBG_ON
S//#define DHCP_DEBUG                      LWIP_DBG_ON     
S//#define AUTOIP_DEBUG                    LWIP_DBG_ON
S//#define SNMP_MSG_DEBUG                  LWIP_DBG_ON
S//#define SNMP_MIB_DEBUG                  LWIP_DBG_ON
S//#define DNS_DEBUG                       LWIP_DBG_ON
S
S#define LWIP_PLATFORM_DIAG printf
S#define LWIP_DEBUGF(debug, message) do { \
S                               if ( \
S                                   ((debug) & LWIP_DBG_ON) && \
S                                   ((debug) & LWIP_DBG_TYPES_ON) && \
S                                   ((s16_t)((debug) & LWIP_DBG_MASK_LEVEL) >= LWIP_DBG_MIN_LEVEL)) { \
S                                 LWIP_PLATFORM_DIAG message; \
S                                 if ((debug) & LWIP_DBG_HALT) { \
S                                   while(1); \
S                                 } \
S                               } \
S                             } while(0)
X#define LWIP_DEBUGF(debug, message) do {                                if (                                    ((debug) & LWIP_DBG_ON) &&                                    ((debug) & LWIP_DBG_TYPES_ON) &&                                    ((s16_t)((debug) & LWIP_DBG_MASK_LEVEL) >= LWIP_DBG_MIN_LEVEL)) {                                  LWIP_PLATFORM_DIAG message;                                  if ((debug) & LWIP_DBG_HALT) {                                    while(1);                                  }                                }                              } while(0)
S
N#else  /* LWIP_DEBUG */
N#define LWIP_DEBUGF(debug, message) 
N#endif /* LWIP_DEBUG */
N
N#endif /* __LWIP_DEBUG_H__ */
N
L 47 "..\..\Lwip\lwip-1.4.1\src\include\lwip/opt.h" 2
N
N/*
N   -----------------------------------------------
N   ---------- Platform specific locking ----------
N   -----------------------------------------------
N*/
N
N/**
N * SYS_LIGHTWEIGHT_PROT==1: if you want inter-task protection for certain
N * critical regions during buffer allocation, deallocation and memory
N * allocation and deallocation.
N */
N#ifndef SYS_LIGHTWEIGHT_PROT
S#define SYS_LIGHTWEIGHT_PROT            0
N#endif
N
N/** 
N * NO_SYS==1: Provides VERY minimal functionality. Otherwise,
N * use lwIP facilities.
N */
N#ifndef NO_SYS
S#define NO_SYS                          0
N#endif
N
N/**
N * NO_SYS_NO_TIMERS==1: Drop support for sys_timeout when NO_SYS==1
N * Mainly for compatibility to old versions.
N */
N#ifndef NO_SYS_NO_TIMERS
S#define NO_SYS_NO_TIMERS                0
N#endif
N
N/**
N * MEMCPY: override this if you have a faster implementation at hand than the
N * one included in your C library
N */
N#ifndef MEMCPY
N#define MEMCPY(dst,src,len)             memcpy(dst,src,len)
N#endif
N
N/**
N * SMEMCPY: override this with care! Some compilers (e.g. gcc) can inline a
N * call to memcpy() if the length is known at compile time and is small.
N */
N#ifndef SMEMCPY
N#define SMEMCPY(dst,src,len)            memcpy(dst,src,len)
N#endif
N
N/*
N   ------------------------------------
N   ---------- Memory options ----------
N   ------------------------------------
N*/
N/**
N * MEM_LIBC_MALLOC==1: Use malloc/free/realloc provided by your C-library
N * instead of the lwip internal allocator. Can save code size if you
N * already use it.
N */
N#ifndef MEM_LIBC_MALLOC
N#define MEM_LIBC_MALLOC                 0
N#endif
N
N/**
N* MEMP_MEM_MALLOC==1: Use mem_malloc/mem_free instead of the lwip pool allocator.
N* Especially useful with MEM_LIBC_MALLOC but handle with care regarding execution
N* speed and usage from interrupts!
N*/
N#ifndef MEMP_MEM_MALLOC
N#define MEMP_MEM_MALLOC                 0
N#endif
N
N/**
N * MEM_ALIGNMENT: should be set to the alignment of the CPU
N *    4 byte alignment -> #define MEM_ALIGNMENT 4
N *    2 byte alignment -> #define MEM_ALIGNMENT 2
N */
N#ifndef MEM_ALIGNMENT
S#define MEM_ALIGNMENT                   1
N#endif
N
N/**
N * MEM_SIZE: the size of the heap memory. If the application will send
N * a lot of data that needs to be copied, this should be set high.
N */
N#ifndef MEM_SIZE
S#define MEM_SIZE                        1600
N#endif
N
N/**
N * MEMP_SEPARATE_POOLS: if defined to 1, each pool is placed in its own array.
N * This can be used to individually change the location of each pool.
N * Default is one big array for all pools
N */
N#ifndef MEMP_SEPARATE_POOLS
N#define MEMP_SEPARATE_POOLS             0
N#endif
N
N/**
N * MEMP_OVERFLOW_CHECK: memp overflow protection reserves a configurable
N * amount of bytes before and after each memp element in every pool and fills
N * it with a prominent default value.
N *    MEMP_OVERFLOW_CHECK == 0 no checking
N *    MEMP_OVERFLOW_CHECK == 1 checks each element when it is freed
N *    MEMP_OVERFLOW_CHECK >= 2 checks each element in every pool every time
N *      memp_malloc() or memp_free() is called (useful but slow!)
N */
N#ifndef MEMP_OVERFLOW_CHECK
N#define MEMP_OVERFLOW_CHECK             0
N#endif
N
N/**
N * MEMP_SANITY_CHECK==1: run a sanity check after each memp_free() to make
N * sure that there are no cycles in the linked lists.
N */
N#ifndef MEMP_SANITY_CHECK
N#define MEMP_SANITY_CHECK               0
N#endif
N
N/**
N * MEM_USE_POOLS==1: Use an alternative to malloc() by allocating from a set
N * of memory pools of various sizes. When mem_malloc is called, an element of
N * the smallest pool that can provide the length needed is returned.
N * To use this, MEMP_USE_CUSTOM_POOLS also has to be enabled.
N */
N#ifndef MEM_USE_POOLS
N#define MEM_USE_POOLS                   0
N#endif
N
N/**
N * MEM_USE_POOLS_TRY_BIGGER_POOL==1: if one malloc-pool is empty, try the next
N * bigger pool - WARNING: THIS MIGHT WASTE MEMORY but it can make a system more
N * reliable. */
N#ifndef MEM_USE_POOLS_TRY_BIGGER_POOL
N#define MEM_USE_POOLS_TRY_BIGGER_POOL   0
N#endif
N
N/**
N * MEMP_USE_CUSTOM_POOLS==1: whether to include a user file lwippools.h
N * that defines additional pools beyond the "standard" ones required
N * by lwIP. If you set this to 1, you must have lwippools.h in your 
N * inlude path somewhere. 
N */
N#ifndef MEMP_USE_CUSTOM_POOLS
N#define MEMP_USE_CUSTOM_POOLS           0
N#endif
N
N/**
N * Set this to 1 if you want to free PBUF_RAM pbufs (or call mem_free()) from
N * interrupt context (or another context that doesn't allow waiting for a
N * semaphore).
N * If set to 1, mem_malloc will be protected by a semaphore and SYS_ARCH_PROTECT,
N * while mem_free will only use SYS_ARCH_PROTECT. mem_malloc SYS_ARCH_UNPROTECTs
N * with each loop so that mem_free can run.
N *
N * ATTENTION: As you can see from the above description, this leads to dis-/
N * enabling interrupts often, which can be slow! Also, on low memory, mem_malloc
N * can need longer.
N *
N * If you don't want that, at least for NO_SYS=0, you can still use the following
N * functions to enqueue a deallocation call which then runs in the tcpip_thread
N * context:
N * - pbuf_free_callback(p);
N * - mem_free_callback(m);
N */
N#ifndef LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
N#define LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT 0
N#endif
N
N/*
N   ------------------------------------------------
N   ---------- Internal Memory Pool Sizes ----------
N   ------------------------------------------------
N*/
N/**
N * MEMP_NUM_PBUF: the number of memp struct pbufs (used for PBUF_ROM and PBUF_REF).
N * If the application sends a lot of data out of ROM (or other static memory),
N * this should be set high.
N */
N#ifndef MEMP_NUM_PBUF
N#define MEMP_NUM_PBUF                   16
N#endif
N
N/**
N * MEMP_NUM_RAW_PCB: Number of raw connection PCBs
N * (requires the LWIP_RAW option)
N */
N#ifndef MEMP_NUM_RAW_PCB
N#define MEMP_NUM_RAW_PCB                4
N#endif
N
N/**
N * MEMP_NUM_UDP_PCB: the number of UDP protocol control blocks. One
N * per active UDP "connection".
N * (requires the LWIP_UDP option)
N */
N#ifndef MEMP_NUM_UDP_PCB
S#define MEMP_NUM_UDP_PCB                4
N#endif
N
N/**
N * MEMP_NUM_TCP_PCB: the number of simulatenously active TCP connections.
N * (requires the LWIP_TCP option)
N */
N#ifndef MEMP_NUM_TCP_PCB
S#define MEMP_NUM_TCP_PCB                5
N#endif
N
N/**
N * MEMP_NUM_TCP_PCB_LISTEN: the number of listening TCP connections.
N * (requires the LWIP_TCP option)
N */
N#ifndef MEMP_NUM_TCP_PCB_LISTEN
S#define MEMP_NUM_TCP_PCB_LISTEN         8
N#endif
N
N/**
N * MEMP_NUM_TCP_SEG: the number of simultaneously queued TCP segments.
N * (requires the LWIP_TCP option)
N */
N#ifndef MEMP_NUM_TCP_SEG
S#define MEMP_NUM_TCP_SEG                16
N#endif
N
N/**
N * MEMP_NUM_REASSDATA: the number of IP packets simultaneously queued for
N * reassembly (whole packets, not fragments!)
N */
N#ifndef MEMP_NUM_REASSDATA
N#define MEMP_NUM_REASSDATA              5
N#endif
N
N/**
N * MEMP_NUM_FRAG_PBUF: the number of IP fragments simultaneously sent
N * (fragments, not whole packets!).
N * This is only used with IP_FRAG_USES_STATIC_BUF==0 and
N * LWIP_NETIF_TX_SINGLE_PBUF==0 and only has to be > 1 with DMA-enabled MACs
N * where the packet is not yet sent when netif->output returns.
N */
N#ifndef MEMP_NUM_FRAG_PBUF
N#define MEMP_NUM_FRAG_PBUF              15
N#endif
N
N/**
N * MEMP_NUM_ARP_QUEUE: the number of simulateously queued outgoing
N * packets (pbufs) that are waiting for an ARP request (to resolve
N * their destination address) to finish.
N * (requires the ARP_QUEUEING option)
N */
N#ifndef MEMP_NUM_ARP_QUEUE
N#define MEMP_NUM_ARP_QUEUE              30
N#endif
N
N/**
N * MEMP_NUM_IGMP_GROUP: The number of multicast groups whose network interfaces
N * can be members et the same time (one per netif - allsystems group -, plus one
N * per netif membership).
N * (requires the LWIP_IGMP option)
N */
N#ifndef MEMP_NUM_IGMP_GROUP
N#define MEMP_NUM_IGMP_GROUP             8
N#endif
N
N/**
N * MEMP_NUM_SYS_TIMEOUT: the number of simulateously active timeouts.
N * (requires NO_SYS==0)
N * The default number of timeouts is calculated here for all enabled modules.
N * The formula expects settings to be either '0' or '1'.
N */
N#ifndef MEMP_NUM_SYS_TIMEOUT
S#define MEMP_NUM_SYS_TIMEOUT            (LWIP_TCP + IP_REASSEMBLY + LWIP_ARP + (2*LWIP_DHCP) + LWIP_AUTOIP + LWIP_IGMP + LWIP_DNS + PPP_SUPPORT)
N#endif
N
N/**
N * MEMP_NUM_NETBUF: the number of struct netbufs.
N * (only needed if you use the sequential API, like api_lib.c)
N */
N#ifndef MEMP_NUM_NETBUF
N#define MEMP_NUM_NETBUF                 2
N#endif
N
N/**
N * MEMP_NUM_NETCONN: the number of struct netconns.
N * (only needed if you use the sequential API, like api_lib.c)
N */
N#ifndef MEMP_NUM_NETCONN
N#define MEMP_NUM_NETCONN                4
N#endif
N
N/**
N * MEMP_NUM_TCPIP_MSG_API: the number of struct tcpip_msg, which are used
N * for callback/timeout API communication. 
N * (only needed if you use tcpip.c)
N */
N#ifndef MEMP_NUM_TCPIP_MSG_API
N#define MEMP_NUM_TCPIP_MSG_API          8
N#endif
N
N/**
N * MEMP_NUM_TCPIP_MSG_INPKT: the number of struct tcpip_msg, which are used
N * for incoming packets. 
N * (only needed if you use tcpip.c)
N */
N#ifndef MEMP_NUM_TCPIP_MSG_INPKT
N#define MEMP_NUM_TCPIP_MSG_INPKT        8
N#endif
N
N/**
N * MEMP_NUM_SNMP_NODE: the number of leafs in the SNMP tree.
N */
N#ifndef MEMP_NUM_SNMP_NODE
N#define MEMP_NUM_SNMP_NODE              50
N#endif
N
N/**
N * MEMP_NUM_SNMP_ROOTNODE: the number of branches in the SNMP tree.
N * Every branch has one leaf (MEMP_NUM_SNMP_NODE) at least!
N */
N#ifndef MEMP_NUM_SNMP_ROOTNODE
N#define MEMP_NUM_SNMP_ROOTNODE          30
N#endif
N
N/**
N * MEMP_NUM_SNMP_VARBIND: the number of concurrent requests (does not have to
N * be changed normally) - 2 of these are used per request (1 for input,
N * 1 for output)
N */
N#ifndef MEMP_NUM_SNMP_VARBIND
N#define MEMP_NUM_SNMP_VARBIND           2
N#endif
N
N/**
N * MEMP_NUM_SNMP_VALUE: the number of OID or values concurrently used
N * (does not have to be changed normally) - 3 of these are used per request
N * (1 for the value read and 2 for OIDs - input and output)
N */
N#ifndef MEMP_NUM_SNMP_VALUE
N#define MEMP_NUM_SNMP_VALUE             3
N#endif
N
N/**
N * MEMP_NUM_NETDB: the number of concurrently running lwip_addrinfo() calls
N * (before freeing the corresponding memory using lwip_freeaddrinfo()).
N */
N#ifndef MEMP_NUM_NETDB
N#define MEMP_NUM_NETDB                  1
N#endif
N
N/**
N * MEMP_NUM_LOCALHOSTLIST: the number of host entries in the local host list
N * if DNS_LOCAL_HOSTLIST_IS_DYNAMIC==1.
N */
N#ifndef MEMP_NUM_LOCALHOSTLIST
N#define MEMP_NUM_LOCALHOSTLIST          1
N#endif
N
N/**
N * MEMP_NUM_PPPOE_INTERFACES: the number of concurrently active PPPoE
N * interfaces (only used with PPPOE_SUPPORT==1)
N */
N#ifndef MEMP_NUM_PPPOE_INTERFACES
N#define MEMP_NUM_PPPOE_INTERFACES       1
N#endif
N
N/**
N * PBUF_POOL_SIZE: the number of buffers in the pbuf pool. 
N */
N#ifndef PBUF_POOL_SIZE
S#define PBUF_POOL_SIZE                  16
N#endif
N
N/*
N   ---------------------------------
N   ---------- ARP options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_ARP==1: Enable ARP functionality.
N */
N#ifndef LWIP_ARP
S#define LWIP_ARP                        1
N#endif
N
N/**
N * ARP_TABLE_SIZE: Number of active MAC-IP address pairs cached.
N */
N#ifndef ARP_TABLE_SIZE
N#define ARP_TABLE_SIZE                  10
N#endif
N
N/**
N * ARP_QUEUEING==1: Multiple outgoing packets are queued during hardware address
N * resolution. By default, only the most recent packet is queued per IP address.
N * This is sufficient for most protocols and mainly reduces TCP connection
N * startup time. Set this to 1 if you know your application sends more than one
N * packet in a row to an IP address that is not in the ARP cache.
N */
N#ifndef ARP_QUEUEING
N#define ARP_QUEUEING                    0
N#endif
N
N/**
N * ETHARP_TRUST_IP_MAC==1: Incoming IP packets cause the ARP table to be
N * updated with the source MAC and IP addresses supplied in the packet.
N * You may want to disable this if you do not trust LAN peers to have the
N * correct addresses, or as a limited approach to attempt to handle
N * spoofing. If disabled, lwIP will need to make a new ARP request if
N * the peer is not already in the ARP table, adding a little latency.
N * The peer *is* in the ARP table if it requested our address before.
N * Also notice that this slows down input processing of every IP packet!
N */
N#ifndef ETHARP_TRUST_IP_MAC
N#define ETHARP_TRUST_IP_MAC             0
N#endif
N
N/**
N * ETHARP_SUPPORT_VLAN==1: support receiving ethernet packets with VLAN header.
N * Additionally, you can define ETHARP_VLAN_CHECK to an u16_t VLAN ID to check.
N * If ETHARP_VLAN_CHECK is defined, only VLAN-traffic for this VLAN is accepted.
N * If ETHARP_VLAN_CHECK is not defined, all traffic is accepted.
N * Alternatively, define a function/define ETHARP_VLAN_CHECK_FN(eth_hdr, vlan)
N * that returns 1 to accept a packet or 0 to drop a packet.
N */
N#ifndef ETHARP_SUPPORT_VLAN
N#define ETHARP_SUPPORT_VLAN             0
N#endif
N
N/** LWIP_ETHERNET==1: enable ethernet support for PPPoE even though ARP
N * might be disabled
N */
N#ifndef LWIP_ETHERNET
N#define LWIP_ETHERNET                   (LWIP_ARP || PPPOE_SUPPORT)
N#endif
N
N/** ETH_PAD_SIZE: number of bytes added before the ethernet header to ensure
N * alignment of payload after that header. Since the header is 14 bytes long,
N * without this padding e.g. addresses in the IP header will not be aligned
N * on a 32-bit boundary, so setting this to 2 can speed up 32-bit-platforms.
N */
N#ifndef ETH_PAD_SIZE
N#define ETH_PAD_SIZE                    0
N#endif
N
N/** ETHARP_SUPPORT_STATIC_ENTRIES==1: enable code to support static ARP table
N * entries (using etharp_add_static_entry/etharp_remove_static_entry).
N */
N#ifndef ETHARP_SUPPORT_STATIC_ENTRIES
N#define ETHARP_SUPPORT_STATIC_ENTRIES   0
N#endif
N
N
N/*
N   --------------------------------
N   ---------- IP options ----------
N   --------------------------------
N*/
N/**
N * IP_FORWARD==1: Enables the ability to forward IP packets across network
N * interfaces. If you are going to run lwIP on a device with only one network
N * interface, define this to 0.
N */
N#ifndef IP_FORWARD
N#define IP_FORWARD                      0
N#endif
N
N/**
N * IP_OPTIONS_ALLOWED: Defines the behavior for IP options.
N *      IP_OPTIONS_ALLOWED==0: All packets with IP options are dropped.
N *      IP_OPTIONS_ALLOWED==1: IP options are allowed (but not parsed).
N */
N#ifndef IP_OPTIONS_ALLOWED
N#define IP_OPTIONS_ALLOWED              1
N#endif
N
N/**
N * IP_REASSEMBLY==1: Reassemble incoming fragmented IP packets. Note that
N * this option does not affect outgoing packet sizes, which can be controlled
N * via IP_FRAG.
N */
N#ifndef IP_REASSEMBLY
N#define IP_REASSEMBLY                   1
N#endif
N
N/**
N * IP_FRAG==1: Fragment outgoing IP packets if their size exceeds MTU. Note
N * that this option does not affect incoming packet sizes, which can be
N * controlled via IP_REASSEMBLY.
N */
N#ifndef IP_FRAG
N#define IP_FRAG                         1
N#endif
N
N/**
N * IP_REASS_MAXAGE: Maximum time (in multiples of IP_TMR_INTERVAL - so seconds, normally)
N * a fragmented IP packet waits for all fragments to arrive. If not all fragments arrived
N * in this time, the whole packet is discarded.
N */
N#ifndef IP_REASS_MAXAGE
N#define IP_REASS_MAXAGE                 3
N#endif
N
N/**
N * IP_REASS_MAX_PBUFS: Total maximum amount of pbufs waiting to be reassembled.
N * Since the received pbufs are enqueued, be sure to configure
N * PBUF_POOL_SIZE > IP_REASS_MAX_PBUFS so that the stack is still able to receive
N * packets even if the maximum amount of fragments is enqueued for reassembly!
N */
N#ifndef IP_REASS_MAX_PBUFS
N#define IP_REASS_MAX_PBUFS              10
N#endif
N
N/**
N * IP_FRAG_USES_STATIC_BUF==1: Use a static MTU-sized buffer for IP
N * fragmentation. Otherwise pbufs are allocated and reference the original
N * packet data to be fragmented (or with LWIP_NETIF_TX_SINGLE_PBUF==1,
N * new PBUF_RAM pbufs are used for fragments).
N * ATTENTION: IP_FRAG_USES_STATIC_BUF==1 may not be used for DMA-enabled MACs!
N */
N#ifndef IP_FRAG_USES_STATIC_BUF
N#define IP_FRAG_USES_STATIC_BUF         0
N#endif
N
N/**
N * IP_FRAG_MAX_MTU: Assumed max MTU on any interface for IP frag buffer
N * (requires IP_FRAG_USES_STATIC_BUF==1)
N */
N#if IP_FRAG_USES_STATIC_BUF && !defined(IP_FRAG_MAX_MTU)
X#if 0 && !0L
S#define IP_FRAG_MAX_MTU                 1500
N#endif
N
N/**
N * IP_DEFAULT_TTL: Default value for Time-To-Live used by transport layers.
N */
N#ifndef IP_DEFAULT_TTL
N#define IP_DEFAULT_TTL                  255
N#endif
N
N/**
N * IP_SOF_BROADCAST=1: Use the SOF_BROADCAST field to enable broadcast
N * filter per pcb on udp and raw send operations. To enable broadcast filter
N * on recv operations, you also have to set IP_SOF_BROADCAST_RECV=1.
N */
N#ifndef IP_SOF_BROADCAST
N#define IP_SOF_BROADCAST                0
N#endif
N
N/**
N * IP_SOF_BROADCAST_RECV (requires IP_SOF_BROADCAST=1) enable the broadcast
N * filter on recv operations.
N */
N#ifndef IP_SOF_BROADCAST_RECV
N#define IP_SOF_BROADCAST_RECV           0
N#endif
N
N/**
N * IP_FORWARD_ALLOW_TX_ON_RX_NETIF==1: allow ip_forward() to send packets back
N * out on the netif where it was received. This should only be used for
N * wireless networks.
N * ATTENTION: When this is 1, make sure your netif driver correctly marks incoming
N * link-layer-broadcast/multicast packets as such using the corresponding pbuf flags!
N */
N#ifndef IP_FORWARD_ALLOW_TX_ON_RX_NETIF
N#define IP_FORWARD_ALLOW_TX_ON_RX_NETIF 0
N#endif
N
N/**
N * LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS==1: randomize the local port for the first
N * local TCP/UDP pcb (default==0). This can prevent creating predictable port
N * numbers after booting a device.
N */
N#ifndef LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS
N#define LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 0
N#endif
N
N/*
N   ----------------------------------
N   ---------- ICMP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_ICMP==1: Enable ICMP module inside the IP stack.
N * Be careful, disable that make your product non-compliant to RFC1122
N */
N#ifndef LWIP_ICMP
S#define LWIP_ICMP                       1
N#endif
N
N/**
N * ICMP_TTL: Default value for Time-To-Live used by ICMP packets.
N */
N#ifndef ICMP_TTL
N#define ICMP_TTL                       (IP_DEFAULT_TTL)
N#endif
N
N/**
N * LWIP_BROADCAST_PING==1: respond to broadcast pings (default is unicast only)
N */
N#ifndef LWIP_BROADCAST_PING
N#define LWIP_BROADCAST_PING             0
N#endif
N
N/**
N * LWIP_MULTICAST_PING==1: respond to multicast pings (default is unicast only)
N */
N#ifndef LWIP_MULTICAST_PING
N#define LWIP_MULTICAST_PING             0
N#endif
N
N/*
N   ---------------------------------
N   ---------- RAW options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_RAW==1: Enable application layer to hook into the IP layer itself.
N */
N#ifndef LWIP_RAW
N#define LWIP_RAW                        1
N#endif
N
N/**
N * LWIP_RAW==1: Enable application layer to hook into the IP layer itself.
N */
N#ifndef RAW_TTL
N#define RAW_TTL                        (IP_DEFAULT_TTL)
N#endif
N
N/*
N   ----------------------------------
N   ---------- DHCP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_DHCP==1: Enable DHCP module.
N */
N#ifndef LWIP_DHCP
S#define LWIP_DHCP                       0
N#endif
N
N/**
N * DHCP_DOES_ARP_CHECK==1: Do an ARP check on the offered address.
N */
N#ifndef DHCP_DOES_ARP_CHECK
N#define DHCP_DOES_ARP_CHECK             ((LWIP_DHCP) && (LWIP_ARP))
N#endif
N
N/*
N   ------------------------------------
N   ---------- AUTOIP options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_AUTOIP==1: Enable AUTOIP module.
N */
N#ifndef LWIP_AUTOIP
N#define LWIP_AUTOIP                     0
N#endif
N
N/**
N * LWIP_DHCP_AUTOIP_COOP==1: Allow DHCP and AUTOIP to be both enabled on
N * the same interface at the same time.
N */
N#ifndef LWIP_DHCP_AUTOIP_COOP
N#define LWIP_DHCP_AUTOIP_COOP           0
N#endif
N
N/**
N * LWIP_DHCP_AUTOIP_COOP_TRIES: Set to the number of DHCP DISCOVER probes
N * that should be sent before falling back on AUTOIP. This can be set
N * as low as 1 to get an AutoIP address very quickly, but you should
N * be prepared to handle a changing IP address when DHCP overrides
N * AutoIP.
N */
N#ifndef LWIP_DHCP_AUTOIP_COOP_TRIES
N#define LWIP_DHCP_AUTOIP_COOP_TRIES     9
N#endif
N
N/*
N   ----------------------------------
N   ---------- SNMP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_SNMP==1: Turn on SNMP module. UDP must be available for SNMP
N * transport.
N */
N#ifndef LWIP_SNMP
N#define LWIP_SNMP                       0
N#endif
N
N/**
N * SNMP_CONCURRENT_REQUESTS: Number of concurrent requests the module will
N * allow. At least one request buffer is required.
N * Does not have to be changed unless external MIBs answer request asynchronously
N */
N#ifndef SNMP_CONCURRENT_REQUESTS
N#define SNMP_CONCURRENT_REQUESTS        1
N#endif
N
N/**
N * SNMP_TRAP_DESTINATIONS: Number of trap destinations. At least one trap
N * destination is required
N */
N#ifndef SNMP_TRAP_DESTINATIONS
N#define SNMP_TRAP_DESTINATIONS          1
N#endif
N
N/**
N * SNMP_PRIVATE_MIB: 
N * When using a private MIB, you have to create a file 'private_mib.h' that contains
N * a 'struct mib_array_node mib_private' which contains your MIB.
N */
N#ifndef SNMP_PRIVATE_MIB
N#define SNMP_PRIVATE_MIB                0
N#endif
N
N/**
N * Only allow SNMP write actions that are 'safe' (e.g. disabeling netifs is not
N * a safe action and disabled when SNMP_SAFE_REQUESTS = 1).
N * Unsafe requests are disabled by default!
N */
N#ifndef SNMP_SAFE_REQUESTS
N#define SNMP_SAFE_REQUESTS              1
N#endif
N
N/**
N * The maximum length of strings used. This affects the size of
N * MEMP_SNMP_VALUE elements.
N */
N#ifndef SNMP_MAX_OCTET_STRING_LEN
N#define SNMP_MAX_OCTET_STRING_LEN       127
N#endif
N
N/**
N * The maximum depth of the SNMP tree.
N * With private MIBs enabled, this depends on your MIB!
N * This affects the size of MEMP_SNMP_VALUE elements.
N */
N#ifndef SNMP_MAX_TREE_DEPTH
N#define SNMP_MAX_TREE_DEPTH             15
N#endif
N
N/**
N * The size of the MEMP_SNMP_VALUE elements, normally calculated from
N * SNMP_MAX_OCTET_STRING_LEN and SNMP_MAX_TREE_DEPTH.
N */
N#ifndef SNMP_MAX_VALUE_SIZE
N#define SNMP_MAX_VALUE_SIZE             LWIP_MAX((SNMP_MAX_OCTET_STRING_LEN)+1, sizeof(s32_t)*(SNMP_MAX_TREE_DEPTH))
N#endif
N
N/*
N   ----------------------------------
N   ---------- IGMP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_IGMP==1: Turn on IGMP module. 
N */
N#ifndef LWIP_IGMP
N#define LWIP_IGMP                       0
N#endif
N
N/*
N   ----------------------------------
N   ---------- DNS options -----------
N   ----------------------------------
N*/
N/**
N * LWIP_DNS==1: Turn on DNS module. UDP must be available for DNS
N * transport.
N */
N#ifndef LWIP_DNS
S#define LWIP_DNS                        0
N#endif
N
N/** DNS maximum number of entries to maintain locally. */
N#ifndef DNS_TABLE_SIZE
S#define DNS_TABLE_SIZE                  4
N#endif
N
N/** DNS maximum host name length supported in the name table. */
N#ifndef DNS_MAX_NAME_LENGTH
N#define DNS_MAX_NAME_LENGTH             256
N#endif
N
N/** The maximum of DNS servers */
N#ifndef DNS_MAX_SERVERS
N#define DNS_MAX_SERVERS                 2
N#endif
N
N/** DNS do a name checking between the query and the response. */
N#ifndef DNS_DOES_NAME_CHECK
N#define DNS_DOES_NAME_CHECK             1
N#endif
N
N/** DNS message max. size. Default value is RFC compliant. */
N#ifndef DNS_MSG_SIZE
N#define DNS_MSG_SIZE                    512
N#endif
N
N/** DNS_LOCAL_HOSTLIST: Implements a local host-to-address list. If enabled,
N *  you have to define
N *    #define DNS_LOCAL_HOSTLIST_INIT {{"host1", 0x123}, {"host2", 0x234}}
N *  (an array of structs name/address, where address is an u32_t in network
N *  byte order).
N *
N *  Instead, you can also use an external function:
N *  #define DNS_LOOKUP_LOCAL_EXTERN(x) extern u32_t my_lookup_function(const char *name)
N *  that returns the IP address or INADDR_NONE if not found.
N */
N#ifndef DNS_LOCAL_HOSTLIST
N#define DNS_LOCAL_HOSTLIST              0
N#endif /* DNS_LOCAL_HOSTLIST */
N
N/** If this is turned on, the local host-list can be dynamically changed
N *  at runtime. */
N#ifndef DNS_LOCAL_HOSTLIST_IS_DYNAMIC
S#define DNS_LOCAL_HOSTLIST_IS_DYNAMIC   0
N#endif /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
N
N/*
N   ---------------------------------
N   ---------- UDP options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_UDP==1: Turn on UDP.
N */
N#ifndef LWIP_UDP
S#define LWIP_UDP                        1
N#endif
N
N/**
N * LWIP_UDPLITE==1: Turn on UDP-Lite. (Requires LWIP_UDP)
N */
N#ifndef LWIP_UDPLITE
N#define LWIP_UDPLITE                    0
N#endif
N
N/**
N * UDP_TTL: Default Time-To-Live value.
N */
N#ifndef UDP_TTL
S#define UDP_TTL                         (IP_DEFAULT_TTL)
N#endif
N
N/**
N * LWIP_NETBUF_RECVINFO==1: append destination addr and port to every netbuf.
N */
N#ifndef LWIP_NETBUF_RECVINFO
N#define LWIP_NETBUF_RECVINFO            0
N#endif
N
N/*
N   ---------------------------------
N   ---------- TCP options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_TCP==1: Turn on TCP.
N */
N#ifndef LWIP_TCP
S#define LWIP_TCP                        1
N#endif
N
N/**
N * TCP_TTL: Default Time-To-Live value.
N */
N#ifndef TCP_TTL
S#define TCP_TTL                         (IP_DEFAULT_TTL)
N#endif
N
N/**
N * TCP_WND: The size of a TCP window.  This must be at least 
N * (2 * TCP_MSS) for things to work well
N */
N#ifndef TCP_WND
S#define TCP_WND                         (4 * TCP_MSS)
N#endif 
N
N/**
N * TCP_MAXRTX: Maximum number of retransmissions of data segments.
N */
N#ifndef TCP_MAXRTX
N#define TCP_MAXRTX                      12
N#endif
N
N/**
N * TCP_SYNMAXRTX: Maximum number of retransmissions of SYN segments.
N */
N#ifndef TCP_SYNMAXRTX
N#define TCP_SYNMAXRTX                   6
N#endif
N
N/**
N * TCP_QUEUE_OOSEQ==1: TCP will queue segments that arrive out of order.
N * Define to 0 if your device is low on memory.
N */
N#ifndef TCP_QUEUE_OOSEQ
S#define TCP_QUEUE_OOSEQ                 (LWIP_TCP)
N#endif
N
N/**
N * TCP_MSS: TCP Maximum segment size. (default is 536, a conservative default,
N * you might want to increase this.)
N * For the receive side, this MSS is advertised to the remote side
N * when opening a connection. For the transmit size, this MSS sets
N * an upper limit on the MSS advertised by the remote host.
N */
N#ifndef TCP_MSS
S#define TCP_MSS                         536
N#endif
N
N/**
N * TCP_CALCULATE_EFF_SEND_MSS: "The maximum size of a segment that TCP really
N * sends, the 'effective send MSS,' MUST be the smaller of the send MSS (which
N * reflects the available reassembly buffer size at the remote host) and the
N * largest size permitted by the IP layer" (RFC 1122)
N * Setting this to 1 enables code that checks TCP_MSS against the MTU of the
N * netif used for a connection and limits the MSS if it would be too big otherwise.
N */
N#ifndef TCP_CALCULATE_EFF_SEND_MSS
N#define TCP_CALCULATE_EFF_SEND_MSS      1
N#endif
N
N
N/**
N * TCP_SND_BUF: TCP sender buffer space (bytes).
N * To achieve good performance, this should be at least 2 * TCP_MSS.
N */
N#ifndef TCP_SND_BUF
S#define TCP_SND_BUF                     (2 * TCP_MSS)
N#endif
N
N/**
N * TCP_SND_QUEUELEN: TCP sender buffer space (pbufs). This must be at least
N * as much as (2 * TCP_SND_BUF/TCP_MSS) for things to work.
N */
N#ifndef TCP_SND_QUEUELEN
S#define TCP_SND_QUEUELEN                ((4 * (TCP_SND_BUF) + (TCP_MSS - 1))/(TCP_MSS))
N#endif
N
N/**
N * TCP_SNDLOWAT: TCP writable space (bytes). This must be less than
N * TCP_SND_BUF. It is the amount of space which must be available in the
N * TCP snd_buf for select to return writable (combined with TCP_SNDQUEUELOWAT).
N */
N#ifndef TCP_SNDLOWAT
N#define TCP_SNDLOWAT                    LWIP_MIN(LWIP_MAX(((TCP_SND_BUF)/2), (2 * TCP_MSS) + 1), (TCP_SND_BUF) - 1)
N#endif
N
N/**
N * TCP_SNDQUEUELOWAT: TCP writable bufs (pbuf count). This must be less
N * than TCP_SND_QUEUELEN. If the number of pbufs queued on a pcb drops below
N * this number, select returns writable (combined with TCP_SNDLOWAT).
N */
N#ifndef TCP_SNDQUEUELOWAT
N#define TCP_SNDQUEUELOWAT               LWIP_MAX(((TCP_SND_QUEUELEN)/2), 5)
N#endif
N
N/**
N * TCP_OOSEQ_MAX_BYTES: The maximum number of bytes queued on ooseq per pcb.
N * Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==0.
N */
N#ifndef TCP_OOSEQ_MAX_BYTES
N#define TCP_OOSEQ_MAX_BYTES             0
N#endif
N
N/**
N * TCP_OOSEQ_MAX_PBUFS: The maximum number of pbufs queued on ooseq per pcb.
N * Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==0.
N */
N#ifndef TCP_OOSEQ_MAX_PBUFS
N#define TCP_OOSEQ_MAX_PBUFS             0
N#endif
N
N/**
N * TCP_LISTEN_BACKLOG: Enable the backlog option for tcp listen pcb.
N */
N#ifndef TCP_LISTEN_BACKLOG
N#define TCP_LISTEN_BACKLOG              0
N#endif
N
N/**
N * The maximum allowed backlog for TCP listen netconns.
N * This backlog is used unless another is explicitly specified.
N * 0xff is the maximum (u8_t).
N */
N#ifndef TCP_DEFAULT_LISTEN_BACKLOG
N#define TCP_DEFAULT_LISTEN_BACKLOG      0xff
N#endif
N
N/**
N * TCP_OVERSIZE: The maximum number of bytes that tcp_write may
N * allocate ahead of time in an attempt to create shorter pbuf chains
N * for transmission. The meaningful range is 0 to TCP_MSS. Some
N * suggested values are:
N *
N * 0:         Disable oversized allocation. Each tcp_write() allocates a new
N              pbuf (old behaviour).
N * 1:         Allocate size-aligned pbufs with minimal excess. Use this if your
N *            scatter-gather DMA requires aligned fragments.
N * 128:       Limit the pbuf/memory overhead to 20%.
N * TCP_MSS:   Try to create unfragmented TCP packets.
N * TCP_MSS/4: Try to create 4 fragments or less per TCP packet.
N */
N#ifndef TCP_OVERSIZE
N#define TCP_OVERSIZE                    TCP_MSS
N#endif
N
N/**
N * LWIP_TCP_TIMESTAMPS==1: support the TCP timestamp option.
N */
N#ifndef LWIP_TCP_TIMESTAMPS
N#define LWIP_TCP_TIMESTAMPS             0
N#endif
N
N/**
N * TCP_WND_UPDATE_THRESHOLD: difference in window to trigger an
N * explicit window update
N */
N#ifndef TCP_WND_UPDATE_THRESHOLD
N#define TCP_WND_UPDATE_THRESHOLD   (TCP_WND / 4)
N#endif
N
N/**
N * LWIP_EVENT_API and LWIP_CALLBACK_API: Only one of these should be set to 1.
N *     LWIP_EVENT_API==1: The user defines lwip_tcp_event() to receive all
N *         events (accept, sent, etc) that happen in the system.
N *     LWIP_CALLBACK_API==1: The PCB callback function is called directly
N *         for the event. This is the default.
N */
N#if !defined(LWIP_EVENT_API) && !defined(LWIP_CALLBACK_API)
X#if !0L && !0L
N#define LWIP_EVENT_API                  0
N#define LWIP_CALLBACK_API               1
N#endif
N
N
N/*
N   ----------------------------------
N   ---------- Pbuf options ----------
N   ----------------------------------
N*/
N/**
N * PBUF_LINK_HLEN: the number of bytes that should be allocated for a
N * link level header. The default is 14, the standard value for
N * Ethernet.
N */
N#ifndef PBUF_LINK_HLEN
N#define PBUF_LINK_HLEN                  (14 + ETH_PAD_SIZE)
N#endif
N
N/**
N * PBUF_POOL_BUFSIZE: the size of each pbuf in the pbuf pool. The default is
N * designed to accomodate single full size TCP frame in one pbuf, including
N * TCP_MSS, IP header, and link header.
N */
N#ifndef PBUF_POOL_BUFSIZE
S#define PBUF_POOL_BUFSIZE               LWIP_MEM_ALIGN_SIZE(TCP_MSS+40+PBUF_LINK_HLEN)
N#endif
N
N/*
N   ------------------------------------------------
N   ---------- Network Interfaces options ----------
N   ------------------------------------------------
N*/
N/**
N * LWIP_NETIF_HOSTNAME==1: use DHCP_OPTION_HOSTNAME with netif's hostname
N * field.
N */
N#ifndef LWIP_NETIF_HOSTNAME
N#define LWIP_NETIF_HOSTNAME             0
N#endif
N
N/**
N * LWIP_NETIF_API==1: Support netif api (in netifapi.c)
N */
N#ifndef LWIP_NETIF_API
N#define LWIP_NETIF_API                  0
N#endif
N
N/**
N * LWIP_NETIF_STATUS_CALLBACK==1: Support a callback function whenever an interface
N * changes its up/down status (i.e., due to DHCP IP acquistion)
N */
N#ifndef LWIP_NETIF_STATUS_CALLBACK
N#define LWIP_NETIF_STATUS_CALLBACK      0
N#endif
N
N/**
N * LWIP_NETIF_LINK_CALLBACK==1: Support a callback function from an interface
N * whenever the link changes (i.e., link down)
N */
N#ifndef LWIP_NETIF_LINK_CALLBACK
S#define LWIP_NETIF_LINK_CALLBACK        0
N#endif
N
N/**
N * LWIP_NETIF_REMOVE_CALLBACK==1: Support a callback function that is called
N * when a netif has been removed
N */
N#ifndef LWIP_NETIF_REMOVE_CALLBACK
N#define LWIP_NETIF_REMOVE_CALLBACK      0
N#endif
N
N/**
N * LWIP_NETIF_HWADDRHINT==1: Cache link-layer-address hints (e.g. table
N * indices) in struct netif. TCP and UDP can make use of this to prevent
N * scanning the ARP table for every sent packet. While this is faster for big
N * ARP tables or many concurrent connections, it might be counterproductive
N * if you have a tiny ARP table or if there never are concurrent connections.
N */
N#ifndef LWIP_NETIF_HWADDRHINT
N#define LWIP_NETIF_HWADDRHINT           0
N#endif
N
N/**
N * LWIP_NETIF_LOOPBACK==1: Support sending packets with a destination IP
N * address equal to the netif IP address, looping them back up the stack.
N */
N#ifndef LWIP_NETIF_LOOPBACK
N#define LWIP_NETIF_LOOPBACK             0
N#endif
N
N/**
N * LWIP_LOOPBACK_MAX_PBUFS: Maximum number of pbufs on queue for loopback
N * sending for each netif (0 = disabled)
N */
N#ifndef LWIP_LOOPBACK_MAX_PBUFS
N#define LWIP_LOOPBACK_MAX_PBUFS         0
N#endif
N
N/**
N * LWIP_NETIF_LOOPBACK_MULTITHREADING: Indicates whether threading is enabled in
N * the system, as netifs must change how they behave depending on this setting
N * for the LWIP_NETIF_LOOPBACK option to work.
N * Setting this is needed to avoid reentering non-reentrant functions like
N * tcp_input().
N *    LWIP_NETIF_LOOPBACK_MULTITHREADING==1: Indicates that the user is using a
N *       multithreaded environment like tcpip.c. In this case, netif->input()
N *       is called directly.
N *    LWIP_NETIF_LOOPBACK_MULTITHREADING==0: Indicates a polling (or NO_SYS) setup.
N *       The packets are put on a list and netif_poll() must be called in
N *       the main application loop.
N */
N#ifndef LWIP_NETIF_LOOPBACK_MULTITHREADING
N#define LWIP_NETIF_LOOPBACK_MULTITHREADING    (!NO_SYS)
N#endif
N
N/**
N * LWIP_NETIF_TX_SINGLE_PBUF: if this is set to 1, lwIP tries to put all data
N * to be sent into one single pbuf. This is for compatibility with DMA-enabled
N * MACs that do not support scatter-gather.
N * Beware that this might involve CPU-memcpy before transmitting that would not
N * be needed without this flag! Use this only if you need to!
N *
N * @todo: TCP and IP-frag do not work with this, yet:
N */
N#ifndef LWIP_NETIF_TX_SINGLE_PBUF
N#define LWIP_NETIF_TX_SINGLE_PBUF             0
N#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
N
N/*
N   ------------------------------------
N   ---------- LOOPIF options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_HAVE_LOOPIF==1: Support loop interface (127.0.0.1) and loopif.c
N */
N#ifndef LWIP_HAVE_LOOPIF
N#define LWIP_HAVE_LOOPIF                0
N#endif
N
N/*
N   ------------------------------------
N   ---------- SLIPIF options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_HAVE_SLIPIF==1: Support slip interface and slipif.c
N */
N#ifndef LWIP_HAVE_SLIPIF
N#define LWIP_HAVE_SLIPIF                0
N#endif
N
N/*
N   ------------------------------------
N   ---------- Thread options ----------
N   ------------------------------------
N*/
N/**
N * TCPIP_THREAD_NAME: The name assigned to the main tcpip thread.
N */
N#ifndef TCPIP_THREAD_NAME
N#define TCPIP_THREAD_NAME              "tcpip_thread"
N#endif
N
N/**
N * TCPIP_THREAD_STACKSIZE: The stack size used by the main tcpip thread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef TCPIP_THREAD_STACKSIZE
N#define TCPIP_THREAD_STACKSIZE          0
N#endif
N
N/**
N * TCPIP_THREAD_PRIO: The priority assigned to the main tcpip thread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef TCPIP_THREAD_PRIO
N#define TCPIP_THREAD_PRIO               1
N#endif
N
N/**
N * TCPIP_MBOX_SIZE: The mailbox size for the tcpip thread messages
N * The queue size value itself is platform-dependent, but is passed to
N * sys_mbox_new() when tcpip_init is called.
N */
N#ifndef TCPIP_MBOX_SIZE
N#define TCPIP_MBOX_SIZE                 0
N#endif
N
N/**
N * SLIPIF_THREAD_NAME: The name assigned to the slipif_loop thread.
N */
N#ifndef SLIPIF_THREAD_NAME
N#define SLIPIF_THREAD_NAME             "slipif_loop"
N#endif
N
N/**
N * SLIP_THREAD_STACKSIZE: The stack size used by the slipif_loop thread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef SLIPIF_THREAD_STACKSIZE
N#define SLIPIF_THREAD_STACKSIZE         0
N#endif
N
N/**
N * SLIPIF_THREAD_PRIO: The priority assigned to the slipif_loop thread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef SLIPIF_THREAD_PRIO
N#define SLIPIF_THREAD_PRIO              1
N#endif
N
N/**
N * PPP_THREAD_NAME: The name assigned to the pppInputThread.
N */
N#ifndef PPP_THREAD_NAME
N#define PPP_THREAD_NAME                "pppInputThread"
N#endif
N
N/**
N * PPP_THREAD_STACKSIZE: The stack size used by the pppInputThread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef PPP_THREAD_STACKSIZE
N#define PPP_THREAD_STACKSIZE            0
N#endif
N
N/**
N * PPP_THREAD_PRIO: The priority assigned to the pppInputThread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef PPP_THREAD_PRIO
N#define PPP_THREAD_PRIO                 1
N#endif
N
N/**
N * DEFAULT_THREAD_NAME: The name assigned to any other lwIP thread.
N */
N#ifndef DEFAULT_THREAD_NAME
N#define DEFAULT_THREAD_NAME            "lwIP"
N#endif
N
N/**
N * DEFAULT_THREAD_STACKSIZE: The stack size used by any other lwIP thread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef DEFAULT_THREAD_STACKSIZE
N#define DEFAULT_THREAD_STACKSIZE        0
N#endif
N
N/**
N * DEFAULT_THREAD_PRIO: The priority assigned to any other lwIP thread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef DEFAULT_THREAD_PRIO
N#define DEFAULT_THREAD_PRIO             1
N#endif
N
N/**
N * DEFAULT_RAW_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
N * NETCONN_RAW. The queue size value itself is platform-dependent, but is passed
N * to sys_mbox_new() when the recvmbox is created.
N */
N#ifndef DEFAULT_RAW_RECVMBOX_SIZE
N#define DEFAULT_RAW_RECVMBOX_SIZE       0
N#endif
N
N/**
N * DEFAULT_UDP_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
N * NETCONN_UDP. The queue size value itself is platform-dependent, but is passed
N * to sys_mbox_new() when the recvmbox is created.
N */
N#ifndef DEFAULT_UDP_RECVMBOX_SIZE
N#define DEFAULT_UDP_RECVMBOX_SIZE       0
N#endif
N
N/**
N * DEFAULT_TCP_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
N * NETCONN_TCP. The queue size value itself is platform-dependent, but is passed
N * to sys_mbox_new() when the recvmbox is created.
N */
N#ifndef DEFAULT_TCP_RECVMBOX_SIZE
N#define DEFAULT_TCP_RECVMBOX_SIZE       0
N#endif
N
N/**
N * DEFAULT_ACCEPTMBOX_SIZE: The mailbox size for the incoming connections.
N * The queue size value itself is platform-dependent, but is passed to
N * sys_mbox_new() when the acceptmbox is created.
N */
N#ifndef DEFAULT_ACCEPTMBOX_SIZE
N#define DEFAULT_ACCEPTMBOX_SIZE         0
N#endif
N
N/*
N   ----------------------------------------------
N   ---------- Sequential layer options ----------
N   ----------------------------------------------
N*/
N/**
N * LWIP_TCPIP_CORE_LOCKING: (EXPERIMENTAL!)
N * Don't use it if you're not an active lwIP project member
N */
N#ifndef LWIP_TCPIP_CORE_LOCKING
N#define LWIP_TCPIP_CORE_LOCKING         0
N#endif
N
N/**
N * LWIP_TCPIP_CORE_LOCKING_INPUT: (EXPERIMENTAL!)
N * Don't use it if you're not an active lwIP project member
N */
N#ifndef LWIP_TCPIP_CORE_LOCKING_INPUT
N#define LWIP_TCPIP_CORE_LOCKING_INPUT   0
N#endif
N
N/**
N * LWIP_NETCONN==1: Enable Netconn API (require to use api_lib.c)
N */
N#ifndef LWIP_NETCONN
S#define LWIP_NETCONN                    1
N#endif
N
N/** LWIP_TCPIP_TIMEOUT==1: Enable tcpip_timeout/tcpip_untimeout tod create
N * timers running in tcpip_thread from another thread.
N */
N#ifndef LWIP_TCPIP_TIMEOUT
N#define LWIP_TCPIP_TIMEOUT              1
N#endif
N
N/*
N   ------------------------------------
N   ---------- Socket options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_SOCKET==1: Enable Socket API (require to use sockets.c)
N */
N#ifndef LWIP_SOCKET
S#define LWIP_SOCKET                     1
N#endif
N
N/**
N * LWIP_COMPAT_SOCKETS==1: Enable BSD-style sockets functions names.
N * (only used if you use sockets.c)
N */
N#ifndef LWIP_COMPAT_SOCKETS
N#define LWIP_COMPAT_SOCKETS             1
N#endif
N
N/**
N * LWIP_POSIX_SOCKETS_IO_NAMES==1: Enable POSIX-style sockets functions names.
N * Disable this option if you use a POSIX operating system that uses the same
N * names (read, write & close). (only used if you use sockets.c)
N */
N#ifndef LWIP_POSIX_SOCKETS_IO_NAMES
N#define LWIP_POSIX_SOCKETS_IO_NAMES     1
N#endif
N
N/**
N * LWIP_TCP_KEEPALIVE==1: Enable TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT
N * options processing. Note that TCP_KEEPIDLE and TCP_KEEPINTVL have to be set
N * in seconds. (does not require sockets.c, and will affect tcp.c)
N */
N#ifndef LWIP_TCP_KEEPALIVE
N#define LWIP_TCP_KEEPALIVE              0
N#endif
N
N/**
N * LWIP_SO_SNDTIMEO==1: Enable send timeout for sockets/netconns and
N * SO_SNDTIMEO processing.
N */
N#ifndef LWIP_SO_SNDTIMEO
N#define LWIP_SO_SNDTIMEO                0
N#endif
N
N/**
N * LWIP_SO_RCVTIMEO==1: Enable receive timeout for sockets/netconns and
N * SO_RCVTIMEO processing.
N */
N#ifndef LWIP_SO_RCVTIMEO
N#define LWIP_SO_RCVTIMEO                0
N#endif
N
N/**
N * LWIP_SO_RCVBUF==1: Enable SO_RCVBUF processing.
N */
N#ifndef LWIP_SO_RCVBUF
N#define LWIP_SO_RCVBUF                  0
N#endif
N
N/**
N * If LWIP_SO_RCVBUF is used, this is the default value for recv_bufsize.
N */
N#ifndef RECV_BUFSIZE_DEFAULT
N#define RECV_BUFSIZE_DEFAULT            INT_MAX
N#endif
N
N/**
N * SO_REUSE==1: Enable SO_REUSEADDR option.
N */
N#ifndef SO_REUSE
N#define SO_REUSE                        0
N#endif
N
N/**
N * SO_REUSE_RXTOALL==1: Pass a copy of incoming broadcast/multicast packets
N * to all local matches if SO_REUSEADDR is turned on.
N * WARNING: Adds a memcpy for every packet if passing to more than one pcb!
N */
N#ifndef SO_REUSE_RXTOALL
N#define SO_REUSE_RXTOALL                0
N#endif
N
N/*
N   ----------------------------------------
N   ---------- Statistics options ----------
N   ----------------------------------------
N*/
N/**
N * LWIP_STATS==1: Enable statistics collection in lwip_stats.
N */
N#ifndef LWIP_STATS
S#define LWIP_STATS                      1
N#endif
N
N#if LWIP_STATS
X#if 0
S
S/**
S * LWIP_STATS_DISPLAY==1: Compile in the statistics output functions.
S */
S#ifndef LWIP_STATS_DISPLAY
S#define LWIP_STATS_DISPLAY              0
S#endif
S
S/**
S * LINK_STATS==1: Enable link stats.
S */
S#ifndef LINK_STATS
S#define LINK_STATS                      1
S#endif
S
S/**
S * ETHARP_STATS==1: Enable etharp stats.
S */
S#ifndef ETHARP_STATS
S#define ETHARP_STATS                    (LWIP_ARP)
S#endif
S
S/**
S * IP_STATS==1: Enable IP stats.
S */
S#ifndef IP_STATS
S#define IP_STATS                        1
S#endif
S
S/**
S * IPFRAG_STATS==1: Enable IP fragmentation stats. Default is
S * on if using either frag or reass.
S */
S#ifndef IPFRAG_STATS
S#define IPFRAG_STATS                    (IP_REASSEMBLY || IP_FRAG)
S#endif
S
S/**
S * ICMP_STATS==1: Enable ICMP stats.
S */
S#ifndef ICMP_STATS
S#define ICMP_STATS                      1
S#endif
S
S/**
S * IGMP_STATS==1: Enable IGMP stats.
S */
S#ifndef IGMP_STATS
S#define IGMP_STATS                      (LWIP_IGMP)
S#endif
S
S/**
S * UDP_STATS==1: Enable UDP stats. Default is on if
S * UDP enabled, otherwise off.
S */
S#ifndef UDP_STATS
S#define UDP_STATS                       (LWIP_UDP)
S#endif
S
S/**
S * TCP_STATS==1: Enable TCP stats. Default is on if TCP
S * enabled, otherwise off.
S */
S#ifndef TCP_STATS
S#define TCP_STATS                       (LWIP_TCP)
S#endif
S
S/**
S * MEM_STATS==1: Enable mem.c stats.
S */
S#ifndef MEM_STATS
S#define MEM_STATS                       ((MEM_LIBC_MALLOC == 0) && (MEM_USE_POOLS == 0))
S#endif
S
S/**
S * MEMP_STATS==1: Enable memp.c pool stats.
S */
S#ifndef MEMP_STATS
S#define MEMP_STATS                      (MEMP_MEM_MALLOC == 0)
S#endif
S
S/**
S * SYS_STATS==1: Enable system stats (sem and mbox counts, etc).
S */
S#ifndef SYS_STATS
S#define SYS_STATS                       (NO_SYS == 0)
S#endif
S
N#else
N
N#define LINK_STATS                      0
N#define IP_STATS                        0
N#define IPFRAG_STATS                    0
N#define ICMP_STATS                      0
N#define IGMP_STATS                      0
N#define UDP_STATS                       0
N#define TCP_STATS                       0
N#define MEM_STATS                       0
N#define MEMP_STATS                      0
N#define SYS_STATS                       0
N#define LWIP_STATS_DISPLAY              0
N
N#endif /* LWIP_STATS */
N
N/*
N   ---------------------------------
N   ---------- PPP options ----------
N   ---------------------------------
N*/
N/**
N * PPP_SUPPORT==1: Enable PPP.
N */
N#ifndef PPP_SUPPORT
N#define PPP_SUPPORT                     0
N#endif
N
N/**
N * PPPOE_SUPPORT==1: Enable PPP Over Ethernet
N */
N#ifndef PPPOE_SUPPORT
N#define PPPOE_SUPPORT                   0
N#endif
N
N/**
N * PPPOS_SUPPORT==1: Enable PPP Over Serial
N */
N#ifndef PPPOS_SUPPORT
N#define PPPOS_SUPPORT                   PPP_SUPPORT
N#endif
N
N#if PPP_SUPPORT
X#if 0
S
S/**
S * NUM_PPP: Max PPP sessions.
S */
S#ifndef NUM_PPP
S#define NUM_PPP                         1
S#endif
S
S/**
S * PAP_SUPPORT==1: Support PAP.
S */
S#ifndef PAP_SUPPORT
S#define PAP_SUPPORT                     0
S#endif
S
S/**
S * CHAP_SUPPORT==1: Support CHAP.
S */
S#ifndef CHAP_SUPPORT
S#define CHAP_SUPPORT                    0
S#endif
S
S/**
S * MSCHAP_SUPPORT==1: Support MSCHAP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef MSCHAP_SUPPORT
S#define MSCHAP_SUPPORT                  0
S#endif
S
S/**
S * CBCP_SUPPORT==1: Support CBCP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef CBCP_SUPPORT
S#define CBCP_SUPPORT                    0
S#endif
S
S/**
S * CCP_SUPPORT==1: Support CCP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef CCP_SUPPORT
S#define CCP_SUPPORT                     0
S#endif
S
S/**
S * VJ_SUPPORT==1: Support VJ header compression.
S */
S#ifndef VJ_SUPPORT
S#define VJ_SUPPORT                      0
S#endif
S
S/**
S * MD5_SUPPORT==1: Support MD5 (see also CHAP).
S */
S#ifndef MD5_SUPPORT
S#define MD5_SUPPORT                     0
S#endif
S
S/*
S * Timeouts
S */
S#ifndef FSM_DEFTIMEOUT
S#define FSM_DEFTIMEOUT                  6       /* Timeout time in seconds */
S#endif
S
S#ifndef FSM_DEFMAXTERMREQS
S#define FSM_DEFMAXTERMREQS              2       /* Maximum Terminate-Request transmissions */
S#endif
S
S#ifndef FSM_DEFMAXCONFREQS
S#define FSM_DEFMAXCONFREQS              10      /* Maximum Configure-Request transmissions */
S#endif
S
S#ifndef FSM_DEFMAXNAKLOOPS
S#define FSM_DEFMAXNAKLOOPS              5       /* Maximum number of nak loops */
S#endif
S
S#ifndef UPAP_DEFTIMEOUT
S#define UPAP_DEFTIMEOUT                 6       /* Timeout (seconds) for retransmitting req */
S#endif
S
S#ifndef UPAP_DEFREQTIME
S#define UPAP_DEFREQTIME                 30      /* Time to wait for auth-req from peer */
S#endif
S
S#ifndef CHAP_DEFTIMEOUT
S#define CHAP_DEFTIMEOUT                 6       /* Timeout time in seconds */
S#endif
S
S#ifndef CHAP_DEFTRANSMITS
S#define CHAP_DEFTRANSMITS               10      /* max # times to send challenge */
S#endif
S
S/* Interval in seconds between keepalive echo requests, 0 to disable. */
S#ifndef LCP_ECHOINTERVAL
S#define LCP_ECHOINTERVAL                0
S#endif
S
S/* Number of unanswered echo requests before failure. */
S#ifndef LCP_MAXECHOFAILS
S#define LCP_MAXECHOFAILS                3
S#endif
S
S/* Max Xmit idle time (in jiffies) before resend flag char. */
S#ifndef PPP_MAXIDLEFLAG
S#define PPP_MAXIDLEFLAG                 100
S#endif
S
S/*
S * Packet sizes
S *
S * Note - lcp shouldn't be allowed to negotiate stuff outside these
S *    limits.  See lcp.h in the pppd directory.
S * (XXX - these constants should simply be shared by lcp.c instead
S *    of living in lcp.h)
S */
S#define PPP_MTU                         1500     /* Default MTU (size of Info field) */
S#ifndef PPP_MAXMTU
S/* #define PPP_MAXMTU  65535 - (PPP_HDRLEN + PPP_FCSLEN) */
S#define PPP_MAXMTU                      1500 /* Largest MTU we allow */
S#endif
S#define PPP_MINMTU                      64
S#define PPP_MRU                         1500     /* default MRU = max length of info field */
S#define PPP_MAXMRU                      1500     /* Largest MRU we allow */
S#ifndef PPP_DEFMRU
S#define PPP_DEFMRU                      296             /* Try for this */
S#endif
S#define PPP_MINMRU                      128             /* No MRUs below this */
S
S#ifndef MAXNAMELEN
S#define MAXNAMELEN                      256     /* max length of hostname or name for auth */
S#endif
S#ifndef MAXSECRETLEN
S#define MAXSECRETLEN                    256     /* max length of password or secret */
S#endif
S
N#endif /* PPP_SUPPORT */
N
N/*
N   --------------------------------------
N   ---------- Checksum options ----------
N   --------------------------------------
N*/
N/**
N * CHECKSUM_GEN_IP==1: Generate checksums in software for outgoing IP packets.
N */
N#ifndef CHECKSUM_GEN_IP
S#define CHECKSUM_GEN_IP                 1
N#endif
N 
N/**
N * CHECKSUM_GEN_UDP==1: Generate checksums in software for outgoing UDP packets.
N */
N#ifndef CHECKSUM_GEN_UDP
S#define CHECKSUM_GEN_UDP                1
N#endif
N 
N/**
N * CHECKSUM_GEN_TCP==1: Generate checksums in software for outgoing TCP packets.
N */
N#ifndef CHECKSUM_GEN_TCP
S#define CHECKSUM_GEN_TCP                1
N#endif
N
N/**
N * CHECKSUM_GEN_ICMP==1: Generate checksums in software for outgoing ICMP packets.
N */
N#ifndef CHECKSUM_GEN_ICMP
S#define CHECKSUM_GEN_ICMP               1
N#endif
N 
N/**
N * CHECKSUM_CHECK_IP==1: Check checksums in software for incoming IP packets.
N */
N#ifndef CHECKSUM_CHECK_IP
S#define CHECKSUM_CHECK_IP               1
N#endif
N 
N/**
N * CHECKSUM_CHECK_UDP==1: Check checksums in software for incoming UDP packets.
N */
N#ifndef CHECKSUM_CHECK_UDP
S#define CHECKSUM_CHECK_UDP              1
N#endif
N
N/**
N * CHECKSUM_CHECK_TCP==1: Check checksums in software for incoming TCP packets.
N */
N#ifndef CHECKSUM_CHECK_TCP
S#define CHECKSUM_CHECK_TCP              1
N#endif
N
N/**
N * LWIP_CHECKSUM_ON_COPY==1: Calculate checksum when copying data from
N * application buffers to pbufs.
N */
N#ifndef LWIP_CHECKSUM_ON_COPY
N#define LWIP_CHECKSUM_ON_COPY           0
N#endif
N
N/*
N   ---------------------------------------
N   ---------- Hook options ---------------
N   ---------------------------------------
N*/
N
N/* Hooks are undefined by default, define them to a function if you need them. */
N
N/**
N * LWIP_HOOK_IP4_INPUT(pbuf, input_netif):
N * - called from ip_input() (IPv4)
N * - pbuf: received struct pbuf passed to ip_input()
N * - input_netif: struct netif on which the packet has been received
N * Return values:
N * - 0: Hook has not consumed the packet, packet is processed as normal
N * - != 0: Hook has consumed the packet.
N * If the hook consumed the packet, 'pbuf' is in the responsibility of the hook
N * (i.e. free it when done).
N */
N
N/**
N * LWIP_HOOK_IP4_ROUTE(dest):
N * - called from ip_route() (IPv4)
N * - dest: destination IPv4 address
N * Returns the destination netif or NULL if no destination netif is found. In
N * that case, ip_route() continues as normal.
N */
N
N/*
N   ---------------------------------------
N   ---------- Debugging options ----------
N   ---------------------------------------
N*/
N/**
N * LWIP_DBG_MIN_LEVEL: After masking, the value of the debug is
N * compared against this value. If it is smaller, then debugging
N * messages are written.
N */
N#ifndef LWIP_DBG_MIN_LEVEL
N#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_ALL
N#endif
N
N/**
N * LWIP_DBG_TYPES_ON: A mask that can be used to globally enable/disable
N * debug messages of certain types.
N */
N#ifndef LWIP_DBG_TYPES_ON
N#define LWIP_DBG_TYPES_ON               LWIP_DBG_ON
N#endif
N
N/**
N * ETHARP_DEBUG: Enable debugging in etharp.c.
N */
N#ifndef ETHARP_DEBUG
N#define ETHARP_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * NETIF_DEBUG: Enable debugging in netif.c.
N */
N#ifndef NETIF_DEBUG
N#define NETIF_DEBUG                     LWIP_DBG_OFF
N#endif
N
N/**
N * PBUF_DEBUG: Enable debugging in pbuf.c.
N */
N#ifndef PBUF_DEBUG
N#define PBUF_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * API_LIB_DEBUG: Enable debugging in api_lib.c.
N */
N#ifndef API_LIB_DEBUG
N#define API_LIB_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * API_MSG_DEBUG: Enable debugging in api_msg.c.
N */
N#ifndef API_MSG_DEBUG
N#define API_MSG_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * SOCKETS_DEBUG: Enable debugging in sockets.c.
N */
N#ifndef SOCKETS_DEBUG
N#define SOCKETS_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * ICMP_DEBUG: Enable debugging in icmp.c.
N */
N#ifndef ICMP_DEBUG
N#define ICMP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * IGMP_DEBUG: Enable debugging in igmp.c.
N */
N#ifndef IGMP_DEBUG
N#define IGMP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * INET_DEBUG: Enable debugging in inet.c.
N */
N#ifndef INET_DEBUG
N#define INET_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * IP_DEBUG: Enable debugging for IP.
N */
N#ifndef IP_DEBUG
N#define IP_DEBUG                        LWIP_DBG_OFF
N#endif
N
N/**
N * IP_REASS_DEBUG: Enable debugging in ip_frag.c for both frag & reass.
N */
N#ifndef IP_REASS_DEBUG
N#define IP_REASS_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * RAW_DEBUG: Enable debugging in raw.c.
N */
N#ifndef RAW_DEBUG
N#define RAW_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * MEM_DEBUG: Enable debugging in mem.c.
N */
N#ifndef MEM_DEBUG
N#define MEM_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * MEMP_DEBUG: Enable debugging in memp.c.
N */
N#ifndef MEMP_DEBUG
N#define MEMP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * SYS_DEBUG: Enable debugging in sys.c.
N */
N#ifndef SYS_DEBUG
N#define SYS_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * TIMERS_DEBUG: Enable debugging in timers.c.
N */
N#ifndef TIMERS_DEBUG
N#define TIMERS_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_DEBUG: Enable debugging for TCP.
N */
N#ifndef TCP_DEBUG
N#define TCP_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_INPUT_DEBUG: Enable debugging in tcp_in.c for incoming debug.
N */
N#ifndef TCP_INPUT_DEBUG
N#define TCP_INPUT_DEBUG                 LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_FR_DEBUG: Enable debugging in tcp_in.c for fast retransmit.
N */
N#ifndef TCP_FR_DEBUG
N#define TCP_FR_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_RTO_DEBUG: Enable debugging in TCP for retransmit
N * timeout.
N */
N#ifndef TCP_RTO_DEBUG
N#define TCP_RTO_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_CWND_DEBUG: Enable debugging for TCP congestion window.
N */
N#ifndef TCP_CWND_DEBUG
N#define TCP_CWND_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_WND_DEBUG: Enable debugging in tcp_in.c for window updating.
N */
N#ifndef TCP_WND_DEBUG
N#define TCP_WND_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_OUTPUT_DEBUG: Enable debugging in tcp_out.c output functions.
N */
N#ifndef TCP_OUTPUT_DEBUG
N#define TCP_OUTPUT_DEBUG                LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_RST_DEBUG: Enable debugging for TCP with the RST message.
N */
N#ifndef TCP_RST_DEBUG
N#define TCP_RST_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_QLEN_DEBUG: Enable debugging for TCP queue lengths.
N */
N#ifndef TCP_QLEN_DEBUG
N#define TCP_QLEN_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * UDP_DEBUG: Enable debugging in UDP.
N */
N#ifndef UDP_DEBUG
N#define UDP_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * TCPIP_DEBUG: Enable debugging in tcpip.c.
N */
N#ifndef TCPIP_DEBUG
N#define TCPIP_DEBUG                     LWIP_DBG_OFF
N#endif
N
N/**
N * PPP_DEBUG: Enable debugging for PPP.
N */
N#ifndef PPP_DEBUG
N#define PPP_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * SLIP_DEBUG: Enable debugging in slipif.c.
N */
N#ifndef SLIP_DEBUG
N#define SLIP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * DHCP_DEBUG: Enable debugging in dhcp.c.
N */
N#ifndef DHCP_DEBUG
N#define DHCP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * AUTOIP_DEBUG: Enable debugging in autoip.c.
N */
N#ifndef AUTOIP_DEBUG
N#define AUTOIP_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * SNMP_MSG_DEBUG: Enable debugging for SNMP messages.
N */
N#ifndef SNMP_MSG_DEBUG
N#define SNMP_MSG_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * SNMP_MIB_DEBUG: Enable debugging for SNMP MIBs.
N */
N#ifndef SNMP_MIB_DEBUG
N#define SNMP_MIB_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * DNS_DEBUG: Enable debugging for DNS.
N */
N#ifndef DNS_DEBUG
N#define DNS_DEBUG                       LWIP_DBG_OFF
N#endif
N
N#endif /* __LWIP_OPT_H__ */
L 70 "..\..\Lwip\lwip-1.4.1\src\core\dhcp.c" 2
N
N#if LWIP_DHCP /* don't build if not configured for use in lwipopts.h */
X#if 1  
N
N#include "lwip/stats.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/stats.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_STATS_H__
N#define __LWIP_STATS_H__
N
N#include "lwip/opt.h"
N
N#include "lwip/mem.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/mem.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_MEM_H__
N#define __LWIP_MEM_H__
N
N#include "lwip/opt.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#if MEM_LIBC_MALLOC
X#if 0
S
S#include <stddef.h> /* for size_t */
S
Stypedef size_t mem_size_t;
S#define MEM_SIZE_F SZT_F
S
S/* aliases for C library malloc() */
S#define mem_init()
S/* in case C library malloc() needs extra protection,
S * allow these defines to be overridden.
S */
S#ifndef mem_free
S#define mem_free free
S#endif
S#ifndef mem_malloc
S#define mem_malloc malloc
S#endif
S#ifndef mem_calloc
S#define mem_calloc calloc
S#endif
S/* Since there is no C library allocation function to shrink memory without
S   moving it, define this to nothing. */
S#ifndef mem_trim
S#define mem_trim(mem, size) (mem)
S#endif
N#else /* MEM_LIBC_MALLOC */
N
N/* MEM_SIZE would have to be aligned, but using 64000 here instead of
N * 65535 leaves some room for alignment...
N */
N#if MEM_SIZE > 64000L
X#if (20*1024) > 64000L
Stypedef u32_t mem_size_t;
S#define MEM_SIZE_F U32_F
N#else
Ntypedef u16_t mem_size_t;
N#define MEM_SIZE_F U16_F
N#endif /* MEM_SIZE > 64000 */
N
N#if MEM_USE_POOLS
X#if 0
S/** mem_init is not used when using pools instead of a heap */
S#define mem_init()
S/** mem_trim is not used when using pools instead of a heap:
S    we can't free part of a pool element and don't want to copy the rest */
S#define mem_trim(mem, size) (mem)
N#else /* MEM_USE_POOLS */
N/* lwIP alternative malloc */
Nvoid  mem_init(void);
Nvoid *mem_trim(void *mem, mem_size_t size);
N#endif /* MEM_USE_POOLS */
Nvoid *mem_malloc(mem_size_t size);
Nvoid *mem_calloc(mem_size_t count, mem_size_t size);
Nvoid  mem_free(void *mem);
N#endif /* MEM_LIBC_MALLOC */
N
N/** Calculate memory size for an aligned buffer - returns the next highest
N * multiple of MEM_ALIGNMENT (e.g. LWIP_MEM_ALIGN_SIZE(3) and
N * LWIP_MEM_ALIGN_SIZE(4) will both yield 4 for MEM_ALIGNMENT == 4).
N */
N#ifndef LWIP_MEM_ALIGN_SIZE
N#define LWIP_MEM_ALIGN_SIZE(size) (((size) + MEM_ALIGNMENT - 1) & ~(MEM_ALIGNMENT-1))
N#endif
N
N/** Calculate safe memory size for an aligned buffer when using an unaligned
N * type as storage. This includes a safety-margin on (MEM_ALIGNMENT - 1) at the
N * start (e.g. if buffer is u8_t[] and actual data will be u32_t*)
N */
N#ifndef LWIP_MEM_ALIGN_BUFFER
N#define LWIP_MEM_ALIGN_BUFFER(size) (((size) + MEM_ALIGNMENT - 1))
N#endif
N
N/** Align a memory pointer to the alignment defined by MEM_ALIGNMENT
N * so that ADDR % MEM_ALIGNMENT == 0
N */
N#ifndef LWIP_MEM_ALIGN
N#define LWIP_MEM_ALIGN(addr) ((void *)(((mem_ptr_t)(addr) + MEM_ALIGNMENT - 1) & ~(mem_ptr_t)(MEM_ALIGNMENT-1)))
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_MEM_H__ */
L 38 "..\..\Lwip\lwip-1.4.1\src\include\lwip/stats.h" 2
N#include "lwip/memp.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/memp.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N
N#ifndef __LWIP_MEMP_H__
N#define __LWIP_MEMP_H__
N
N#include "lwip/opt.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* Create the list of all memory pools managed by memp. MEMP_MAX represents a NULL pool at the end */
Ntypedef enum {
N#define LWIP_MEMPOOL(name,num,size,desc)  MEMP_##name,
N#include "lwip/memp_std.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/memp_std.h" 1
N/*
N * SETUP: Make sure we define everything we will need.
N *
N * We have create three types of pools:
N *   1) MEMPOOL - standard pools
N *   2) MALLOC_MEMPOOL - to be used by mem_malloc in mem.c
N *   3) PBUF_MEMPOOL - a mempool of pbuf's, so include space for the pbuf struct
N *
N * If the include'r doesn't require any special treatment of each of the types
N * above, then will declare #2 & #3 to be just standard mempools.
N */
N#ifndef LWIP_MALLOC_MEMPOOL
N/* This treats "malloc pools" just like any other pool.
N   The pools are a little bigger to provide 'size' as the amount of user data. */
N#define LWIP_MALLOC_MEMPOOL(num, size) LWIP_MEMPOOL(POOL_##size, num, (size + sizeof(struct memp_malloc_helper)), "MALLOC_"#size)
N#define LWIP_MALLOC_MEMPOOL_START
N#define LWIP_MALLOC_MEMPOOL_END
N#endif /* LWIP_MALLOC_MEMPOOL */ 
N
N#ifndef LWIP_PBUF_MEMPOOL
N/* This treats "pbuf pools" just like any other pool.
N * Allocates buffers for a pbuf struct AND a payload size */
N#define LWIP_PBUF_MEMPOOL(name, num, payload, desc) LWIP_MEMPOOL(name, num, (MEMP_ALIGN_SIZE(sizeof(struct pbuf)) + MEMP_ALIGN_SIZE(payload)), desc)
N#endif /* LWIP_PBUF_MEMPOOL */
N
N
N/*
N * A list of internal pools used by LWIP.
N *
N * LWIP_MEMPOOL(pool_name, number_elements, element_size, pool_description)
N *     creates a pool name MEMP_pool_name. description is used in stats.c
N */
N#if LWIP_RAW
X#if 1
NLWIP_MEMPOOL(RAW_PCB,        MEMP_NUM_RAW_PCB,         sizeof(struct raw_pcb),        "RAW_PCB")
XMEMP_RAW_PCB,
N#endif /* LWIP_RAW */
N
N#if LWIP_UDP
X#if 1
NLWIP_MEMPOOL(UDP_PCB,        MEMP_NUM_UDP_PCB,         sizeof(struct udp_pcb),        "UDP_PCB")
XMEMP_UDP_PCB,
N#endif /* LWIP_UDP */
N
N#if LWIP_TCP
X#if 1
NLWIP_MEMPOOL(TCP_PCB,        MEMP_NUM_TCP_PCB,         sizeof(struct tcp_pcb),        "TCP_PCB")
XMEMP_TCP_PCB,
NLWIP_MEMPOOL(TCP_PCB_LISTEN, MEMP_NUM_TCP_PCB_LISTEN,  sizeof(struct tcp_pcb_listen), "TCP_PCB_LISTEN")
XMEMP_TCP_PCB_LISTEN,
NLWIP_MEMPOOL(TCP_SEG,        MEMP_NUM_TCP_SEG,         sizeof(struct tcp_seg),        "TCP_SEG")
XMEMP_TCP_SEG,
N#endif /* LWIP_TCP */
N
N#if IP_REASSEMBLY
X#if 1
NLWIP_MEMPOOL(REASSDATA,      MEMP_NUM_REASSDATA,       sizeof(struct ip_reassdata),   "REASSDATA")
XMEMP_REASSDATA,
N#endif /* IP_REASSEMBLY */
N#if IP_FRAG && !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
X#if 1 && !0 && !0
NLWIP_MEMPOOL(FRAG_PBUF,      MEMP_NUM_FRAG_PBUF,       sizeof(struct pbuf_custom_ref),"FRAG_PBUF")
XMEMP_FRAG_PBUF,
N#endif /* IP_FRAG && !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF */
N
N#if LWIP_NETCONN
X#if 0
SLWIP_MEMPOOL(NETBUF,         MEMP_NUM_NETBUF,          sizeof(struct netbuf),         "NETBUF")
SLWIP_MEMPOOL(NETCONN,        MEMP_NUM_NETCONN,         sizeof(struct netconn),        "NETCONN")
N#endif /* LWIP_NETCONN */
N
N#if NO_SYS==0
X#if 1==0
SLWIP_MEMPOOL(TCPIP_MSG_API,  MEMP_NUM_TCPIP_MSG_API,   sizeof(struct tcpip_msg),      "TCPIP_MSG_API")
S#if !LWIP_TCPIP_CORE_LOCKING_INPUT
SLWIP_MEMPOOL(TCPIP_MSG_INPKT,MEMP_NUM_TCPIP_MSG_INPKT, sizeof(struct tcpip_msg),      "TCPIP_MSG_INPKT")
S#endif /* !LWIP_TCPIP_CORE_LOCKING_INPUT */
N#endif /* NO_SYS==0 */
N
N#if LWIP_ARP && ARP_QUEUEING
X#if 1 && 0
SLWIP_MEMPOOL(ARP_QUEUE,      MEMP_NUM_ARP_QUEUE,       sizeof(struct etharp_q_entry), "ARP_QUEUE")
N#endif /* LWIP_ARP && ARP_QUEUEING */
N
N#if LWIP_IGMP
X#if 0
SLWIP_MEMPOOL(IGMP_GROUP,     MEMP_NUM_IGMP_GROUP,      sizeof(struct igmp_group),     "IGMP_GROUP")
N#endif /* LWIP_IGMP */
N
N#if (!NO_SYS || (NO_SYS && !NO_SYS_NO_TIMERS)) /* LWIP_TIMERS */
X#if (!1 || (1 && !1))  
SLWIP_MEMPOOL(SYS_TIMEOUT,    MEMP_NUM_SYS_TIMEOUT,     sizeof(struct sys_timeo),      "SYS_TIMEOUT")
N#endif /* LWIP_TIMERS */
N
N#if LWIP_SNMP
X#if 0
SLWIP_MEMPOOL(SNMP_ROOTNODE,  MEMP_NUM_SNMP_ROOTNODE,   sizeof(struct mib_list_rootnode), "SNMP_ROOTNODE")
SLWIP_MEMPOOL(SNMP_NODE,      MEMP_NUM_SNMP_NODE,       sizeof(struct mib_list_node),     "SNMP_NODE")
SLWIP_MEMPOOL(SNMP_VARBIND,   MEMP_NUM_SNMP_VARBIND,    sizeof(struct snmp_varbind),      "SNMP_VARBIND")
SLWIP_MEMPOOL(SNMP_VALUE,     MEMP_NUM_SNMP_VALUE,      SNMP_MAX_VALUE_SIZE,              "SNMP_VALUE")
N#endif /* LWIP_SNMP */
N#if LWIP_DNS && LWIP_SOCKET
X#if 1 && 0
SLWIP_MEMPOOL(NETDB,          MEMP_NUM_NETDB,           NETDB_ELEM_SIZE,               "NETDB")
N#endif /* LWIP_DNS && LWIP_SOCKET */
N#if LWIP_DNS && DNS_LOCAL_HOSTLIST && DNS_LOCAL_HOSTLIST_IS_DYNAMIC
X#if 1 && 0 && 1
SLWIP_MEMPOOL(LOCALHOSTLIST,  MEMP_NUM_LOCALHOSTLIST,   LOCALHOSTLIST_ELEM_SIZE,       "LOCALHOSTLIST")
N#endif /* LWIP_DNS && DNS_LOCAL_HOSTLIST && DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
N#if PPP_SUPPORT && PPPOE_SUPPORT
X#if 0 && 0
SLWIP_MEMPOOL(PPPOE_IF,      MEMP_NUM_PPPOE_INTERFACES, sizeof(struct pppoe_softc),    "PPPOE_IF")
N#endif /* PPP_SUPPORT && PPPOE_SUPPORT */
N
N/*
N * A list of pools of pbuf's used by LWIP.
N *
N * LWIP_PBUF_MEMPOOL(pool_name, number_elements, pbuf_payload_size, pool_description)
N *     creates a pool name MEMP_pool_name. description is used in stats.c
N *     This allocates enough space for the pbuf struct and a payload.
N *     (Example: pbuf_payload_size=0 allocates only size for the struct)
N */
NLWIP_PBUF_MEMPOOL(PBUF,      MEMP_NUM_PBUF,            0,                             "PBUF_REF/ROM")
XMEMP_PBUF,
NLWIP_PBUF_MEMPOOL(PBUF_POOL, PBUF_POOL_SIZE,           PBUF_POOL_BUFSIZE,             "PBUF_POOL")
XMEMP_PBUF_POOL,
N
N
N/*
N * Allow for user-defined pools; this must be explicitly set in lwipopts.h
N * since the default is to NOT look for lwippools.h
N */
N#if MEMP_USE_CUSTOM_POOLS
X#if 0
S#include "lwippools.h"
N#endif /* MEMP_USE_CUSTOM_POOLS */
N
N/*
N * REQUIRED CLEANUP: Clear up so we don't get "multiply defined" error later
N * (#undef is ignored for something that is not defined)
N */
N#undef LWIP_MEMPOOL
N#undef LWIP_MALLOC_MEMPOOL
N#undef LWIP_MALLOC_MEMPOOL_START
N#undef LWIP_MALLOC_MEMPOOL_END
N#undef LWIP_PBUF_MEMPOOL
L 46 "..\..\Lwip\lwip-1.4.1\src\include\lwip/memp.h" 2
N  MEMP_MAX
N} memp_t;
N
N#if MEM_USE_POOLS
X#if 0
S/* Use a helper type to get the start and end of the user "memory pools" for mem_malloc */
Stypedef enum {
S    /* Get the first (via:
S       MEMP_POOL_HELPER_START = ((u8_t) 1*MEMP_POOL_A + 0*MEMP_POOL_B + 0*MEMP_POOL_C + 0)*/
S    MEMP_POOL_HELPER_FIRST = ((u8_t)
S#define LWIP_MEMPOOL(name,num,size,desc)
S#define LWIP_MALLOC_MEMPOOL_START 1
S#define LWIP_MALLOC_MEMPOOL(num, size) * MEMP_POOL_##size + 0
S#define LWIP_MALLOC_MEMPOOL_END
S#include "lwip/memp_std.h"
S    ) ,
S    /* Get the last (via:
S       MEMP_POOL_HELPER_END = ((u8_t) 0 + MEMP_POOL_A*0 + MEMP_POOL_B*0 + MEMP_POOL_C*1) */
S    MEMP_POOL_HELPER_LAST = ((u8_t)
S#define LWIP_MEMPOOL(name,num,size,desc)
S#define LWIP_MALLOC_MEMPOOL_START
S#define LWIP_MALLOC_MEMPOOL(num, size) 0 + MEMP_POOL_##size *
S#define LWIP_MALLOC_MEMPOOL_END 1
S#include "lwip/memp_std.h"
S    )
S} memp_pool_helper_t;
S
S/* The actual start and stop values are here (cast them over)
S   We use this helper type and these defines so we can avoid using const memp_t values */
S#define MEMP_POOL_FIRST ((memp_t) MEMP_POOL_HELPER_FIRST)
S#define MEMP_POOL_LAST   ((memp_t) MEMP_POOL_HELPER_LAST)
N#endif /* MEM_USE_POOLS */
N
N#if MEMP_MEM_MALLOC || MEM_USE_POOLS
X#if 0 || 0
Sextern const u16_t memp_sizes[MEMP_MAX];
N#endif /* MEMP_MEM_MALLOC || MEM_USE_POOLS */
N
N#if MEMP_MEM_MALLOC
X#if 0
S
S#include "mem.h"
S
S#define memp_init()
S#define memp_malloc(type)     mem_malloc(memp_sizes[type])
S#define memp_free(type, mem)  mem_free(mem)
S
N#else /* MEMP_MEM_MALLOC */
N
N#if MEM_USE_POOLS
X#if 0
S/** This structure is used to save the pool one element came from. */
Sstruct memp_malloc_helper
S{
S   memp_t poolnr;
S};
N#endif /* MEM_USE_POOLS */
N
Nvoid  memp_init(void);
N
N#if MEMP_OVERFLOW_CHECK
X#if 0
Svoid *memp_malloc_fn(memp_t type, const char* file, const int line);
S#define memp_malloc(t) memp_malloc_fn((t), __FILE__, __LINE__)
N#else
Nvoid *memp_malloc(memp_t type);
N#endif
Nvoid  memp_free(memp_t type, void *mem);
N
N#endif /* MEMP_MEM_MALLOC */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_MEMP_H__ */
L 39 "..\..\Lwip\lwip-1.4.1\src\include\lwip/stats.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#if LWIP_STATS
X#if 0
S
S#ifndef LWIP_STATS_LARGE
S#define LWIP_STATS_LARGE 0
S#endif
S
S#if LWIP_STATS_LARGE
S#define STAT_COUNTER     u32_t
S#define STAT_COUNTER_F   U32_F
S#else
S#define STAT_COUNTER     u16_t
S#define STAT_COUNTER_F   U16_F
S#endif 
S
Sstruct stats_proto {
S  STAT_COUNTER xmit;             /* Transmitted packets. */
S  STAT_COUNTER recv;             /* Received packets. */
S  STAT_COUNTER fw;               /* Forwarded packets. */
S  STAT_COUNTER drop;             /* Dropped packets. */
S  STAT_COUNTER chkerr;           /* Checksum error. */
S  STAT_COUNTER lenerr;           /* Invalid length error. */
S  STAT_COUNTER memerr;           /* Out of memory error. */
S  STAT_COUNTER rterr;            /* Routing error. */
S  STAT_COUNTER proterr;          /* Protocol error. */
S  STAT_COUNTER opterr;           /* Error in options. */
S  STAT_COUNTER err;              /* Misc error. */
S  STAT_COUNTER cachehit;
S};
S
Sstruct stats_igmp {
S  STAT_COUNTER xmit;             /* Transmitted packets. */
S  STAT_COUNTER recv;             /* Received packets. */
S  STAT_COUNTER drop;             /* Dropped packets. */
S  STAT_COUNTER chkerr;           /* Checksum error. */
S  STAT_COUNTER lenerr;           /* Invalid length error. */
S  STAT_COUNTER memerr;           /* Out of memory error. */
S  STAT_COUNTER proterr;          /* Protocol error. */
S  STAT_COUNTER rx_v1;            /* Received v1 frames. */
S  STAT_COUNTER rx_group;         /* Received group-specific queries. */
S  STAT_COUNTER rx_general;       /* Received general queries. */
S  STAT_COUNTER rx_report;        /* Received reports. */
S  STAT_COUNTER tx_join;          /* Sent joins. */
S  STAT_COUNTER tx_leave;         /* Sent leaves. */
S  STAT_COUNTER tx_report;        /* Sent reports. */
S};
S
Sstruct stats_mem {
S#ifdef LWIP_DEBUG
S  const char *name;
S#endif /* LWIP_DEBUG */
S  mem_size_t avail;
S  mem_size_t used;
S  mem_size_t max;
S  STAT_COUNTER err;
S  STAT_COUNTER illegal;
S};
S
Sstruct stats_syselem {
S  STAT_COUNTER used;
S  STAT_COUNTER max;
S  STAT_COUNTER err;
S};
S
Sstruct stats_sys {
S  struct stats_syselem sem;
S  struct stats_syselem mutex;
S  struct stats_syselem mbox;
S};
S
Sstruct stats_ {
S#if LINK_STATS
S  struct stats_proto link;
S#endif
S#if ETHARP_STATS
S  struct stats_proto etharp;
S#endif
S#if IPFRAG_STATS
S  struct stats_proto ip_frag;
S#endif
S#if IP_STATS
S  struct stats_proto ip;
S#endif
S#if ICMP_STATS
S  struct stats_proto icmp;
S#endif
S#if IGMP_STATS
S  struct stats_igmp igmp;
S#endif
S#if UDP_STATS
S  struct stats_proto udp;
S#endif
S#if TCP_STATS
S  struct stats_proto tcp;
S#endif
S#if MEM_STATS
S  struct stats_mem mem;
S#endif
S#if MEMP_STATS
S  struct stats_mem memp[MEMP_MAX];
S#endif
S#if SYS_STATS
S  struct stats_sys sys;
S#endif
S};
S
Sextern struct stats_ lwip_stats;
S
Svoid stats_init(void);
S
S#define STATS_INC(x) ++lwip_stats.x
S#define STATS_DEC(x) --lwip_stats.x
S#define STATS_INC_USED(x, y) do { lwip_stats.x.used += y; \
S                                if (lwip_stats.x.max < lwip_stats.x.used) { \
S                                    lwip_stats.x.max = lwip_stats.x.used; \
S                                } \
S                             } while(0)
X#define STATS_INC_USED(x, y) do { lwip_stats.x.used += y;                                 if (lwip_stats.x.max < lwip_stats.x.used) {                                     lwip_stats.x.max = lwip_stats.x.used;                                 }                              } while(0)
N#else /* LWIP_STATS */
N#define stats_init()
N#define STATS_INC(x)
N#define STATS_DEC(x)
N#define STATS_INC_USED(x)
N#endif /* LWIP_STATS */
N
N#if TCP_STATS
X#if 0
S#define TCP_STATS_INC(x) STATS_INC(x)
S#define TCP_STATS_DISPLAY() stats_display_proto(&lwip_stats.tcp, "TCP")
N#else
N#define TCP_STATS_INC(x)
N#define TCP_STATS_DISPLAY()
N#endif
N
N#if UDP_STATS
X#if 0
S#define UDP_STATS_INC(x) STATS_INC(x)
S#define UDP_STATS_DISPLAY() stats_display_proto(&lwip_stats.udp, "UDP")
N#else
N#define UDP_STATS_INC(x)
N#define UDP_STATS_DISPLAY()
N#endif
N
N#if ICMP_STATS
X#if 0
S#define ICMP_STATS_INC(x) STATS_INC(x)
S#define ICMP_STATS_DISPLAY() stats_display_proto(&lwip_stats.icmp, "ICMP")
N#else
N#define ICMP_STATS_INC(x)
N#define ICMP_STATS_DISPLAY()
N#endif
N
N#if IGMP_STATS
X#if 0
S#define IGMP_STATS_INC(x) STATS_INC(x)
S#define IGMP_STATS_DISPLAY() stats_display_igmp(&lwip_stats.igmp)
N#else
N#define IGMP_STATS_INC(x)
N#define IGMP_STATS_DISPLAY()
N#endif
N
N#if IP_STATS
X#if 0
S#define IP_STATS_INC(x) STATS_INC(x)
S#define IP_STATS_DISPLAY() stats_display_proto(&lwip_stats.ip, "IP")
N#else
N#define IP_STATS_INC(x)
N#define IP_STATS_DISPLAY()
N#endif
N
N#if IPFRAG_STATS
X#if 0
S#define IPFRAG_STATS_INC(x) STATS_INC(x)
S#define IPFRAG_STATS_DISPLAY() stats_display_proto(&lwip_stats.ip_frag, "IP_FRAG")
N#else
N#define IPFRAG_STATS_INC(x)
N#define IPFRAG_STATS_DISPLAY()
N#endif
N
N#if ETHARP_STATS
S#define ETHARP_STATS_INC(x) STATS_INC(x)
S#define ETHARP_STATS_DISPLAY() stats_display_proto(&lwip_stats.etharp, "ETHARP")
N#else
N#define ETHARP_STATS_INC(x)
N#define ETHARP_STATS_DISPLAY()
N#endif
N
N#if LINK_STATS
X#if 0
S#define LINK_STATS_INC(x) STATS_INC(x)
S#define LINK_STATS_DISPLAY() stats_display_proto(&lwip_stats.link, "LINK")
N#else
N#define LINK_STATS_INC(x)
N#define LINK_STATS_DISPLAY()
N#endif
N
N#if MEM_STATS
X#if 0
S#define MEM_STATS_AVAIL(x, y) lwip_stats.mem.x = y
S#define MEM_STATS_INC(x) STATS_INC(mem.x)
S#define MEM_STATS_INC_USED(x, y) STATS_INC_USED(mem, y)
S#define MEM_STATS_DEC_USED(x, y) lwip_stats.mem.x -= y
S#define MEM_STATS_DISPLAY() stats_display_mem(&lwip_stats.mem, "HEAP")
N#else
N#define MEM_STATS_AVAIL(x, y)
N#define MEM_STATS_INC(x)
N#define MEM_STATS_INC_USED(x, y)
N#define MEM_STATS_DEC_USED(x, y)
N#define MEM_STATS_DISPLAY()
N#endif
N
N#if MEMP_STATS
X#if 0
S#define MEMP_STATS_AVAIL(x, i, y) lwip_stats.memp[i].x = y
S#define MEMP_STATS_INC(x, i) STATS_INC(memp[i].x)
S#define MEMP_STATS_DEC(x, i) STATS_DEC(memp[i].x)
S#define MEMP_STATS_INC_USED(x, i) STATS_INC_USED(memp[i], 1)
S#define MEMP_STATS_DISPLAY(i) stats_display_memp(&lwip_stats.memp[i], i)
N#else
N#define MEMP_STATS_AVAIL(x, i, y)
N#define MEMP_STATS_INC(x, i)
N#define MEMP_STATS_DEC(x, i)
N#define MEMP_STATS_INC_USED(x, i)
N#define MEMP_STATS_DISPLAY(i)
N#endif
N
N#if SYS_STATS
X#if 0
S#define SYS_STATS_INC(x) STATS_INC(sys.x)
S#define SYS_STATS_DEC(x) STATS_DEC(sys.x)
S#define SYS_STATS_INC_USED(x) STATS_INC_USED(sys.x, 1)
S#define SYS_STATS_DISPLAY() stats_display_sys(&lwip_stats.sys)
N#else
N#define SYS_STATS_INC(x)
N#define SYS_STATS_DEC(x)
N#define SYS_STATS_INC_USED(x)
N#define SYS_STATS_DISPLAY()
N#endif
N
N/* Display of statistics */
N#if LWIP_STATS_DISPLAY
X#if 0
Svoid stats_display(void);
Svoid stats_display_proto(struct stats_proto *proto, const char *name);
Svoid stats_display_igmp(struct stats_igmp *igmp);
Svoid stats_display_mem(struct stats_mem *mem, const char *name);
Svoid stats_display_memp(struct stats_mem *mem, int index);
Svoid stats_display_sys(struct stats_sys *sys);
N#else /* LWIP_STATS_DISPLAY */
N#define stats_display()
N#define stats_display_proto(proto, name)
N#define stats_display_igmp(igmp)
N#define stats_display_mem(mem, name)
N#define stats_display_memp(mem, index)
N#define stats_display_sys(sys)
N#endif /* LWIP_STATS_DISPLAY */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_STATS_H__ */
L 74 "..\..\Lwip\lwip-1.4.1\src\core\dhcp.c" 2
N#include "lwip/mem.h"
N#include "lwip/udp.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/udp.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_UDP_H__
N#define __LWIP_UDP_H__
N
N#include "lwip/opt.h"
N
N#if LWIP_UDP /* don't build if not configured for use in lwipopts.h */
X#if 1  
N
N#include "lwip/pbuf.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/pbuf.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N
N#ifndef __LWIP_PBUF_H__
N#define __LWIP_PBUF_H__
N
N#include "lwip/opt.h"
N#include "lwip/err.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/err.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_ERR_H__
N#define __LWIP_ERR_H__
N
N#include "lwip/opt.h"
N#include "lwip/arch.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/** Define LWIP_ERR_T in cc.h if you want to use
N *  a different type for your platform (must be signed). */
N#ifdef LWIP_ERR_T
Stypedef LWIP_ERR_T err_t;
N#else /* LWIP_ERR_T */
Ntypedef s8_t err_t;
N#endif /* LWIP_ERR_T*/
N
N/* Definitions for error constants. */
N
N#define ERR_OK          0    /* No error, everything OK. */
N#define ERR_MEM        -1    /* Out of memory error.     */
N#define ERR_BUF        -2    /* Buffer error.            */
N#define ERR_TIMEOUT    -3    /* Timeout.                 */
N#define ERR_RTE        -4    /* Routing problem.         */
N#define ERR_INPROGRESS -5    /* Operation in progress    */
N#define ERR_VAL        -6    /* Illegal value.           */
N#define ERR_WOULDBLOCK -7    /* Operation would block.   */
N#define ERR_USE        -8    /* Address in use.          */
N#define ERR_ISCONN     -9    /* Already connected.       */
N
N#define ERR_IS_FATAL(e) ((e) < ERR_ISCONN)
N
N#define ERR_ABRT       -10   /* Connection aborted.      */
N#define ERR_RST        -11   /* Connection reset.        */
N#define ERR_CLSD       -12   /* Connection closed.       */
N#define ERR_CONN       -13   /* Not connected.           */
N
N#define ERR_ARG        -14   /* Illegal argument.        */
N
N#define ERR_IF         -15   /* Low-level netif error    */
N
N
N#ifdef LWIP_DEBUG
Sextern const char *lwip_strerr(err_t err);
N#else
N#define lwip_strerr(x) ""
N#endif /* LWIP_DEBUG */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_ERR_H__ */
L 38 "..\..\Lwip\lwip-1.4.1\src\include\lwip/pbuf.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/** Currently, the pbuf_custom code is only needed for one specific configuration
N * of IP_FRAG */
N#define LWIP_SUPPORT_CUSTOM_PBUF (IP_FRAG && !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF)
N
N#define PBUF_TRANSPORT_HLEN 20
N#define PBUF_IP_HLEN        20
N
Ntypedef enum {
N  PBUF_TRANSPORT,
N  PBUF_IP,
N  PBUF_LINK,
N  PBUF_RAW
N} pbuf_layer;
N
Ntypedef enum {
N  PBUF_RAM, /* pbuf data is stored in RAM */
N  PBUF_ROM, /* pbuf data is stored in ROM */
N  PBUF_REF, /* pbuf comes from the pbuf pool */
N  PBUF_POOL /* pbuf payload refers to RAM */
N} pbuf_type;
N
N
N/** indicates this packet's data should be immediately passed to the application */
N#define PBUF_FLAG_PUSH      0x01U
N/** indicates this is a custom pbuf: pbuf_free and pbuf_header handle such a
N    a pbuf differently */
N#define PBUF_FLAG_IS_CUSTOM 0x02U
N/** indicates this pbuf is UDP multicast to be looped back */
N#define PBUF_FLAG_MCASTLOOP 0x04U
N/** indicates this pbuf was received as link-level broadcast */
N#define PBUF_FLAG_LLBCAST   0x08U
N/** indicates this pbuf was received as link-level multicast */
N#define PBUF_FLAG_LLMCAST   0x10U
N/** indicates this pbuf includes a TCP FIN flag */
N#define PBUF_FLAG_TCP_FIN   0x20U
N
Nstruct pbuf {
N  /** next pbuf in singly linked pbuf chain */
N  struct pbuf *next;
N
N  /** pointer to the actual data in the buffer */
N  void *payload;
N
N  /**
N   * total length of this buffer and all next buffers in chain
N   * belonging to the same packet.
N   *
N   * For non-queue packet chains this is the invariant:
N   * p->tot_len == p->len + (p->next? p->next->tot_len: 0)
N   */
N  u16_t tot_len;
N
N  /** length of this buffer */
N  u16_t len;
N
N  /** pbuf_type as u8_t instead of enum to save space */
N  u8_t /*pbuf_type*/ type;
N
N  /** misc flags */
N  u8_t flags;
N
N  /**
N   * the reference count always equals the number of pointers
N   * that refer to this pbuf. This can be pointers from an application,
N   * the stack itself, or pbuf->next pointers from a chain.
N   */
N  u16_t ref;
N};
N
N#if LWIP_SUPPORT_CUSTOM_PBUF
X#if (1 && !0 && !0)
N/** Prototype for a function to free a custom pbuf */
Ntypedef void (*pbuf_free_custom_fn)(struct pbuf *p);
N
N/** A custom pbuf: like a pbuf, but following a function pointer to free it. */
Nstruct pbuf_custom {
N  /** The actual pbuf */
N  struct pbuf pbuf;
N  /** This function is called when pbuf_free deallocates this pbuf(_custom) */
N  pbuf_free_custom_fn custom_free_function;
N};
N#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
N
N#if LWIP_TCP && TCP_QUEUE_OOSEQ
X#if 1 && 1
N/** Define this to 0 to prevent freeing ooseq pbufs when the PBUF_POOL is empty */
N#ifndef PBUF_POOL_FREE_OOSEQ
N#define PBUF_POOL_FREE_OOSEQ 1
N#endif /* PBUF_POOL_FREE_OOSEQ */
N#if NO_SYS && PBUF_POOL_FREE_OOSEQ
X#if 1 && 1
Nextern volatile u8_t pbuf_free_ooseq_pending;
Nvoid pbuf_free_ooseq(void);
N/** When not using sys_check_timeouts(), call PBUF_CHECK_FREE_OOSEQ()
N    at regular intervals from main level to check if ooseq pbufs need to be
N    freed! */
N#define PBUF_CHECK_FREE_OOSEQ() do { if(pbuf_free_ooseq_pending) { \
N  /* pbuf_alloc() reported PBUF_POOL to be empty -> try to free some \
N     ooseq queued pbufs now */ \
N  pbuf_free_ooseq(); }}while(0)
X#define PBUF_CHECK_FREE_OOSEQ() do { if(pbuf_free_ooseq_pending) {       pbuf_free_ooseq(); }}while(0)
N#endif /* NO_SYS && PBUF_POOL_FREE_OOSEQ*/
N#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ */
N
N/* Initializes the pbuf module. This call is empty for now, but may not be in future. */
N#define pbuf_init()
N
Nstruct pbuf *pbuf_alloc(pbuf_layer l, u16_t length, pbuf_type type);
N#if LWIP_SUPPORT_CUSTOM_PBUF
X#if (1 && !0 && !0)
Nstruct pbuf *pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type,
N                                 struct pbuf_custom *p, void *payload_mem,
N                                 u16_t payload_mem_len);
N#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
Nvoid pbuf_realloc(struct pbuf *p, u16_t size); 
Nu8_t pbuf_header(struct pbuf *p, s16_t header_size);
Nvoid pbuf_ref(struct pbuf *p);
Nu8_t pbuf_free(struct pbuf *p);
Nu8_t pbuf_clen(struct pbuf *p);  
Nvoid pbuf_cat(struct pbuf *head, struct pbuf *tail);
Nvoid pbuf_chain(struct pbuf *head, struct pbuf *tail);
Nstruct pbuf *pbuf_dechain(struct pbuf *p);
Nerr_t pbuf_copy(struct pbuf *p_to, struct pbuf *p_from);
Nu16_t pbuf_copy_partial(struct pbuf *p, void *dataptr, u16_t len, u16_t offset);
Nerr_t pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len);
Nstruct pbuf *pbuf_coalesce(struct pbuf *p, pbuf_layer layer);
N#if LWIP_CHECKSUM_ON_COPY
X#if 0
Serr_t pbuf_fill_chksum(struct pbuf *p, u16_t start_offset, const void *dataptr,
S                       u16_t len, u16_t *chksum);
N#endif /* LWIP_CHECKSUM_ON_COPY */
N
Nu8_t pbuf_get_at(struct pbuf* p, u16_t offset);
Nu16_t pbuf_memcmp(struct pbuf* p, u16_t offset, const void* s2, u16_t n);
Nu16_t pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset);
Nu16_t pbuf_strstr(struct pbuf* p, const char* substr);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_PBUF_H__ */
L 40 "..\..\Lwip\lwip-1.4.1\src\include\lwip/udp.h" 2
N#include "lwip/netif.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/netif.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_NETIF_H__
N#define __LWIP_NETIF_H__
N
N#include "lwip/opt.h"
N
N#define ENABLE_LOOPBACK (LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF)
N
N#include "lwip/err.h"
N
N#include "lwip/ip_addr.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\ipv4\lwip/ip_addr.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N *
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_IP_ADDR_H__
N#define __LWIP_IP_ADDR_H__
N
N#include "lwip/opt.h"
N#include "lwip/def.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/def.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_DEF_H__
N#define __LWIP_DEF_H__
N
N/* arch.h might define NULL already */
N#include "lwip/arch.h"
N#include "lwip/opt.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#define LWIP_MAX(x , y)  (((x) > (y)) ? (x) : (y))
N#define LWIP_MIN(x , y)  (((x) < (y)) ? (x) : (y))
N
N#ifndef NULL
S#define NULL ((void *)0)
N#endif
N
N/* Endianess-optimized shifting of two u8_t to create one u16_t */
N#if BYTE_ORDER == LITTLE_ENDIAN
X#if 1234 == 1234
N#define LWIP_MAKE_U16(a, b) ((a << 8) | b)
N#else
S#define LWIP_MAKE_U16(a, b) ((b << 8) | a)
N#endif 
N
N#ifndef LWIP_PLATFORM_BYTESWAP
N#define LWIP_PLATFORM_BYTESWAP 0
N#endif
N
N#ifndef LWIP_PREFIX_BYTEORDER_FUNCS
N/* workaround for naming collisions on some platforms */
N
N#ifdef htons
S#undef htons
N#endif /* htons */
N#ifdef htonl
S#undef htonl
N#endif /* htonl */
N#ifdef ntohs
S#undef ntohs
N#endif /* ntohs */
N#ifdef ntohl
S#undef ntohl
N#endif /* ntohl */
N
N#define htons(x) lwip_htons(x)
N#define ntohs(x) lwip_ntohs(x)
N#define htonl(x) lwip_htonl(x)
N#define ntohl(x) lwip_ntohl(x)
N#endif /* LWIP_PREFIX_BYTEORDER_FUNCS */
N
N#if BYTE_ORDER == BIG_ENDIAN
X#if 1234 == 4321
S#define lwip_htons(x) (x)
S#define lwip_ntohs(x) (x)
S#define lwip_htonl(x) (x)
S#define lwip_ntohl(x) (x)
S#define PP_HTONS(x) (x)
S#define PP_NTOHS(x) (x)
S#define PP_HTONL(x) (x)
S#define PP_NTOHL(x) (x)
N#else /* BYTE_ORDER != BIG_ENDIAN */
N#if LWIP_PLATFORM_BYTESWAP
X#if 0
S#define lwip_htons(x) LWIP_PLATFORM_HTONS(x)
S#define lwip_ntohs(x) LWIP_PLATFORM_HTONS(x)
S#define lwip_htonl(x) LWIP_PLATFORM_HTONL(x)
S#define lwip_ntohl(x) LWIP_PLATFORM_HTONL(x)
N#else /* LWIP_PLATFORM_BYTESWAP */
Nu16_t lwip_htons(u16_t x);
Nu16_t lwip_ntohs(u16_t x);
Nu32_t lwip_htonl(u32_t x);
Nu32_t lwip_ntohl(u32_t x);
N#endif /* LWIP_PLATFORM_BYTESWAP */
N
N/* These macros should be calculated by the preprocessor and are used
N   with compile-time constants only (so that there is no little-endian
N   overhead at runtime). */
N#define PP_HTONS(x) ((((x) & 0xff) << 8) | (((x) & 0xff00) >> 8))
N#define PP_NTOHS(x) PP_HTONS(x)
N#define PP_HTONL(x) ((((x) & 0xff) << 24) | \
N                     (((x) & 0xff00) << 8) | \
N                     (((x) & 0xff0000UL) >> 8) | \
N                     (((x) & 0xff000000UL) >> 24))
X#define PP_HTONL(x) ((((x) & 0xff) << 24) |                      (((x) & 0xff00) << 8) |                      (((x) & 0xff0000UL) >> 8) |                      (((x) & 0xff000000UL) >> 24))
N#define PP_NTOHL(x) PP_HTONL(x)
N
N#endif /* BYTE_ORDER == BIG_ENDIAN */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_DEF_H__ */
N
L 37 "..\..\Lwip\lwip-1.4.1\src\include\ipv4\lwip/ip_addr.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* This is the aligned version of ip_addr_t,
N   used as local variable, on the stack, etc. */
Nstruct ip_addr {
N  u32_t addr;
N};
N
N/* This is the packed version of ip_addr_t,
N   used in network headers that are itself packed */
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
Nstruct ip_addr_packed {
N  PACK_STRUCT_FIELD(u32_t addr);
X  u32_t addr;
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N/** ip_addr_t uses a struct for convenience only, so that the same defines can
N * operate both on ip_addr_t as well as on ip_addr_p_t. */
Ntypedef struct ip_addr ip_addr_t;
Ntypedef struct ip_addr_packed ip_addr_p_t;
N
N/*
N * struct ipaddr2 is used in the definition of the ARP packet format in
N * order to support compilers that don't have structure packing.
N */
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
Nstruct ip_addr2 {
N  PACK_STRUCT_FIELD(u16_t addrw[2]);
X  u16_t addrw[2];
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N/* Forward declaration to not include netif.h */
Nstruct netif;
N
Nextern const ip_addr_t ip_addr_any;
Nextern const ip_addr_t ip_addr_broadcast;
N
N/** IP_ADDR_ can be used as a fixed IP address
N *  for the wildcard and the broadcast address
N */
N#define IP_ADDR_ANY         ((ip_addr_t *)&ip_addr_any)
N#define IP_ADDR_BROADCAST   ((ip_addr_t *)&ip_addr_broadcast)
N
N/** 255.255.255.255 */
N#define IPADDR_NONE         ((u32_t)0xffffffffUL)
N/** 127.0.0.1 */
N#define IPADDR_LOOPBACK     ((u32_t)0x7f000001UL)
N/** 0.0.0.0 */
N#define IPADDR_ANY          ((u32_t)0x00000000UL)
N/** 255.255.255.255 */
N#define IPADDR_BROADCAST    ((u32_t)0xffffffffUL)
N
N/* Definitions of the bits in an Internet address integer.
N
N   On subnets, host and network parts are found according to
N   the subnet mask, not these masks.  */
N#define IP_CLASSA(a)        ((((u32_t)(a)) & 0x80000000UL) == 0)
N#define IP_CLASSA_NET       0xff000000
N#define IP_CLASSA_NSHIFT    24
N#define IP_CLASSA_HOST      (0xffffffff & ~IP_CLASSA_NET)
N#define IP_CLASSA_MAX       128
N
N#define IP_CLASSB(a)        ((((u32_t)(a)) & 0xc0000000UL) == 0x80000000UL)
N#define IP_CLASSB_NET       0xffff0000
N#define IP_CLASSB_NSHIFT    16
N#define IP_CLASSB_HOST      (0xffffffff & ~IP_CLASSB_NET)
N#define IP_CLASSB_MAX       65536
N
N#define IP_CLASSC(a)        ((((u32_t)(a)) & 0xe0000000UL) == 0xc0000000UL)
N#define IP_CLASSC_NET       0xffffff00
N#define IP_CLASSC_NSHIFT    8
N#define IP_CLASSC_HOST      (0xffffffff & ~IP_CLASSC_NET)
N
N#define IP_CLASSD(a)        (((u32_t)(a) & 0xf0000000UL) == 0xe0000000UL)
N#define IP_CLASSD_NET       0xf0000000          /* These ones aren't really */
N#define IP_CLASSD_NSHIFT    28                  /*   net and host fields, but */
N#define IP_CLASSD_HOST      0x0fffffff          /*   routing needn't know. */
N#define IP_MULTICAST(a)     IP_CLASSD(a)
N
N#define IP_EXPERIMENTAL(a)  (((u32_t)(a) & 0xf0000000UL) == 0xf0000000UL)
N#define IP_BADCLASS(a)      (((u32_t)(a) & 0xf0000000UL) == 0xf0000000UL)
N
N#define IP_LOOPBACKNET      127                 /* official! */
N
N
N#if BYTE_ORDER == BIG_ENDIAN
X#if 1234 == 4321
S/** Set an IP address given by the four byte-parts */
S#define IP4_ADDR(ipaddr, a,b,c,d) \
S        (ipaddr)->addr = ((u32_t)((a) & 0xff) << 24) | \
S                         ((u32_t)((b) & 0xff) << 16) | \
S                         ((u32_t)((c) & 0xff) << 8)  | \
S                          (u32_t)((d) & 0xff)
X#define IP4_ADDR(ipaddr, a,b,c,d)         (ipaddr)->addr = ((u32_t)((a) & 0xff) << 24) |                          ((u32_t)((b) & 0xff) << 16) |                          ((u32_t)((c) & 0xff) << 8)  |                           (u32_t)((d) & 0xff)
N#else
N/** Set an IP address given by the four byte-parts.
N    Little-endian version that prevents the use of htonl. */
N#define IP4_ADDR(ipaddr, a,b,c,d) \
N        (ipaddr)->addr = ((u32_t)((d) & 0xff) << 24) | \
N                         ((u32_t)((c) & 0xff) << 16) | \
N                         ((u32_t)((b) & 0xff) << 8)  | \
N                          (u32_t)((a) & 0xff)
X#define IP4_ADDR(ipaddr, a,b,c,d)         (ipaddr)->addr = ((u32_t)((d) & 0xff) << 24) |                          ((u32_t)((c) & 0xff) << 16) |                          ((u32_t)((b) & 0xff) << 8)  |                           (u32_t)((a) & 0xff)
N#endif
N
N/** MEMCPY-like copying of IP addresses where addresses are known to be
N * 16-bit-aligned if the port is correctly configured (so a port could define
N * this to copying 2 u16_t's) - no NULL-pointer-checking needed. */
N#ifndef IPADDR2_COPY
N#define IPADDR2_COPY(dest, src) SMEMCPY(dest, src, sizeof(ip_addr_t))
N#endif
N
N/** Copy IP address - faster than ip_addr_set: no NULL check */
N#define ip_addr_copy(dest, src) ((dest).addr = (src).addr)
N/** Safely copy one IP address to another (src may be NULL) */
N#define ip_addr_set(dest, src) ((dest)->addr = \
N                                    ((src) == NULL ? 0 : \
N                                    (src)->addr))
X#define ip_addr_set(dest, src) ((dest)->addr =                                     ((src) == NULL ? 0 :                                     (src)->addr))
N/** Set complete address to zero */
N#define ip_addr_set_zero(ipaddr)      ((ipaddr)->addr = 0)
N/** Set address to IPADDR_ANY (no need for htonl()) */
N#define ip_addr_set_any(ipaddr)       ((ipaddr)->addr = IPADDR_ANY)
N/** Set address to loopback address */
N#define ip_addr_set_loopback(ipaddr)  ((ipaddr)->addr = PP_HTONL(IPADDR_LOOPBACK))
N/** Safely copy one IP address to another and change byte order
N * from host- to network-order. */
N#define ip_addr_set_hton(dest, src) ((dest)->addr = \
N                               ((src) == NULL ? 0:\
N                               htonl((src)->addr)))
X#define ip_addr_set_hton(dest, src) ((dest)->addr =                                ((src) == NULL ? 0:                               htonl((src)->addr)))
N/** IPv4 only: set the IP address given as an u32_t */
N#define ip4_addr_set_u32(dest_ipaddr, src_u32) ((dest_ipaddr)->addr = (src_u32))
N/** IPv4 only: get the IP address as an u32_t */
N#define ip4_addr_get_u32(src_ipaddr) ((src_ipaddr)->addr)
N
N/** Get the network address by combining host address with netmask */
N#define ip_addr_get_network(target, host, netmask) ((target)->addr = ((host)->addr) & ((netmask)->addr))
N
N/**
N * Determine if two address are on the same network.
N *
N * @arg addr1 IP address 1
N * @arg addr2 IP address 2
N * @arg mask network identifier mask
N * @return !0 if the network identifiers of both address match
N */
N#define ip_addr_netcmp(addr1, addr2, mask) (((addr1)->addr & \
N                                              (mask)->addr) == \
N                                             ((addr2)->addr & \
N                                              (mask)->addr))
X#define ip_addr_netcmp(addr1, addr2, mask) (((addr1)->addr &                                               (mask)->addr) ==                                              ((addr2)->addr &                                               (mask)->addr))
N#define ip_addr_cmp(addr1, addr2) ((addr1)->addr == (addr2)->addr)
N
N#define ip_addr_isany(addr1) ((addr1) == NULL || (addr1)->addr == IPADDR_ANY)
N
N#define ip_addr_isbroadcast(ipaddr, netif) ip4_addr_isbroadcast((ipaddr)->addr, (netif))
Nu8_t ip4_addr_isbroadcast(u32_t addr, const struct netif *netif);
N
N#define ip_addr_netmask_valid(netmask) ip4_addr_netmask_valid((netmask)->addr)
Nu8_t ip4_addr_netmask_valid(u32_t netmask);
N
N#define ip_addr_ismulticast(addr1) (((addr1)->addr & PP_HTONL(0xf0000000UL)) == PP_HTONL(0xe0000000UL))
N
N#define ip_addr_islinklocal(addr1) (((addr1)->addr & PP_HTONL(0xffff0000UL)) == PP_HTONL(0xa9fe0000UL))
N
N#define ip_addr_debug_print(debug, ipaddr) \
N  LWIP_DEBUGF(debug, ("%"U16_F".%"U16_F".%"U16_F".%"U16_F,             \
N                      ipaddr != NULL ? ip4_addr1_16(ipaddr) : 0,       \
N                      ipaddr != NULL ? ip4_addr2_16(ipaddr) : 0,       \
N                      ipaddr != NULL ? ip4_addr3_16(ipaddr) : 0,       \
N                      ipaddr != NULL ? ip4_addr4_16(ipaddr) : 0))
X#define ip_addr_debug_print(debug, ipaddr)   LWIP_DEBUGF(debug, ("%"U16_F".%"U16_F".%"U16_F".%"U16_F,                                   ipaddr != NULL ? ip4_addr1_16(ipaddr) : 0,                             ipaddr != NULL ? ip4_addr2_16(ipaddr) : 0,                             ipaddr != NULL ? ip4_addr3_16(ipaddr) : 0,                             ipaddr != NULL ? ip4_addr4_16(ipaddr) : 0))
N
N/* Get one byte from the 4-byte address */
N#define ip4_addr1(ipaddr) (((u8_t*)(ipaddr))[0])
N#define ip4_addr2(ipaddr) (((u8_t*)(ipaddr))[1])
N#define ip4_addr3(ipaddr) (((u8_t*)(ipaddr))[2])
N#define ip4_addr4(ipaddr) (((u8_t*)(ipaddr))[3])
N/* These are cast to u16_t, with the intent that they are often arguments
N * to printf using the U16_F format from cc.h. */
N#define ip4_addr1_16(ipaddr) ((u16_t)ip4_addr1(ipaddr))
N#define ip4_addr2_16(ipaddr) ((u16_t)ip4_addr2(ipaddr))
N#define ip4_addr3_16(ipaddr) ((u16_t)ip4_addr3(ipaddr))
N#define ip4_addr4_16(ipaddr) ((u16_t)ip4_addr4(ipaddr))
N
N/** For backwards compatibility */
N#define ip_ntoa(ipaddr)  ipaddr_ntoa(ipaddr)
N
Nu32_t ipaddr_addr(const char *cp);
Nint ipaddr_aton(const char *cp, ip_addr_t *addr);
N/** returns ptr to static buffer; not reentrant! */
Nchar *ipaddr_ntoa(const ip_addr_t *addr);
Nchar *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_IP_ADDR_H__ */
L 42 "..\..\Lwip\lwip-1.4.1\src\include\lwip/netif.h" 2
N
N#include "lwip/def.h"
N#include "lwip/pbuf.h"
N#if LWIP_DHCP
X#if 1
Nstruct dhcp;
N#endif
N#if LWIP_AUTOIP
X#if 0
Sstruct autoip;
N#endif
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* Throughout this file, IP addresses are expected to be in
N * the same byte order as in IP_PCB. */
N
N/** must be the maximum of all used hardware address lengths
N    across all types of interfaces in use */
N#define NETIF_MAX_HWADDR_LEN 6U
N
N/** Whether the network interface is 'up'. This is
N * a software flag used to control whether this network
N * interface is enabled and processes traffic.
N * It is set by the startup code (for static IP configuration) or
N * by dhcp/autoip when an address has been assigned.
N */
N#define NETIF_FLAG_UP           0x01U
N/** If set, the netif has broadcast capability.
N * Set by the netif driver in its init function. */
N#define NETIF_FLAG_BROADCAST    0x02U
N/** If set, the netif is one end of a point-to-point connection.
N * Set by the netif driver in its init function. */
N#define NETIF_FLAG_POINTTOPOINT 0x04U
N/** If set, the interface is configured using DHCP.
N * Set by the DHCP code when starting or stopping DHCP. */
N#define NETIF_FLAG_DHCP         0x08U
N/** If set, the interface has an active link
N *  (set by the network interface driver).
N * Either set by the netif driver in its init function (if the link
N * is up at that time) or at a later point once the link comes up
N * (if link detection is supported by the hardware). */
N#define NETIF_FLAG_LINK_UP      0x10U
N/** If set, the netif is an ethernet device using ARP.
N * Set by the netif driver in its init function.
N * Used to check input packet types and use of DHCP. */
N#define NETIF_FLAG_ETHARP       0x20U
N/** If set, the netif is an ethernet device. It might not use
N * ARP or TCP/IP if it is used for PPPoE only.
N */
N#define NETIF_FLAG_ETHERNET     0x40U
N/** If set, the netif has IGMP capability.
N * Set by the netif driver in its init function. */
N#define NETIF_FLAG_IGMP         0x80U
N
N/** Function prototype for netif init functions. Set up flags and output/linkoutput
N * callback functions in this function.
N *
N * @param netif The netif to initialize
N */
Ntypedef err_t (*netif_init_fn)(struct netif *netif);
N/** Function prototype for netif->input functions. This function is saved as 'input'
N * callback function in the netif struct. Call it when a packet has been received.
N *
N * @param p The received packet, copied into a pbuf
N * @param inp The netif which received the packet
N */
Ntypedef err_t (*netif_input_fn)(struct pbuf *p, struct netif *inp);
N/** Function prototype for netif->output functions. Called by lwIP when a packet
N * shall be sent. For ethernet netif, set this to 'etharp_output' and set
N * 'linkoutput'.
N *
N * @param netif The netif which shall send a packet
N * @param p The packet to send (p->payload points to IP header)
N * @param ipaddr The IP address to which the packet shall be sent
N */
Ntypedef err_t (*netif_output_fn)(struct netif *netif, struct pbuf *p,
N       ip_addr_t *ipaddr);
N/** Function prototype for netif->linkoutput functions. Only used for ethernet
N * netifs. This function is called by ARP when a packet shall be sent.
N *
N * @param netif The netif which shall send a packet
N * @param p The packet to send (raw ethernet packet)
N */
Ntypedef err_t (*netif_linkoutput_fn)(struct netif *netif, struct pbuf *p);
N/** Function prototype for netif status- or link-callback functions. */
Ntypedef void (*netif_status_callback_fn)(struct netif *netif);
N/** Function prototype for netif igmp_mac_filter functions */
Ntypedef err_t (*netif_igmp_mac_filter_fn)(struct netif *netif,
N       ip_addr_t *group, u8_t action);
N
N/** Generic data structure used for all lwIP network interfaces.
N *  The following fields should be filled in by the initialization
N *  function for the device driver: hwaddr_len, hwaddr[], mtu, flags */
Nstruct netif {
N  /** pointer to next in linked list */
N  struct netif *next;
N
N  /** IP address configuration in network byte order */
N  ip_addr_t ip_addr;
N  ip_addr_t netmask;
N  ip_addr_t gw;
N
N  /** This function is called by the network device driver
N   *  to pass a packet up the TCP/IP stack. */
N  netif_input_fn input;
N  /** This function is called by the IP module when it wants
N   *  to send a packet on the interface. This function typically
N   *  first resolves the hardware address, then sends the packet. */
N  netif_output_fn output;
N  /** This function is called by the ARP module when it wants
N   *  to send a packet on the interface. This function outputs
N   *  the pbuf as-is on the link medium. */
N  netif_linkoutput_fn linkoutput;
N#if LWIP_NETIF_STATUS_CALLBACK
X#if 0
S  /** This function is called when the netif state is set to up or down
S   */
S  netif_status_callback_fn status_callback;
N#endif /* LWIP_NETIF_STATUS_CALLBACK */
N#if LWIP_NETIF_LINK_CALLBACK
X#if 1
N  /** This function is called when the netif link is set to up or down
N   */
N  netif_status_callback_fn link_callback;
N#endif /* LWIP_NETIF_LINK_CALLBACK */
N#if LWIP_NETIF_REMOVE_CALLBACK
X#if 0
S  /** This function is called when the netif has been removed */
S  netif_status_callback_fn remove_callback;
N#endif /* LWIP_NETIF_REMOVE_CALLBACK */
N  /** This field can be set by the device driver and could point
N   *  to state information for the device. */
N  void *state;
N#if LWIP_DHCP
X#if 1
N  /** the DHCP client state information for this netif */
N  struct dhcp *dhcp;
N#endif /* LWIP_DHCP */
N#if LWIP_AUTOIP
X#if 0
S  /** the AutoIP client state information for this netif */
S  struct autoip *autoip;
N#endif
N#if LWIP_NETIF_HOSTNAME
X#if 0
S  /* the hostname for this netif, NULL is a valid value */
S  char*  hostname;
N#endif /* LWIP_NETIF_HOSTNAME */
N  /** maximum transfer unit (in bytes) */
N  u16_t mtu;
N  /** number of bytes used in hwaddr */
N  u8_t hwaddr_len;
N  /** link level hardware address of this interface */
N  u8_t hwaddr[NETIF_MAX_HWADDR_LEN];
X  u8_t hwaddr[6U];
N  /** flags (see NETIF_FLAG_ above) */
N  u8_t flags;
N  /** descriptive abbreviation */
N  char name[2];
N  /** number of this interface */
N  u8_t num;
N#if LWIP_SNMP
X#if 0
S  /** link type (from "snmp_ifType" enum from snmp.h) */
S  u8_t link_type;
S  /** (estimate) link speed */
S  u32_t link_speed;
S  /** timestamp at last change made (up/down) */
S  u32_t ts;
S  /** counters */
S  u32_t ifinoctets;
S  u32_t ifinucastpkts;
S  u32_t ifinnucastpkts;
S  u32_t ifindiscards;
S  u32_t ifoutoctets;
S  u32_t ifoutucastpkts;
S  u32_t ifoutnucastpkts;
S  u32_t ifoutdiscards;
N#endif /* LWIP_SNMP */
N#if LWIP_IGMP
X#if 0
S  /** This function could be called to add or delete a entry in the multicast
S      filter table of the ethernet MAC.*/
S  netif_igmp_mac_filter_fn igmp_mac_filter;
N#endif /* LWIP_IGMP */
N#if LWIP_NETIF_HWADDRHINT
X#if 0
S  u8_t *addr_hint;
N#endif /* LWIP_NETIF_HWADDRHINT */
N#if ENABLE_LOOPBACK
X#if (0 || 0)
S  /* List of packets to be queued for ourselves. */
S  struct pbuf *loop_first;
S  struct pbuf *loop_last;
S#if LWIP_LOOPBACK_MAX_PBUFS
S  u16_t loop_cnt_current;
S#endif /* LWIP_LOOPBACK_MAX_PBUFS */
N#endif /* ENABLE_LOOPBACK */
N};
N
N#if LWIP_SNMP
X#if 0
S#define NETIF_INIT_SNMP(netif, type, speed) \
S  /* use "snmp_ifType" enum from snmp.h for "type", snmp_ifType_ethernet_csmacd by example */ \
S  (netif)->link_type = (type);    \
S  /* your link speed here (units: bits per second) */  \
S  (netif)->link_speed = (speed);  \
S  (netif)->ts = 0;              \
S  (netif)->ifinoctets = 0;      \
S  (netif)->ifinucastpkts = 0;   \
S  (netif)->ifinnucastpkts = 0;  \
S  (netif)->ifindiscards = 0;    \
S  (netif)->ifoutoctets = 0;     \
S  (netif)->ifoutucastpkts = 0;  \
S  (netif)->ifoutnucastpkts = 0; \
S  (netif)->ifoutdiscards = 0
X#define NETIF_INIT_SNMP(netif, type, speed)       (netif)->link_type = (type);           (netif)->link_speed = (speed);    (netif)->ts = 0;                (netif)->ifinoctets = 0;        (netif)->ifinucastpkts = 0;     (netif)->ifinnucastpkts = 0;    (netif)->ifindiscards = 0;      (netif)->ifoutoctets = 0;       (netif)->ifoutucastpkts = 0;    (netif)->ifoutnucastpkts = 0;   (netif)->ifoutdiscards = 0
N#else /* LWIP_SNMP */
N#define NETIF_INIT_SNMP(netif, type, speed)
N#endif /* LWIP_SNMP */
N
N
N/** The list of network interfaces. */
Nextern struct netif *netif_list;
N/** The default network interface. */
Nextern struct netif *netif_default;
N
Nvoid netif_init(void);
N
Nstruct netif *netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
N      ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input);
N
Nvoid
Nnetif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
N      ip_addr_t *gw);
Nvoid netif_remove(struct netif * netif);
N
N/* Returns a network interface given its name. The name is of the form
N   "et0", where the first two letters are the "name" field in the
N   netif structure, and the digit is in the num field in the same
N   structure. */
Nstruct netif *netif_find(char *name);
N
Nvoid netif_set_default(struct netif *netif);
N
Nvoid netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr);
Nvoid netif_set_netmask(struct netif *netif, ip_addr_t *netmask);
Nvoid netif_set_gw(struct netif *netif, ip_addr_t *gw);
N
Nvoid netif_set_up(struct netif *netif);
Nvoid netif_set_down(struct netif *netif);
N/** Ask if an interface is up */
N#define netif_is_up(netif) (((netif)->flags & NETIF_FLAG_UP) ? (u8_t)1 : (u8_t)0)
N
N#if LWIP_NETIF_STATUS_CALLBACK
X#if 0
Svoid netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback);
N#endif /* LWIP_NETIF_STATUS_CALLBACK */
N#if LWIP_NETIF_REMOVE_CALLBACK
X#if 0
Svoid netif_set_remove_callback(struct netif *netif, netif_status_callback_fn remove_callback);
N#endif /* LWIP_NETIF_REMOVE_CALLBACK */
N
Nvoid netif_set_link_up(struct netif *netif);
Nvoid netif_set_link_down(struct netif *netif);
N/** Ask if a link is up */ 
N#define netif_is_link_up(netif) (((netif)->flags & NETIF_FLAG_LINK_UP) ? (u8_t)1 : (u8_t)0)
N
N#if LWIP_NETIF_LINK_CALLBACK
X#if 1
Nvoid netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback);
N#endif /* LWIP_NETIF_LINK_CALLBACK */
N
N#if LWIP_NETIF_HOSTNAME
X#if 0
S#define netif_set_hostname(netif, name) do { if((netif) != NULL) { (netif)->hostname = name; }}while(0)
S#define netif_get_hostname(netif) (((netif) != NULL) ? ((netif)->hostname) : NULL)
N#endif /* LWIP_NETIF_HOSTNAME */
N
N#if LWIP_IGMP
X#if 0
S#define netif_set_igmp_mac_filter(netif, function) do { if((netif) != NULL) { (netif)->igmp_mac_filter = function; }}while(0)
S#define netif_get_igmp_mac_filter(netif) (((netif) != NULL) ? ((netif)->igmp_mac_filter) : NULL)
N#endif /* LWIP_IGMP */
N
N#if ENABLE_LOOPBACK
X#if (0 || 0)
Serr_t netif_loop_output(struct netif *netif, struct pbuf *p, ip_addr_t *dest_ip);
Svoid netif_poll(struct netif *netif);
S#if !LWIP_NETIF_LOOPBACK_MULTITHREADING
Svoid netif_poll_all(void);
S#endif /* !LWIP_NETIF_LOOPBACK_MULTITHREADING */
N#endif /* ENABLE_LOOPBACK */
N
N#if LWIP_NETIF_HWADDRHINT
X#if 0
S#define NETIF_SET_HWADDRHINT(netif, hint) ((netif)->addr_hint = (hint))
N#else /* LWIP_NETIF_HWADDRHINT */
N#define NETIF_SET_HWADDRHINT(netif, hint)
N#endif /* LWIP_NETIF_HWADDRHINT */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_NETIF_H__ */
L 41 "..\..\Lwip\lwip-1.4.1\src\include\lwip/udp.h" 2
N#include "lwip/ip_addr.h"
N#include "lwip/ip.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\ipv4\lwip/ip.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_IP_H__
N#define __LWIP_IP_H__
N
N#include "lwip/opt.h"
N
N#include "lwip/def.h"
N#include "lwip/pbuf.h"
N#include "lwip/ip_addr.h"
N#include "lwip/err.h"
N#include "lwip/netif.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/** Currently, the function ip_output_if_opt() is only used with IGMP */
N#define IP_OPTIONS_SEND   LWIP_IGMP
N
N#define IP_HLEN 20
N
N#define IP_PROTO_ICMP    1
N#define IP_PROTO_IGMP    2
N#define IP_PROTO_UDP     17
N#define IP_PROTO_UDPLITE 136
N#define IP_PROTO_TCP     6
N
N/* This is passed as the destination address to ip_output_if (not
N   to ip_output), meaning that an IP header already is constructed
N   in the pbuf. This is used when TCP retransmits. */
N#ifdef IP_HDRINCL
S#undef IP_HDRINCL
N#endif /* IP_HDRINCL */
N#define IP_HDRINCL  NULL
N
N#if LWIP_NETIF_HWADDRHINT
X#if 0
S#define IP_PCB_ADDRHINT ;u8_t addr_hint
N#else
N#define IP_PCB_ADDRHINT
N#endif /* LWIP_NETIF_HWADDRHINT */
N
N/* This is the common part of all PCB types. It needs to be at the
N   beginning of a PCB type definition. It is located here so that
N   changes to this common part are made in one location instead of
N   having to change all PCB structs. */
N#define IP_PCB \
N  /* ip addresses in network byte order */ \
N  ip_addr_t local_ip; \
N  ip_addr_t remote_ip; \
N   /* Socket options */  \
N  u8_t so_options;      \
N   /* Type Of Service */ \
N  u8_t tos;              \
N  /* Time To Live */     \
N  u8_t ttl               \
N  /* link layer address resolution hint */ \
N  IP_PCB_ADDRHINT
X#define IP_PCB       ip_addr_t local_ip;   ip_addr_t remote_ip;         u8_t so_options;             u8_t tos;                        u8_t ttl                     IP_PCB_ADDRHINT
N
Nstruct ip_pcb {
N/* Common members of all PCB types */
N  IP_PCB;
X  ip_addr_t local_ip; ip_addr_t remote_ip; u8_t so_options; u8_t tos; u8_t ttl ;
N};
N
N/*
N * Option flags per-socket. These are the same like SO_XXX.
N */
N/*#define SOF_DEBUG       0x01U     Unimplemented: turn on debugging info recording */
N#define SOF_ACCEPTCONN    0x02U  /* socket has had listen() */
N#define SOF_REUSEADDR     0x04U  /* allow local address reuse */
N#define SOF_KEEPALIVE     0x08U  /* keep connections alive */
N/*#define SOF_DONTROUTE   0x10U     Unimplemented: just use interface addresses */
N#define SOF_BROADCAST     0x20U  /* permit to send and to receive broadcast messages (see IP_SOF_BROADCAST option) */
N/*#define SOF_USELOOPBACK 0x40U     Unimplemented: bypass hardware when possible */
N#define SOF_LINGER        0x80U  /* linger on close if data present */
N/*#define SOF_OOBINLINE   0x0100U   Unimplemented: leave received OOB data in line */
N/*#define SOF_REUSEPORT   0x0200U   Unimplemented: allow local address & port reuse */
N
N/* These flags are inherited (e.g. from a listen-pcb to a connection-pcb): */
N#define SOF_INHERITED   (SOF_REUSEADDR|SOF_KEEPALIVE|SOF_LINGER/*|SOF_DEBUG|SOF_DONTROUTE|SOF_OOBINLINE*/)
N
N
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
Nstruct ip_hdr {
N  /* version / header length */
N  PACK_STRUCT_FIELD(u8_t _v_hl);
X  u8_t _v_hl;
N  /* type of service */
N  PACK_STRUCT_FIELD(u8_t _tos);
X  u8_t _tos;
N  /* total length */
N  PACK_STRUCT_FIELD(u16_t _len);
X  u16_t _len;
N  /* identification */
N  PACK_STRUCT_FIELD(u16_t _id);
X  u16_t _id;
N  /* fragment offset field */
N  PACK_STRUCT_FIELD(u16_t _offset);
X  u16_t _offset;
N#define IP_RF 0x8000U        /* reserved fragment flag */
N#define IP_DF 0x4000U        /* dont fragment flag */
N#define IP_MF 0x2000U        /* more fragments flag */
N#define IP_OFFMASK 0x1fffU   /* mask for fragmenting bits */
N  /* time to live */
N  PACK_STRUCT_FIELD(u8_t _ttl);
X  u8_t _ttl;
N  /* protocol*/
N  PACK_STRUCT_FIELD(u8_t _proto);
X  u8_t _proto;
N  /* checksum */
N  PACK_STRUCT_FIELD(u16_t _chksum);
X  u16_t _chksum;
N  /* source and destination IP addresses */
N  PACK_STRUCT_FIELD(ip_addr_p_t src);
X  ip_addr_p_t src;
N  PACK_STRUCT_FIELD(ip_addr_p_t dest); 
X  ip_addr_p_t dest; 
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N#define IPH_V(hdr)  ((hdr)->_v_hl >> 4)
N#define IPH_HL(hdr) ((hdr)->_v_hl & 0x0f)
N#define IPH_TOS(hdr) ((hdr)->_tos)
N#define IPH_LEN(hdr) ((hdr)->_len)
N#define IPH_ID(hdr) ((hdr)->_id)
N#define IPH_OFFSET(hdr) ((hdr)->_offset)
N#define IPH_TTL(hdr) ((hdr)->_ttl)
N#define IPH_PROTO(hdr) ((hdr)->_proto)
N#define IPH_CHKSUM(hdr) ((hdr)->_chksum)
N
N#define IPH_VHL_SET(hdr, v, hl) (hdr)->_v_hl = (((v) << 4) | (hl))
N#define IPH_TOS_SET(hdr, tos) (hdr)->_tos = (tos)
N#define IPH_LEN_SET(hdr, len) (hdr)->_len = (len)
N#define IPH_ID_SET(hdr, id) (hdr)->_id = (id)
N#define IPH_OFFSET_SET(hdr, off) (hdr)->_offset = (off)
N#define IPH_TTL_SET(hdr, ttl) (hdr)->_ttl = (u8_t)(ttl)
N#define IPH_PROTO_SET(hdr, proto) (hdr)->_proto = (u8_t)(proto)
N#define IPH_CHKSUM_SET(hdr, chksum) (hdr)->_chksum = (chksum)
N
N/** The interface that provided the packet for the current callback invocation. */
Nextern struct netif *current_netif;
N/** Header of the input packet currently being processed. */
Nextern const struct ip_hdr *current_header;
N/** Source IP address of current_header */
Nextern ip_addr_t current_iphdr_src;
N/** Destination IP address of current_header */
Nextern ip_addr_t current_iphdr_dest;
N
N#define ip_init() /* Compatibility define, not init needed. */
Nstruct netif *ip_route(ip_addr_t *dest);
Nerr_t ip_input(struct pbuf *p, struct netif *inp);
Nerr_t ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
N       u8_t ttl, u8_t tos, u8_t proto);
Nerr_t ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
N       u8_t ttl, u8_t tos, u8_t proto,
N       struct netif *netif);
N#if LWIP_NETIF_HWADDRHINT
X#if 0
Serr_t ip_output_hinted(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
S       u8_t ttl, u8_t tos, u8_t proto, u8_t *addr_hint);
N#endif /* LWIP_NETIF_HWADDRHINT */
N#if IP_OPTIONS_SEND
X#if 0
Serr_t ip_output_if_opt(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
S       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
S       u16_t optlen);
N#endif /* IP_OPTIONS_SEND */
N/** Get the interface that received the current packet.
N * This function must only be called from a receive callback (udp_recv,
N * raw_recv, tcp_accept). It will return NULL otherwise. */
N#define ip_current_netif()  (current_netif)
N/** Get the IP header of the current packet.
N * This function must only be called from a receive callback (udp_recv,
N * raw_recv, tcp_accept). It will return NULL otherwise. */
N#define ip_current_header() (current_header)
N/** Source IP address of current_header */
N#define ip_current_src_addr()  (&current_iphdr_src)
N/** Destination IP address of current_header */
N#define ip_current_dest_addr() (&current_iphdr_dest)
N
N/** Gets an IP pcb option (SOF_* flags) */
N#define ip_get_option(pcb, opt)   ((pcb)->so_options & (opt))
N/** Sets an IP pcb option (SOF_* flags) */
N#define ip_set_option(pcb, opt)   ((pcb)->so_options |= (opt))
N/** Resets an IP pcb option (SOF_* flags) */
N#define ip_reset_option(pcb, opt) ((pcb)->so_options &= ~(opt))
N
N#if IP_DEBUG
X#if 0x00U
Svoid ip_debug_print(struct pbuf *p);
N#else
N#define ip_debug_print(p)
N#endif /* IP_DEBUG */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_IP_H__ */
N
N
L 43 "..\..\Lwip\lwip-1.4.1\src\include\lwip/udp.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#define UDP_HLEN 8
N
N/* Fields are (of course) in network byte order. */
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
Nstruct udp_hdr {
N  PACK_STRUCT_FIELD(u16_t src);
X  u16_t src;
N  PACK_STRUCT_FIELD(u16_t dest);  /* src/dest UDP ports */
X  u16_t dest;   
N  PACK_STRUCT_FIELD(u16_t len);
X  u16_t len;
N  PACK_STRUCT_FIELD(u16_t chksum);
X  u16_t chksum;
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N#define UDP_FLAGS_NOCHKSUM       0x01U
N#define UDP_FLAGS_UDPLITE        0x02U
N#define UDP_FLAGS_CONNECTED      0x04U
N#define UDP_FLAGS_MULTICAST_LOOP 0x08U
N
Nstruct udp_pcb;
N
N/** Function prototype for udp pcb receive callback functions
N * addr and port are in same byte order as in the pcb
N * The callback is responsible for freeing the pbuf
N * if it's not used any more.
N *
N * ATTENTION: Be aware that 'addr' points into the pbuf 'p' so freeing this pbuf
N *            makes 'addr' invalid, too.
N *
N * @param arg user supplied argument (udp_pcb.recv_arg)
N * @param pcb the udp_pcb which received data
N * @param p the packet buffer that was received
N * @param addr the remote IP address from which the packet was received
N * @param port the remote port from which the packet was received
N */
Ntypedef void (*udp_recv_fn)(void *arg, struct udp_pcb *pcb, struct pbuf *p,
N    ip_addr_t *addr, u16_t port);
N
N
Nstruct udp_pcb {
N/* Common members of all PCB types */
N  IP_PCB;
X  ip_addr_t local_ip; ip_addr_t remote_ip; u8_t so_options; u8_t tos; u8_t ttl ;
N
N/* Protocol specific PCB members */
N
N  struct udp_pcb *next;
N
N  u8_t flags;
N  /** ports are in host byte order */
N  u16_t local_port, remote_port;
N
N#if LWIP_IGMP
X#if 0
S  /** outgoing network interface for multicast packets */
S  ip_addr_t multicast_ip;
N#endif /* LWIP_IGMP */
N
N#if LWIP_UDPLITE
X#if 0
S  /** used for UDP_LITE only */
S  u16_t chksum_len_rx, chksum_len_tx;
N#endif /* LWIP_UDPLITE */
N
N  /** receive callback function */
N  udp_recv_fn recv;
N  /** user-supplied argument for the recv callback */
N  void *recv_arg;  
N};
N/* udp_pcbs export for exernal reference (e.g. SNMP agent) */
Nextern struct udp_pcb *udp_pcbs;
N
N/* The following functions is the application layer interface to the
N   UDP code. */
Nstruct udp_pcb * udp_new        (void);
Nvoid             udp_remove     (struct udp_pcb *pcb);
Nerr_t            udp_bind       (struct udp_pcb *pcb, ip_addr_t *ipaddr,
N                                 u16_t port);
Nerr_t            udp_connect    (struct udp_pcb *pcb, ip_addr_t *ipaddr,
N                                 u16_t port);
Nvoid             udp_disconnect (struct udp_pcb *pcb);
Nvoid             udp_recv       (struct udp_pcb *pcb, udp_recv_fn recv,
N                                 void *recv_arg);
Nerr_t            udp_sendto_if  (struct udp_pcb *pcb, struct pbuf *p,
N                                 ip_addr_t *dst_ip, u16_t dst_port,
N                                 struct netif *netif);
Nerr_t            udp_sendto     (struct udp_pcb *pcb, struct pbuf *p,
N                                 ip_addr_t *dst_ip, u16_t dst_port);
Nerr_t            udp_send       (struct udp_pcb *pcb, struct pbuf *p);
N
N#if LWIP_CHECKSUM_ON_COPY
X#if 0
Serr_t            udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p,
S                                 ip_addr_t *dst_ip, u16_t dst_port,
S                                 struct netif *netif, u8_t have_chksum,
S                                 u16_t chksum);
Serr_t            udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p,
S                                 ip_addr_t *dst_ip, u16_t dst_port,
S                                 u8_t have_chksum, u16_t chksum);
Serr_t            udp_send_chksum(struct udp_pcb *pcb, struct pbuf *p,
S                                 u8_t have_chksum, u16_t chksum);
N#endif /* LWIP_CHECKSUM_ON_COPY */
N
N#define          udp_flags(pcb) ((pcb)->flags)
N#define          udp_setflags(pcb, f)  ((pcb)->flags = (f))
N
N/* The following functions are the lower layer interface to UDP. */
Nvoid             udp_input      (struct pbuf *p, struct netif *inp);
N
Nvoid             udp_init       (void);
N
N#if UDP_DEBUG
X#if 0x00U
Svoid udp_debug_print(struct udp_hdr *udphdr);
N#else
N#define udp_debug_print(udphdr)
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* LWIP_UDP */
N
N#endif /* __LWIP_UDP_H__ */
L 76 "..\..\Lwip\lwip-1.4.1\src\core\dhcp.c" 2
N#include "lwip/ip_addr.h"
N#include "lwip/netif.h"
N#include "lwip/def.h"
N#include "lwip/dhcp.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/dhcp.h" 1
N/** @file
N */
N
N#ifndef __LWIP_DHCP_H__
N#define __LWIP_DHCP_H__
N
N#include "lwip/opt.h"
N
N#if LWIP_DHCP /* don't build if not configured for use in lwipopts.h */
X#if 1  
N
N#include "lwip/netif.h"
N#include "lwip/udp.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/** period (in seconds) of the application calling dhcp_coarse_tmr() */
N#define DHCP_COARSE_TIMER_SECS 60 
N/** period (in milliseconds) of the application calling dhcp_coarse_tmr() */
N#define DHCP_COARSE_TIMER_MSECS (DHCP_COARSE_TIMER_SECS * 1000UL)
N/** period (in milliseconds) of the application calling dhcp_fine_tmr() */
N#define DHCP_FINE_TIMER_MSECS 500 
N
N#define DHCP_CHADDR_LEN 16U
N#define DHCP_SNAME_LEN  64U
N#define DHCP_FILE_LEN   128U
N
Nstruct dhcp
N{
N  /** transaction identifier of last sent request */ 
N  u32_t xid;
N  /** our connection to the DHCP server */ 
N  struct udp_pcb *pcb;
N  /** incoming msg */
N  struct dhcp_msg *msg_in;
N  /** current DHCP state machine state */
N  u8_t state;
N  /** retries of current request */
N  u8_t tries;
N#if LWIP_DHCP_AUTOIP_COOP
X#if 0
S  u8_t autoip_coop_state;
N#endif
N  u8_t subnet_mask_given;
N
N  struct pbuf *p_out; /* pbuf of outcoming msg */
N  struct dhcp_msg *msg_out; /* outgoing msg */
N  u16_t options_out_len; /* outgoing msg options length */
N  u16_t request_timeout; /* #ticks with period DHCP_FINE_TIMER_SECS for request timeout */
N  u16_t t1_timeout;  /* #ticks with period DHCP_COARSE_TIMER_SECS for renewal time */
N  u16_t t2_timeout;  /* #ticks with period DHCP_COARSE_TIMER_SECS for rebind time */
N  ip_addr_t server_ip_addr; /* dhcp server address that offered this lease */
N  ip_addr_t offered_ip_addr;
N  ip_addr_t offered_sn_mask;
N  ip_addr_t offered_gw_addr;
N 
N  u32_t offered_t0_lease; /* lease period (in seconds) */
N  u32_t offered_t1_renew; /* recommended renew time (usually 50% of lease period) */
N  u32_t offered_t2_rebind; /* recommended rebind time (usually 66% of lease period)  */
N  /* @todo: LWIP_DHCP_BOOTP_FILE configuration option?
N     integrate with possible TFTP-client for booting? */
N#if LWIP_DHCP_BOOTP_FILE
S  ip_addr_t offered_si_addr;
S  char boot_file_name[DHCP_FILE_LEN];
N#endif /* LWIP_DHCP_BOOTPFILE */
N};
N
N/* MUST be compiled with "pack structs" or equivalent! */
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
N/** minimum set of fields of any DHCP message */
Nstruct dhcp_msg
N{
N  PACK_STRUCT_FIELD(u8_t op);
X  u8_t op;
N  PACK_STRUCT_FIELD(u8_t htype);
X  u8_t htype;
N  PACK_STRUCT_FIELD(u8_t hlen);
X  u8_t hlen;
N  PACK_STRUCT_FIELD(u8_t hops);
X  u8_t hops;
N  PACK_STRUCT_FIELD(u32_t xid);
X  u32_t xid;
N  PACK_STRUCT_FIELD(u16_t secs);
X  u16_t secs;
N  PACK_STRUCT_FIELD(u16_t flags);
X  u16_t flags;
N  PACK_STRUCT_FIELD(ip_addr_p_t ciaddr);
X  ip_addr_p_t ciaddr;
N  PACK_STRUCT_FIELD(ip_addr_p_t yiaddr);
X  ip_addr_p_t yiaddr;
N  PACK_STRUCT_FIELD(ip_addr_p_t siaddr);
X  ip_addr_p_t siaddr;
N  PACK_STRUCT_FIELD(ip_addr_p_t giaddr);
X  ip_addr_p_t giaddr;
N  PACK_STRUCT_FIELD(u8_t chaddr[DHCP_CHADDR_LEN]);
X  u8_t chaddr[16U];
N  PACK_STRUCT_FIELD(u8_t sname[DHCP_SNAME_LEN]);
X  u8_t sname[64U];
N  PACK_STRUCT_FIELD(u8_t file[DHCP_FILE_LEN]);
X  u8_t file[128U];
N  PACK_STRUCT_FIELD(u32_t cookie);
X  u32_t cookie;
N#define DHCP_MIN_OPTIONS_LEN 68U
N/** make sure user does not configure this too small */
N#if ((defined(DHCP_OPTIONS_LEN)) && (DHCP_OPTIONS_LEN < DHCP_MIN_OPTIONS_LEN))
X#if ((0L) && (DHCP_OPTIONS_LEN < 68U))
S#  undef DHCP_OPTIONS_LEN
N#endif
N/** allow this to be configured in lwipopts.h, but not too small */
N#if (!defined(DHCP_OPTIONS_LEN))
X#if (!0L)
N/** set this to be sufficient for your options in outgoing DHCP msgs */
N#  define DHCP_OPTIONS_LEN DHCP_MIN_OPTIONS_LEN
N#endif
N  PACK_STRUCT_FIELD(u8_t options[DHCP_OPTIONS_LEN]);
X  u8_t options[68U];
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
Nvoid dhcp_set_struct(struct netif *netif, struct dhcp *dhcp);
N/** Remove a struct dhcp previously set to the netif using dhcp_set_struct() */
N#define dhcp_remove_struct(netif) do { (netif)->dhcp = NULL; } while(0)
Nvoid dhcp_cleanup(struct netif *netif);
N/** start DHCP configuration */
Nerr_t dhcp_start(struct netif *netif);
N/** enforce early lease renewal (not needed normally)*/
Nerr_t dhcp_renew(struct netif *netif);
N/** release the DHCP lease, usually called before dhcp_stop()*/
Nerr_t dhcp_release(struct netif *netif);
N/** stop DHCP configuration */
Nvoid dhcp_stop(struct netif *netif);
N/** inform server of our manual IP address */
Nvoid dhcp_inform(struct netif *netif);
N/** Handle a possible change in the network configuration */
Nvoid dhcp_network_changed(struct netif *netif);
N
N/** if enabled, check whether the offered IP address is not in use, using ARP */
N#if DHCP_DOES_ARP_CHECK
X#if ((1) && (1))
Nvoid dhcp_arp_reply(struct netif *netif, ip_addr_t *addr);
N#endif
N
N/** to be called every minute */
Nvoid dhcp_coarse_tmr(void);
N/** to be called every half second */
Nvoid dhcp_fine_tmr(void);
N 
N/** DHCP message item offsets and length */
N#define DHCP_OP_OFS       0
N#define DHCP_HTYPE_OFS    1
N#define DHCP_HLEN_OFS     2
N#define DHCP_HOPS_OFS     3
N#define DHCP_XID_OFS      4
N#define DHCP_SECS_OFS     8
N#define DHCP_FLAGS_OFS    10
N#define DHCP_CIADDR_OFS   12
N#define DHCP_YIADDR_OFS   16
N#define DHCP_SIADDR_OFS   20
N#define DHCP_GIADDR_OFS   24
N#define DHCP_CHADDR_OFS   28
N#define DHCP_SNAME_OFS    44
N#define DHCP_FILE_OFS     108
N#define DHCP_MSG_LEN      236
N
N#define DHCP_COOKIE_OFS   DHCP_MSG_LEN
N#define DHCP_OPTIONS_OFS  (DHCP_MSG_LEN + 4)
N
N#define DHCP_CLIENT_PORT  68  
N#define DHCP_SERVER_PORT  67
N
N/** DHCP client states */
N#define DHCP_OFF          0
N#define DHCP_REQUESTING   1
N#define DHCP_INIT         2
N#define DHCP_REBOOTING    3
N#define DHCP_REBINDING    4
N#define DHCP_RENEWING     5
N#define DHCP_SELECTING    6
N#define DHCP_INFORMING    7
N#define DHCP_CHECKING     8
N#define DHCP_PERMANENT    9
N#define DHCP_BOUND        10
N/** not yet implemented #define DHCP_RELEASING 11 */
N#define DHCP_BACKING_OFF  12
N
N/** AUTOIP cooperatation flags */
N#define DHCP_AUTOIP_COOP_STATE_OFF  0
N#define DHCP_AUTOIP_COOP_STATE_ON   1
N 
N#define DHCP_BOOTREQUEST  1
N#define DHCP_BOOTREPLY    2
N
N/** DHCP message types */
N#define DHCP_DISCOVER 1
N#define DHCP_OFFER    2
N#define DHCP_REQUEST  3
N#define DHCP_DECLINE  4
N#define DHCP_ACK      5
N#define DHCP_NAK      6
N#define DHCP_RELEASE  7
N#define DHCP_INFORM   8
N
N/** DHCP hardware type, currently only ethernet is supported */
N#define DHCP_HTYPE_ETH 1
N
N#define DHCP_MAGIC_COOKIE 0x63825363UL
N
N/* This is a list of options for BOOTP and DHCP, see RFC 2132 for descriptions */
N
N/** BootP options */
N#define DHCP_OPTION_PAD 0
N#define DHCP_OPTION_SUBNET_MASK 1 /* RFC 2132 3.3 */
N#define DHCP_OPTION_ROUTER 3
N#define DHCP_OPTION_DNS_SERVER 6 
N#define DHCP_OPTION_HOSTNAME 12
N#define DHCP_OPTION_IP_TTL 23
N#define DHCP_OPTION_MTU 26
N#define DHCP_OPTION_BROADCAST 28
N#define DHCP_OPTION_TCP_TTL 37
N#define DHCP_OPTION_END 255
N
N/** DHCP options */
N#define DHCP_OPTION_REQUESTED_IP 50 /* RFC 2132 9.1, requested IP address */
N#define DHCP_OPTION_LEASE_TIME 51 /* RFC 2132 9.2, time in seconds, in 4 bytes */
N#define DHCP_OPTION_OVERLOAD 52 /* RFC2132 9.3, use file and/or sname field for options */
N
N#define DHCP_OPTION_MESSAGE_TYPE 53 /* RFC 2132 9.6, important for DHCP */
N#define DHCP_OPTION_MESSAGE_TYPE_LEN 1
N
N#define DHCP_OPTION_SERVER_ID 54 /* RFC 2132 9.7, server IP address */
N#define DHCP_OPTION_PARAMETER_REQUEST_LIST 55 /* RFC 2132 9.8, requested option types */
N
N#define DHCP_OPTION_MAX_MSG_SIZE 57 /* RFC 2132 9.10, message size accepted >= 576 */
N#define DHCP_OPTION_MAX_MSG_SIZE_LEN 2
N
N#define DHCP_OPTION_T1 58 /* T1 renewal time */
N#define DHCP_OPTION_T2 59 /* T2 rebinding time */
N#define DHCP_OPTION_US 60
N#define DHCP_OPTION_CLIENT_ID 61
N#define DHCP_OPTION_TFTP_SERVERNAME 66
N#define DHCP_OPTION_BOOTFILE 67
N
N/** possible combinations of overloading the file and sname fields with options */
N#define DHCP_OVERLOAD_NONE 0
N#define DHCP_OVERLOAD_FILE 1
N#define DHCP_OVERLOAD_SNAME  2
N#define DHCP_OVERLOAD_SNAME_FILE 3
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* LWIP_DHCP */
N
N#endif /*__LWIP_DHCP_H__*/
L 80 "..\..\Lwip\lwip-1.4.1\src\core\dhcp.c" 2
N#include "lwip/autoip.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\ipv4\lwip/autoip.h" 1
N/**
N * @file
N *
N * AutoIP Automatic LinkLocal IP Configuration
N */
N
N/*
N *
N * Copyright (c) 2007 Dominik Spies <kontakt@dspies.de>
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
N * OF SUCH DAMAGE.
N *
N * Author: Dominik Spies <kontakt@dspies.de>
N *
N * This is a AutoIP implementation for the lwIP TCP/IP stack. It aims to conform
N * with RFC 3927.
N *
N *
N * Please coordinate changes and requests with Dominik Spies
N * <kontakt@dspies.de>
N */
N 
N#ifndef __LWIP_AUTOIP_H__
N#define __LWIP_AUTOIP_H__
N
N#include "lwip/opt.h"
N
N#if LWIP_AUTOIP /* don't build if not configured for use in lwipopts.h */
X#if 0  
S
S#include "lwip/netif.h"
S#include "lwip/udp.h"
S#include "netif/etharp.h"
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S/* AutoIP Timing */
S#define AUTOIP_TMR_INTERVAL      100
S#define AUTOIP_TICKS_PER_SECOND (1000 / AUTOIP_TMR_INTERVAL)
S
S/* RFC 3927 Constants */
S#define PROBE_WAIT               1   /* second   (initial random delay)                 */
S#define PROBE_MIN                1   /* second   (minimum delay till repeated probe)    */
S#define PROBE_MAX                2   /* seconds  (maximum delay till repeated probe)    */
S#define PROBE_NUM                3   /*          (number of probe packets)              */
S#define ANNOUNCE_NUM             2   /*          (number of announcement packets)       */
S#define ANNOUNCE_INTERVAL        2   /* seconds  (time between announcement packets)    */
S#define ANNOUNCE_WAIT            2   /* seconds  (delay before announcing)              */
S#define MAX_CONFLICTS            10  /*          (max conflicts before rate limiting)   */
S#define RATE_LIMIT_INTERVAL      60  /* seconds  (delay between successive attempts)    */
S#define DEFEND_INTERVAL          10  /* seconds  (min. wait between defensive ARPs)     */
S
S/* AutoIP client states */
S#define AUTOIP_STATE_OFF         0
S#define AUTOIP_STATE_PROBING     1
S#define AUTOIP_STATE_ANNOUNCING  2
S#define AUTOIP_STATE_BOUND       3
S
Sstruct autoip
S{
S  ip_addr_t llipaddr;       /* the currently selected, probed, announced or used LL IP-Address */
S  u8_t state;               /* current AutoIP state machine state */
S  u8_t sent_num;            /* sent number of probes or announces, dependent on state */
S  u16_t ttw;                /* ticks to wait, tick is AUTOIP_TMR_INTERVAL long */
S  u8_t lastconflict;        /* ticks until a conflict can be solved by defending */
S  u8_t tried_llipaddr;      /* total number of probed/used Link Local IP-Addresses */
S};
S
S
S#define autoip_init() /* Compatibility define, no init needed. */
S
S/** Set a struct autoip allocated by the application to work with */
Svoid autoip_set_struct(struct netif *netif, struct autoip *autoip);
S
S/** Start AutoIP client */
Serr_t autoip_start(struct netif *netif);
S
S/** Stop AutoIP client */
Serr_t autoip_stop(struct netif *netif);
S
S/** Handles every incoming ARP Packet, called by etharp_arp_input */
Svoid autoip_arp_reply(struct netif *netif, struct etharp_hdr *hdr);
S
S/** Has to be called in loop every AUTOIP_TMR_INTERVAL milliseconds */
Svoid autoip_tmr(void);
S
S/** Handle a possible change in the network configuration */
Svoid autoip_network_changed(struct netif *netif);
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* LWIP_AUTOIP */
N
N#endif /* __LWIP_AUTOIP_H__ */
L 81 "..\..\Lwip\lwip-1.4.1\src\core\dhcp.c" 2
N#include "lwip/dns.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\lwip/dns.h" 1
N/**
N * lwip DNS resolver header file.
N
N * Author: Jim Pettinato 
N *   April 2007
N
N * ported from uIP resolv.c Copyright (c) 2002-2003, Adam Dunkels.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote
N *    products derived from this software without specific prior
N *    written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
N * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
N * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
N * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
N * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
N * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
N#ifndef __LWIP_DNS_H__
N#define __LWIP_DNS_H__
N
N#include "lwip/opt.h"
N
N#if LWIP_DNS /* don't build if not configured for use in lwipopts.h */
X#if 1  
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/** DNS timer period */
N#define DNS_TMR_INTERVAL          1000
N
N/** DNS field TYPE used for "Resource Records" */
N#define DNS_RRTYPE_A              1     /* a host address */
N#define DNS_RRTYPE_NS             2     /* an authoritative name server */
N#define DNS_RRTYPE_MD             3     /* a mail destination (Obsolete - use MX) */
N#define DNS_RRTYPE_MF             4     /* a mail forwarder (Obsolete - use MX) */
N#define DNS_RRTYPE_CNAME          5     /* the canonical name for an alias */
N#define DNS_RRTYPE_SOA            6     /* marks the start of a zone of authority */
N#define DNS_RRTYPE_MB             7     /* a mailbox domain name (EXPERIMENTAL) */
N#define DNS_RRTYPE_MG             8     /* a mail group member (EXPERIMENTAL) */
N#define DNS_RRTYPE_MR             9     /* a mail rename domain name (EXPERIMENTAL) */
N#define DNS_RRTYPE_NULL           10    /* a null RR (EXPERIMENTAL) */
N#define DNS_RRTYPE_WKS            11    /* a well known service description */
N#define DNS_RRTYPE_PTR            12    /* a domain name pointer */
N#define DNS_RRTYPE_HINFO          13    /* host information */
N#define DNS_RRTYPE_MINFO          14    /* mailbox or mail list information */
N#define DNS_RRTYPE_MX             15    /* mail exchange */
N#define DNS_RRTYPE_TXT            16    /* text strings */
N
N/** DNS field CLASS used for "Resource Records" */
N#define DNS_RRCLASS_IN            1     /* the Internet */
N#define DNS_RRCLASS_CS            2     /* the CSNET class (Obsolete - used only for examples in some obsolete RFCs) */
N#define DNS_RRCLASS_CH            3     /* the CHAOS class */
N#define DNS_RRCLASS_HS            4     /* Hesiod [Dyer 87] */
N#define DNS_RRCLASS_FLUSH         0x800 /* Flush bit */
N
N/* The size used for the next line is rather a hack, but it prevents including socket.h in all files
N   that include memp.h, and that would possibly break portability (since socket.h defines some types
N   and constants possibly already define by the OS).
N   Calculation rule:
N   sizeof(struct addrinfo) + sizeof(struct sockaddr_in) + DNS_MAX_NAME_LENGTH + 1 byte zero-termination */
N#define NETDB_ELEM_SIZE           (32 + 16 + DNS_MAX_NAME_LENGTH + 1)
N
N#if DNS_LOCAL_HOSTLIST
X#if 0
S/** struct used for local host-list */
Sstruct local_hostlist_entry {
S  /** static hostname */
S  const char *name;
S  /** static host address in network byteorder */
S  ip_addr_t addr;
S  struct local_hostlist_entry *next;
S};
S#if DNS_LOCAL_HOSTLIST_IS_DYNAMIC
S#ifndef DNS_LOCAL_HOSTLIST_MAX_NAMELEN
S#define DNS_LOCAL_HOSTLIST_MAX_NAMELEN  DNS_MAX_NAME_LENGTH
S#endif
S#define LOCALHOSTLIST_ELEM_SIZE ((sizeof(struct local_hostlist_entry) + DNS_LOCAL_HOSTLIST_MAX_NAMELEN + 1))
S#endif /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
N#endif /* DNS_LOCAL_HOSTLIST */
N
N/** Callback which is invoked when a hostname is found.
N * A function of this type must be implemented by the application using the DNS resolver.
N * @param name pointer to the name that was looked up.
N * @param ipaddr pointer to an ip_addr_t containing the IP address of the hostname,
N *        or NULL if the name could not be found (or on any other error).
N * @param callback_arg a user-specified callback argument passed to dns_gethostbyname
N*/
Ntypedef void (*dns_found_callback)(const char *name, ip_addr_t *ipaddr, void *callback_arg);
N
Nvoid           dns_init(void);
Nvoid           dns_tmr(void);
Nvoid           dns_setserver(u8_t numdns, ip_addr_t *dnsserver);
Nip_addr_t      dns_getserver(u8_t numdns);
Nerr_t          dns_gethostbyname(const char *hostname, ip_addr_t *addr,
N                                 dns_found_callback found, void *callback_arg);
N
N#if DNS_LOCAL_HOSTLIST && DNS_LOCAL_HOSTLIST_IS_DYNAMIC
X#if 0 && 1
Sint            dns_local_removehost(const char *hostname, const ip_addr_t *addr);
Serr_t          dns_local_addhost(const char *hostname, const ip_addr_t *addr);
N#endif /* DNS_LOCAL_HOSTLIST && DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* LWIP_DNS */
N
N#endif /* __LWIP_DNS_H__ */
L 82 "..\..\Lwip\lwip-1.4.1\src\core\dhcp.c" 2
N#include "netif/etharp.h"
L 1 "..\..\Lwip\lwip-1.4.1\src\include\netif/etharp.h" 1
N/*
N * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
N * Copyright (c) 2003-2004 Leon Woestenberg <leon.woestenberg@axon.tv>
N * Copyright (c) 2003-2004 Axon Digital Design B.V., The Netherlands.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N
N#ifndef __NETIF_ETHARP_H__
N#define __NETIF_ETHARP_H__
N
N#include "lwip/opt.h"
N
N#if LWIP_ARP || LWIP_ETHERNET /* don't build if not configured for use in lwipopts.h */
X#if 1 || (1 || 0)  
N
N#include "lwip/pbuf.h"
N#include "lwip/ip_addr.h"
N#include "lwip/netif.h"
N#include "lwip/ip.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#ifndef ETHARP_HWADDR_LEN
N#define ETHARP_HWADDR_LEN     6
N#endif
N
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
Nstruct eth_addr {
N  PACK_STRUCT_FIELD(u8_t addr[ETHARP_HWADDR_LEN]);
X  u8_t addr[6];
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
N/** Ethernet header */
Nstruct eth_hdr {
N#if ETH_PAD_SIZE
X#if 0
S  PACK_STRUCT_FIELD(u8_t padding[ETH_PAD_SIZE]);
N#endif
N  PACK_STRUCT_FIELD(struct eth_addr dest);
X  struct eth_addr dest;
N  PACK_STRUCT_FIELD(struct eth_addr src);
X  struct eth_addr src;
N  PACK_STRUCT_FIELD(u16_t type);
X  u16_t type;
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N#define SIZEOF_ETH_HDR (14 + ETH_PAD_SIZE)
N
N#if ETHARP_SUPPORT_VLAN
X#if 0
S
S#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
S#endif
SPACK_STRUCT_BEGIN
S/** VLAN header inserted between ethernet header and payload
S * if 'type' in ethernet header is ETHTYPE_VLAN.
S * See IEEE802.Q */
Sstruct eth_vlan_hdr {
S  PACK_STRUCT_FIELD(u16_t prio_vid);
S  PACK_STRUCT_FIELD(u16_t tpid);
S} PACK_STRUCT_STRUCT;
SPACK_STRUCT_END
S#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
S#endif
S
S#define SIZEOF_VLAN_HDR 4
S#define VLAN_ID(vlan_hdr) (htons((vlan_hdr)->prio_vid) & 0xFFF)
S
N#endif /* ETHARP_SUPPORT_VLAN */
N
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
N/** the ARP message, see RFC 826 ("Packet format") */
Nstruct etharp_hdr {
N  PACK_STRUCT_FIELD(u16_t hwtype);
X  u16_t hwtype;
N  PACK_STRUCT_FIELD(u16_t proto);
X  u16_t proto;
N  PACK_STRUCT_FIELD(u8_t  hwlen);
X  u8_t hwlen;
N  PACK_STRUCT_FIELD(u8_t  protolen);
X  u8_t protolen;
N  PACK_STRUCT_FIELD(u16_t opcode);
X  u16_t opcode;
N  PACK_STRUCT_FIELD(struct eth_addr shwaddr);
X  struct eth_addr shwaddr;
N  PACK_STRUCT_FIELD(struct ip_addr2 sipaddr);
X  struct ip_addr2 sipaddr;
N  PACK_STRUCT_FIELD(struct eth_addr dhwaddr);
X  struct eth_addr dhwaddr;
N  PACK_STRUCT_FIELD(struct ip_addr2 dipaddr);
X  struct ip_addr2 dipaddr;
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N#define SIZEOF_ETHARP_HDR 28
N#define SIZEOF_ETHARP_PACKET (SIZEOF_ETH_HDR + SIZEOF_ETHARP_HDR)
N
N/** 5 seconds period */
N#define ARP_TMR_INTERVAL 5000
N
N#define ETHTYPE_ARP       0x0806U
N#define ETHTYPE_IP        0x0800U
N#define ETHTYPE_VLAN      0x8100U
N#define ETHTYPE_PPPOEDISC 0x8863U  /* PPP Over Ethernet Discovery Stage */
N#define ETHTYPE_PPPOE     0x8864U  /* PPP Over Ethernet Session Stage */
N
N/** MEMCPY-like macro to copy to/from struct eth_addr's that are local variables
N * or known to be 32-bit aligned within the protocol header. */
N#ifndef ETHADDR32_COPY
N#define ETHADDR32_COPY(src, dst)  SMEMCPY(src, dst, ETHARP_HWADDR_LEN)
N#endif
N
N/** MEMCPY-like macro to copy to/from struct eth_addr's that are no local
N * variables and known to be 16-bit aligned within the protocol header. */
N#ifndef ETHADDR16_COPY
N#define ETHADDR16_COPY(src, dst)  SMEMCPY(src, dst, ETHARP_HWADDR_LEN)
N#endif
N
N#if LWIP_ARP /* don't build if not configured for use in lwipopts.h */
X#if 1  
N
N/** ARP message types (opcodes) */
N#define ARP_REQUEST 1
N#define ARP_REPLY   2
N
N/** Define this to 1 and define LWIP_ARP_FILTER_NETIF_FN(pbuf, netif, type)
N * to a filter function that returns the correct netif when using multiple
N * netifs on one hardware interface where the netif's low-level receive
N * routine cannot decide for the correct netif (e.g. when mapping multiple
N * IP addresses to one hardware interface).
N */
N#ifndef LWIP_ARP_FILTER_NETIF
N#define LWIP_ARP_FILTER_NETIF 0
N#endif
N
N#if ARP_QUEUEING
X#if 0
S/** struct for queueing outgoing packets for unknown address
S  * defined here to be accessed by memp.h
S  */
Sstruct etharp_q_entry {
S  struct etharp_q_entry *next;
S  struct pbuf *p;
S};
N#endif /* ARP_QUEUEING */
N
N#define etharp_init() /* Compatibility define, not init needed. */
Nvoid etharp_tmr(void);
Ns8_t etharp_find_addr(struct netif *netif, ip_addr_t *ipaddr,
N         struct eth_addr **eth_ret, ip_addr_t **ip_ret);
Nerr_t etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr);
Nerr_t etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q);
Nerr_t etharp_request(struct netif *netif, ip_addr_t *ipaddr);
N/** For Ethernet network interfaces, we might want to send "gratuitous ARP";
N *  this is an ARP packet sent by a node in order to spontaneously cause other
N *  nodes to update an entry in their ARP cache.
N *  From RFC 3220 "IP Mobility Support for IPv4" section 4.6. */
N#define etharp_gratuitous(netif) etharp_request((netif), &(netif)->ip_addr)
Nvoid etharp_cleanup_netif(struct netif *netif);
N
N#if ETHARP_SUPPORT_STATIC_ENTRIES
X#if 0
Serr_t etharp_add_static_entry(ip_addr_t *ipaddr, struct eth_addr *ethaddr);
Serr_t etharp_remove_static_entry(ip_addr_t *ipaddr);
N#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
N
N#if LWIP_AUTOIP
X#if 0
Serr_t etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
S                 const struct eth_addr *ethdst_addr,
S                 const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
S                 const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
S                 const u16_t opcode);
N#endif /* LWIP_AUTOIP */
N
N#endif /* LWIP_ARP */
N
Nerr_t ethernet_input(struct pbuf *p, struct netif *netif);
N
N#define eth_addr_cmp(addr1, addr2) (memcmp((addr1)->addr, (addr2)->addr, ETHARP_HWADDR_LEN) == 0)
N
Nextern const struct eth_addr ethbroadcast, ethzero;
N
N#endif /* LWIP_ARP || LWIP_ETHERNET */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __NETIF_ARP_H__ */
L 83 "..\..\Lwip\lwip-1.4.1\src\core\dhcp.c" 2
N
N#include <string.h>
N
N/** DHCP_CREATE_RAND_XID: if this is set to 1, the xid is created using
N * LWIP_RAND() (this overrides DHCP_GLOBAL_XID)
N */
N#ifndef DHCP_CREATE_RAND_XID
N#define DHCP_CREATE_RAND_XID 1
N#endif
N
N/** Default for DHCP_GLOBAL_XID is 0xABCD0000
N * This can be changed by defining DHCP_GLOBAL_XID and DHCP_GLOBAL_XID_HEADER, e.g.
N *  #define DHCP_GLOBAL_XID_HEADER "stdlib.h"
N *  #define DHCP_GLOBAL_XID rand()
N */
N#ifdef DHCP_GLOBAL_XID_HEADER
S#include DHCP_GLOBAL_XID_HEADER /* include optional starting XID generation prototypes */
N#endif
N
N/** DHCP_OPTION_MAX_MSG_SIZE is set to the MTU
N * MTU is checked to be big enough in dhcp_start */
N#define DHCP_MAX_MSG_LEN(netif)        (netif->mtu)
N#define DHCP_MAX_MSG_LEN_MIN_REQUIRED  576
N/** Minimum length for reply before packet is parsed */
N#define DHCP_MIN_REPLY_LEN             44
N
N#define REBOOT_TRIES 2
N
N/** Option handling: options are parsed in dhcp_parse_reply
N * and saved in an array where other functions can load them from.
N * This might be moved into the struct dhcp (not necessarily since
N * lwIP is single-threaded and the array is only used while in recv
N * callback). */
N#define DHCP_OPTION_IDX_OVERLOAD    0
N#define DHCP_OPTION_IDX_MSG_TYPE    1
N#define DHCP_OPTION_IDX_SERVER_ID   2
N#define DHCP_OPTION_IDX_LEASE_TIME  3
N#define DHCP_OPTION_IDX_T1          4
N#define DHCP_OPTION_IDX_T2          5
N#define DHCP_OPTION_IDX_SUBNET_MASK 6
N#define DHCP_OPTION_IDX_ROUTER      7
N#define DHCP_OPTION_IDX_DNS_SERVER  8
N#define DHCP_OPTION_IDX_MAX         (DHCP_OPTION_IDX_DNS_SERVER + DNS_MAX_SERVERS)
N
N/** Holds the decoded option values, only valid while in dhcp_recv.
N    @todo: move this into struct dhcp? */
Nu32_t dhcp_rx_options_val[DHCP_OPTION_IDX_MAX];
Xu32_t dhcp_rx_options_val[(8 + 2)];
N/** Holds a flag which option was received and is contained in dhcp_rx_options_val,
N    only valid while in dhcp_recv.
N    @todo: move this into struct dhcp? */
Nu8_t  dhcp_rx_options_given[DHCP_OPTION_IDX_MAX];
Xu8_t  dhcp_rx_options_given[(8 + 2)];
N
N#ifdef DHCP_GLOBAL_XID
Sstatic u32_t xid;
Sstatic u8_t xid_initialised;
N#endif /* DHCP_GLOBAL_XID */
N
N#define dhcp_option_given(dhcp, idx)          (dhcp_rx_options_given[idx] != 0)
N#define dhcp_got_option(dhcp, idx)            (dhcp_rx_options_given[idx] = 1)
N#define dhcp_clear_option(dhcp, idx)          (dhcp_rx_options_given[idx] = 0)
N#define dhcp_clear_all_options(dhcp)          (memset(dhcp_rx_options_given, 0, sizeof(dhcp_rx_options_given)))
N#define dhcp_get_option_value(dhcp, idx)      (dhcp_rx_options_val[idx])
N#define dhcp_set_option_value(dhcp, idx, val) (dhcp_rx_options_val[idx] = (val))
N
N
N/* DHCP client state machine functions */
Nstatic err_t dhcp_discover(struct netif *netif);
Nstatic err_t dhcp_select(struct netif *netif);
Nstatic void dhcp_bind(struct netif *netif);
N#if DHCP_DOES_ARP_CHECK
X#if ((1) && (1))
Nstatic err_t dhcp_decline(struct netif *netif);
N#endif /* DHCP_DOES_ARP_CHECK */
Nstatic err_t dhcp_rebind(struct netif *netif);
Nstatic err_t dhcp_reboot(struct netif *netif);
Nstatic void dhcp_set_state(struct dhcp *dhcp, u8_t new_state);
N
N/* receive, unfold, parse and free incoming messages */
Nstatic void dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port);
N
N/* set the DHCP timers */
Nstatic void dhcp_timeout(struct netif *netif);
Nstatic void dhcp_t1_timeout(struct netif *netif);
Nstatic void dhcp_t2_timeout(struct netif *netif);
N
N/* build outgoing messages */
N/* create a DHCP message, fill in common headers */
Nstatic err_t dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type);
N/* free a DHCP request */
Nstatic void dhcp_delete_msg(struct dhcp *dhcp);
N/* add a DHCP option (type, then length in bytes) */
Nstatic void dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len);
N/* add option values */
Nstatic void dhcp_option_byte(struct dhcp *dhcp, u8_t value);
Nstatic void dhcp_option_short(struct dhcp *dhcp, u16_t value);
Nstatic void dhcp_option_long(struct dhcp *dhcp, u32_t value);
N#if LWIP_NETIF_HOSTNAME
X#if 0
Sstatic void dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif);
N#endif /* LWIP_NETIF_HOSTNAME */
N/* always add the DHCP options trailer to end and pad */
Nstatic void dhcp_option_trailer(struct dhcp *dhcp);
N
N/**
N * Back-off the DHCP client (because of a received NAK response).
N *
N * Back-off the DHCP client because of a received NAK. Receiving a
N * NAK means the client asked for something non-sensible, for
N * example when it tries to renew a lease obtained on another network.
N *
N * We clear any existing set IP address and restart DHCP negotiation
N * afresh (as per RFC2131 3.2.3).
N *
N * @param netif the netif under DHCP control
N */
Nstatic void
Ndhcp_handle_nak(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
N    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
X  ;
N  /* Set the interface down since the address must no longer be used, as per RFC2131 */
N  netif_set_down(netif);
N  /* remove IP address from interface */
N  netif_set_ipaddr(netif, IP_ADDR_ANY);
X  netif_set_ipaddr(netif, ((ip_addr_t *)&ip_addr_any));
N  netif_set_gw(netif, IP_ADDR_ANY);
X  netif_set_gw(netif, ((ip_addr_t *)&ip_addr_any));
N  netif_set_netmask(netif, IP_ADDR_ANY); 
X  netif_set_netmask(netif, ((ip_addr_t *)&ip_addr_any)); 
N  /* Change to a defined state */
N  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
X  dhcp_set_state(dhcp, 12);
N  /* We can immediately restart discovery */
N  dhcp_discover(netif);
N}
N
N#if DHCP_DOES_ARP_CHECK
X#if ((1) && (1))
N/**
N * Checks if the offered IP address is already in use.
N *
N * It does so by sending an ARP request for the offered address and
N * entering CHECKING state. If no ARP reply is received within a small
N * interval, the address is assumed to be free for use by us.
N *
N * @param netif the netif under DHCP control
N */
Nstatic void
Ndhcp_check(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  err_t result;
N  u16_t msecs;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
N    (s16_t)netif->name[1]));
X  ;
N  dhcp_set_state(dhcp, DHCP_CHECKING);
X  dhcp_set_state(dhcp, 8);
N  /* create an ARP query for the offered IP address, expecting that no host
N     responds, as the IP address should not be in use. */
N  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
X  result = etharp_query(netif, &dhcp->offered_ip_addr, 0);
N  if (result != ERR_OK) {
X  if (result != 0) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
X    ;
N  }
N  dhcp->tries++;
N  msecs = 500;
N  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
X  dhcp->request_timeout = (msecs + 500 - 1) / 500;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
X  ;
N}
N#endif /* DHCP_DOES_ARP_CHECK */
N
N/**
N * Remember the configuration offered by a DHCP server.
N *
N * @param netif the netif under DHCP control
N */
Nstatic void
Ndhcp_handle_offer(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
N    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
X  ;
N  /* obtain the server address */
N  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
X  if ((dhcp_rx_options_given[2] != 0)) {
N    ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
X    ((&dhcp->server_ip_addr)->addr = (lwip_htonl((dhcp_rx_options_val[2]))));
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
N      ip4_addr_get_u32(&dhcp->server_ip_addr)));
X    ;
N    /* remember offered address */
N    ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
X    ((dhcp->offered_ip_addr). addr = (dhcp->msg_in->yiaddr). addr);
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
N      ip4_addr_get_u32(&dhcp->offered_ip_addr)));
X    ;
N
N    dhcp_select(netif);
N  } else {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
N      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
X    ;
N  }
N}
N
N/**
N * Select a DHCP server offer out of all offers.
N *
N * Simply select the first offer received.
N *
N * @param netif the netif under DHCP control
N * @return lwIP specific error (see error.h)
N */
Nstatic err_t
Ndhcp_select(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  err_t result;
N  u16_t msecs;
N
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
X  ;
N  dhcp_set_state(dhcp, DHCP_REQUESTING);
X  dhcp_set_state(dhcp, 1);
N
N  /* create and initialize the DHCP message header */
N  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
X  result = dhcp_create_msg(netif, dhcp, 3);
N  if (result == ERR_OK) {
X  if (result == 0) {
N    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
X    dhcp_option(dhcp, 57, 2);
N    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
X    dhcp_option_short(dhcp, (netif->mtu));
N
N    /* MUST request the offered IP address */
N    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
X    dhcp_option(dhcp, 50, 4);
N    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
X    dhcp_option_long(dhcp, lwip_ntohl(((&dhcp->offered_ip_addr)->addr)));
N
N    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
X    dhcp_option(dhcp, 54, 4);
N    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
X    dhcp_option_long(dhcp, lwip_ntohl(((&dhcp->server_ip_addr)->addr)));
N
N    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
X    dhcp_option(dhcp, 55, 4 );
N    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
X    dhcp_option_byte(dhcp, 1);
N    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
X    dhcp_option_byte(dhcp, 3);
N    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
X    dhcp_option_byte(dhcp, 28);
N    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
X    dhcp_option_byte(dhcp, 6);
N
N#if LWIP_NETIF_HOSTNAME
X#if 0
S    dhcp_option_hostname(dhcp, netif);
N#endif /* LWIP_NETIF_HOSTNAME */
N
N    dhcp_option_trailer(dhcp);
N    /* shrink the pbuf to the actual content length */
N    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
X    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - 68U + dhcp->options_out_len);
N
N    /* send broadcast to any DHCP server */
N    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
X    udp_sendto_if(dhcp->pcb, dhcp->p_out, ((ip_addr_t *)&ip_addr_broadcast), 67, netif);
N    dhcp_delete_msg(dhcp);
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
X    ;
N  } else {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
X    ;
N  }
N  dhcp->tries++;
N  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
N  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
X  dhcp->request_timeout = (msecs + 500 - 1) / 500;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
X  ;
N  return result;
N}
N
N/**
N * The DHCP timer that checks for lease renewal/rebind timeouts.
N */
Nvoid
Ndhcp_coarse_tmr()
N{
N  struct netif *netif = netif_list;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
X  ;
N  /* iterate through all network interfaces */
N  while (netif != NULL) {
X  while (netif != 0) {
N    /* only act on DHCP configured interfaces */
N    if (netif->dhcp != NULL) {
X    if (netif->dhcp != 0) {
N      /* timer is active (non zero), and triggers (zeroes) now? */
N      if (netif->dhcp->t2_timeout-- == 1) {
N        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
X        ;
N        /* this clients' rebind timeout triggered */
N        dhcp_t2_timeout(netif);
N      /* timer is active (non zero), and triggers (zeroes) now */
N      } else if (netif->dhcp->t1_timeout-- == 1) {
N        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
X        ;
N        /* this clients' renewal timeout triggered */
N        dhcp_t1_timeout(netif);
N      }
N    }
N    /* proceed to next netif */
N    netif = netif->next;
N  }
N}
N
N/**
N * DHCP transaction timeout handling
N *
N * A DHCP server is expected to respond within a short period of time.
N * This timer checks whether an outstanding DHCP request is timed out.
N */
Nvoid
Ndhcp_fine_tmr()
N{
N  struct netif *netif = netif_list;
N  /* loop through netif's */
N  while (netif != NULL) {
X  while (netif != 0) {
N    /* only act on DHCP configured interfaces */
N    if (netif->dhcp != NULL) {
X    if (netif->dhcp != 0) {
N      /* timer is active (non zero), and is about to trigger now */      
N      if (netif->dhcp->request_timeout > 1) {
N        netif->dhcp->request_timeout--;
N      }
N      else if (netif->dhcp->request_timeout == 1) {
N        netif->dhcp->request_timeout--;
N        /* { netif->dhcp->request_timeout == 0 } */
N        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
X        ;
N        /* this client's request timeout triggered */
N        dhcp_timeout(netif);
N      }
N    }
N    /* proceed to next network interface */
N    netif = netif->next;
N  }
N}
N
N/**
N * A DHCP negotiation transaction, or ARP request, has timed out.
N *
N * The timer that was started with the DHCP or ARP request has
N * timed out, indicating no response was received in time.
N *
N * @param netif the netif under DHCP control
N */
Nstatic void
Ndhcp_timeout(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
X  ;
N  /* back-off period has passed, or server selection timed out */
N  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
X  if ((dhcp->state == 12) || (dhcp->state == 6)) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
X    ;
N    dhcp_discover(netif);
N  /* receiving the requested lease timed out */
N  } else if (dhcp->state == DHCP_REQUESTING) {
X  } else if (dhcp->state == 1) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
X    ;
N    if (dhcp->tries <= 5) {
N      dhcp_select(netif);
N    } else {
N      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
X      ;
N      dhcp_release(netif);
N      dhcp_discover(netif);
N    }
N#if DHCP_DOES_ARP_CHECK
X#if ((1) && (1))
N  /* received no ARP reply for the offered address (which is good) */
N  } else if (dhcp->state == DHCP_CHECKING) {
X  } else if (dhcp->state == 8) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
X    ;
N    if (dhcp->tries <= 1) {
N      dhcp_check(netif);
N    /* no ARP replies on the offered address,
N       looks like the IP address is indeed free */
N    } else {
N      /* bind the interface to the offered address */
N      dhcp_bind(netif);
N    }
N#endif /* DHCP_DOES_ARP_CHECK */
N  }
N  /* did not get response to renew request? */
N  else if (dhcp->state == DHCP_RENEWING) {
X  else if (dhcp->state == 5) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
X    ;
N    /* just retry renewal */
N    /* note that the rebind timer will eventually time-out if renew does not work */
N    dhcp_renew(netif);
N  /* did not get response to rebind request? */
N  } else if (dhcp->state == DHCP_REBINDING) {
X  } else if (dhcp->state == 4) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
X    ;
N    if (dhcp->tries <= 8) {
N      dhcp_rebind(netif);
N    } else {
N      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
X      ;
N      dhcp_release(netif);
N      dhcp_discover(netif);
N    }
N  } else if (dhcp->state == DHCP_REBOOTING) {
X  } else if (dhcp->state == 3) {
N    if (dhcp->tries < REBOOT_TRIES) {
X    if (dhcp->tries < 2) {
N      dhcp_reboot(netif);
N    } else {
N      dhcp_discover(netif);
N    }
N  }
N}
N
N/**
N * The renewal period has timed out.
N *
N * @param netif the netif under DHCP control
N */
Nstatic void
Ndhcp_t1_timeout(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
X  ;
N  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
X  if ((dhcp->state == 1) || (dhcp->state == 10) ||
N      (dhcp->state == DHCP_RENEWING)) {
X      (dhcp->state == 5)) {
N    /* just retry to renew - note that the rebind timer (t2) will
N     * eventually time-out if renew tries fail. */
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
N                ("dhcp_t1_timeout(): must renew\n"));
X    ;
N    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
N       DHCP_RENEWING, not DHCP_BOUND */
N    dhcp_renew(netif);
N  }
N}
N
N/**
N * The rebind period has timed out.
N *
N * @param netif the netif under DHCP control
N */
Nstatic void
Ndhcp_t2_timeout(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
X  ;
N  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
X  if ((dhcp->state == 1) || (dhcp->state == 10) ||
N      (dhcp->state == DHCP_RENEWING)) {
X      (dhcp->state == 5)) {
N    /* just retry to rebind */
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
N                ("dhcp_t2_timeout(): must rebind\n"));
X    ;
N    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
N       DHCP_REBINDING, not DHCP_BOUND */
N    dhcp_rebind(netif);
N  }
N}
N
N/**
N * Handle a DHCP ACK packet
N *
N * @param netif the netif under DHCP control
N */
Nstatic void
Ndhcp_handle_ack(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N#if LWIP_DNS
X#if 1
N  u8_t n;
N#endif /* LWIP_DNS */
N
N  /* clear options we might not get from the ACK */
N  ip_addr_set_zero(&dhcp->offered_sn_mask);
X  ((&dhcp->offered_sn_mask)->addr = 0);
N  ip_addr_set_zero(&dhcp->offered_gw_addr);
X  ((&dhcp->offered_gw_addr)->addr = 0);
N#if LWIP_DHCP_BOOTP_FILE
S  ip_addr_set_zero(&dhcp->offered_si_addr);
N#endif /* LWIP_DHCP_BOOTP_FILE */
N
N  /* lease time given? */
N  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
X  if ((dhcp_rx_options_given[3] != 0)) {
N    /* remember offered lease time */
N    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
X    dhcp->offered_t0_lease = (dhcp_rx_options_val[3]);
N  }
N  /* renewal period given? */
N  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
X  if ((dhcp_rx_options_given[4] != 0)) {
N    /* remember given renewal period */
N    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
X    dhcp->offered_t1_renew = (dhcp_rx_options_val[4]);
N  } else {
N    /* calculate safe periods for renewal */
N    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
N  }
N
N  /* renewal period given? */
N  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
X  if ((dhcp_rx_options_given[5] != 0)) {
N    /* remember given rebind period */
N    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
X    dhcp->offered_t2_rebind = (dhcp_rx_options_val[5]);
N  } else {
N    /* calculate safe periods for rebinding */
N    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
N  }
N
N  /* (y)our internet address */
N  ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
X  ((dhcp->offered_ip_addr). addr = (dhcp->msg_in->yiaddr). addr);
N
N#if LWIP_DHCP_BOOTP_FILE
S  /* copy boot server address,
S     boot file name copied in dhcp_parse_reply if not overloaded */
S  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
N#endif /* LWIP_DHCP_BOOTP_FILE */
N
N  /* subnet mask given? */
N  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
X  if ((dhcp_rx_options_given[6] != 0)) {
N    /* remember given subnet mask */
N    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
X    ((&dhcp->offered_sn_mask)->addr = (lwip_htonl((dhcp_rx_options_val[6]))));
N    dhcp->subnet_mask_given = 1;
N  } else {
N    dhcp->subnet_mask_given = 0;
N  }
N
N  /* gateway router */
N  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
X  if ((dhcp_rx_options_given[7] != 0)) {
N    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
X    ((&dhcp->offered_gw_addr)->addr = (lwip_htonl((dhcp_rx_options_val[7]))));
N  }
N  
N#if LWIP_DNS
X#if 1
N  /* DNS servers */
N  n = 0;
N  while(dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n) && (n < DNS_MAX_SERVERS)) {
X  while((dhcp_rx_options_given[8 + n] != 0) && (n < 2)) {
N    ip_addr_t dns_addr;
N    ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
X    ((&dns_addr)->addr = (lwip_htonl((dhcp_rx_options_val[8 + n]))));
N    dns_setserver(n, &dns_addr);
N    n++;
N  }
N#endif /* LWIP_DNS */
N}
N
N/** Set a statically allocated struct dhcp to work with.
N * Using this prevents dhcp_start to allocate it using mem_malloc.
N *
N * @param netif the netif for which to set the struct dhcp
N * @param dhcp (uninitialised) dhcp struct allocated by the application
N */
Nvoid
Ndhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
N{
N  LWIP_ASSERT("netif != NULL", netif != NULL);
X  do { if(!(netif != 0)) printf("netif != NULL"); } while(0);
N  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
X  do { if(!(dhcp != 0)) printf("dhcp != NULL"); } while(0);
N  LWIP_ASSERT("netif already has a struct dhcp set", netif->dhcp == NULL);
X  do { if(!(netif->dhcp == 0)) printf("netif already has a struct dhcp set"); } while(0);
N
N  /* clear data structure */
N  memset(dhcp, 0, sizeof(struct dhcp));
N  /* dhcp_set_state(&dhcp, DHCP_OFF); */
N  netif->dhcp = dhcp;
N}
N
N/** Removes a struct dhcp from a netif.
N *
N * ATTENTION: Only use this when not using dhcp_set_struct() to allocate the
N *            struct dhcp since the memory is passed back to the heap.
N *
N * @param netif the netif from which to remove the struct dhcp
N */
Nvoid dhcp_cleanup(struct netif *netif)
N{
N  LWIP_ASSERT("netif != NULL", netif != NULL);
X  do { if(!(netif != 0)) printf("netif != NULL"); } while(0);
N
N  if (netif->dhcp != NULL) {
X  if (netif->dhcp != 0) {
N    mem_free(netif->dhcp);
N    netif->dhcp = NULL;
X    netif->dhcp = 0;
N  }
N}
N
N/**
N * Start DHCP negotiation for a network interface.
N *
N * If no DHCP client instance was attached to this interface,
N * a new client is created first. If a DHCP client instance
N * was already present, it restarts negotiation.
N *
N * @param netif The lwIP network interface
N * @return lwIP error code
N * - ERR_OK - No error
N * - ERR_MEM - Out of memory
N */
Nerr_t
Ndhcp_start(struct netif *netif)
N{
N  struct dhcp *dhcp;
N  err_t result = ERR_OK;
X  err_t result = 0;
N
N  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
X  do { if (!((netif != 0))) { printf("netif != NULL"); return -14;;}} while(0);
N  dhcp = netif->dhcp;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
X  ;
N  /* Remove the flag that says this netif is handled by DHCP,
N     it is set when we succeeded starting. */
N  netif->flags &= ~NETIF_FLAG_DHCP;
X  netif->flags &= ~0x08U;
N
N  /* check hwtype of the netif */
N  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
X  if ((netif->flags & 0x20U) == 0) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
X    ;
N    return ERR_ARG;
X    return -14;
N  }
N
N  /* check MTU of the netif */
N  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
X  if (netif->mtu < 576) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
X    ;
N    return ERR_MEM;
X    return -1;
N  }
N
N  /* no DHCP client attached yet? */
N  if (dhcp == NULL) {
X  if (dhcp == 0) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
X    ;
N    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
N    if (dhcp == NULL) {
X    if (dhcp == 0) {
N      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
X      ;
N      return ERR_MEM;
X      return -1;
N    }
N    /* store this dhcp client in the netif */
N    netif->dhcp = dhcp;
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
X    ;
N  /* already has DHCP client attached */
N  } else {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
X    ;
N    if (dhcp->pcb != NULL) {
X    if (dhcp->pcb != 0) {
N      udp_remove(dhcp->pcb);
N    }
N    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
X    do { if(!(dhcp->p_out == 0)) printf("pbuf p_out wasn't freed"); } while(0);
N    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
X    do { if(!(dhcp->msg_in == 0)) printf("reply wasn't freed"); } while(0);
N  }
N    
N  /* clear data structure */
N  memset(dhcp, 0, sizeof(struct dhcp));
N  /* dhcp_set_state(&dhcp, DHCP_OFF); */
N  /* allocate UDP PCB */
N  dhcp->pcb = udp_new();
N  if (dhcp->pcb == NULL) {
X  if (dhcp->pcb == 0) {
N    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
X    ;
N    return ERR_MEM;
X    return -1;
N  }
N  ip_set_option(dhcp->pcb, SOF_BROADCAST);
X  ((dhcp->pcb)->so_options |= (0x20U));
N  /* set up local and remote port for the pcb */
N  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
X  udp_bind(dhcp->pcb, ((ip_addr_t *)&ip_addr_any), 68);
N  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
X  udp_connect(dhcp->pcb, ((ip_addr_t *)&ip_addr_any), 67);
N  /* set up the recv callback and argument */
N  udp_recv(dhcp->pcb, dhcp_recv, netif);
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
X  ;
N  /* (re)start the DHCP negotiation */
N  result = dhcp_discover(netif);
N  if (result != ERR_OK) {
X  if (result != 0) {
N    /* free resources allocated above */
N    dhcp_stop(netif);
N    return ERR_MEM;
X    return -1;
N  }
N  /* Set the flag that says this netif is handled by DHCP. */
N  netif->flags |= NETIF_FLAG_DHCP;
X  netif->flags |= 0x08U;
N  return result;
N}
N
N/**
N * Inform a DHCP server of our manual configuration.
N *
N * This informs DHCP servers of our fixed IP address configuration
N * by sending an INFORM message. It does not involve DHCP address
N * configuration, it is just here to be nice to the network.
N *
N * @param netif The lwIP network interface
N */
Nvoid
Ndhcp_inform(struct netif *netif)
N{
N  struct dhcp dhcp;
N  err_t result = ERR_OK;
X  err_t result = 0;
N  struct udp_pcb *pcb;
N
N  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
X  do { if (!((netif != 0))) { printf("netif != NULL"); return;;}} while(0);
N
N  memset(&dhcp, 0, sizeof(struct dhcp));
N  dhcp_set_state(&dhcp, DHCP_INFORM);
X  dhcp_set_state(&dhcp, 8);
N
N  if ((netif->dhcp != NULL) && (netif->dhcp->pcb != NULL)) {
X  if ((netif->dhcp != 0) && (netif->dhcp->pcb != 0)) {
N    /* re-use existing pcb */
N    pcb = netif->dhcp->pcb;
N  } else {
N    pcb = udp_new();
N    if (pcb == NULL) {
X    if (pcb == 0) {
N      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
X      ;
N      return;
N    }
N    dhcp.pcb = pcb;
N    ip_set_option(dhcp.pcb, SOF_BROADCAST);
X    ((dhcp . pcb)->so_options |= (0x20U));
N    udp_bind(dhcp.pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
X    udp_bind(dhcp.pcb, ((ip_addr_t *)&ip_addr_any), 68);
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
X    ;
N  }
N  /* create and initialize the DHCP message header */
N  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
X  result = dhcp_create_msg(netif, &dhcp, 8);
N  if (result == ERR_OK) {
X  if (result == 0) {
N    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
X    dhcp_option(&dhcp, 57, 2);
N    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
X    dhcp_option_short(&dhcp, (netif->mtu));
N
N    dhcp_option_trailer(&dhcp);
N
N    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
X    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - 68U + dhcp.options_out_len);
N
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
X    ;
N    udp_sendto_if(pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
X    udp_sendto_if(pcb, dhcp.p_out, ((ip_addr_t *)&ip_addr_broadcast), 67, netif);
N    dhcp_delete_msg(&dhcp);
N  } else {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
X    ;
N  }
N
N  if (dhcp.pcb != NULL) {
X  if (dhcp.pcb != 0) {
N    /* otherwise, the existing pcb was used */
N    udp_remove(dhcp.pcb);
N  }
N}
N
N/** Handle a possible change in the network configuration.
N *
N * This enters the REBOOTING state to verify that the currently bound
N * address is still valid.
N */
Nvoid
Ndhcp_network_changed(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  if (!dhcp)
N    return;
N  switch (dhcp->state) {
N  case DHCP_REBINDING:
X  case 4:
N  case DHCP_RENEWING:
X  case 5:
N  case DHCP_BOUND:
X  case 10:
N  case DHCP_REBOOTING:
X  case 3:
N    netif_set_down(netif);
N    dhcp->tries = 0;
N    dhcp_reboot(netif);
N    break;
N  case DHCP_OFF:
X  case 0:
N    /* stay off */
N    break;
N  default:
N    dhcp->tries = 0;
N#if LWIP_DHCP_AUTOIP_COOP
X#if 0
S    if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
S      autoip_stop(netif);
S      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
S    }
N#endif /* LWIP_DHCP_AUTOIP_COOP */
N    dhcp_discover(netif);
N    break;
N  }
N}
N
N#if DHCP_DOES_ARP_CHECK
X#if ((1) && (1))
N/**
N * Match an ARP reply with the offered IP address.
N *
N * @param netif the network interface on which the reply was received
N * @param addr The IP address we received a reply from
N */
Nvoid dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
N{
N  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
X  do { if (!((netif != 0))) { printf("netif != NULL"); return;;}} while(0);
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
X  ;
N  /* is a DHCP client doing an ARP check? */
N  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
X  if ((netif->dhcp != 0) && (netif->dhcp->state == 8)) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
N      ip4_addr_get_u32(addr)));
X    ;
N    /* did a host respond with the address we
N       were offered by the DHCP server? */
N    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
X    if (((addr)->addr == (&netif->dhcp->offered_ip_addr)->addr)) {
N      /* we will not accept the offered address */
N      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
N        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
X      ;
N      dhcp_decline(netif);
N    }
N  }
N}
N
N/**
N * Decline an offered lease.
N *
N * Tell the DHCP server we do not accept the offered address.
N * One reason to decline the lease is when we find out the address
N * is already in use by another host (through ARP).
N *
N * @param netif the netif under DHCP control
N */
Nstatic err_t
Ndhcp_decline(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  err_t result = ERR_OK;
X  err_t result = 0;
N  u16_t msecs;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
X  ;
N  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
X  dhcp_set_state(dhcp, 12);
N  /* create and initialize the DHCP message header */
N  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
X  result = dhcp_create_msg(netif, dhcp, 4);
N  if (result == ERR_OK) {
X  if (result == 0) {
N    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
X    dhcp_option(dhcp, 50, 4);
N    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
X    dhcp_option_long(dhcp, lwip_ntohl(((&dhcp->offered_ip_addr)->addr)));
N
N    dhcp_option_trailer(dhcp);
N    /* resize pbuf to reflect true size of options */
N    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
X    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - 68U + dhcp->options_out_len);
N
N    /* per section 4.4.4, broadcast DECLINE messages */
N    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
X    udp_sendto_if(dhcp->pcb, dhcp->p_out, ((ip_addr_t *)&ip_addr_broadcast), 67, netif);
N    dhcp_delete_msg(dhcp);
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
X    ;
N  } else {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
N      ("dhcp_decline: could not allocate DHCP request\n"));
X    ;
N  }
N  dhcp->tries++;
N  msecs = 10*1000;
N  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
X  dhcp->request_timeout = (msecs + 500 - 1) / 500;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
X  ;
N  return result;
N}
N#endif /* DHCP_DOES_ARP_CHECK */
N
N
N/**
N * Start the DHCP process, discover a DHCP server.
N *
N * @param netif the netif under DHCP control
N */
Nstatic err_t
Ndhcp_discover(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  err_t result = ERR_OK;
X  err_t result = 0;
N  u16_t msecs;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
X  ;
N  ip_addr_set_any(&dhcp->offered_ip_addr);
X  ((&dhcp->offered_ip_addr)->addr = ((u32_t)0x00000000UL));
N  dhcp_set_state(dhcp, DHCP_SELECTING);
X  dhcp_set_state(dhcp, 6);
N  /* create and initialize the DHCP message header */
N  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
X  result = dhcp_create_msg(netif, dhcp, 1);
N  if (result == ERR_OK) {
X  if (result == 0) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
X    ;
N
N    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
X    dhcp_option(dhcp, 57, 2);
N    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
X    dhcp_option_short(dhcp, (netif->mtu));
N
N    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
X    dhcp_option(dhcp, 55, 4 );
N    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
X    dhcp_option_byte(dhcp, 1);
N    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
X    dhcp_option_byte(dhcp, 3);
N    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
X    dhcp_option_byte(dhcp, 28);
N    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
X    dhcp_option_byte(dhcp, 6);
N
N    dhcp_option_trailer(dhcp);
N
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
X    ;
N    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
X    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - 68U + dhcp->options_out_len);
N
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
X    ;
N    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
X    udp_sendto_if(dhcp->pcb, dhcp->p_out, ((ip_addr_t *)&ip_addr_broadcast), 67, netif);
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
X    ;
N    dhcp_delete_msg(dhcp);
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
X    ;
N  } else {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
X    ;
N  }
N  dhcp->tries++;
N#if LWIP_DHCP_AUTOIP_COOP
X#if 0
S  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
S    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
S    autoip_start(netif);
S  }
N#endif /* LWIP_DHCP_AUTOIP_COOP */
N  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
N  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
X  dhcp->request_timeout = (msecs + 500 - 1) / 500;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
X  ;
N  return result;
N}
N
N
N/**
N * Bind the interface to the offered IP address.
N *
N * @param netif network interface to bind to the offered address
N */
Nstatic void
Ndhcp_bind(struct netif *netif)
N{
N  u32_t timeout;
N  struct dhcp *dhcp;
N  ip_addr_t sn_mask, gw_addr;
N  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
X  do { if (!((netif != 0))) { printf("dhcp_bind: netif != NULL"); return;;}} while(0);
N  dhcp = netif->dhcp;
N  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
X  do { if (!((dhcp != 0))) { printf("dhcp_bind: dhcp != NULL"); return;;}} while(0);
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
X  ;
N
N  /* temporary DHCP lease? */
N  if (dhcp->offered_t1_renew != 0xffffffffUL) {
N    /* set renewal period timer */
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
X    ;
N    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
X    timeout = (dhcp->offered_t1_renew + 60 / 2) / 60;
N    if(timeout > 0xffff) {
N      timeout = 0xffff;
N    }
N    dhcp->t1_timeout = (u16_t)timeout;
N    if (dhcp->t1_timeout == 0) {
N      dhcp->t1_timeout = 1;
N    }
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
X    ;
N  }
N  /* set renewal period timer */
N  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
X    ;
N    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
X    timeout = (dhcp->offered_t2_rebind + 60 / 2) / 60;
N    if(timeout > 0xffff) {
N      timeout = 0xffff;
N    }
N    dhcp->t2_timeout = (u16_t)timeout;
N    if (dhcp->t2_timeout == 0) {
N      dhcp->t2_timeout = 1;
N    }
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
X    ;
N  }
N
N  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
N  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
N    dhcp->t1_timeout = 0;
N  }
N
N  if (dhcp->subnet_mask_given) {
N    /* copy offered network mask */
N    ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
X    ((sn_mask). addr = (dhcp->offered_sn_mask). addr);
N  } else {
N    /* subnet mask not given, choose a safe subnet mask given the network class */
N    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
X    u8_t first_octet = (((u8_t*)(&dhcp->offered_ip_addr))[0]);
N    if (first_octet <= 127) {
N      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
X      ((&sn_mask)->addr = (((((0xff000000UL) & 0xff) << 24) | (((0xff000000UL) & 0xff00) << 8) | (((0xff000000UL) & 0xff0000UL) >> 8) | (((0xff000000UL) & 0xff000000UL) >> 24))));
N    } else if (first_octet >= 192) {
N      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
X      ((&sn_mask)->addr = (((((0xffffff00UL) & 0xff) << 24) | (((0xffffff00UL) & 0xff00) << 8) | (((0xffffff00UL) & 0xff0000UL) >> 8) | (((0xffffff00UL) & 0xff000000UL) >> 24))));
N    } else {
N      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
X      ((&sn_mask)->addr = (((((0xffff0000UL) & 0xff) << 24) | (((0xffff0000UL) & 0xff00) << 8) | (((0xffff0000UL) & 0xff0000UL) >> 8) | (((0xffff0000UL) & 0xff000000UL) >> 24))));
N    }
N  }
N
N  ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
X  ((gw_addr). addr = (dhcp->offered_gw_addr). addr);
N  /* gateway address not given? */
N  if (ip_addr_isany(&gw_addr)) {
X  if (((&gw_addr) == 0 || (&gw_addr)->addr == ((u32_t)0x00000000UL))) {
N    /* copy network address */
N    ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
X    ((&gw_addr)->addr = ((&dhcp->offered_ip_addr)->addr) & ((&sn_mask)->addr));
N    /* use first host address on network as gateway */
N    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
X    ((&gw_addr)->addr = (((&gw_addr)->addr) | ((((0x00000001UL) & 0xff) << 24) | (((0x00000001UL) & 0xff00) << 8) | (((0x00000001UL) & 0xff0000UL) >> 8) | (((0x00000001UL) & 0xff000000UL) >> 24))));
N  }
N
N#if LWIP_DHCP_AUTOIP_COOP
X#if 0
S  if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
S    autoip_stop(netif);
S    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
S  }
N#endif /* LWIP_DHCP_AUTOIP_COOP */
N
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
N    ip4_addr_get_u32(&dhcp->offered_ip_addr)));
X  ;
N  netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
N    ip4_addr_get_u32(&sn_mask)));
X  ;
N  netif_set_netmask(netif, &sn_mask);
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
N    ip4_addr_get_u32(&gw_addr)));
X  ;
N  netif_set_gw(netif, &gw_addr);
N  /* bring the interface up */
N  netif_set_up(netif);
N  /* netif is now bound to DHCP leased address */
N  dhcp_set_state(dhcp, DHCP_BOUND);
X  dhcp_set_state(dhcp, 10);
N}
N
N/**
N * Renew an existing DHCP lease at the involved DHCP server.
N *
N * @param netif network interface which must renew its lease
N */
Nerr_t
Ndhcp_renew(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  err_t result;
N  u16_t msecs;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
X  ;
N  dhcp_set_state(dhcp, DHCP_RENEWING);
X  dhcp_set_state(dhcp, 5);
N
N  /* create and initialize the DHCP message header */
N  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
X  result = dhcp_create_msg(netif, dhcp, 3);
N  if (result == ERR_OK) {
X  if (result == 0) {
N    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
X    dhcp_option(dhcp, 57, 2);
N    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
X    dhcp_option_short(dhcp, (netif->mtu));
N
N#if 0
S    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
S    dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
N#endif
N
N#if 0
S    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
S    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
N#endif
N
N#if LWIP_NETIF_HOSTNAME
X#if 0
S    dhcp_option_hostname(dhcp, netif);
N#endif /* LWIP_NETIF_HOSTNAME */
N
N    /* append DHCP message trailer */
N    dhcp_option_trailer(dhcp);
N
N    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
X    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - 68U + dhcp->options_out_len);
N
N    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
X    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, 67, netif);
N    dhcp_delete_msg(dhcp);
N
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
X    ;
N  } else {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
X    ;
N  }
N  dhcp->tries++;
N  /* back-off on retries, but to a maximum of 20 seconds */
N  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
N  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
X  dhcp->request_timeout = (msecs + 500 - 1) / 500;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
X  ;
N  return result;
N}
N
N/**
N * Rebind with a DHCP server for an existing DHCP lease.
N *
N * @param netif network interface which must rebind with a DHCP server
N */
Nstatic err_t
Ndhcp_rebind(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  err_t result;
N  u16_t msecs;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
X  ;
N  dhcp_set_state(dhcp, DHCP_REBINDING);
X  dhcp_set_state(dhcp, 4);
N
N  /* create and initialize the DHCP message header */
N  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
X  result = dhcp_create_msg(netif, dhcp, 3);
N  if (result == ERR_OK) {
X  if (result == 0) {
N    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
X    dhcp_option(dhcp, 57, 2);
N    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
X    dhcp_option_short(dhcp, (netif->mtu));
N
N#if LWIP_NETIF_HOSTNAME
X#if 0
S    dhcp_option_hostname(dhcp, netif);
N#endif /* LWIP_NETIF_HOSTNAME */
N
N#if 0
S    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
S    dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
S
S    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
S    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
N#endif
N
N    dhcp_option_trailer(dhcp);
N
N    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
X    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - 68U + dhcp->options_out_len);
N
N    /* broadcast to server */
N    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
X    udp_sendto_if(dhcp->pcb, dhcp->p_out, ((ip_addr_t *)&ip_addr_broadcast), 67, netif);
N    dhcp_delete_msg(dhcp);
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
X    ;
N  } else {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
X    ;
N  }
N  dhcp->tries++;
N  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
N  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
X  dhcp->request_timeout = (msecs + 500 - 1) / 500;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
X  ;
N  return result;
N}
N
N/**
N * Enter REBOOTING state to verify an existing lease
N *
N * @param netif network interface which must reboot
N */
Nstatic err_t
Ndhcp_reboot(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  err_t result;
N  u16_t msecs;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
X  ;
N  dhcp_set_state(dhcp, DHCP_REBOOTING);
X  dhcp_set_state(dhcp, 3);
N
N  /* create and initialize the DHCP message header */
N  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
X  result = dhcp_create_msg(netif, dhcp, 3);
N  if (result == ERR_OK) {
X  if (result == 0) {
N    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
X    dhcp_option(dhcp, 57, 2);
N    dhcp_option_short(dhcp, 576);
N
N    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
X    dhcp_option(dhcp, 50, 4);
N    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
X    dhcp_option_long(dhcp, lwip_ntohl(((&dhcp->offered_ip_addr)->addr)));
N
N    dhcp_option_trailer(dhcp);
N
N    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
X    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - 68U + dhcp->options_out_len);
N
N    /* broadcast to server */
N    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
X    udp_sendto_if(dhcp->pcb, dhcp->p_out, ((ip_addr_t *)&ip_addr_broadcast), 67, netif);
N    dhcp_delete_msg(dhcp);
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
X    ;
N  } else {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
X    ;
N  }
N  dhcp->tries++;
N  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
N  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
X  dhcp->request_timeout = (msecs + 500 - 1) / 500;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
X  ;
N  return result;
N}
N
N
N/**
N * Release a DHCP lease.
N *
N * @param netif network interface which must release its lease
N */
Nerr_t
Ndhcp_release(struct netif *netif)
N{
N  struct dhcp *dhcp = netif->dhcp;
N  err_t result;
N  u16_t msecs;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
X  ;
N
N  /* idle DHCP client */
N  dhcp_set_state(dhcp, DHCP_OFF);
X  dhcp_set_state(dhcp, 0);
N  /* clean old DHCP offer */
N  ip_addr_set_zero(&dhcp->server_ip_addr);
X  ((&dhcp->server_ip_addr)->addr = 0);
N  ip_addr_set_zero(&dhcp->offered_ip_addr);
X  ((&dhcp->offered_ip_addr)->addr = 0);
N  ip_addr_set_zero(&dhcp->offered_sn_mask);
X  ((&dhcp->offered_sn_mask)->addr = 0);
N  ip_addr_set_zero(&dhcp->offered_gw_addr);
X  ((&dhcp->offered_gw_addr)->addr = 0);
N#if LWIP_DHCP_BOOTP_FILE
S  ip_addr_set_zero(&dhcp->offered_si_addr);
N#endif /* LWIP_DHCP_BOOTP_FILE */
N  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
N  
N  /* create and initialize the DHCP message header */
N  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
X  result = dhcp_create_msg(netif, dhcp, 7);
N  if (result == ERR_OK) {
X  if (result == 0) {
N    dhcp_option_trailer(dhcp);
N
N    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
X    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - 68U + dhcp->options_out_len);
N
N    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
X    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, 67, netif);
N    dhcp_delete_msg(dhcp);
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
X    ;
N  } else {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
X    ;
N  }
N  dhcp->tries++;
N  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
N  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
X  dhcp->request_timeout = (msecs + 500 - 1) / 500;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
X  ;
N  /* bring the interface down */
N  netif_set_down(netif);
N  /* remove IP address from interface */
N  netif_set_ipaddr(netif, IP_ADDR_ANY);
X  netif_set_ipaddr(netif, ((ip_addr_t *)&ip_addr_any));
N  netif_set_gw(netif, IP_ADDR_ANY);
X  netif_set_gw(netif, ((ip_addr_t *)&ip_addr_any));
N  netif_set_netmask(netif, IP_ADDR_ANY);
X  netif_set_netmask(netif, ((ip_addr_t *)&ip_addr_any));
N  
N  return result;
N}
N
N/**
N * Remove the DHCP client from the interface.
N *
N * @param netif The network interface to stop DHCP on
N */
Nvoid
Ndhcp_stop(struct netif *netif)
N{
N  struct dhcp *dhcp;
N  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
X  do { if (!((netif != 0))) { printf("dhcp_stop: netif != NULL"); return;;}} while(0);
N  dhcp = netif->dhcp;
N  /* Remove the flag that says this netif is handled by DHCP. */
N  netif->flags &= ~NETIF_FLAG_DHCP;
X  netif->flags &= ~0x08U;
N
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
X  ;
N  /* netif is DHCP configured? */
N  if (dhcp != NULL) {
X  if (dhcp != 0) {
N#if LWIP_DHCP_AUTOIP_COOP
X#if 0
S    if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
S      autoip_stop(netif);
S      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
S    }
N#endif /* LWIP_DHCP_AUTOIP_COOP */
N
N    if (dhcp->pcb != NULL) {
X    if (dhcp->pcb != 0) {
N      udp_remove(dhcp->pcb);
N      dhcp->pcb = NULL;
X      dhcp->pcb = 0;
N    }
N    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
X    do { if(!(dhcp->msg_in == 0)) printf("reply wasn't freed"); } while(0);
N    dhcp_set_state(dhcp, DHCP_OFF);
X    dhcp_set_state(dhcp, 0);
N  }
N}
N
N/*
N * Set the DHCP state of a DHCP client.
N *
N * If the state changed, reset the number of tries.
N */
Nstatic void
Ndhcp_set_state(struct dhcp *dhcp, u8_t new_state)
N{
N  if (new_state != dhcp->state) {
N    dhcp->state = new_state;
N    dhcp->tries = 0;
N    dhcp->request_timeout = 0;
N  }
N}
N
N/*
N * Concatenate an option type and length field to the outgoing
N * DHCP message.
N *
N */
Nstatic void
Ndhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
N{
N  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
X  do { if(!(dhcp->options_out_len + 2U + option_len <= 68U)) printf("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN"); } while(0);
N  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
N  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
N}
N/*
N * Concatenate a single byte to the outgoing DHCP message.
N *
N */
Nstatic void
Ndhcp_option_byte(struct dhcp *dhcp, u8_t value)
N{
N  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
X  do { if(!(dhcp->options_out_len < 68U)) printf("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN"); } while(0);
N  dhcp->msg_out->options[dhcp->options_out_len++] = value;
N}
N
Nstatic void
Ndhcp_option_short(struct dhcp *dhcp, u16_t value)
N{
N  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
X  do { if(!(dhcp->options_out_len + 2U <= 68U)) printf("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN"); } while(0);
N  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
N  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
N}
N
Nstatic void
Ndhcp_option_long(struct dhcp *dhcp, u32_t value)
N{
N  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
X  do { if(!(dhcp->options_out_len + 4U <= 68U)) printf("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN"); } while(0);
N  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
N  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
N  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
N  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
N}
N
N#if LWIP_NETIF_HOSTNAME
X#if 0
Sstatic void
Sdhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
S{
S  if (netif->hostname != NULL) {
S    size_t namelen = strlen(netif->hostname);
S    if (namelen > 0) {
S      u8_t len;
S      const char *p = netif->hostname;
S      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
S         and 1 byte for trailer) */
S      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
S      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
S      len = LWIP_MIN(namelen, available);
S      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, len);
S      while (len--) {
S        dhcp_option_byte(dhcp, *p++);
S      }
S    }
S  }
S}
N#endif /* LWIP_NETIF_HOSTNAME */
N
N/**
N * Extract the DHCP message and the DHCP options.
N *
N * Extract the DHCP message and the DHCP options, each into a contiguous
N * piece of memory. As a DHCP message is variable sized by its options,
N * and also allows overriding some fields for options, the easy approach
N * is to first unfold the options into a conitguous piece of memory, and
N * use that further on.
N *
N */
Nstatic err_t
Ndhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
N{
N  u8_t *options;
N  u16_t offset;
N  u16_t offset_max;
N  u16_t options_idx;
N  u16_t options_idx_max;
N  struct pbuf *q;
N  int parse_file_as_options = 0;
N  int parse_sname_as_options = 0;
N
N  /* clear received options */
N  dhcp_clear_all_options(dhcp);
X  (memset(dhcp_rx_options_given, 0, sizeof(dhcp_rx_options_given)));
N  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
N  if (p->len < DHCP_SNAME_OFS) {
X  if (p->len < 44) {
N    return ERR_BUF;
X    return -2;
N  }
N  dhcp->msg_in = (struct dhcp_msg *)p->payload;
N#if LWIP_DHCP_BOOTP_FILE
S  /* clear boot file name */
S  dhcp->boot_file_name[0] = 0;
N#endif /* LWIP_DHCP_BOOTP_FILE */
N
N  /* parse options */
N
N  /* start with options field */
N  options_idx = DHCP_OPTIONS_OFS;
X  options_idx = (236 + 4);
N  /* parse options to the end of the received packet */
N  options_idx_max = p->tot_len;
Nagain:
N  q = p;
N  while((q != NULL) && (options_idx >= q->len)) {
X  while((q != 0) && (options_idx >= q->len)) {
N    options_idx -= q->len;
N    options_idx_max -= q->len;
N    q = q->next;
N  }
N  if (q == NULL) {
X  if (q == 0) {
N    return ERR_BUF;
X    return -2;
N  }
N  offset = options_idx;
N  offset_max = options_idx_max;
N  options = (u8_t*)q->payload;
N  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
N  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
X  while((q != 0) && (options[offset] != 255) && (offset < offset_max)) {
N    u8_t op = options[offset];
N    u8_t len;
N    u8_t decode_len = 0;
N    int decode_idx = -1;
N    u16_t val_offset = offset + 2;
N    /* len byte might be in the next pbuf */
N    if (offset + 1 < q->len) {
N      len = options[offset + 1];
N    } else {
N      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
X      len = (q->next != 0 ? ((u8_t*)q->next->payload)[0] : 0);
N    }
N    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
N    decode_len = len;
N    switch(op) {
N      /* case(DHCP_OPTION_END): handled above */
N      case(DHCP_OPTION_PAD):
X      case(0):
N        /* special option: no len encoded */
N        decode_len = len = 0;
N        /* will be increased below */
N        offset--;
N        break;
N      case(DHCP_OPTION_SUBNET_MASK):
X      case(1):
N        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
X        do { if (!(len == 4)) { printf("len == 4"); return -6;;}} while(0);
N        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
X        decode_idx = 6;
N        break;
N      case(DHCP_OPTION_ROUTER):
X      case(3):
N        decode_len = 4; /* only copy the first given router */
N        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
X        do { if (!(len >= decode_len)) { printf("len >= decode_len"); return -6;;}} while(0);
N        decode_idx = DHCP_OPTION_IDX_ROUTER;
X        decode_idx = 7;
N        break;
N      case(DHCP_OPTION_DNS_SERVER):
X      case(6):
N        /* special case: there might be more than one server */
N        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
X        do { if (!(len % 4 == 0)) { printf("len % 4 == 0"); return -6;;}} while(0);
N        /* limit number of DNS servers */
N        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
X        decode_len = (((len) < (4 * 2)) ? (len) : (4 * 2));
N        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
X        do { if (!(len >= decode_len)) { printf("len >= decode_len"); return -6;;}} while(0);
N        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
X        decode_idx = 8;
N        break;
N      case(DHCP_OPTION_LEASE_TIME):
X      case(51):
N        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
X        do { if (!(len == 4)) { printf("len == 4"); return -6;;}} while(0);
N        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
X        decode_idx = 3;
N        break;
N      case(DHCP_OPTION_OVERLOAD):
X      case(52):
N        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
X        do { if (!(len == 1)) { printf("len == 1"); return -6;;}} while(0);
N        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
X        decode_idx = 0;
N        break;
N      case(DHCP_OPTION_MESSAGE_TYPE):
X      case(53):
N        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
X        do { if (!(len == 1)) { printf("len == 1"); return -6;;}} while(0);
N        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
X        decode_idx = 1;
N        break;
N      case(DHCP_OPTION_SERVER_ID):
X      case(54):
N        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
X        do { if (!(len == 4)) { printf("len == 4"); return -6;;}} while(0);
N        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
X        decode_idx = 2;
N        break;
N      case(DHCP_OPTION_T1):
X      case(58):
N        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
X        do { if (!(len == 4)) { printf("len == 4"); return -6;;}} while(0);
N        decode_idx = DHCP_OPTION_IDX_T1;
X        decode_idx = 4;
N        break;
N      case(DHCP_OPTION_T2):
X      case(59):
N        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
X        do { if (!(len == 4)) { printf("len == 4"); return -6;;}} while(0);
N        decode_idx = DHCP_OPTION_IDX_T2;
X        decode_idx = 5;
N        break;
N      default:
N        decode_len = 0;
N        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
X        ;
N        break;
N    }
N    offset += len + 2;
N    if (decode_len > 0) {
N      u32_t value = 0;
N      u16_t copy_len;
Ndecode_next:
N      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
X      do { if(!(decode_idx >= 0 && decode_idx < (8 + 2))) printf("check decode_idx"); } while(0);
N      if (!dhcp_option_given(dhcp, decode_idx)) {
X      if (!(dhcp_rx_options_given[decode_idx] != 0)) {
N        copy_len = LWIP_MIN(decode_len, 4);
X        copy_len = (((decode_len) < (4)) ? (decode_len) : (4));
N        pbuf_copy_partial(q, &value, copy_len, val_offset);
N        if (decode_len > 4) {
N          /* decode more than one u32_t */
N          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
X          do { if (!(decode_len % 4 == 0)) { printf("decode_len % 4 == 0"); return -6;;}} while(0);
N          dhcp_got_option(dhcp, decode_idx);
X          (dhcp_rx_options_given[decode_idx] = 1);
N          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
X          (dhcp_rx_options_val[decode_idx] = (lwip_htonl(value)));
N          decode_len -= 4;
N          val_offset += 4;
N          decode_idx++;
N          goto decode_next;
N        } else if (decode_len == 4) {
N          value = ntohl(value);
X          value = lwip_ntohl(value);
N        } else {
N          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
X          do { if (!(decode_len == 1)) { printf("invalid decode_len"); return -6;;}} while(0);
N          value = ((u8_t*)&value)[0];
N        }
N        dhcp_got_option(dhcp, decode_idx);
X        (dhcp_rx_options_given[decode_idx] = 1);
N        dhcp_set_option_value(dhcp, decode_idx, value);
X        (dhcp_rx_options_val[decode_idx] = (value));
N      }
N    }
N    if (offset >= q->len) {
N      offset -= q->len;
N      offset_max -= q->len;
N      if ((offset < offset_max) && offset_max) {
N        q = q->next;
N        LWIP_ASSERT("next pbuf was null", q);
X        do { if(!(q)) printf("next pbuf was null"); } while(0);
N        options = (u8_t*)q->payload;
N      } else {
N        // We've run out of bytes, probably no end marker. Don't proceed.
N        break;
N      }
N    }
N  }
N  /* is this an overloaded message? */
N  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
X  if ((dhcp_rx_options_given[0] != 0)) {
N    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
X    u32_t overload = (dhcp_rx_options_val[0]);
N    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
X    (dhcp_rx_options_given[0] = 0);
N    if (overload == DHCP_OVERLOAD_FILE) {
X    if (overload == 1) {
N      parse_file_as_options = 1;
N      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
X      ;
N    } else if (overload == DHCP_OVERLOAD_SNAME) {
X    } else if (overload == 2) {
N      parse_sname_as_options = 1;
N      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
X      ;
N    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
X    } else if (overload == 3) {
N      parse_sname_as_options = 1;
N      parse_file_as_options = 1;
N      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
X      ;
N    } else {
N      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
X      ;
N    }
N#if LWIP_DHCP_BOOTP_FILE
S    if (!parse_file_as_options) {
S      /* only do this for ACK messages */
S      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) &&
S        (dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) == DHCP_ACK))
S      /* copy bootp file name, don't care for sname (server hostname) */
S      pbuf_copy_partial(p, dhcp->boot_file_name, DHCP_FILE_LEN-1, DHCP_FILE_OFS);
S      /* make sure the string is really NULL-terminated */
S      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
S    }
N#endif /* LWIP_DHCP_BOOTP_FILE */
N  }
N  if (parse_file_as_options) {
N    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
N    parse_file_as_options = 0;
N    options_idx = DHCP_FILE_OFS;
X    options_idx = 108;
N    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
X    options_idx_max = 108 + 128U;
N    goto again;
N  } else if (parse_sname_as_options) {
N    parse_sname_as_options = 0;
N    options_idx = DHCP_SNAME_OFS;
X    options_idx = 44;
N    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
X    options_idx_max = 44 + 64U;
N    goto again;
N  }
N  return ERR_OK;
X  return 0;
N}
N
N/**
N * If an incoming DHCP message is in response to us, then trigger the state machine
N */
Nstatic void
Ndhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
N{
N  struct netif *netif = (struct netif *)arg;
N  struct dhcp *dhcp = netif->dhcp;
N  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
N  u8_t msg_type;
N  u8_t i;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void*)p,
N    ip4_addr1_16(addr), ip4_addr2_16(addr), ip4_addr3_16(addr), ip4_addr4_16(addr), port));
X  ;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
X  ;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
X  ;
N  /* prevent warnings about unused arguments */
N  LWIP_UNUSED_ARG(pcb);
X  (void)pcb;
N  LWIP_UNUSED_ARG(addr);
X  (void)addr;
N  LWIP_UNUSED_ARG(port);
X  (void)port;
N
N  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
X  do { if(!(dhcp->msg_in == 0)) printf("reply wasn't freed"); } while(0);
N
N  if (p->len < DHCP_MIN_REPLY_LEN) {
X  if (p->len < 44) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
X    ;
N    goto free_pbuf_and_return;
N  }
N
N  if (reply_msg->op != DHCP_BOOTREPLY) {
X  if (reply_msg->op != 2) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
X    ;
N    goto free_pbuf_and_return;
N  }
N  /* iterate through hardware address and match against DHCP message */
N  for (i = 0; i < netif->hwaddr_len; i++) {
N    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
N      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
N        ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
N        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
X      ;
N      goto free_pbuf_and_return;
N    }
N  }
N  /* match transaction ID against what we expected */
N  if (ntohl(reply_msg->xid) != dhcp->xid) {
X  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
N      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
X    ;
N    goto free_pbuf_and_return;
N  }
N  /* option fields could be unfold? */
N  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
X  if (dhcp_parse_reply(dhcp, p) != 0) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
N      ("problem unfolding DHCP message - too short on memory?\n"));
X    ;
N    goto free_pbuf_and_return;
N  }
N
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
X  ;
N  /* obtain pointer to DHCP message type */
N  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
X  if (!(dhcp_rx_options_given[1] != 0)) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
X    ;
N    goto free_pbuf_and_return;
N  }
N
N  /* read DHCP message type */
N  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
X  msg_type = (u8_t)(dhcp_rx_options_val[1]);
N  /* message type is DHCP ACK? */
N  if (msg_type == DHCP_ACK) {
X  if (msg_type == 5) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
X    ;
N    /* in requesting state? */
N    if (dhcp->state == DHCP_REQUESTING) {
X    if (dhcp->state == 1) {
N      dhcp_handle_ack(netif);
N#if DHCP_DOES_ARP_CHECK
X#if ((1) && (1))
N      /* check if the acknowledged lease address is already in use */
N      dhcp_check(netif);
N#else
S      /* bind interface to the acknowledged lease address */
S      dhcp_bind(netif);
N#endif
N    }
N    /* already bound to the given lease address? */
N    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
X    else if ((dhcp->state == 3) || (dhcp->state == 4) || (dhcp->state == 5)) {
N      dhcp_bind(netif);
N    }
N  }
N  /* received a DHCP_NAK in appropriate state? */
N  else if ((msg_type == DHCP_NAK) &&
X  else if ((msg_type == 6) &&
N    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
X    ((dhcp->state == 3) || (dhcp->state == 1) ||
N     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
X     (dhcp->state == 4) || (dhcp->state == 5  ))) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
X    ;
N    dhcp_handle_nak(netif);
N  }
N  /* received a DHCP_OFFER in DHCP_SELECTING state? */
N  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
X  else if ((msg_type == 2) && (dhcp->state == 6)) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
X    ;
N    dhcp->request_timeout = 0;
N    /* remember offered lease */
N    dhcp_handle_offer(netif);
N  }
Nfree_pbuf_and_return:
N  dhcp->msg_in = NULL;
X  dhcp->msg_in = 0;
N  pbuf_free(p);
N}
N
N/**
N * Create a DHCP request, fill in common headers
N *
N * @param netif the netif under DHCP control
N * @param dhcp dhcp control struct
N * @param message_type message type of the request
N */
Nstatic err_t
Ndhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
N{
N  u16_t i;
N#ifndef DHCP_GLOBAL_XID
N  /** default global transaction identifier starting value (easy to match
N   *  with a packet analyser). We simply increment for each new request.
N   *  Predefine DHCP_GLOBAL_XID to a better value or a function call to generate one
N   *  at runtime, any supporting function prototypes can be defined in DHCP_GLOBAL_XID_HEADER */
N#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
X#if 1 && 0L
S  static u32_t xid;
N#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
N  static u32_t xid = 0xABCD0000;
N#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
N#else
S  if (!xid_initialised) {
S    xid = DHCP_GLOBAL_XID;
S    xid_initialised = !xid_initialised;
S  }
N#endif
N  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
X  do { if (!((netif != 0))) { printf("dhcp_create_msg: netif != NULL"); return -14;;}} while(0);
N  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
X  do { if (!((dhcp != 0))) { printf("dhcp_create_msg: dhcp != NULL"); return -6;;}} while(0);
N  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
X  do { if(!(dhcp->p_out == 0)) printf("dhcp_create_msg: dhcp->p_out == NULL"); } while(0);
N  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
X  do { if(!(dhcp->msg_out == 0)) printf("dhcp_create_msg: dhcp->msg_out == NULL"); } while(0);
N  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
N  if (dhcp->p_out == NULL) {
X  if (dhcp->p_out == 0) {
N    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
N      ("dhcp_create_msg(): could not allocate pbuf\n"));
X    ;
N    return ERR_MEM;
X    return -1;
N  }
N  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
N           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));
X  do { if(!((dhcp->p_out->len >= sizeof(struct dhcp_msg)))) printf("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg"); } while(0);
N
N  /* reuse transaction identifier in retransmissions */
N  if (dhcp->tries == 0) {
N#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
X#if 1 && 0L
S    xid = LWIP_RAND();
N#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
N    xid++;
N#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
N  }
N  dhcp->xid = xid;
N  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
N              ("transaction id xid(%"X32_F")\n", xid));
X  ;
N
N  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
N
N  dhcp->msg_out->op = DHCP_BOOTREQUEST;
X  dhcp->msg_out->op = 1;
N  /* TODO: make link layer independent */
N  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
X  dhcp->msg_out->htype = 1;
N  dhcp->msg_out->hlen = netif->hwaddr_len;
N  dhcp->msg_out->hops = 0;
N  dhcp->msg_out->xid = htonl(dhcp->xid);
X  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
N  dhcp->msg_out->secs = 0;
N  /* we don't need the broadcast flag since we can receive unicast traffic
N     before being fully configured! */
N  dhcp->msg_out->flags = 0;
N  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
X  ((&dhcp->msg_out->ciaddr)->addr = 0);
N  /* set ciaddr to netif->ip_addr based on message_type and state */
N  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
X  if ((message_type == 8) || (message_type == 4) ||
N      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
X      ((message_type == 3) &&  
N       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
X       ((dhcp->state==5) || dhcp->state==4))) {
N    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
X    ((dhcp->msg_out->ciaddr). addr = (netif->ip_addr). addr);
N  }
N  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
X  ((&dhcp->msg_out->yiaddr)->addr = 0);
N  ip_addr_set_zero(&dhcp->msg_out->siaddr);
X  ((&dhcp->msg_out->siaddr)->addr = 0);
N  ip_addr_set_zero(&dhcp->msg_out->giaddr);
X  ((&dhcp->msg_out->giaddr)->addr = 0);
N  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
X  for (i = 0; i < 16U; i++) {
N    /* copy netif hardware address, pad with zeroes */
N    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
N  }
N  for (i = 0; i < DHCP_SNAME_LEN; i++) {
X  for (i = 0; i < 64U; i++) {
N    dhcp->msg_out->sname[i] = 0;
N  }
N  for (i = 0; i < DHCP_FILE_LEN; i++) {
X  for (i = 0; i < 128U; i++) {
N    dhcp->msg_out->file[i] = 0;
N  }
N  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
X  dhcp->msg_out->cookie = ((((0x63825363UL) & 0xff) << 24) | (((0x63825363UL) & 0xff00) << 8) | (((0x63825363UL) & 0xff0000UL) >> 8) | (((0x63825363UL) & 0xff000000UL) >> 24));
N  dhcp->options_out_len = 0;
N  /* fill options field with an incrementing array (for debugging purposes) */
N  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
X  for (i = 0; i < 68U; i++) {
N    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
N  }
N  /* Add option MESSAGE_TYPE */
N  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
X  dhcp_option(dhcp, 53, 1);
N  dhcp_option_byte(dhcp, message_type);
N  return ERR_OK;
X  return 0;
N}
N
N/**
N * Free previously allocated memory used to send a DHCP request.
N *
N * @param dhcp the dhcp struct to free the request from
N */
Nstatic void
Ndhcp_delete_msg(struct dhcp *dhcp)
N{
N  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
X  do { if (!((dhcp != 0))) { printf("dhcp_delete_msg: dhcp != NULL"); return;;}} while(0);
N  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
X  do { if(!(dhcp->p_out != 0)) printf("dhcp_delete_msg: dhcp->p_out != NULL"); } while(0);
N  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
X  do { if(!(dhcp->msg_out != 0)) printf("dhcp_delete_msg: dhcp->msg_out != NULL"); } while(0);
N  if (dhcp->p_out != NULL) {
X  if (dhcp->p_out != 0) {
N    pbuf_free(dhcp->p_out);
N  }
N  dhcp->p_out = NULL;
X  dhcp->p_out = 0;
N  dhcp->msg_out = NULL;
X  dhcp->msg_out = 0;
N}
N
N/**
N * Add a DHCP message trailer
N *
N * Adds the END option to the DHCP message, and if
N * necessary, up to three padding bytes.
N *
N * @param dhcp DHCP state structure
N */
Nstatic void
Ndhcp_option_trailer(struct dhcp *dhcp)
N{
N  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
X  do { if (!((dhcp != 0))) { printf("dhcp_option_trailer: dhcp != NULL"); return;;}} while(0);
N  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
X  do { if(!(dhcp->msg_out != 0)) printf("dhcp_option_trailer: dhcp->msg_out != NULL\n"); } while(0);
N  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
X  do { if(!(dhcp->options_out_len < 68U)) printf("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n"); } while(0);
N  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
X  dhcp->msg_out->options[dhcp->options_out_len++] = 255;
N  /* packet is too small, or not 4 byte aligned? */
N  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
X  while (((dhcp->options_out_len < 68U) || (dhcp->options_out_len & 3)) &&
N         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
X         (dhcp->options_out_len < 68U)) {
N    /* add a fill/padding byte */
N    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
N  }
N}
N
N#endif /* LWIP_DHCP */

; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\tcp_client_shortconnect.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\tcp_client_shortconnect.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\ZR60_v1.0_freeRTOS -I..\..\Lwip\App -I..\..\Lwip\Bsp -I..\..\Lwip\Bsp\LAN8742A -I..\..\Lwip\lwip-1.4.1 -I..\..\Lwip\lwip-1.4.1\port -I..\..\Lwip\lwip-1.4.1\port\arch -I..\..\Lwip\lwip-1.4.1\port\Standalone -I..\..\Lwip\lwip-1.4.1\src\include -I..\..\Lwip\lwip-1.4.1\src\include\ipv4 -I..\..\Lwip\lwip-1.4.1\src\include\lwip -I..\..\Lwip\lwip-1.4.1\src\include\netif -I..\..\Ecal\BtnFltr -I..\..\Ecal\UartComn -I..\..\Ecal\MemIf -I..\..\APP -I..\..\APP\BlackListMng -I..\..\APP\SeverNewsPush -I..\..\APP\NewsPull -I..\..\Ecal -I..\..\Ecal\JsonIf -I..\..\Ecal\Mcu_Init -I..\..\Service -I..\..\Complex -I..\..\Complex\FATFS -I..\..\FreeRTOS\Source\include -I..\..\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\FreeRTOS -I.\RTE\_ZR60 -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.12.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=..\..\output\tcp_client_shortconnect.crf ..\..\Lwip\App\tcp_client_ShortConnect.c]
                          THUMB

                          AREA ||i.Gettcp_shortCnntTxSt||, CODE, READONLY, ALIGN=2

                  Gettcp_shortCnntTxSt PROC
;;;853    
;;;854    u8_t Gettcp_shortCnntTxSt(void)
000000  4801              LDR      r0,|L1.8|
;;;855    {
;;;856    	return Setcp_client_u_TxBusyFlg;
000002  7840              LDRB     r0,[r0,#1]  ; Setcp_client_u_TxBusyFlg
;;;857    }
000004  4770              BX       lr
;;;858    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      ||.data||

                          AREA ||i.tcp_ShortConnectErr||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tcp_ShortConnectErr PROC
;;;590    */
;;;591    static void tcp_ShortConnectErr(void *arg,err_t err)
000000  b570              PUSH     {r4-r6,lr}
;;;592    {  
000002  460e              MOV      r6,r1
;;;593    	USART_PRINTF_S("短连接err处理");
000004  a11b              ADR      r1,|L2.116|
000006  a01f              ADR      r0,|L2.132|
000008  f7fffffe          BL       __2printf
00000c  2400              MOVS     r4,#0
;;;594        switch(err)  
;;;595        {   
;;;596            case ERR_MEM:                                            /* Out of memory error.     */  
;;;597                USART_PRINTF_S("\r\n ERR_MEM   \r\n");  
;;;598            break;    
;;;599            case ERR_BUF:                                            /* Buffer error.            */  
;;;600                USART_PRINTF_S("\r\n ERR_BUF   \r\n");  
;;;601            break;  
;;;602            case  ERR_TIMEOUT:                                       /* Timeout.                 */  
;;;603                USART_PRINTF_S("\r\n ERR_TIMEOUT   \r\n");  
;;;604            break;  
;;;605            case ERR_RTE:                                            /* Routing problem.         */        
;;;606    			USART_PRINTF_S("\r\n ERR_RTE   \r\n");  
;;;607            break;  
;;;608    		case ERR_ISCONN:                                          /* Already connected.       */  
;;;609    			USART_PRINTF_S("\r\n ERR_ISCONN   \r\n");  
;;;610            break;  
;;;611            case ERR_ABRT:                                           /* Connection aborted.      */  
;;;612                USART_PRINTF_S("\r\n ERR_ABRT   \r\n");  
;;;613    			echoclient_pcb = NULL;
00000e  4d1e              LDR      r5,|L2.136|
000010  360f              ADDS     r6,r6,#0xf
000012  2e0f              CMP      r6,#0xf               ;594
000014  d21e              BCS      |L2.84|
000016  e8dff006          TBB      [pc,r6]               ;594
00001a  2420              DCB      0x24,0x20
00001c  16181412          DCB      0x16,0x18,0x14,0x12
000020  10221d1e          DCB      0x10,0x22,0x1d,0x1e
000024  260e0c0a          DCB      0x26,0x0e,0x0c,0x0a
000028  0800              DCB      0x08,0x00
00002a  a118              ADR      r1,|L2.140|
00002c  e01c              B        |L2.104|
00002e  a11b              ADR      r1,|L2.156|
000030  e01a              B        |L2.104|
000032  a11e              ADR      r1,|L2.172|
000034  e018              B        |L2.104|
000036  a122              ADR      r1,|L2.192|
000038  e016              B        |L2.104|
00003a  a125              ADR      r1,|L2.208|
00003c  e014              B        |L2.104|
00003e  a129              ADR      r1,|L2.228|
;;;614            break;  
000040  e004              B        |L2.76|
;;;615            case ERR_RST:                                            /* Connection reset.        */       
;;;616                USART_PRINTF_S("\r\n ERR_RST   \r\n");  
000042  a12d              ADR      r1,|L2.248|
;;;617    			echoclient_pcb = NULL;
;;;618            break;  
000044  e002              B        |L2.76|
;;;619            case ERR_CONN:                                           /* Not connected.           */  
;;;620    			USART_PRINTF_S("\r\n ERR_CONN   \r\n");  
000046  a130              ADR      r1,|L2.264|
;;;621                break;  
000048  e00e              B        |L2.104|
;;;622            case ERR_CLSD:                                           /* Connection closed.       */  
;;;623                USART_PRINTF_S("\r\n ERR_CLSD   \r\n");  
00004a  a134              ADR      r1,|L2.284|
                  |L2.76|
00004c  a00d              ADR      r0,|L2.132|
00004e  f7fffffe          BL       __2printf
;;;624    			echoclient_pcb = NULL;
000052  612c              STR      r4,[r5,#0x10]  ; echoclient_pcb
                  |L2.84|
;;;625            break;  
;;;626            case ERR_VAL:                                            /* Illegal value.           */  
;;;627    			USART_PRINTF_S("\r\n ERR_VAL   \r\n");  
;;;628    			return;  
;;;629            case ERR_ARG:                                            /* Illegal argument.        */  
;;;630                USART_PRINTF_S("\r\n ERR_ARG   \r\n");  
;;;631    			return;  
;;;632            case ERR_USE:                                            /* Address in use.          */  
;;;633    			USART_PRINTF_S("\r\n ERR_USE   \r\n");  
;;;634    			return;   
;;;635            case ERR_IF:                                             /* Low-level netif error    */  
;;;636                USART_PRINTF_S("\r\n ERR_IF   \r\n");  
;;;637            break;  
;;;638            case ERR_INPROGRESS:                                     /* Operation in progress    */  
;;;639                USART_PRINTF_S("\r\n ERR_INPROGRESS   \r\n");  
;;;640            break;  
;;;641    		default:
;;;642    		break;
;;;643        }  
;;;644    }  
000054  bd70              POP      {r4-r6,pc}
000056  a136              ADR      r1,|L2.304|
000058  e006              B        |L2.104|
00005a  a139              ADR      r1,|L2.320|
00005c  e004              B        |L2.104|
00005e  a13c              ADR      r1,|L2.336|
000060  e002              B        |L2.104|
000062  a13f              ADR      r1,|L2.352|
000064  e000              B        |L2.104|
000066  a142              ADR      r1,|L2.368|
                  |L2.104|
000068  e8bd4070          POP      {r4-r6,lr}            ;639
00006c  a005              ADR      r0,|L2.132|
00006e  f7ffbffe          B.W      __2printf
;;;645    
                          ENDP

000072  0000              DCW      0x0000
                  |L2.116|
000074  b6ccc1ac          DCB      182,204,193,172,189,211,"err",180,166,192,237,0
000078  bdd36572
00007c  72b4a6c0
000080  ed00    
000082  00                DCB      0
000083  00                DCB      0
                  |L2.132|
000084  25730a00          DCB      "%s\n",0
                  |L2.136|
                          DCD      ||.data||
                  |L2.140|
00008c  0d0a2045          DCB      "\r\n ERR_MEM   \r\n",0
000090  52525f4d
000094  454d2020
000098  200d0a00
                  |L2.156|
00009c  0d0a2045          DCB      "\r\n ERR_BUF   \r\n",0
0000a0  52525f42
0000a4  55462020
0000a8  200d0a00
                  |L2.172|
0000ac  0d0a2045          DCB      "\r\n ERR_TIMEOUT   \r\n",0
0000b0  52525f54
0000b4  494d454f
0000b8  55542020
0000bc  200d0a00
                  |L2.192|
0000c0  0d0a2045          DCB      "\r\n ERR_RTE   \r\n",0
0000c4  52525f52
0000c8  54452020
0000cc  200d0a00
                  |L2.208|
0000d0  0d0a2045          DCB      "\r\n ERR_ISCONN   \r\n",0
0000d4  52525f49
0000d8  53434f4e
0000dc  4e202020
0000e0  0d0a00  
0000e3  00                DCB      0
                  |L2.228|
0000e4  0d0a2045          DCB      "\r\n ERR_ABRT   \r\n",0
0000e8  52525f41
0000ec  42525420
0000f0  20200d0a
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L2.248|
0000f8  0d0a2045          DCB      "\r\n ERR_RST   \r\n",0
0000fc  52525f52
000100  53542020
000104  200d0a00
                  |L2.264|
000108  0d0a2045          DCB      "\r\n ERR_CONN   \r\n",0
00010c  52525f43
000110  4f4e4e20
000114  20200d0a
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L2.284|
00011c  0d0a2045          DCB      "\r\n ERR_CLSD   \r\n",0
000120  52525f43
000124  4c534420
000128  20200d0a
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L2.304|
000130  0d0a2045          DCB      "\r\n ERR_VAL   \r\n",0
000134  52525f56
000138  414c2020
00013c  200d0a00
                  |L2.320|
000140  0d0a2045          DCB      "\r\n ERR_ARG   \r\n",0
000144  52525f41
000148  52472020
00014c  200d0a00
                  |L2.336|
000150  0d0a2045          DCB      "\r\n ERR_USE   \r\n",0
000154  52525f55
000158  53452020
00015c  200d0a00
                  |L2.352|
000160  0d0a2045          DCB      "\r\n ERR_IF   \r\n",0
000164  52525f49
000168  46202020
00016c  0d0a00  
00016f  00                DCB      0
                  |L2.368|
000170  0d0a2045          DCB      "\r\n ERR_INPROGRESS   \r\n",0
000174  52525f49
000178  4e50524f
00017c  47524553
000180  53202020
000184  0d0a00  
000187  00                DCB      0

                          AREA ||i.tcp_ShortConnect_MainFunction||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tcp_ShortConnect_MainFunction PROC
;;;182    ******************************************************/
;;;183    void tcp_ShortConnect_MainFunction(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;184    {
000004  f5ad7d53          SUB      sp,sp,#0x34c
;;;185    	struct rtc_time Le_h_tm;
;;;186    	uint16 Le_w_i;
;;;187    	uint16 Le_w_lng;
;;;188    	//u8_t Le_u_doorSt;
;;;189    	char Le_u_TxData[800U] = {0};
000008  f44f7148          MOV      r1,#0x320
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       __aeabi_memclr4
;;;190    	if(0 == GET_PHY_LINK_STATUS())/* Get Ethernet link status*/
000012  2101              MOVS     r1,#1
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       ETH_ReadPHYRegister
;;;191    	{
;;;192    		Setcp_client_w_HeartTimer = 0U;
;;;193    		Setcp_client_w_DoorStTimer = 0U;
;;;194    		client_TxFlag.TskFlag = 0U;//任务标志
00001a  f8df9400          LDR      r9,|L3.1052|
00001e  0740              LSLS     r0,r0,#29             ;190
000020  f04f0400          MOV      r4,#0                 ;190
000024  4dfe              LDR      r5,|L3.1056|
000026  d41a              BMI      |L3.94|
000028  812c              STRH     r4,[r5,#8]            ;192
00002a  816c              STRH     r4,[r5,#0xa]          ;193
00002c  f8894000          STRB     r4,[r9,#0]
;;;195    		client_TxFlag.InitFlag = 0U;//
000030  f8894001          STRB     r4,[r9,#1]
;;;196    		client_TxFlag.tokenOverdueFlag = 0U;
000034  f8894008          STRB     r4,[r9,#8]
;;;197    #ifdef SHORTCNNT_HEART
;;;198    		client_TxFlag.HeartFlag = 0U;//
;;;199    #endif
;;;200    		client_TxFlag.DoorStFlag = 0U;//
000038  f8894002          STRB     r4,[r9,#2]
;;;201    		client_TxFlag.ReportFlag = 0U;//
00003c  f8894003          STRB     r4,[r9,#3]
;;;202    		client_TxFlag.BListFlag = 0U;//
000040  f8894004          STRB     r4,[r9,#4]
;;;203    		client_TxFlag.BusyFlag = 0U;//
000044  f8894006          STRB     r4,[r9,#6]
;;;204    		Setcp_client_u_TxBusyFlg = 0U;
000048  706c              STRB     r4,[r5,#1]
;;;205    		client_TxFlag.EchoFlag = 0U;//
00004a  f8894005          STRB     r4,[r9,#5]
;;;206    		client_TxFlag.PcktType = Pckt_Unknow;
00004e  f8894007          STRB     r4,[r9,#7]
;;;207    		Setcp_client_w_TxTimer = 0U;
000052  80ac              STRH     r4,[r5,#4]
;;;208    		Se_w_OpenDoorLogTimer = 0U;
000054  81ac              STRH     r4,[r5,#0xc]
;;;209    		Setcp_client_w_ConntTimer = 0U;
000056  80ec              STRH     r4,[r5,#6]
;;;210    		tcp_ShortConnect_disconnect();
000058  f7fffffe          BL       tcp_ShortConnect_disconnect
;;;211    		Setcp_client_u_cnntSt = CLIENT_SHORTCNNT_IDLE;
;;;212    		return;
00005c  e2d9              B        |L3.1554|
                  |L3.94|
;;;213    	}
;;;214    	
;;;215    	/**  全量更新黑名单  **/
;;;216    	Se_h_UpdateBList.Timer++;
00005e  4ff1              LDR      r7,|L3.1060|
;;;217    	if(Se_h_UpdateBList.Timer >= 5000U)
000060  f2413188          MOV      r1,#0x1388
;;;218    	{
;;;219    		Se_h_UpdateBList.Timer = 0U;
;;;220    		(void)hym8563_read_datetime(&Le_h_tm);/*读取当前时间*/
;;;221    		if((Se_h_UpdateBList.hour == Le_h_tm.tm_hour) && (Le_h_tm.tm_min == Se_h_UpdateBList.min))
;;;222    		{//全量更新黑名单
;;;223    			if(0U == Se_h_UpdateBList.flag)
;;;224    			{
;;;225    				ClrBListMng_ListData();//清黑名单列表
;;;226    				Se_h_UpdateBList.flag = 1U;
;;;227    				BListPull.timestamp = 0;
;;;228    				BListPull.page = 1U;
;;;229    				Se_dw_BListPullTimer = SHORTCNNT_PULLBLIST_PERIOD;
000064  f8df83c0          LDR      r8,|L3.1064|
000068  68f8              LDR      r0,[r7,#0xc]          ;216  ; Se_h_UpdateBList
00006a  2601              MOVS     r6,#1                 ;190
00006c  1c40              ADDS     r0,r0,#1              ;216
00006e  60f8              STR      r0,[r7,#0xc]          ;217  ; Se_h_UpdateBList
000070  4288              CMP      r0,r1                 ;217
000072  d31a              BCC      |L3.170|
000074  a8ca              ADD      r0,sp,#0x328          ;220
000076  60fc              STR      r4,[r7,#0xc]          ;220  ; Se_h_UpdateBList
000078  f7fffffe          BL       hym8563_read_datetime
00007c  68b8              LDR      r0,[r7,#8]            ;221  ; Se_h_UpdateBList
00007e  99cc              LDR      r1,[sp,#0x330]        ;221
000080  4288              CMP      r0,r1                 ;221
000082  d111              BNE      |L3.168|
000084  98cb              LDR      r0,[sp,#0x32c]        ;221
000086  6879              LDR      r1,[r7,#4]            ;221  ; Se_h_UpdateBList
000088  4288              CMP      r0,r1                 ;221
00008a  d10d              BNE      |L3.168|
00008c  7c38              LDRB     r0,[r7,#0x10]         ;223  ; Se_h_UpdateBList
00008e  b960              CBNZ     r0,|L3.170|
000090  f7fffffe          BL       ClrBListMng_ListData
000094  f1a700c0          SUB      r0,r7,#0xc0           ;227
000098  743e              STRB     r6,[r7,#0x10]         ;226
00009a  2200              MOVS     r2,#0                 ;226
00009c  6406              STR      r6,[r0,#0x40]         ;228  ; BListPull
00009e  e9c0220c          STRD     r2,r2,[r0,#0x30]      ;228
0000a2  f8c58020          STR      r8,[r5,#0x20]  ; Se_dw_BListPullTimer
0000a6  e000              B        |L3.170|
                  |L3.168|
;;;230    			}
;;;231    		}
;;;232    		else
;;;233    		{
;;;234    			Se_h_UpdateBList.flag = 0U;
0000a8  743c              STRB     r4,[r7,#0x10]
                  |L3.170|
;;;235    		}
;;;236    	}
;;;237    	
;;;238    #ifdef SHORTCNNT_HEART	
;;;239    	Setcp_client_w_HeartTimer++;
;;;240    	if(Setcp_client_w_HeartTimer >= CLIENT_HEART_PERIOD)//30s
;;;241    	{
;;;242    		Setcp_client_w_HeartTimer = 0U;
;;;243    		client_TxFlag.HeartFlag = 1U;//
;;;244    		client_TxFlag.TskFlag = 1U;
;;;245    	}
;;;246    #endif
;;;247    	Setcp_client_w_DoorStTimer++;
0000aa  8968              LDRH     r0,[r5,#0xa]  ; Setcp_client_w_DoorStTimer
;;;248    	if(Setcp_client_w_DoorStTimer > CLIENT_DOORST_PERIOD)
0000ac  f2417170          MOV      r1,#0x1770
0000b0  1c40              ADDS     r0,r0,#1              ;247
0000b2  b280              UXTH     r0,r0                 ;247
0000b4  8168              STRH     r0,[r5,#0xa]          ;247
0000b6  4288              CMP      r0,r1
0000b8  d904              BLS      |L3.196|
;;;249    	{//门锁状态改变时，上报门锁状态
;;;250    		Setcp_client_w_DoorStTimer = 0U;
0000ba  816c              STRH     r4,[r5,#0xa]
;;;251    		client_TxFlag.DoorStFlag = 1U;//
0000bc  f8896002          STRB     r6,[r9,#2]
;;;252    		client_TxFlag.TskFlag = 1U;
0000c0  f8896000          STRB     r6,[r9,#0]
                  |L3.196|
;;;253    	}
;;;254    	
;;;255    	Se_dw_BListPullTimer++;
0000c4  6a28              LDR      r0,[r5,#0x20]  ; Se_dw_BListPullTimer
0000c6  1c40              ADDS     r0,r0,#1
;;;256    	if(Se_dw_BListPullTimer >= (SHORTCNNT_PULLBLIST_PERIOD))//0.5h
0000c8  6228              STR      r0,[r5,#0x20]  ; Se_dw_BListPullTimer
0000ca  4540              CMP      r0,r8
0000cc  d304              BCC      |L3.216|
;;;257    	{
;;;258    		client_TxFlag.BListFlag = 1U;
0000ce  f8896004          STRB     r6,[r9,#4]
;;;259    		Se_dw_BListPullTimer = 0U;
;;;260    		client_TxFlag.TskFlag = 1U;
0000d2  622c              STR      r4,[r5,#0x20]  ; Se_dw_BListPullTimer
0000d4  f8896000          STRB     r6,[r9,#0]
                  |L3.216|
;;;261    	}
;;;262    
;;;263    	Se_w_OpenDoorLogTimer++;
0000d8  89a8              LDRH     r0,[r5,#0xc]  ; Se_w_OpenDoorLogTimer
0000da  1c40              ADDS     r0,r0,#1
0000dc  81a8              STRH     r0,[r5,#0xc]
;;;264    	if((1U == Gettcp_client_u_LogAvild) && (Se_w_OpenDoorLogTimer >= CLIENT_LOGRECORD_PERIOD))
0000de  f7fffffe          BL       GetUnlockLogCache_u_LogAvild
0000e2  2801              CMP      r0,#1
0000e4  d109              BNE      |L3.250|
0000e6  89a8              LDRH     r0,[r5,#0xc]  ; Se_w_OpenDoorLogTimer
0000e8  f240417e          MOV      r1,#0x47e
0000ec  4288              CMP      r0,r1
0000ee  d304              BCC      |L3.250|
;;;265    	{
;;;266    		Se_w_OpenDoorLogTimer = 0U;
0000f0  81ac              STRH     r4,[r5,#0xc]
;;;267    		client_TxFlag.ReportFlag = 1U;//
0000f2  f8896003          STRB     r6,[r9,#3]
;;;268    		client_TxFlag.TskFlag = 1U;
0000f6  f8896000          STRB     r6,[r9,#0]
                  |L3.250|
;;;269    	}
;;;270    	
;;;271    	/**********建立连接**********/
;;;272    	if((DHCP_ADDRESS_ASSIGNED == CLIENT_SHORTCNNT_DHCP_STATE) && (GetShortCnnt_PerformCondition) \
0000fa  48cc              LDR      r0,|L3.1068|
0000fc  7800              LDRB     r0,[r0,#0]  ; DHCP_state
;;;273    		&& (CLIENT_SHORTCNNT_IDLE == Setcp_client_u_cnntSt))
;;;274    	{	
;;;275    		if(client_TxFlag.TskFlag == 1U)
;;;276    		{
;;;277    			client_TxFlag.TskFlag = 0U;
;;;278    			if(1U != GetdnsAnalysis_u_ipValidity(ShortConnect))
;;;279    			{
;;;280    				return;
;;;281    			}
;;;282    			//GetdnsAnalysis_ipAddr(&ShortConnect_DestIPaddr);
;;;283    			IP4_ADDR(&ShortConnect_DestIPaddr, 10, 0, 0, 222);
;;;284    			
;;;285    			if(ERR_OK == tcp_ShortConnect_connect())
;;;286    			{
;;;287    				USART_PRINTF_S("建立短连接...");
;;;288    				Setcp_client_u_TxBusyFlg = 1U;
;;;289    				Setcp_client_w_ConntTimer = 0U;
;;;290    				Setcp_client_u_cnntSt = CLIENT_SHORTCNNT_WAIT;
;;;291    			}
;;;292    		}
;;;293    	}
;;;294    	if(CLIENT_SHORTCNNT_WAIT == Setcp_client_u_cnntSt)
;;;295    	{
;;;296    		Setcp_client_w_ConntTimer++;
;;;297    		if(Setcp_client_w_ConntTimer <= 600)
;;;298    		{
;;;299    			if((echoclient_es->state == ES_CONNECTED) &&(ESTABLISHED == echoclient_pcb->state))
;;;300    			{//连接建立成功
;;;301    				USART_PRINTF_S("短连接建立成功!\n");
;;;302    				Setcp_client_w_ConntTimer = 0U;
;;;303    				client_TxFlag.EchoFlag = 0U;//
;;;304    				client_TxFlag.BusyFlag = 0U;
;;;305    				client_TxFlag.PcktType = Pckt_Unknow;
;;;306    				Setcp_client_u_cnntSt = CLIENT_SHORTCNNT_TXPCKT;//
;;;307    			}
;;;308    		}
;;;309    		else
;;;310    		{//连接建立失败
;;;311    			USART_PRINTF_S("建立短连接超时");
;;;312    			Setcp_client_u_TimeoutCnt++;
;;;313    			if(Setcp_client_u_TimeoutCnt >= 3U)
;;;314    			{
;;;315    				Setcp_client_u_TimeoutCnt = 0U;
;;;316    				SetdnsAnalysis_ipUpdate(ShortConnect);//更新ip
;;;317    			}
;;;318    			Setcp_client_u_cnntSt = CLIENT_SHORTCNNT_DISCNNT;
0000fe  f04f0b03          MOV      r11,#3
000102  2803              CMP      r0,#3                 ;272
000104  d11a              BNE      |L3.316|
000106  f7fffffe          BL       Gethttp_CnntTxSt
00010a  b9b8              CBNZ     r0,|L3.316|
00010c  f7fffffe          BL       GetStm8_fm17550_iapIdle
000110  2801              CMP      r0,#1                 ;272
000112  d113              BNE      |L3.316|
000114  7828              LDRB     r0,[r5,#0]            ;273  ; Setcp_client_u_cnntSt
000116  b988              CBNZ     r0,|L3.316|
000118  f8991000          LDRB     r1,[r9,#0]            ;275  ; client_TxFlag
00011c  2901              CMP      r1,#1                 ;275
00011e  d17c              BNE      |L3.538|
000120  f8894000          STRB     r4,[r9,#0]            ;277
000124  2000              MOVS     r0,#0                 ;278
000126  f7fffffe          BL       GetdnsAnalysis_u_ipValidity
00012a  2801              CMP      r0,#1                 ;278
00012c  d175              BNE      |L3.538|
00012e  49bc              LDR      r1,|L3.1056|
000130  48bf              LDR      r0,|L3.1072|
000132  311c              ADDS     r1,r1,#0x1c           ;283
000134  6008              STR      r0,[r1,#0]            ;285  ; ShortConnect_DestIPaddr
000136  f7fffffe          BL       tcp_ShortConnect_connect
00013a  b128              CBZ      r0,|L3.328|
                  |L3.316|
00013c  7828              LDRB     r0,[r5,#0]            ;294  ; Setcp_client_u_cnntSt
00013e  2801              CMP      r0,#1                 ;294
000140  d009              BEQ      |L3.342|
;;;319    		}	
;;;320    	}
;;;321    	
;;;322    	/**********发送数据**********/
;;;323    	if(CLIENT_SHORTCNNT_TXPCKT == Setcp_client_u_cnntSt)
000142  2802              CMP      r0,#2
000144  d023              BEQ      |L3.398|
000146  e24d              B        |L3.1508|
                  |L3.328|
000148  a1ba              ADR      r1,|L3.1076|
00014a  a0be              ADR      r0,|L3.1092|
00014c  f7fffffe          BL       __2printf
000150  706e              STRB     r6,[r5,#1]            ;288
000152  80ec              STRH     r4,[r5,#6]            ;289
000154  702e              STRB     r6,[r5,#0]            ;290
                  |L3.342|
000156  88e8              LDRH     r0,[r5,#6]            ;296  ; Setcp_client_w_ConntTimer
000158  1c40              ADDS     r0,r0,#1              ;296
00015a  b280              UXTH     r0,r0                 ;296
00015c  80e8              STRH     r0,[r5,#6]            ;296
00015e  f5b07f16          CMP      r0,#0x258             ;297
000162  d81e              BHI      |L3.418|
000164  6968              LDR      r0,[r5,#0x14]         ;299  ; echoclient_es
000166  7800              LDRB     r0,[r0,#0]            ;299
000168  2801              CMP      r0,#1                 ;299
00016a  d156              BNE      |L3.538|
00016c  6928              LDR      r0,[r5,#0x10]         ;299  ; echoclient_pcb
00016e  7e00              LDRB     r0,[r0,#0x18]         ;299
000170  2804              CMP      r0,#4                 ;299
000172  d152              BNE      |L3.538|
000174  a1b4              ADR      r1,|L3.1096|
000176  a0b3              ADR      r0,|L3.1092|
000178  f7fffffe          BL       __2printf
00017c  80ec              STRH     r4,[r5,#6]            ;302
00017e  f8894005          STRB     r4,[r9,#5]            ;303
000182  f8894006          STRB     r4,[r9,#6]            ;304
000186  f8894007          STRB     r4,[r9,#7]            ;305
00018a  2002              MOVS     r0,#2                 ;306
00018c  7028              STRB     r0,[r5,#0]            ;306
                  |L3.398|
;;;324    	{
;;;325    		if(client_TxFlag.InitFlag == 0U)//设备未初始化
00018e  f8990001          LDRB     r0,[r9,#1]  ; client_TxFlag
;;;326    		{		
;;;327    			if(0U == client_TxFlag.EchoFlag)
;;;328    			{
;;;329    				USART_PRINTF_S("设备初始化信息推送");
;;;330    				Json_HexToStr(DeviceInit.doorID,sminfo1.door_id,16);
;;;331    				memset(Setcp_u_shortCnntTxbuf,0,sizeof(Setcp_u_shortCnntTxbuf));//清0
;;;332    				if(DeviceInit.addrRecombineFlg == 0U)
;;;333    				{
;;;334    					tcp_client_MacRecombine(&DeviceInit.Blemac[0]);
;;;335    					//使用蓝牙mac时，此处Blemac复制到mac
;;;336    					tcp_client_MacRecombine(&DeviceInit.mac[0]);
;;;337    					DeviceInit.addrRecombineFlg = 1U;
;;;338    				}
;;;339    				Json_HexToJson(&DeviceInit,&Le_w_lng,JSON_DEVICE_INIT,Le_u_TxData);
;;;340    				tcp_client_httpPostRequest("POST /device/initForBand HTTP/1.1\n",Le_u_TxData,&Le_w_lng, \
;;;341    										   Setcp_u_shortCnntTxbuf,1U);
;;;342    				tcp_ShortConnect_sendMsg(Setcp_u_shortCnntTxbuf,Le_w_lng);//数据发送
;;;343    				client_TxFlag.PcktType = Pckt_Init;
;;;344    				Setcp_client_w_TxTimer = 0U;//清发送超时计时器
;;;345    				client_TxFlag.BusyFlag = 1U;//置发送忙
;;;346    				client_TxFlag.EchoFlag = 1U;//等待响应
;;;347    			}
;;;348    			
;;;349    			if(2U == client_TxFlag.EchoFlag)//发送的报文成功得到服务器响应
;;;350    			{
;;;351    				client_TxFlag.InitFlag = 1U;//初始化完成
;;;352    				Setcp_client_w_TxTimer = 0U;//清发送超时计时器
;;;353    				client_TxFlag.EchoFlag = 0U;//
;;;354    				client_TxFlag.BusyFlag = 0U;//
;;;355    			}	
;;;356    		}
;;;357    		else
;;;358    		{//设备已初始化
;;;359    #ifdef SHORTCNNT_HEART
;;;360    			/*发送心跳*/
;;;361    			if((client_TxFlag.HeartFlag == 1U) && (0U == client_TxFlag.BusyFlag))
;;;362    			{
;;;363    				client_TxFlag.HeartFlag = 0U;
;;;364    				Json_HexToJson(Setcp_Alias.Alias,&Le_w_lng,JSON_HEART_BEAT,Setcp_u_shortCnntTxbuf);
;;;365    				tcp_ShortConnect_sendMsg(Setcp_u_shortCnntTxbuf,Le_w_lng);//数据发送
;;;366    				client_TxFlag.PcktType = Pckt_Heart;
;;;367    				Setcp_client_w_TxTimer = 0U;
;;;368    				client_TxFlag.BusyFlag = 1U;//置发送忙
;;;369    				client_TxFlag.EchoFlag = 1U;//等待响应
;;;370    			}
;;;371    #endif	
;;;372    			
;;;373    			/*发送门锁状态*/
;;;374    			if((1U == client_TxFlag.DoorStFlag)&& (0U == client_TxFlag.BusyFlag))
;;;375    			{
;;;376    				USART_PRINTF_S("发送门锁状态");
;;;377    				client_TxFlag.DoorStFlag = 0U;
;;;378    				//上报门锁状态
;;;379    				memset(Setcp_u_shortCnntTxbuf,0,sizeof(Setcp_u_shortCnntTxbuf));//清0
;;;380    				Se_h_doorSt.state = Gettcp_client_u_DoorSt;
;;;381    				Json_HexToJson(&Se_h_doorSt,&Le_w_lng,JSON_REPORT_DOORST,Le_u_TxData);
;;;382    				tcp_client_httpPostRequest("POST /door/lockState HTTP/1.1\n",Le_u_TxData, \
;;;383    										   &Le_w_lng,Setcp_u_shortCnntTxbuf,1U);
;;;384    				tcp_ShortConnect_sendMsg(Setcp_u_shortCnntTxbuf,Le_w_lng);//数据发送
;;;385    				client_TxFlag.PcktType = Pckt_DoorSt;
;;;386    				Setcp_client_w_TxTimer = 0U;
;;;387    				client_TxFlag.BusyFlag = 1U;//置发送忙
;;;388    				client_TxFlag.EchoFlag = 1U;//等待响应
;;;389    			}
;;;390    			
;;;391    			/*发送临时缓存区数据*/
;;;392    			if((TxTempBuf.dtAlidity == 1U) && (0U == client_TxFlag.BusyFlag) \
000192  f8dfa2c8          LDR      r10,|L3.1116|
000196  464f              MOV      r7,r9                 ;374
000198  b1a0              CBZ      r0,|L3.452|
00019a  78b8              LDRB     r0,[r7,#2]            ;374  ; client_TxFlag
00019c  2801              CMP      r0,#1                 ;374
00019e  d056              BEQ      |L3.590|
0001a0  e080              B        |L3.676|
                  |L3.418|
0001a2  a1af              ADR      r1,|L3.1120|
0001a4  a0a7              ADR      r0,|L3.1092|
0001a6  f7fffffe          BL       __2printf
0001aa  78a8              LDRB     r0,[r5,#2]            ;312  ; Setcp_client_u_TimeoutCnt
0001ac  1c40              ADDS     r0,r0,#1              ;312
0001ae  b2c0              UXTB     r0,r0                 ;312
0001b0  70a8              STRB     r0,[r5,#2]            ;312
0001b2  2803              CMP      r0,#3                 ;313
0001b4  d303              BCC      |L3.446|
0001b6  70ac              STRB     r4,[r5,#2]            ;315
0001b8  2000              MOVS     r0,#0                 ;316
0001ba  f7fffffe          BL       SetdnsAnalysis_ipUpdate
                  |L3.446|
0001be  f885b000          STRB     r11,[r5,#0]           ;318
0001c2  e212              B        |L3.1514|
                  |L3.452|
0001c4  7978              LDRB     r0,[r7,#5]            ;327  ; client_TxFlag
0001c6  b110              CBZ      r0,|L3.462|
0001c8  2802              CMP      r0,#2                 ;349
0001ca  d03a              BEQ      |L3.578|
0001cc  e0e8              B        |L3.928|
                  |L3.462|
0001ce  a1a8              ADR      r1,|L3.1136|
0001d0  a09c              ADR      r0,|L3.1092|
0001d2  f7fffffe          BL       __2printf
0001d6  4893              LDR      r0,|L3.1060|
0001d8  2210              MOVS     r2,#0x10              ;330
0001da  49aa              LDR      r1,|L3.1156|
0001dc  3870              SUBS     r0,r0,#0x70           ;330
0001de  f7fffffe          BL       Json_HexToStr
0001e2  f44f717a          MOV      r1,#0x3e8             ;331
0001e6  48a8              LDR      r0,|L3.1160|
0001e8  f7fffffe          BL       __aeabi_memclr4
0001ec  f8df8234          LDR      r8,|L3.1060|
0001f0  f1a80870          SUB      r8,r8,#0x70           ;332
0001f4  f8980046          LDRB     r0,[r8,#0x46]         ;332  ; DeviceInit
0001f8  b948              CBNZ     r0,|L3.526|
0001fa  f1080034          ADD      r0,r8,#0x34           ;334
0001fe  f7fffffe          BL       tcp_client_MacRecombine
000202  f1080021          ADD      r0,r8,#0x21           ;336
000206  f7fffffe          BL       tcp_client_MacRecombine
00020a  f8886046          STRB     r6,[r8,#0x46]         ;337
                  |L3.526|
00020e  4885              LDR      r0,|L3.1060|
000210  2204              MOVS     r2,#4                 ;339
000212  ab01              ADD      r3,sp,#4              ;339
000214  a9c9              ADD      r1,sp,#0x324          ;339
000216  3870              SUBS     r0,r0,#0x70           ;339
000218  e000              B        |L3.540|
                  |L3.538|
00021a  e1fb              B        |L3.1556|
                  |L3.540|
00021c  f7fffffe          BL       Json_HexToJson
000220  4b99              LDR      r3,|L3.1160|
000222  aac9              ADD      r2,sp,#0x324          ;340
000224  a901              ADD      r1,sp,#4              ;340
000226  a099              ADR      r0,|L3.1164|
000228  9600              STR      r6,[sp,#0]            ;340
00022a  f7fffffe          BL       tcp_client_httpPostRequest
00022e  f8bd1324          LDRH     r1,[sp,#0x324]        ;342
000232  4895              LDR      r0,|L3.1160|
000234  f7fffffe          BL       tcp_ShortConnect_sendMsg
000238  71fe              STRB     r6,[r7,#7]            ;343
00023a  80ac              STRH     r4,[r5,#4]            ;344
00023c  71be              STRB     r6,[r7,#6]            ;345
00023e  717e              STRB     r6,[r7,#5]            ;346
000240  e196              B        |L3.1392|
                  |L3.578|
000242  707e              STRB     r6,[r7,#1]            ;351
000244  80ac              STRH     r4,[r5,#4]            ;352
000246  717c              STRB     r4,[r7,#5]            ;353
000248  f8894006          STRB     r4,[r9,#6]            ;354
00024c  e0b1              B        |L3.946|
                  |L3.590|
00024e  79b8              LDRB     r0,[r7,#6]            ;374  ; client_TxFlag
000250  bb40              CBNZ     r0,|L3.676|
000252  a197              ADR      r1,|L3.1200|
000254  a07b              ADR      r0,|L3.1092|
000256  f7fffffe          BL       __2printf
00025a  70bc              STRB     r4,[r7,#2]            ;377
00025c  f44f717a          MOV      r1,#0x3e8             ;379
000260  4889              LDR      r0,|L3.1160|
000262  f7fffffe          BL       __aeabi_memclr4
000266  2000              MOVS     r0,#0                 ;380
000268  f7fffffe          BL       GetPSFltr_u_PeriSt
00026c  496d              LDR      r1,|L3.1060|
00026e  ab01              ADD      r3,sp,#4              ;381
000270  3929              SUBS     r1,r1,#0x29           ;380
000272  2202              MOVS     r2,#2                 ;381
000274  f8810028          STRB     r0,[r1,#0x28]         ;380
000278  486a              LDR      r0,|L3.1060|
00027a  a9c9              ADD      r1,sp,#0x324          ;381
00027c  3829              SUBS     r0,r0,#0x29           ;381
00027e  f7fffffe          BL       Json_HexToJson
000282  4b81              LDR      r3,|L3.1160|
000284  aac9              ADD      r2,sp,#0x324          ;382
000286  a901              ADD      r1,sp,#4              ;382
000288  a08d              ADR      r0,|L3.1216|
00028a  9600              STR      r6,[sp,#0]            ;382
00028c  f7fffffe          BL       tcp_client_httpPostRequest
000290  f8bd1324          LDRH     r1,[sp,#0x324]        ;384
000294  487c              LDR      r0,|L3.1160|
000296  f7fffffe          BL       tcp_ShortConnect_sendMsg
00029a  f887b007          STRB     r11,[r7,#7]           ;385
00029e  80ac              STRH     r4,[r5,#4]            ;386
0002a0  71be              STRB     r6,[r7,#6]            ;387
0002a2  717e              STRB     r6,[r7,#5]            ;388
                  |L3.676|
0002a4  f89a03ea          LDRB     r0,[r10,#0x3ea]  ; TxTempBuf
0002a8  2801              CMP      r0,#1
0002aa  d117              BNE      |L3.732|
0002ac  79b8              LDRB     r0,[r7,#6]  ; client_TxFlag
0002ae  b9a8              CBNZ     r0,|L3.732|
;;;393    			  && (0U == TxTempBuf.txflag))//临时缓存区数据有效,并且未发送过
0002b0  f89a03eb          LDRB     r0,[r10,#0x3eb]  ; TxTempBuf
0002b4  46d0              MOV      r8,r10
0002b6  b988              CBNZ     r0,|L3.732|
;;;394    			{
;;;395    				USART_PRINTF_S("发送临时缓存区数据");
0002b8  a189              ADR      r1,|L3.1248|
0002ba  a062              ADR      r0,|L3.1092|
0002bc  f7fffffe          BL       __2printf
;;;396    				TxTempBuf.dtAlidity = 0U;
0002c0  f88843ea          STRB     r4,[r8,#0x3ea]
;;;397    				tcp_ShortConnect_sendMsg(TxTempBuf.data,TxTempBuf.lng);//数据发送
0002c4  f8b813e8          LDRH     r1,[r8,#0x3e8]  ; TxTempBuf
0002c8  4864              LDR      r0,|L3.1116|
0002ca  f7fffffe          BL       tcp_ShortConnect_sendMsg
;;;398    				client_TxFlag.PcktType = Pckt_TempBuf;
0002ce  2002              MOVS     r0,#2
0002d0  71f8              STRB     r0,[r7,#7]
;;;399    				TxTempBuf.txflag = 1;//临时缓存区数据发送中
0002d2  f88863eb          STRB     r6,[r8,#0x3eb]
;;;400    				Setcp_client_w_TxTimer = 0U;
0002d6  80ac              STRH     r4,[r5,#4]
;;;401    				client_TxFlag.BusyFlag = 1U;//置发送忙
0002d8  71be              STRB     r6,[r7,#6]
;;;402    				client_TxFlag.EchoFlag = 1U;//等待响应
0002da  717e              STRB     r6,[r7,#5]
                  |L3.732|
;;;403    			}
;;;404    	
;;;405    			/*发送开门记录*/
;;;406    			if((1U == client_TxFlag.ReportFlag)&& (0U == client_TxFlag.BusyFlag) \
0002dc  78f8              LDRB     r0,[r7,#3]  ; client_TxFlag
0002de  46b9              MOV      r9,r7
0002e0  2801              CMP      r0,#1
0002e2  d155              BNE      |L3.912|
0002e4  f8991006          LDRB     r1,[r9,#6]  ; client_TxFlag
0002e8  bbf1              CBNZ     r1,|L3.872|
;;;407    				&&(TxTempBuf.dtAlidity == 0U))
0002ea  f89a13ea          LDRB     r1,[r10,#0x3ea]  ; TxTempBuf
0002ee  bbd9              CBNZ     r1,|L3.872|
;;;408    			{
;;;409    				client_TxFlag.ReportFlag = 0U;
0002f0  f8894003          STRB     r4,[r9,#3]
;;;410    				if(1U == Gettcp_client_u_LogAvild)
0002f4  f7fffffe          BL       GetUnlockLogCache_u_LogAvild
0002f8  2801              CMP      r0,#1
0002fa  d149              BNE      |L3.912|
;;;411    				{
;;;412    					USART_PRINTF_S("发送开门记录数据");
0002fc  a17d              ADR      r1,|L3.1268|
0002fe  a051              ADR      r0,|L3.1092|
000300  f7fffffe          BL       __2printf
;;;413    					for(Le_w_i = 0U;Le_w_i < CLIENT_LOGRECORD_NUM;Le_w_i++)
;;;414    					{
;;;415    						if(1U == Gettcp_client_u_LogAvild)
;;;416    						{
;;;417    							Gettcp_client_doorLog(&Setcp_h_OpenLog.Log[Le_w_i]);//获取开锁记录
000304  f8df8114          LDR      r8,|L3.1052|
000308  2700              MOVS     r7,#0                 ;413
00030a  f1080810          ADD      r8,r8,#0x10
                  |L3.782|
00030e  f7fffffe          BL       GetUnlockLogCache_u_LogAvild
000312  2801              CMP      r0,#1                 ;415
000314  d10a              BNE      |L3.812|
000316  ebc701c7          RSB      r1,r7,r7,LSL #3
00031a  eb0800c1          ADD      r0,r8,r1,LSL #3
00031e  3030              ADDS     r0,r0,#0x30
000320  f7fffffe          BL       GetUnlockLogCache_doorLog
000324  1c7f              ADDS     r7,r7,#1
000326  b2bf              UXTH     r7,r7                 ;413
000328  2f05              CMP      r7,#5                 ;413
00032a  d3f0              BCC      |L3.782|
                  |L3.812|
;;;418    						}
;;;419    						else
;;;420    						{
;;;421    							break;
;;;422    						}
;;;423    					}	
;;;424    					Setcp_h_OpenLog.LogNum = Le_w_i;
;;;425    					Json_HexToJson(&Setcp_h_OpenLog,&Le_w_lng,JSON_REPORT_UNLOCKLOG,Le_u_TxData);
00032c  483b              LDR      r0,|L3.1052|
00032e  f8887028          STRB     r7,[r8,#0x28]         ;424
000332  ab01              ADD      r3,sp,#4
000334  2203              MOVS     r2,#3
000336  a9c9              ADD      r1,sp,#0x324
000338  3010              ADDS     r0,r0,#0x10
00033a  f7fffffe          BL       Json_HexToJson
;;;426    					memset(Setcp_u_shortCnntTxbuf,0,sizeof(Setcp_u_shortCnntTxbuf));//清0
00033e  f44f787a          MOV      r8,#0x3e8
000342  4641              MOV      r1,r8
000344  4850              LDR      r0,|L3.1160|
000346  f7fffffe          BL       __aeabi_memclr4
;;;427    					tcp_client_httpPostRequest("POST /door/openLog2 HTTP/1.1\n",Le_u_TxData, \
00034a  4b4f              LDR      r3,|L3.1160|
00034c  aac9              ADD      r2,sp,#0x324
00034e  a901              ADD      r1,sp,#4
000350  a06d              ADR      r0,|L3.1288|
000352  9600              STR      r6,[sp,#0]
000354  f7fffffe          BL       tcp_client_httpPostRequest
;;;428    											   &Le_w_lng,Setcp_u_shortCnntTxbuf,1U);
;;;429    					TxTempBuf.lng = Le_w_lng;
000358  f8bd1324          LDRH     r1,[sp,#0x324]
00035c  f8aa13e8          STRH     r1,[r10,#0x3e8]
000360  4652              MOV      r2,r10
;;;430    					TxTempBuf.dtAlidity = 1U;
000362  f88a63ea          STRB     r6,[r10,#0x3ea]
;;;431    					for(Le_w_i = 0U;Le_w_i < CLIENT_SHORTCNNT_LNG;Le_w_i++)
000366  e000              B        |L3.874|
                  |L3.872|
000368  e012              B        |L3.912|
                  |L3.874|
00036a  4f47              LDR      r7,|L3.1160|
00036c  2000              MOVS     r0,#0
                  |L3.878|
;;;432    					{
;;;433    						TxTempBuf.data[Le_w_i] = Setcp_u_shortCnntTxbuf[Le_w_i];
00036e  5c3b              LDRB     r3,[r7,r0]
000370  5413              STRB     r3,[r2,r0]
000372  1c40              ADDS     r0,r0,#1
000374  b280              UXTH     r0,r0                 ;431
000376  4540              CMP      r0,r8                 ;431
000378  d3f9              BCC      |L3.878|
;;;434    					}
;;;435    					tcp_ShortConnect_sendMsg(Setcp_u_shortCnntTxbuf,Le_w_lng);//数据发送
00037a  4843              LDR      r0,|L3.1160|
00037c  f7fffffe          BL       tcp_ShortConnect_sendMsg
;;;436    					client_TxFlag.PcktType = Pckt_OpenReport;
000380  2104              MOVS     r1,#4
000382  f8891007          STRB     r1,[r9,#7]
;;;437    					Setcp_client_w_TxTimer = 0U;
000386  80ac              STRH     r4,[r5,#4]
;;;438    					client_TxFlag.BusyFlag = 1U;//置发送忙
000388  f8896006          STRB     r6,[r9,#6]
;;;439    					client_TxFlag.EchoFlag = 1U;//等待响应				
00038c  f8896005          STRB     r6,[r9,#5]
                  |L3.912|
;;;440    				}
;;;441    				else
;;;442    				{//无开门锁记录
;;;443    					
;;;444    				}	
;;;445    			}
;;;446    			
;;;447    			/*拉取黑名单*/
;;;448    			if((client_TxFlag.BListFlag == 1U) && (0U == client_TxFlag.BusyFlag) \
000390  f8991004          LDRB     r1,[r9,#4]  ; client_TxFlag
000394  2901              CMP      r1,#1
000396  d103              BNE      |L3.928|
000398  f8990006          LDRB     r0,[r9,#6]  ; client_TxFlag
00039c  46c8              MOV      r8,r9
00039e  b120              CBZ      r0,|L3.938|
                  |L3.928|
;;;449    			  &&(TxTempBuf.dtAlidity == 0U))
;;;450    			{
;;;451    				USART_PRINTF_S("拉取黑名单");
;;;452    				client_TxFlag.BListFlag = 0U;
;;;453    				memset(Setcp_u_shortCnntTxbuf,0,sizeof(Setcp_u_shortCnntTxbuf));//清0
;;;454    				Json_HexToJson(&BListPull,&Le_w_lng,JSON_GET_BLIST,Le_u_TxData);//拉取黑名单封装
;;;455    				tcp_client_httpPostRequest("POST /doorcard/getPassList HTTP/1.1\n",Le_u_TxData, \
;;;456    										   &Le_w_lng,Setcp_u_shortCnntTxbuf,1U);
;;;457    				TxTempBuf.lng = Le_w_lng;
;;;458    				TxTempBuf.dtAlidity = 1U;
;;;459    				for(Le_w_i = 0U;Le_w_i < CLIENT_SHORTCNNT_LNG;Le_w_i++)
;;;460    				{
;;;461    					TxTempBuf.data[Le_w_i] = Setcp_u_shortCnntTxbuf[Le_w_i];
;;;462    				}
;;;463    				tcp_ShortConnect_sendMsg(Setcp_u_shortCnntTxbuf,Le_w_lng);//数据发送
;;;464    				client_TxFlag.PcktType = Pckt_BList;
;;;465    				Setcp_client_w_TxTimer = 0U;
;;;466    				client_TxFlag.BusyFlag = 1U;//置发送忙
;;;467    				client_TxFlag.EchoFlag = 1U;//等待响应
;;;468    			}	
;;;469    		}
;;;470    		
;;;471    		/*报文发送是否超时处理*/
;;;472    		if(1U  == client_TxFlag.BusyFlag)
0003a0  f8990006          LDRB     r0,[r9,#6]  ; client_TxFlag
0003a4  2801              CMP      r0,#1
0003a6  d036              BEQ      |L3.1046|
0003a8  e003              B        |L3.946|
                  |L3.938|
0003aa  f89a03ea          LDRB     r0,[r10,#0x3ea]       ;449  ; TxTempBuf
0003ae  4657              MOV      r7,r10                ;449
0003b0  b130              CBZ      r0,|L3.960|
                  |L3.946|
;;;473    		{
;;;474    			Setcp_client_w_TxTimer++;
;;;475    			if(Setcp_client_w_TxTimer >= 600)//发送超时
;;;476    			{
;;;477    				USART_PRINTF_S("报文发送超时");
;;;478    				if((Pckt_TempBuf == client_TxFlag.PcktType) ||(Pckt_OpenReport == client_TxFlag.PcktType) \
;;;479    						||(Pckt_BList == client_TxFlag.PcktType))
;;;480    				{//发送以上数据超时
;;;481    					TxTempBuf.dtAlidity = 1U;
;;;482    					TxTempBuf.txflag = 0;
;;;483    				}
;;;484    				
;;;485    				if(client_TxFlag.tokenOverdueFlag == 1U)
;;;486    				{//token 过期
;;;487    					client_TxFlag.tokenOverdueFlag = 0U;
;;;488    					client_TxFlag.InitFlag = 0U;//设置设备重新初始化
;;;489    				}
;;;490    				Se_dw_BListPullTimer = 0U;
;;;491    				Setcp_client_w_TxTimer = 0U;
;;;492    				client_TxFlag.BusyFlag = 0U;
;;;493    				Setcp_client_u_cnntSt = CLIENT_SHORTCNNT_DISCNNT;//断开连接
;;;494    			}
;;;495    			else
;;;496    			{
;;;497    				if(2U == client_TxFlag.EchoFlag)//得到服务器响应
;;;498    				{
;;;499    					if((client_TxFlag.PcktType == Pckt_OpenReport) ||(client_TxFlag.PcktType == Pckt_BList))
;;;500    					{
;;;501    						TxTempBuf.dtAlidity = 0U;
;;;502    					}
;;;503    					client_TxFlag.EchoFlag = 0U;//           
;;;504    					client_TxFlag.BusyFlag = 0U;
;;;505    					client_TxFlag.PcktType = Pckt_Unknow;			
;;;506    				}
;;;507    			}
;;;508    		}
;;;509    		else
;;;510    		{
;;;511    			Setcp_client_w_TxTimer = 0U;
0003b2  80ac              STRH     r4,[r5,#4]
;;;512    			if((1U== client_TxFlag.InitFlag) 
0003b4  f8991001          LDRB     r1,[r9,#1]  ; client_TxFlag
0003b8  4648              MOV      r0,r9
0003ba  2901              CMP      r1,#1
0003bc  d02c              BEQ      |L3.1048|
0003be  e111              B        |L3.1508|
                  |L3.960|
0003c0  a159              ADR      r1,|L3.1320|
0003c2  a020              ADR      r0,|L3.1092|
0003c4  f7fffffe          BL       __2printf
0003c8  f8884004          STRB     r4,[r8,#4]            ;452
0003cc  f44f717a          MOV      r1,#0x3e8             ;453
0003d0  482d              LDR      r0,|L3.1160|
0003d2  f7fffffe          BL       __aeabi_memclr4
0003d6  4813              LDR      r0,|L3.1060|
0003d8  ab01              ADD      r3,sp,#4              ;454
0003da  2201              MOVS     r2,#1                 ;454
0003dc  a9c9              ADD      r1,sp,#0x324          ;454
0003de  38c0              SUBS     r0,r0,#0xc0           ;454
0003e0  f7fffffe          BL       Json_HexToJson
0003e4  4b28              LDR      r3,|L3.1160|
0003e6  aac9              ADD      r2,sp,#0x324          ;455
0003e8  a901              ADD      r1,sp,#4              ;455
0003ea  a052              ADR      r0,|L3.1332|
0003ec  9600              STR      r6,[sp,#0]            ;455
0003ee  f7fffffe          BL       tcp_client_httpPostRequest
0003f2  f8bd1324          LDRH     r1,[sp,#0x324]        ;457
0003f6  f8a713e8          STRH     r1,[r7,#0x3e8]        ;457
0003fa  4b23              LDR      r3,|L3.1160|
0003fc  f88763ea          STRB     r6,[r7,#0x3ea]        ;458
000400  2000              MOVS     r0,#0                 ;459
000402  f44f7c7a          MOV      r12,#0x3e8            ;331
                  |L3.1030|
000406  5c1a              LDRB     r2,[r3,r0]            ;461
000408  543a              STRB     r2,[r7,r0]            ;461
00040a  1c40              ADDS     r0,r0,#1              ;461
00040c  b280              UXTH     r0,r0                 ;459
00040e  4560              CMP      r0,r12                ;459
000410  d3f9              BCC      |L3.1030|
000412  481d              LDR      r0,|L3.1160|
000414  e0a2              B        |L3.1372|
                  |L3.1046|
000416  e0ab              B        |L3.1392|
                  |L3.1048|
000418  e0de              B        |L3.1496|
00041a  0000              DCW      0x0000
                  |L3.1052|
                          DCD      ||.bss||+0xd88
                  |L3.1056|
                          DCD      ||.data||
                  |L3.1060|
                          DCD      ||.bss||+0xfa0
                  |L3.1064|
                          DCD      0x00057e40
                  |L3.1068|
                          DCD      DHCP_state
                  |L3.1072|
                          DCD      0xde00000a
                  |L3.1076|
000434  bda8c1a2          DCB      189,168,193,162,182,204,193,172,189,211,"...",0
000438  b6ccc1ac
00043c  bdd32e2e
000440  2e00    
000442  00                DCB      0
000443  00                DCB      0
                  |L3.1092|
000444  25730a00          DCB      "%s\n",0
                  |L3.1096|
000448  b6ccc1ac          DCB      182,204,193,172,189,211,189,168,193,162,179,201,185,166,"!"
00044c  bdd3bda8
000450  c1a2b3c9
000454  b9a621  
000457  0a00              DCB      "\n",0
000459  00                DCB      0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L3.1116|
                          DCD      ||.bss||+0x99c
                  |L3.1120|
000460  bda8c1a2          DCB      189,168,193,162,182,204,193,172,189,211,179,172,202,177,0
000464  b6ccc1ac
000468  bdd3b3ac
00046c  cab100  
00046f  00                DCB      0
                  |L3.1136|
000470  c9e8b1b8          DCB      201,232,177,184,179,245,202,188,187,175,208,197,207,162,205
000474  b3f5cabc
000478  bbafd0c5
00047c  cfa2cd  
00047f  c6cbcd00          DCB      198,203,205,0
000483  00                DCB      0
                  |L3.1156|
                          DCD      sminfo1+0x40
                  |L3.1160|
                          DCD      ||.bss||
                  |L3.1164|
00048c  504f5354          DCB      "POST /device/initForBand HTTP/1.1\n",0
000490  202f6465
000494  76696365
000498  2f696e69
00049c  74466f72
0004a0  42616e64
0004a4  20485454
0004a8  502f312e
0004ac  310a00  
0004af  00                DCB      0
                  |L3.1200|
0004b0  b7a2cbcd          DCB      183,162,203,205,195,197,203,248,215,180,204,172,0
0004b4  c3c5cbf8
0004b8  d7b4ccac
0004bc  00      
0004bd  00                DCB      0
0004be  00                DCB      0
0004bf  00                DCB      0
                  |L3.1216|
0004c0  504f5354          DCB      "POST /door/lockState HTTP/1.1\n",0
0004c4  202f646f
0004c8  6f722f6c
0004cc  6f636b53
0004d0  74617465
0004d4  20485454
0004d8  502f312e
0004dc  310a00  
0004df  00                DCB      0
                  |L3.1248|
0004e0  b7a2cbcd          DCB      183,162,203,205,193,217,202,177,187,186,180,230,199,248,202
0004e4  c1d9cab1
0004e8  bbbab4e6
0004ec  c7f8ca  
0004ef  fdbedd00          DCB      253,190,221,0
0004f3  00                DCB      0
                  |L3.1268|
0004f4  b7a2cbcd          DCB      183,162,203,205,191,170,195,197,188,199,194,188,202,253,190
0004f8  bfaac3c5
0004fc  bcc7c2bc
000500  cafdbe  
000503  dd00              DCB      221,0
000505  00                DCB      0
000506  00                DCB      0
000507  00                DCB      0
                  |L3.1288|
000508  504f5354          DCB      "POST /door/openLog2 HTTP/1.1\n",0
00050c  202f646f
000510  6f722f6f
000514  70656e4c
000518  6f673220
00051c  48545450
000520  2f312e31
000524  0a00    
000526  00                DCB      0
000527  00                DCB      0
                  |L3.1320|
000528  c0adc8a1          DCB      192,173,200,161,186,218,195,251,181,165,0
00052c  badac3fb
000530  b5a500  
000533  00                DCB      0
                  |L3.1332|
000534  504f5354          DCB      "POST /doorcard/getPassList HTTP/1.1\n",0
000538  202f646f
00053c  6f726361
000540  72642f67
000544  65745061
000548  73734c69
00054c  73742048
000550  5454502f
000554  312e310a
000558  00      
000559  00                DCB      0
00055a  00                DCB      0
00055b  00                DCB      0
                  |L3.1372|
00055c  f7fffffe          BL       tcp_ShortConnect_sendMsg
000560  2105              MOVS     r1,#5                 ;464
000562  f8881007          STRB     r1,[r8,#7]            ;464
000566  80ac              STRH     r4,[r5,#4]            ;465
000568  f8886006          STRB     r6,[r8,#6]            ;466
00056c  f8886005          STRB     r6,[r8,#5]            ;467
                  |L3.1392|
000570  88a8              LDRH     r0,[r5,#4]            ;474  ; Setcp_client_w_TxTimer
000572  1c40              ADDS     r0,r0,#1              ;474
000574  b280              UXTH     r0,r0                 ;474
000576  80a8              STRH     r0,[r5,#4]            ;474
000578  f5b07f16          CMP      r0,#0x258             ;475
00057c  d31b              BCC      |L3.1462|
00057e  a12b              ADR      r1,|L3.1580|
000580  f2af1040          ADR      r0,|L3.1092|
000584  f7fffffe          BL       __2printf
000588  f8990007          LDRB     r0,[r9,#7]            ;478  ; client_TxFlag
00058c  4649              MOV      r1,r9                 ;478
00058e  2802              CMP      r0,#2                 ;478
000590  d003              BEQ      |L3.1434|
000592  2804              CMP      r0,#4                 ;478
000594  d001              BEQ      |L3.1434|
000596  2805              CMP      r0,#5                 ;479
000598  d103              BNE      |L3.1442|
                  |L3.1434|
00059a  f88a63ea          STRB     r6,[r10,#0x3ea]       ;481
00059e  f88a43eb          STRB     r4,[r10,#0x3eb]       ;482
                  |L3.1442|
0005a2  7a08              LDRB     r0,[r1,#8]            ;485  ; client_TxFlag
0005a4  2801              CMP      r0,#1                 ;485
0005a6  d101              BNE      |L3.1452|
0005a8  720c              STRB     r4,[r1,#8]            ;487
0005aa  704c              STRB     r4,[r1,#1]            ;488
                  |L3.1452|
0005ac  622c              STR      r4,[r5,#0x20]         ;491  ; Se_dw_BListPullTimer
0005ae  80ac              STRH     r4,[r5,#4]            ;491
0005b0  f8894006          STRB     r4,[r9,#6]            ;492
0005b4  e603              B        |L3.446|
                  |L3.1462|
0005b6  f8990005          LDRB     r0,[r9,#5]            ;497  ; client_TxFlag
0005ba  4649              MOV      r1,r9                 ;497
0005bc  2802              CMP      r0,#2                 ;497
0005be  d111              BNE      |L3.1508|
0005c0  79c8              LDRB     r0,[r1,#7]            ;499  ; client_TxFlag
0005c2  2804              CMP      r0,#4                 ;499
0005c4  d001              BEQ      |L3.1482|
0005c6  2805              CMP      r0,#5                 ;499
0005c8  d101              BNE      |L3.1486|
                  |L3.1482|
0005ca  f88a43ea          STRB     r4,[r10,#0x3ea]       ;501
                  |L3.1486|
0005ce  714c              STRB     r4,[r1,#5]            ;503
0005d0  718c              STRB     r4,[r1,#6]            ;504
0005d2  f8894007          STRB     r4,[r9,#7]            ;505
0005d6  e005              B        |L3.1508|
                  |L3.1496|
;;;513    #ifdef SHORTCNNT_HEART
;;;514    					&& (0U == client_TxFlag.HeartFlag)  
;;;515    #endif
;;;516    					&& (0U == client_TxFlag.DoorStFlag)   
0005d8  7881              LDRB     r1,[r0,#2]  ; client_TxFlag
0005da  b919              CBNZ     r1,|L3.1508|
;;;517    					&& (0U == client_TxFlag.ReportFlag)   
0005dc  78c1              LDRB     r1,[r0,#3]  ; client_TxFlag
0005de  b909              CBNZ     r1,|L3.1508|
;;;518    					&& (0U == client_TxFlag.BListFlag)   
0005e0  7901              LDRB     r1,[r0,#4]  ; client_TxFlag
0005e2  b1d9              CBZ      r1,|L3.1564|
                  |L3.1508|
;;;519    			  )
;;;520    			{//无数据报文需要发送
;;;521    				TxTempBuf.dtAlidity = 0U;
;;;522    				TxTempBuf.txflag = 0;
;;;523    				client_TxFlag.TskFlag = 0U;
;;;524    				Setcp_client_u_cnntSt = CLIENT_SHORTCNNT_DISCNNT;//断开连接
;;;525    			}	
;;;526    		}	
;;;527    	}
;;;528    	
;;;529    	/**********断开连接**********/
;;;530    	if(CLIENT_SHORTCNNT_DISCNNT == Setcp_client_u_cnntSt)
0005e4  7828              LDRB     r0,[r5,#0]  ; Setcp_client_u_cnntSt
0005e6  2803              CMP      r0,#3
0005e8  d114              BNE      |L3.1556|
                  |L3.1514|
;;;531    	{
;;;532    		tcp_ShortConnect_disconnect();
0005ea  f7fffffe          BL       tcp_ShortConnect_disconnect
;;;533    		USART_PRINTF_S("断开连接...");
0005ee  a113              ADR      r1,|L3.1596|
0005f0  f2af10b0          ADR      r0,|L3.1092|
0005f4  f7fffffe          BL       __2printf
;;;534    		Setcp_client_u_TxBusyFlg = 0U;
0005f8  706c              STRB     r4,[r5,#1]
;;;535    		client_TxFlag.BusyFlag = 0U;
0005fa  f8894006          STRB     r4,[r9,#6]
;;;536    #ifdef SHORTCNNT_HEART
;;;537    		client_TxFlag.HeartFlag = 0U;//
;;;538    #endif
;;;539    		client_TxFlag.DoorStFlag = 0U;//
0005fe  f8894002          STRB     r4,[r9,#2]
;;;540    		client_TxFlag.ReportFlag = 0U;//
000602  f8894003          STRB     r4,[r9,#3]
;;;541    		client_TxFlag.EchoFlag = 0U;//
000606  f8894005          STRB     r4,[r9,#5]
;;;542    		Setcp_client_w_TxTimer = 0U;
00060a  80ac              STRH     r4,[r5,#4]
;;;543    		Se_w_OpenDoorLogTimer = 0U;
00060c  81ac              STRH     r4,[r5,#0xc]
;;;544    		client_TxFlag.PcktType = Pckt_Unknow;
00060e  f8894007          STRB     r4,[r9,#7]
                  |L3.1554|
;;;545    		Setcp_client_u_cnntSt = CLIENT_SHORTCNNT_IDLE;
000612  702c              STRB     r4,[r5,#0]
                  |L3.1556|
;;;546    	}
;;;547    }
000614  f50d7d53          ADD      sp,sp,#0x34c
000618  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.1564|
00061c  f88a43ea          STRB     r4,[r10,#0x3ea]       ;521
000620  f88a43eb          STRB     r4,[r10,#0x3eb]       ;522
000624  f8894000          STRB     r4,[r9,#0]            ;523
000628  e5c9              B        |L3.446|
;;;548    
                          ENDP

00062a  0000              DCW      0x0000
                  |L3.1580|
00062c  b1a8cec4          DCB      177,168,206,196,183,162,203,205,179,172,202,177,0
000630  b7a2cbcd
000634  b3accab1
000638  00      
000639  00                DCB      0
00063a  00                DCB      0
00063b  00                DCB      0
                  |L3.1596|
00063c  b6cfbfaa          DCB      182,207,191,170,193,172,189,211,"...",0
000640  c1acbdd3
000644  2e2e2e00

                          AREA ||i.tcp_ShortConnect_connect||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  tcp_ShortConnect_connect PROC
;;;554    */
;;;555    char tcp_ShortConnect_connect(void)
000000  b570              PUSH     {r4-r6,lr}
;;;556    {
;;;557    	s8_t ret;
;;;558    	/* create new tcp pcb */
;;;559    	echoclient_pcb = tcp_new();
000002  f7fffffe          BL       tcp_new
000006  4d19              LDR      r5,|L4.108|
;;;560    	if (echoclient_pcb != NULL)
000008  6128              STR      r0,[r5,#0x10]  ; echoclient_pcb
00000a  b338              CBZ      r0,|L4.92|
;;;561    	{
;;;562    		ShortConnect_LocalIPaddr.addr = IPaddress;
00000c  4918              LDR      r1,|L4.112|
00000e  f1050218          ADD      r2,r5,#0x18
000012  6809              LDR      r1,[r1,#0]  ; IPaddress
;;;563    		ret = tcp_bind(echoclient_pcb, &ShortConnect_LocalIPaddr, 0); 
000014  6011              STR      r1,[r2,#0]  ; ShortConnect_LocalIPaddr
000016  2200              MOVS     r2,#0
000018  f1050118          ADD      r1,r5,#0x18
00001c  f7fffffe          BL       tcp_bind
000020  4601              MOV      r1,r0
;;;564    		USART_PRINTF_D("tcp_bind ret is: %d\n",ret);
000022  a014              ADR      r0,|L4.116|
000024  f7fffffe          BL       __2printf
;;;565    		/* connect to destination address/port */
;;;566    		ret = tcp_connect(echoclient_pcb,&ShortConnect_DestIPaddr,CLIENT_SHORTCNNT_REMOTEPORT,tcp_echoclient_connected);
000028  4b18              LDR      r3,|L4.140|
00002a  f641729a          MOV      r2,#0x1f9a
00002e  f105011c          ADD      r1,r5,#0x1c
000032  6928              LDR      r0,[r5,#0x10]  ; echoclient_pcb
000034  f7fffffe          BL       tcp_connect
000038  4604              MOV      r4,r0
;;;567    		USART_PRINTF_D("tcp_connect ret is: %d\n",ret);
00003a  4601              MOV      r1,r0
00003c  a014              ADR      r0,|L4.144|
00003e  f7fffffe          BL       __2printf
;;;568    
;;;569    		if(ERR_OK != ret)
000042  b134              CBZ      r4,|L4.82|
;;;570    		{
;;;571    			memp_free(MEMP_TCP_PCB, echoclient_pcb);
000044  2002              MOVS     r0,#2
000046  6929              LDR      r1,[r5,#0x10]  ; echoclient_pcb
000048  f7fffffe          BL       memp_free
;;;572    			echoclient_pcb = NULL;
00004c  2000              MOVS     r0,#0
00004e  6128              STR      r0,[r5,#0x10]  ; echoclient_pcb
000050  e00a              B        |L4.104|
                  |L4.82|
;;;573    		}
;;;574    		else
;;;575    		{
;;;576    			tcp_err(echoclient_pcb,tcp_ShortConnectErr); 
000052  4915              LDR      r1,|L4.168|
000054  6928              LDR      r0,[r5,#0x10]  ; echoclient_pcb
000056  f7fffffe          BL       tcp_err
00005a  e005              B        |L4.104|
                  |L4.92|
;;;577    		}
;;;578    	}
;;;579    	else
;;;580    	{
;;;581    		ret = ERR_MEM;
00005c  f04f34ff          MOV      r4,#0xffffffff
;;;582    		/* deallocate the pcb */
;;;583    		USART_PRINTF_S("短连接tcp控制块分配失败");
000060  a112              ADR      r1,|L4.172|
000062  a018              ADR      r0,|L4.196|
000064  f7fffffe          BL       __2printf
                  |L4.104|
;;;584    	}
;;;585    	return ret;
000068  b2e0              UXTB     r0,r4
;;;586    }
00006a  bd70              POP      {r4-r6,pc}
;;;587    
                          ENDP

                  |L4.108|
                          DCD      ||.data||
                  |L4.112|
                          DCD      IPaddress
                  |L4.116|
000074  7463705f          DCB      "tcp_bind ret is: %d\n",0
000078  62696e64
00007c  20726574
000080  2069733a
000084  2025640a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L4.140|
                          DCD      tcp_echoclient_connected
                  |L4.144|
000090  7463705f          DCB      "tcp_connect ret is: %d\n",0
000094  636f6e6e
000098  65637420
00009c  72657420
0000a0  69733a20
0000a4  25640a00
                  |L4.168|
                          DCD      tcp_ShortConnectErr
                  |L4.172|
0000ac  b6ccc1ac          DCB      182,204,193,172,189,211,"tcp",191,216,214,198,191,233,183
0000b0  bdd37463
0000b4  70bfd8d6
0000b8  c6bfe9b7
0000bc  d6c5e4ca          DCB      214,197,228,202,167,176,220,0
0000c0  a7b0dc00
                  |L4.196|
0000c4  25730a00          DCB      "%s\n",0

                          AREA ||i.tcp_ShortConnect_disconnect||, CODE, READONLY, ALIGN=2

                  tcp_ShortConnect_disconnect PROC
;;;651    */
;;;652    void tcp_ShortConnect_disconnect(void)
000000  4802              LDR      r0,|L5.12|
;;;653    {
;;;654    	/* close connection */
;;;655    	tcp_echoclient_connection_close(echoclient_pcb,echoclient_es);
000002  6941              LDR      r1,[r0,#0x14]  ; echoclient_es
000004  6900              LDR      r0,[r0,#0x10]  ; echoclient_pcb
000006  f7ffbffe          B.W      tcp_echoclient_connection_close
;;;656    }
;;;657    
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      ||.data||

                          AREA ||i.tcp_ShortConnect_parameter||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  tcp_ShortConnect_parameter PROC
;;;116    ******************************************************/
;;;117    void tcp_ShortConnect_parameter(void)
000000  b510              PUSH     {r4,lr}
;;;118    {
;;;119    	struct rtc_time Le_h_tm;
;;;120    	//if(1U == GetMemIf_u_DtVild(EepromCfg_timestamp_page))
;;;121    	//{
;;;122    	//	MemIf_ReadEE(EepromCfg_timestamp_page,BListPull.token,sizeof(BListPull));//读取黑名单时间戳、页码等信息
;;;123    	//}
;;;124    	//else
;;;125    	//{
;;;126    		BListPull.timestamp = 0;
000002  4826              LDR      r0,|L6.156|
000004  b08a              SUB      sp,sp,#0x28           ;118
000006  2100              MOVS     r1,#0                 ;118
000008  e9c0110c          STRD     r1,r1,[r0,#0x30]
;;;127    		BListPull.page = 1U;
00000c  2101              MOVS     r1,#1
;;;128    	//}
;;;129    	BListPull.Listtype = 0;
00000e  6401              STR      r1,[r0,#0x40]  ; BListPull
000010  2100              MOVS     r1,#0
000012  f8001f28          STRB     r1,[r0,#0x28]!
;;;130    	BListPull.pageSize = SHORTCNNT_BLIST_PULLNUM;//默认最多拉取卡号数量
000016  2241              MOVS     r2,#0x41
000018  8402              STRH     r2,[r0,#0x20]
;;;131    	Se_dw_BListPullTimer = SHORTCNNT_PULLBLIST_PERIOD - 18500U;
00001a  4a22              LDR      r2,|L6.164|
00001c  4820              LDR      r0,|L6.160|
;;;132    	client_TxFlag.TskFlag = 0U;//任务标志
;;;133    	client_TxFlag.InitFlag = 0U;//
;;;134    #ifdef SHORTCNNT_HEART
;;;135    	client_TxFlag.HeartFlag = 0U;//
;;;136    #endif
;;;137    	client_TxFlag.DoorStFlag = 0U;//
;;;138    	client_TxFlag.ReportFlag = 0U;//
;;;139    	client_TxFlag.BListFlag = 0U;//
;;;140    	client_TxFlag.BusyFlag = 0U;//
;;;141    	client_TxFlag.PcktType = Pckt_Unknow;
;;;142    	DeviceInit.addrtype = 0;
;;;143    #if 1	
;;;144    	DeviceInit.mac[0] = 'e';//测试使用
;;;145    	DeviceInit.mac[1] = '0';
;;;146    	DeviceInit.mac[2] = '7';
00001e  2337              MOVS     r3,#0x37
000020  6210              STR      r0,[r2,#0x20]         ;132  ; Se_dw_BListPullTimer
000022  4821              LDR      r0,|L6.168|
000024  2265              MOVS     r2,#0x65              ;144
;;;147    	DeviceInit.mac[3] = '6';
;;;148    	DeviceInit.mac[4] = 'd';
;;;149    	DeviceInit.mac[5] = '0';
;;;150    	DeviceInit.mac[6] = 'f';
;;;151    	DeviceInit.mac[7] = '8';
;;;152    	DeviceInit.mac[8] = '1';
;;;153    	DeviceInit.mac[9] = '5';
;;;154    	DeviceInit.mac[10] = 'a';
;;;155    	DeviceInit.mac[11] = '8';
;;;156    #endif
;;;157    	/*读取当前时间，计算全量更新黑名单的时间点*/
;;;158    	Se_h_UpdateBList.Timer = 0U;
000026  4c1d              LDR      r4,|L6.156|
000028  7001              STRB     r1,[r0,#0]            ;132
00002a  7041              STRB     r1,[r0,#1]            ;133
00002c  7081              STRB     r1,[r0,#2]            ;137
00002e  70c1              STRB     r1,[r0,#3]            ;138
000030  7101              STRB     r1,[r0,#4]            ;139
000032  7181              STRB     r1,[r0,#6]            ;140
000034  71c1              STRB     r1,[r0,#7]            ;141
000036  f50070d4          ADD      r0,r0,#0x1a8          ;142
00003a  34c0              ADDS     r4,r4,#0xc0
00003c  f8801033          STRB     r1,[r0,#0x33]         ;142
000040  f8002f21          STRB     r2,[r0,#0x21]!        ;144
000044  2230              MOVS     r2,#0x30              ;145
000046  7042              STRB     r2,[r0,#1]            ;145
000048  7083              STRB     r3,[r0,#2]            ;146
00004a  2336              MOVS     r3,#0x36              ;147
00004c  70c3              STRB     r3,[r0,#3]            ;147
00004e  2364              MOVS     r3,#0x64              ;148
000050  7103              STRB     r3,[r0,#4]            ;148
000052  7142              STRB     r2,[r0,#5]            ;149
000054  2266              MOVS     r2,#0x66              ;150
000056  7182              STRB     r2,[r0,#6]            ;150
000058  2238              MOVS     r2,#0x38              ;151
00005a  71c2              STRB     r2,[r0,#7]            ;151
00005c  2331              MOVS     r3,#0x31              ;152
00005e  7203              STRB     r3,[r0,#8]            ;152
000060  2335              MOVS     r3,#0x35              ;153
000062  7243              STRB     r3,[r0,#9]            ;153
000064  2361              MOVS     r3,#0x61              ;154
000066  7283              STRB     r3,[r0,#0xa]          ;154
000068  72c2              STRB     r2,[r0,#0xb]          ;155
;;;159    	Se_h_UpdateBList.flag = 0U;
00006a  60e1              STR      r1,[r4,#0xc]  ; Se_h_UpdateBList
00006c  7421              STRB     r1,[r4,#0x10]
;;;160    	(void)hym8563_read_datetime(&Le_h_tm);
00006e  4668              MOV      r0,sp
000070  f7fffffe          BL       hym8563_read_datetime
;;;161    	//tm.tm_year, tm.tm_mon, tm.tm_mday, tm.wday,tm.tm_hour, tm.tm_min, tm.tm_sec);
;;;162    	Se_h_UpdateBList.hour = Le_h_tm.tm_sec%10;
000074  9800              LDR      r0,[sp,#0]
000076  210a              MOVS     r1,#0xa
000078  fb90f2f1          SDIV     r2,r0,r1
00007c  fb010012          MLS      r0,r1,r2,r0
;;;163    	if(Se_h_UpdateBList.hour >= 5U)
000080  60a0              STR      r0,[r4,#8]  ; Se_h_UpdateBList
000082  2805              CMP      r0,#5
000084  d301              BCC      |L6.138|
000086  1f40              SUBS     r0,r0,#5
;;;164    	{
;;;165    		Se_h_UpdateBList.hour = Se_h_UpdateBList.hour -5U;
000088  60a0              STR      r0,[r4,#8]  ; Se_h_UpdateBList
                  |L6.138|
;;;166    	}
;;;167    	Se_h_UpdateBList.min = Le_h_tm.tm_min;
00008a  9a01              LDR      r2,[sp,#4]
;;;168    	//Se_h_UpdateBList.sec = Le_h_tm.tm_sec;
;;;169    	printf("\n全量更新黑名单时间：%d:%d:%d\n",Se_h_UpdateBList.hour,Se_h_UpdateBList.min,Se_h_UpdateBList.sec);
00008c  6062              STR      r2,[r4,#4]  ; Se_h_UpdateBList
00008e  4601              MOV      r1,r0
000090  a006              ADR      r0,|L6.172|
000092  6823              LDR      r3,[r4,#0]  ; Se_h_UpdateBList
000094  f7fffffe          BL       __2printf
;;;170    }
000098  b00a              ADD      sp,sp,#0x28
00009a  bd10              POP      {r4,pc}
;;;171    
                          ENDP

                  |L6.156|
                          DCD      ||.bss||+0xee0
                  |L6.160|
                          DCD      0x000535fc
                  |L6.164|
                          DCD      ||.data||
                  |L6.168|
                          DCD      ||.bss||+0xd88
                  |L6.172|
0000ac  0ac8abc1          DCB      "\n",200,171,193,191,184,252,208,194,186,218,195,251,181
0000b0  bfb8fcd0
0000b4  c2badac3
0000b8  fbb5    
0000ba  a5cab1bc          DCB      165,202,177,188,228,163,186,"%d:%d:%d\n",0
0000be  e4a3ba25
0000c2  643a2564
0000c6  3a25640a
0000ca  00      
0000cb  00                DCB      0

                          AREA ||i.tcp_ShortConnect_parseJson||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tcp_ShortConnect_parseJson PROC
;;;897    */
;;;898    static uint8 tcp_ShortConnect_parseJson(char * pMsg)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;899    {
;;;900    	cJSON * pJson = cJSON_Parse(pMsg);
000004  f7fffffe          BL       cJSON_Parse
000008  ea5f0900          MOVS     r9,r0
;;;901    	if(NULL == pJson)                                                                                         
00000c  d009              BEQ      |L7.34|
;;;902    	{
;;;903    		// parse faild, return
;;;904    		USART_PRINTF_S("接收数据解析成json格式失败");
;;;905    		return 0U;
;;;906    	}
;;;907    	// get string from json
;;;908    	cJSON * pSub_err = cJSON_GetObjectItem(pJson, "error");
00000e  a179              ADR      r1,|L7.500|
000010  f7fffffe          BL       cJSON_GetObjectItem
000014  0004              MOVS     r4,r0
;;;909    	if(NULL == pSub_err)
000016  d009              BEQ      |L7.44|
;;;910    	{
;;;911    		USART_PRINTF_S("获取成员 error 失败");
;;;912    		cJSON_Delete(pJson);
;;;913    		return 0U;
;;;914    	}
;;;915    	
;;;916    	if(pSub_err->type == cJSON_String)
000018  68e0              LDR      r0,[r4,#0xc]
00001a  2810              CMP      r0,#0x10
00001c  d011              BEQ      |L7.66|
;;;917    	{
;;;918    		pSub_err->valueint = (int)(Json_DecNumber(&(pSub_err->valuestring[0])));
00001e  6960              LDR      r0,[r4,#0x14]
000020  e013              B        |L7.74|
                  |L7.34|
000022  a176              ADR      r1,|L7.508|
000024  a07c              ADR      r0,|L7.536|
000026  f7fffffe          BL       __2printf
00002a  e006              B        |L7.58|
                  |L7.44|
00002c  a17b              ADR      r1,|L7.540|
00002e  a07a              ADR      r0,|L7.536|
000030  f7fffffe          BL       __2printf
000034  4648              MOV      r0,r9                 ;912
000036  f7fffffe          BL       cJSON_Delete
                  |L7.58|
00003a  2000              MOVS     r0,#0                 ;913
                  |L7.60|
;;;919    	}
;;;920    
;;;921    	switch(pSub_err->valueint)
;;;922    	{
;;;923    		case 0:
;;;924    		{
;;;925    			USART_PRINTF_S("状态码正确");
;;;926    			client_TxFlag.EchoFlag = 2U;
;;;927    			cJSON * pSub_token = cJSON_GetObjectItem(pJson, "token");
;;;928    			if(NULL != pSub_token)
;;;929    			{//收到初始化响应
;;;930    				memcpy(BListPull.token,pSub_token->valuestring,39U);
;;;931    				memcpy(Setcp_h_OpenLog.token,pSub_token->valuestring,39U);
;;;932    				memcpy(Se_h_doorSt.token,pSub_token->valuestring,39U);
;;;933    				if(TxTempBuf.dtAlidity == 1U)
;;;934    				{//临时缓存区数据有效，说明此次是token过期后重新初始化设备的响应，需更新缓存区数据的token值
;;;935    					char *position;
;;;936    					u16_t Le_w_temp;
;;;937    					u8_t Le_u_i;
;;;938    					position = strchr(TxTempBuf.data, '\{');//首次出现'\{'的地址
;;;939    					Le_w_temp = position - TxTempBuf.data;//'\{'位置的下标
;;;940    					Le_w_temp = Le_w_temp + 10U;//token值域起始位置
;;;941    					for(Le_u_i = 0;Le_u_i < 39U;Le_u_i++)
;;;942    					{
;;;943    						TxTempBuf.data[Le_w_temp + Le_u_i] = pSub_token->valuestring[Le_u_i];
;;;944    					}
;;;945    				}
;;;946    			}
;;;947    			else
;;;948    			{		
;;;949    				cJSON * pSub_list = cJSON_GetObjectItem(pJson, "list");
;;;950    				if(NULL != pSub_list)
;;;951    				{//黑名单响应数据
;;;952    					cJSON * pSub_total = cJSON_GetObjectItem(pJson, "total");
;;;953    					cJSON * pSub_timestamp = cJSON_GetObjectItem(pJson, "timeStamp");
;;;954    					if(pSub_total->type == cJSON_String)
;;;955    					{
;;;956    						pSub_total->valueint = (int)(Json_DecNumber(&(pSub_total->valuestring[0])));
;;;957    					}
;;;958    					
;;;959    					if(0 != pSub_total->valueint)
;;;960    					{	
;;;961    						if(BListPull.page == pSub_total->valueint)
;;;962    						{
;;;963    							BListPull.timestamp = pSub_timestamp->valuedouble;
;;;964    							BListPull.page = 1U;
;;;965    							BListPull.UpdataFlag = 1U;
;;;966    							Se_dw_BListPullTimer = 0U;
;;;967    						}
;;;968    						else
;;;969    						{
;;;970    							BListPull.UpdataFlag = 0U;
;;;971    							BListPull.page++;
;;;972    							Se_dw_BListPullTimer = SHORTCNNT_PULLBLIST_PERIOD - 11000U;
;;;973    						}
;;;974    						USART_PRINTF_D("拉取页码：%d\n",BListPull.page);
;;;975    						/*网络发来的时间校准本地时钟芯片*/
;;;976    						//timestamp_strBJtime((BListPull.timestamp/1000),timelist);//时间戳转换为时间（字符串格式）
;;;977    						//timestamp_timeCalibration(timelist,TIME_STAMP_UNT);//校准时钟芯片时间	
;;;978    						/*提取网络黑名单数据*/
;;;979    						unsigned int BList_size = cJSON_GetArraySize(pSub_list);
;;;980    						USART_PRINTF_D("：黑名单卡号数量%d\n",BList_size);
;;;981    						unsigned int BList_i = 0;
;;;982    						unsigned char BList_j = 0;
;;;983    						uint8_t BList_cardNum[CLIENT_SHORTCNNT_CARDNUM_LNG];
;;;984    						char BList_cardNumString[8U];
;;;985    						char BList_cardNumLen;
;;;986    						cJSON *BList_item;
;;;987    						for(BList_i=0; BList_i< BList_size; BList_i++)
;;;988    						{
;;;989    							BList_item = cJSON_GetArrayItem(pSub_list, BList_i);
;;;990    							BList_cardNumLen = strlen(BList_item->valuestring);
;;;991    							if(BList_cardNumLen != 8U)
;;;992    							{
;;;993    								if(BList_cardNumLen > 8U)
;;;994    								{
;;;995    									USART_PRINTF_D("卡号编号 %s长度不符\n：",BList_item->valuestring);
;;;996    									continue;
;;;997    								}
;;;998    								else
;;;999    								{//卡号长度少于4字节，前面补0
;;;1000   									memset(BList_cardNumString,'0',8U);//清'0'
;;;1001   									for(BList_j = 0U;BList_j < BList_cardNumLen;BList_j++)
;;;1002   									{
;;;1003   										BList_cardNumString[8-BList_cardNumLen+BList_j] = BList_item->valuestring[BList_j];
;;;1004   									}
;;;1005   									tcp_shortConnect_StrToHex(BList_cardNumString,BList_cardNum);
;;;1006   								}
;;;1007   							}
;;;1008   							else
;;;1009   							{
;;;1010   								tcp_shortConnect_StrToHex(BList_item->valuestring,BList_cardNum);
;;;1011   							}
;;;1012   							WrBListCache_BListQueue(BList_cardNum);
;;;1013   							USART_PRINTF_D("卡号编号 %d 转换为Hex格式卡号：",BList_i);
;;;1014   							USART_PRINTF_CARD_NUM("%x%x%x%x\n",BList_cardNum[0U],BList_cardNum[1U],BList_cardNum[2U], \
;;;1015   												  BList_cardNum[3U]);
;;;1016   						}		
;;;1017   					}
;;;1018   					else
;;;1019   					{
;;;1020   						Se_dw_BListPullTimer = 0U;
;;;1021   					}
;;;1022   #if 0					
;;;1023   					if((BListPull.timestamp != BListPull.Oldtimestamp) || \
;;;1024   							(BListPull.page != BListPull.Oldpage))
;;;1025   					{
;;;1026   						BListPull.Oldtimestamp = BListPull.timestamp;
;;;1027   						BListPull.Oldpage = BListPull.page;
;;;1028   						(void)MemIf_WriteEE(EepromCfg_timestamp_page,&BListPull,sizeof(BListPull));//黑名单时间戳、页码等信息写入非易失性存储器
;;;1029   					}
;;;1030   #endif
;;;1031   				}
;;;1032   			}
;;;1033   		}
;;;1034   		break;
;;;1035   		case 308:
;;;1036   		{//token 过期
;;;1037   			USART_PRINTF_S("\n\r token过期");
;;;1038   			client_TxFlag.tokenOverdueFlag = 1U;		
;;;1039   		}
;;;1040   		break;
;;;1041   		default:
;;;1042   		{
;;;1043   			USART_PRINTF_S("状态码错误");
;;;1044   		}
;;;1045   		break;
;;;1046   	}
;;;1047   	cJSON_Delete(pJson);
;;;1048   	return 1U;
;;;1049   }
00003c  b004              ADD      sp,sp,#0x10
00003e  e8bd87f0          POP      {r4-r10,pc}
                  |L7.66|
000042  6920              LDR      r0,[r4,#0x10]         ;918
000044  f7fffffe          BL       Json_DecNumber
000048  6160              STR      r0,[r4,#0x14]         ;918
                  |L7.74|
00004a  4c79              LDR      r4,|L7.560|
00004c  f04f0a01          MOV      r10,#1                ;933
000050  b158              CBZ      r0,|L7.106|
000052  f5b07f9a          CMP      r0,#0x134             ;921
000056  d07b              BEQ      |L7.336|
000058  a176              ADR      r1,|L7.564|
00005a  a06f              ADR      r0,|L7.536|
00005c  f7fffffe          BL       __2printf
                  |L7.96|
000060  4648              MOV      r0,r9                 ;1047
000062  f7fffffe          BL       cJSON_Delete
000066  2001              MOVS     r0,#1                 ;1048
000068  e7e8              B        |L7.60|
                  |L7.106|
00006a  a175              ADR      r1,|L7.576|
00006c  a06a              ADR      r0,|L7.536|
00006e  f7fffffe          BL       __2printf
000072  2002              MOVS     r0,#2                 ;926
000074  7160              STRB     r0,[r4,#5]            ;926
000076  a175              ADR      r1,|L7.588|
000078  4648              MOV      r0,r9                 ;927
00007a  f7fffffe          BL       cJSON_GetObjectItem
00007e  0004              MOVS     r4,r0                 ;927
000080  d027              BEQ      |L7.210|
000082  6925              LDR      r5,[r4,#0x10]         ;930
000084  2227              MOVS     r2,#0x27              ;930
000086  4629              MOV      r1,r5                 ;930
000088  4872              LDR      r0,|L7.596|
00008a  f7fffffe          BL       __aeabi_memcpy
00008e  4868              LDR      r0,|L7.560|
000090  2227              MOVS     r2,#0x27              ;931
000092  4629              MOV      r1,r5                 ;931
000094  3010              ADDS     r0,r0,#0x10           ;931
000096  f7fffffe          BL       __aeabi_memcpy
00009a  486e              LDR      r0,|L7.596|
00009c  2227              MOVS     r2,#0x27              ;932
00009e  4629              MOV      r1,r5                 ;932
0000a0  3097              ADDS     r0,r0,#0x97           ;932
0000a2  f7fffffe          BL       __aeabi_memcpy
0000a6  4d6c              LDR      r5,|L7.600|
0000a8  f89503ea          LDRB     r0,[r5,#0x3ea]        ;933  ; TxTempBuf
0000ac  2801              CMP      r0,#1                 ;933
0000ae  d1d7              BNE      |L7.96|
0000b0  217b              MOVS     r1,#0x7b              ;938
0000b2  4628              MOV      r0,r5                 ;938
0000b4  f7fffffe          BL       strchr
0000b8  1b40              SUBS     r0,r0,r5              ;939
0000ba  300a              ADDS     r0,r0,#0xa            ;939
0000bc  b280              UXTH     r0,r0                 ;940
0000be  2100              MOVS     r1,#0                 ;941
                  |L7.192|
0000c0  6922              LDR      r2,[r4,#0x10]         ;943
0000c2  1843              ADDS     r3,r0,r1              ;943
0000c4  5c52              LDRB     r2,[r2,r1]            ;943
0000c6  1c49              ADDS     r1,r1,#1              ;943
0000c8  b2c9              UXTB     r1,r1                 ;941
0000ca  54ea              STRB     r2,[r5,r3]            ;943
0000cc  2927              CMP      r1,#0x27              ;941
0000ce  d3f7              BCC      |L7.192|
0000d0  e7c6              B        |L7.96|
                  |L7.210|
0000d2  a162              ADR      r1,|L7.604|
0000d4  4648              MOV      r0,r9                 ;949
0000d6  f7fffffe          BL       cJSON_GetObjectItem
0000da  ea5f0800          MOVS     r8,r0                 ;949
0000de  d0bf              BEQ      |L7.96|
0000e0  a160              ADR      r1,|L7.612|
0000e2  4648              MOV      r0,r9                 ;952
0000e4  f7fffffe          BL       cJSON_GetObjectItem
0000e8  4604              MOV      r4,r0                 ;952
0000ea  a160              ADR      r1,|L7.620|
0000ec  4648              MOV      r0,r9                 ;953
0000ee  f7fffffe          BL       cJSON_GetObjectItem
0000f2  4606              MOV      r6,r0                 ;953
0000f4  68e0              LDR      r0,[r4,#0xc]          ;954
0000f6  2810              CMP      r0,#0x10              ;954
0000f8  d103              BNE      |L7.258|
0000fa  6920              LDR      r0,[r4,#0x10]         ;956
0000fc  f7fffffe          BL       Json_DecNumber
000100  6160              STR      r0,[r4,#0x14]         ;956
                  |L7.258|
000102  6961              LDR      r1,[r4,#0x14]         ;959
000104  2500              MOVS     r5,#0                 ;959
000106  4f5c              LDR      r7,|L7.632|
000108  2900              CMP      r1,#0                 ;959
00010a  d06a              BEQ      |L7.482|
00010c  4c51              LDR      r4,|L7.596|
00010e  6c20              LDR      r0,[r4,#0x40]         ;961  ; BListPull
000110  4288              CMP      r0,r1                 ;961
000112  d10d              BNE      |L7.304|
000114  ed960b06          VLDR     d0,[r6,#0x18]         ;963
000118  ec510b10          VMOV     r0,r1,d0              ;963
00011c  f7fffffe          BL       __aeabi_d2ulz
000120  e9c4010c          STRD     r0,r1,[r4,#0x30]      ;963
000124  f8c4a040          STR      r10,[r4,#0x40]        ;965  ; BListPull
000128  f884a04a          STRB     r10,[r4,#0x4a]        ;965
00012c  623d              STR      r5,[r7,#0x20]         ;966  ; Se_dw_BListPullTimer
00012e  e005              B        |L7.316|
                  |L7.304|
000130  f884504a          STRB     r5,[r4,#0x4a]         ;970
000134  1c40              ADDS     r0,r0,#1              ;970
000136  6420              STR      r0,[r4,#0x40]         ;972  ; BListPull
000138  4850              LDR      r0,|L7.636|
00013a  6238              STR      r0,[r7,#0x20]         ;972  ; Se_dw_BListPullTimer
                  |L7.316|
00013c  a050              ADR      r0,|L7.640|
00013e  6c21              LDR      r1,[r4,#0x40]         ;974  ; BListPull
000140  f7fffffe          BL       __2printf
000144  4640              MOV      r0,r8                 ;979
000146  f7fffffe          BL       cJSON_GetArraySize
00014a  4607              MOV      r7,r0                 ;979
00014c  4601              MOV      r1,r0                 ;980
00014e  e000              B        |L7.338|
                  |L7.336|
000150  e049              B        |L7.486|
                  |L7.338|
000152  a04f              ADR      r0,|L7.656|
000154  f7fffffe          BL       __2printf
000158  2600              MOVS     r6,#0                 ;981
00015a  e03c              B        |L7.470|
                  |L7.348|
00015c  4631              MOV      r1,r6                 ;989
00015e  4640              MOV      r0,r8                 ;989
000160  f7fffffe          BL       cJSON_GetArrayItem
000164  4604              MOV      r4,r0                 ;989
000166  6900              LDR      r0,[r0,#0x10]         ;990
000168  f7fffffe          BL       strlen
00016c  b2c5              UXTB     r5,r0                 ;990
00016e  2d08              CMP      r5,#8                 ;991
000170  d034              BEQ      |L7.476|
000172  d904              BLS      |L7.382|
000174  a04b              ADR      r0,|L7.676|
000176  6921              LDR      r1,[r4,#0x10]         ;995
000178  f7fffffe          BL       __2printf
00017c  e02a              B        |L7.468|
                  |L7.382|
00017e  2230              MOVS     r2,#0x30              ;1000
000180  2108              MOVS     r1,#8                 ;1000
000182  a802              ADD      r0,sp,#8              ;1000
000184  f7fffffe          BL       __aeabi_memset
000188  2000              MOVS     r0,#0                 ;1001
00018a  ab02              ADD      r3,sp,#8              ;984
00018c  f1c50108          RSB      r1,r5,#8              ;1003
000190  e007              B        |L7.418|
                  |L7.402|
000192  6922              LDR      r2,[r4,#0x10]         ;1003
000194  eb010c00          ADD      r12,r1,r0             ;1003
000198  5c12              LDRB     r2,[r2,r0]            ;1003
00019a  1c40              ADDS     r0,r0,#1              ;1003
00019c  f803200c          STRB     r2,[r3,r12]           ;1003
0001a0  b2c0              UXTB     r0,r0                 ;1001
                  |L7.418|
0001a2  42a8              CMP      r0,r5                 ;1001
0001a4  d3f5              BCC      |L7.402|
0001a6  a901              ADD      r1,sp,#4              ;1005
0001a8  4618              MOV      r0,r3                 ;1005
                  |L7.426|
0001aa  f7fffffe          BL       tcp_shortConnect_StrToHex
0001ae  a801              ADD      r0,sp,#4              ;1012
0001b0  f7fffffe          BL       WrBListCache_BListQueue
0001b4  4631              MOV      r1,r6                 ;1013
0001b6  a041              ADR      r0,|L7.700|
0001b8  f7fffffe          BL       __2printf
0001bc  f89d0007          LDRB     r0,[sp,#7]            ;1014
0001c0  9000              STR      r0,[sp,#0]            ;1014
0001c2  f89d3006          LDRB     r3,[sp,#6]            ;1014
0001c6  f89d2005          LDRB     r2,[sp,#5]            ;1014
0001ca  f89d1004          LDRB     r1,[sp,#4]            ;1014
0001ce  a043              ADR      r0,|L7.732|
0001d0  f7fffffe          BL       __2printf
                  |L7.468|
0001d4  1c76              ADDS     r6,r6,#1              ;1014
                  |L7.470|
0001d6  42be              CMP      r6,r7                 ;987
0001d8  d3c0              BCC      |L7.348|
0001da  e741              B        |L7.96|
                  |L7.476|
0001dc  a901              ADD      r1,sp,#4              ;1010
0001de  6920              LDR      r0,[r4,#0x10]         ;1010
0001e0  e7e3              B        |L7.426|
                  |L7.482|
0001e2  623d              STR      r5,[r7,#0x20]         ;1020  ; Se_dw_BListPullTimer
0001e4  e73c              B        |L7.96|
                  |L7.486|
0001e6  a140              ADR      r1,|L7.744|
0001e8  a00b              ADR      r0,|L7.536|
0001ea  f7fffffe          BL       __2printf
0001ee  f884a008          STRB     r10,[r4,#8]           ;1038
0001f2  e735              B        |L7.96|
;;;1050   
                          ENDP

                  |L7.500|
0001f4  6572726f          DCB      "error",0
0001f8  7200    
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L7.508|
0001fc  bdd3cad5          DCB      189,211,202,213,202,253,190,221,189,226,206,246,179,201,"j"
000200  cafdbedd
000204  bde2cef6
000208  b3c96a  
00020b  736f6eb8          DCB      "son",184,241,202,189,202,167,176,220,0
00020f  f1cabdca
000213  a7b0dc00
000217  00                DCB      0
                  |L7.536|
000218  25730a00          DCB      "%s\n",0
                  |L7.540|
00021c  bbf1c8a1          DCB      187,241,200,161,179,201,212,177," error ",202,167,176,220
000220  b3c9d4b1
000224  20657272
000228  6f7220ca
00022c  a7b0dc  
00022f  00                DCB      0
                  |L7.560|
                          DCD      ||.bss||+0xd88
                  |L7.564|
000234  d7b4ccac          DCB      215,180,204,172,194,235,180,237,206,243,0
000238  c2ebb4ed
00023c  cef300  
00023f  00                DCB      0
                  |L7.576|
000240  d7b4ccac          DCB      215,180,204,172,194,235,213,253,200,183,0
000244  c2ebd5fd
000248  c8b700  
00024b  00                DCB      0
                  |L7.588|
00024c  746f6b65          DCB      "token",0
000250  6e00    
000252  00                DCB      0
000253  00                DCB      0
                  |L7.596|
                          DCD      ||.bss||+0xee0
                  |L7.600|
                          DCD      ||.bss||+0x99c
                  |L7.604|
00025c  6c697374          DCB      "list",0
000260  00      
000261  00                DCB      0
000262  00                DCB      0
000263  00                DCB      0
                  |L7.612|
000264  746f7461          DCB      "total",0
000268  6c00    
00026a  00                DCB      0
00026b  00                DCB      0
                  |L7.620|
00026c  74696d65          DCB      "timeStamp",0
000270  5374616d
000274  7000    
000276  00                DCB      0
000277  00                DCB      0
                  |L7.632|
                          DCD      ||.data||
                  |L7.636|
                          DCD      0x00055348
                  |L7.640|
000280  c0adc8a1          DCB      192,173,200,161,210,179,194,235,163,186,"%d\n",0
000284  d2b3c2eb
000288  a3ba2564
00028c  0a00    
00028e  00                DCB      0
00028f  00                DCB      0
                  |L7.656|
000290  a3babada          DCB      163,186,186,218,195,251,181,165,191,168,186,197,202,253,193
000294  c3fbb5a5
000298  bfa8bac5
00029c  cafdc1  
00029f  bf25640a          DCB      191,"%d\n",0
0002a3  00      
                  |L7.676|
0002a4  bfa8bac5          DCB      191,168,186,197,177,224,186,197," %s",179,164,182,200,178
0002a8  b1e0bac5
0002ac  202573b3
0002b0  a4b6c8b2
0002b4  bbb7fb0a          DCB      187,183,251,"\n",163,186,0
0002b8  a3ba00  
0002bb  00                DCB      0
                  |L7.700|
0002bc  bfa8bac5          DCB      191,168,186,197,177,224,186,197," %d ",215,170,187,187,206
0002c0  b1e0bac5
0002c4  20256420
0002c8  d7aabbbb
0002cc  ce      
0002cd  aa486578          DCB      170,"Hex",184,241,202,189,191,168,186,197,163,186,0
0002d1  b8f1cabd
0002d5  bfa8bac5
0002d9  a3ba00  
                  |L7.732|
0002dc  25782578          DCB      "%x%x%x%x\n",0
0002e0  25782578
0002e4  0a00    
0002e6  00                DCB      0
0002e7  00                DCB      0
                  |L7.744|
0002e8  0a0d2074          DCB      "\n\r token",185,253,198,218,0
0002ec  6f6b656e
0002f0  b9fdc6da
0002f4  00      
0002f5  00                DCB      0
0002f6  00                DCB      0
0002f7  00                DCB      0

                          AREA ||i.tcp_ShortConnect_sendMsg||, CODE, READONLY, ALIGN=2

                  tcp_ShortConnect_sendMsg PROC
;;;847    */
;;;848    void tcp_ShortConnect_sendMsg(char* data,u16_t len)
000000  460a              MOV      r2,r1
;;;849    {
;;;850    	tcp_write(echoclient_pcb,(char*)data ,len, 1);
000002  4601              MOV      r1,r0
000004  4802              LDR      r0,|L8.16|
000006  2301              MOVS     r3,#1
000008  6900              LDR      r0,[r0,#0x10]  ; echoclient_pcb
00000a  f7ffbffe          B.W      tcp_write
;;;851    	//tcp_output(echoclient_pcb);
;;;852    }
;;;853    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      ||.data||

                          AREA ||i.tcp_client_BListUpdataSt||, CODE, READONLY, ALIGN=2

                  tcp_client_BListUpdataSt PROC
;;;1053   */
;;;1054   uint8_t tcp_client_BListUpdataSt(void)
000000  4801              LDR      r0,|L9.8|
;;;1055   {
;;;1056   	return BListPull.UpdataFlag;
000002  f890004a          LDRB     r0,[r0,#0x4a]  ; BListPull
;;;1057   }
000006  4770              BX       lr
;;;1058   
                          ENDP

                  |L9.8|
                          DCD      ||.bss||+0xee0

                          AREA ||i.tcp_client_MacRecombine||, CODE, READONLY, ALIGN=1

                  tcp_client_MacRecombine PROC
;;;1065     */
;;;1066   static void tcp_client_MacRecombine(char* Le_u_mac)
000000  b57f              PUSH     {r0-r6,lr}
;;;1067   {
;;;1068   	char Le_u_i;
;;;1069   	char La_u_TempMac[13U] = {0};
000002  2300              MOVS     r3,#0
000004  9300              STR      r3,[sp,#0]
000006  9301              STR      r3,[sp,#4]
000008  9302              STR      r3,[sp,#8]
;;;1070   	for(Le_u_i=0U;Le_u_i < 13U;Le_u_i++)
00000a  4619              MOV      r1,r3
00000c  466c              MOV      r4,sp                 ;1069
00000e  9303              STR      r3,[sp,#0xc]          ;1069
                  |L10.16|
;;;1071   	{
;;;1072   		La_u_TempMac[Le_u_i] = Le_u_mac[Le_u_i];
000010  5c42              LDRB     r2,[r0,r1]
000012  5462              STRB     r2,[r4,r1]
000014  1c49              ADDS     r1,r1,#1
000016  b2c9              UXTB     r1,r1                 ;1070
000018  290d              CMP      r1,#0xd               ;1070
00001a  d3f9              BCC      |L10.16|
;;;1073   	}
;;;1074   	for(Le_u_i=0U;Le_u_i < 6U;Le_u_i++)
00001c  2100              MOVS     r1,#0
;;;1075   	{
;;;1076   		Le_u_mac[(3*(Le_u_i+1)-3)] = La_u_TempMac[(2*Le_u_i)];
;;;1077   		Le_u_mac[(3*(Le_u_i+1)-2)] = La_u_TempMac[(2*Le_u_i+1)];
;;;1078   		if(Le_u_i == 5U)
;;;1079   		{
;;;1080   			Le_u_mac[(3*(Le_u_i+1)-1)] = '\0';
;;;1081   		}
;;;1082   		else
;;;1083   		{
;;;1084   			Le_u_mac[(3*(Le_u_i+1)-1)] = ':';
00001e  253a              MOVS     r5,#0x3a
                  |L10.32|
000020  eb010241          ADD      r2,r1,r1,LSL #1       ;1076
000024  f8146011          LDRB     r6,[r4,r1,LSL #1]     ;1076
000028  5486              STRB     r6,[r0,r2]            ;1076
00002a  eb040641          ADD      r6,r4,r1,LSL #1       ;1077
00002e  4402              ADD      r2,r2,r0              ;1077
000030  7876              LDRB     r6,[r6,#1]            ;1077
000032  7056              STRB     r6,[r2,#1]            ;1077
000034  2905              CMP      r1,#5                 ;1078
000036  d005              BEQ      |L10.68|
000038  7095              STRB     r5,[r2,#2]
                  |L10.58|
00003a  1c49              ADDS     r1,r1,#1
00003c  b2c9              UXTB     r1,r1                 ;1074
00003e  2906              CMP      r1,#6                 ;1074
000040  d3ee              BCC      |L10.32|
;;;1085   		}
;;;1086   	}
;;;1087   }
000042  bd7f              POP      {r0-r6,pc}
                  |L10.68|
000044  7443              STRB     r3,[r0,#0x11]         ;1080
000046  e7f8              B        |L10.58|
;;;1088   
                          ENDP


                          AREA ||i.tcp_client_httpPostRequest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  tcp_client_httpPostRequest PROC
;;;864      */
;;;865    static void tcp_client_httpPostRequest(char* postAddr,char* Le_u_in,u16_t * Le_u_len,char* Le_u_out,u8_t Le_u_ConnectionValue)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;866    {
000004  b08a              SUB      sp,sp,#0x28
000006  4607              MOV      r7,r0
;;;867    	char str[5U] = {0};
000008  2000              MOVS     r0,#0
00000a  9d10              LDR      r5,[sp,#0x40]
;;;868    	char Le_u_IPaddr[16U] = {0};
00000c  9007              STR      r0,[sp,#0x1c]
00000e  9006              STR      r0,[sp,#0x18]         ;867
000010  9002              STR      r0,[sp,#8]
000012  9003              STR      r0,[sp,#0xc]
000014  9004              STR      r0,[sp,#0x10]
;;;869    	sprintf(str, "%d", *Le_u_len);
000016  9005              STR      r0,[sp,#0x14]
000018  4614              MOV      r4,r2                 ;866
00001a  4688              MOV      r8,r1                 ;866
00001c  461e              MOV      r6,r3                 ;866
00001e  8812              LDRH     r2,[r2,#0]
000020  a130              ADR      r1,|L11.228|
000022  a806              ADD      r0,sp,#0x18
000024  f7fffffe          BL       __2sprintf
;;;870    	strcat(Le_u_out, postAddr);
000028  4639              MOV      r1,r7
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       strcat
;;;871    	strcat(Le_u_out, "Content-Type: application/json;charset=UTF-8\n");
000030  a12d              ADR      r1,|L11.232|
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       strcat
;;;872    	strcat(Le_u_out, "Host: ");
000038  a137              ADR      r1,|L11.280|
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       strcat
;;;873    	tcp_shortConnect_HexIPtoStr(ShortConnect_DestIPaddr,Le_u_IPaddr);
000040  4837              LDR      r0,|L11.288|
000042  2118              MOVS     r1,#0x18
000044  af02              ADD      r7,sp,#8
000046  f8d0c01c          LDR      r12,[r0,#0x1c]  ; ShortConnect_DestIPaddr
00004a  2000              MOVS     r0,#0
00004c  ab08              ADD      r3,sp,#0x20
                  |L11.78|
00004e  fa2cf201          LSR      r2,r12,r1
000052  541a              STRB     r2,[r3,r0]
000054  3908              SUBS     r1,r1,#8
000056  1c40              ADDS     r0,r0,#1
000058  b2c0              UXTB     r0,r0
00005a  b2c9              UXTB     r1,r1
00005c  2804              CMP      r0,#4
00005e  d3f6              BCC      |L11.78|
000060  f89d1020          LDRB     r1,[sp,#0x20]
000064  f89d0021          LDRB     r0,[sp,#0x21]
000068  e9cd0100          STRD     r0,r1,[sp,#0]
00006c  f89d3022          LDRB     r3,[sp,#0x22]
000070  f89d2023          LDRB     r2,[sp,#0x23]
000074  a12b              ADR      r1,|L11.292|
000076  4638              MOV      r0,r7
000078  f7fffffe          BL       __2sprintf
;;;874    	strcat(Le_u_out, Le_u_IPaddr);
00007c  a902              ADD      r1,sp,#8
00007e  4630              MOV      r0,r6
000080  f7fffffe          BL       strcat
;;;875    	strcat(Le_u_out, "\n");
000084  a123              ADR      r1,|L11.276|
000086  4630              MOV      r0,r6
000088  f7fffffe          BL       strcat
;;;876    	strcat(Le_u_out, "Content-Length: ");
00008c  a128              ADR      r1,|L11.304|
00008e  4630              MOV      r0,r6
000090  f7fffffe          BL       strcat
;;;877    	strcat(Le_u_out, str);
000094  a906              ADD      r1,sp,#0x18
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       strcat
;;;878    	strcat(Le_u_out, "\n");
00009c  a11d              ADR      r1,|L11.276|
00009e  4630              MOV      r0,r6
0000a0  f7fffffe          BL       strcat
;;;879    	if(Le_u_ConnectionValue == 1U)
0000a4  2d01              CMP      r5,#1
0000a6  d01a              BEQ      |L11.222|
;;;880    	{
;;;881    		strcat(Le_u_out, "Connection: keep-alive\n");
;;;882    	}
;;;883    	else
;;;884    	{
;;;885    		strcat(Le_u_out, "Connection: close\n");
0000a8  a126              ADR      r1,|L11.324|
                  |L11.170|
0000aa  4630              MOV      r0,r6
0000ac  f7fffffe          BL       strcat
;;;886    	}
;;;887    	strcat(Le_u_out, "\n");//需要空一行
0000b0  a118              ADR      r1,|L11.276|
0000b2  4630              MOV      r0,r6
0000b4  f7fffffe          BL       strcat
;;;888    	//Le_u_in 的值为post的数据
;;;889    	strcat(Le_u_out, Le_u_in);
0000b8  4641              MOV      r1,r8
0000ba  4630              MOV      r0,r6
0000bc  f7fffffe          BL       strcat
;;;890    	strcat(Le_u_out, "\r\n\r\n");
0000c0  a125              ADR      r1,|L11.344|
0000c2  4630              MOV      r0,r6
0000c4  f7fffffe          BL       strcat
;;;891    	*Le_u_len = strlen(Le_u_out);
0000c8  4630              MOV      r0,r6
0000ca  f7fffffe          BL       strlen
0000ce  8020              STRH     r0,[r4,#0]
;;;892    	USART_PRINTF_S(Le_u_out);
0000d0  4631              MOV      r1,r6
0000d2  a023              ADR      r0,|L11.352|
0000d4  f7fffffe          BL       __2printf
;;;893    }
0000d8  b00a              ADD      sp,sp,#0x28
0000da  e8bd81f0          POP      {r4-r8,pc}
                  |L11.222|
0000de  a121              ADR      r1,|L11.356|
0000e0  e7e3              B        |L11.170|
;;;894    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L11.228|
0000e4  256400            DCB      "%d",0
0000e7  00                DCB      0
                  |L11.232|
0000e8  436f6e74          DCB      "Content-Type: application/json;charset=UTF-8"
0000ec  656e742d
0000f0  54797065
0000f4  3a206170
0000f8  706c6963
0000fc  6174696f
000100  6e2f6a73
000104  6f6e3b63
000108  68617273
00010c  65743d55
000110  54462d38
                  |L11.276|
000114  0a00              DCB      "\n",0
000116  00                DCB      0
000117  00                DCB      0
                  |L11.280|
000118  486f7374          DCB      "Host: ",0
00011c  3a2000  
00011f  00                DCB      0
                  |L11.288|
                          DCD      ||.data||
                  |L11.292|
000124  25642e25          DCB      "%d.%d.%d.%d",0
000128  642e2564
00012c  2e256400
                  |L11.304|
000130  436f6e74          DCB      "Content-Length: ",0
000134  656e742d
000138  4c656e67
00013c  74683a20
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
                  |L11.324|
000144  436f6e6e          DCB      "Connection: close\n",0
000148  65637469
00014c  6f6e3a20
000150  636c6f73
000154  650a00  
000157  00                DCB      0
                  |L11.344|
000158  0d0a0d0a          DCB      "\r\n\r\n",0
00015c  00      
00015d  00                DCB      0
00015e  00                DCB      0
00015f  00                DCB      0
                  |L11.352|
000160  25730a00          DCB      "%s\n",0
                  |L11.356|
000164  436f6e6e          DCB      "Connection: keep-alive\n",0
000168  65637469
00016c  6f6e3a20
000170  6b656570
000174  2d616c69
000178  76650a00

                          AREA ||i.tcp_echoclient_connected||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  tcp_echoclient_connected PROC
;;;663      */
;;;664    static err_t tcp_echoclient_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
000000  b570              PUSH     {r4-r6,lr}
;;;665    {
;;;666    	if(err == ERR_OK)   
;;;667    	{
;;;668    		/* allocate structure es to maintain tcp connection informations */
;;;669    		echoclient_es = (struct echoclient *)mem_malloc(sizeof(struct echoclient));
000002  4c19              LDR      r4,|L12.104|
000004  0016              MOVS     r6,r2                 ;665
000006  460d              MOV      r5,r1                 ;665
000008  d009              BEQ      |L12.30|
;;;670    		if(echoclient_es != NULL)
;;;671    		{
;;;672    			echoclient_es->state = ES_CONNECTED;
;;;673    			echoclient_es->pcb = NULL;
;;;674    			echoclient_es->p_tx = NULL;
;;;675    			/* pass newly allocated es structure as argument to tpcb */
;;;676    			tcp_arg(tpcb, echoclient_es);
;;;677    
;;;678    			/* initialize LwIP tcp_recv callback function */ 
;;;679    			tcp_recv(tpcb, tcp_echoclient_recv);
;;;680    
;;;681    			/* initialize LwIP tcp_sent callback function */
;;;682    			//tcp_sent(tpcb, tcp_echoclient_sent);
;;;683    
;;;684    			/* initialize LwIP tcp_poll callback function */
;;;685    			tcp_poll(tpcb, tcp_echoclient_poll, 1);
;;;686    
;;;687    			return ERR_OK;
;;;688    		}
;;;689    		else
;;;690    		{
;;;691    			USART_PRINTF_S("短连接structure es分配失败");
;;;692    			/* close connection */
;;;693    			tcp_echoclient_connection_close(tpcb, echoclient_es);
;;;694    			/* return memory allocation error */
;;;695    			return ERR_MEM;  
;;;696    		}
;;;697    	}
;;;698    	else
;;;699    	{
;;;700    		USART_PRINTF_D("短连接连接回调函数 err: %d\n",err);
00000a  4611              MOV      r1,r2
00000c  a017              ADR      r0,|L12.108|
00000e  f7fffffe          BL       __2printf
;;;701    		/* close connection */
;;;702    		tcp_echoclient_connection_close(tpcb, echoclient_es);
000012  4628              MOV      r0,r5
000014  6961              LDR      r1,[r4,#0x14]  ; echoclient_es
000016  f7fffffe          BL       tcp_echoclient_connection_close
;;;703    	}
;;;704    	return err;
00001a  4630              MOV      r0,r6
;;;705    }
00001c  bd70              POP      {r4-r6,pc}
                  |L12.30|
00001e  200c              MOVS     r0,#0xc               ;669
000020  f7fffffe          BL       mem_malloc
000024  6160              STR      r0,[r4,#0x14]         ;669  ; echoclient_es
000026  1e01              SUBS     r1,r0,#0              ;669
000028  d012              BEQ      |L12.80|
00002a  2001              MOVS     r0,#1                 ;672
00002c  7008              STRB     r0,[r1,#0]            ;672
00002e  2000              MOVS     r0,#0                 ;673
000030  6048              STR      r0,[r1,#4]            ;674
000032  6088              STR      r0,[r1,#8]            ;676
000034  4628              MOV      r0,r5                 ;676
000036  f7fffffe          BL       tcp_arg
00003a  4913              LDR      r1,|L12.136|
00003c  4628              MOV      r0,r5                 ;679
00003e  f7fffffe          BL       tcp_recv
000042  2201              MOVS     r2,#1                 ;685
000044  4911              LDR      r1,|L12.140|
000046  4628              MOV      r0,r5                 ;685
000048  f7fffffe          BL       tcp_poll
00004c  2000              MOVS     r0,#0                 ;687
00004e  bd70              POP      {r4-r6,pc}
                  |L12.80|
000050  a10f              ADR      r1,|L12.144|
000052  a016              ADR      r0,|L12.172|
000054  f7fffffe          BL       __2printf
000058  4628              MOV      r0,r5                 ;693
00005a  6961              LDR      r1,[r4,#0x14]         ;693  ; echoclient_es
00005c  f7fffffe          BL       tcp_echoclient_connection_close
000060  f04f30ff          MOV      r0,#0xffffffff        ;695
000064  bd70              POP      {r4-r6,pc}
;;;706        
                          ENDP

000066  0000              DCW      0x0000
                  |L12.104|
                          DCD      ||.data||
                  |L12.108|
00006c  b6ccc1ac          DCB      182,204,193,172,189,211,193,172,189,211,187,216,181,247,186
000070  bdd3c1ac
000074  bdd3bbd8
000078  b5f7ba  
00007b  afcafd20          DCB      175,202,253," err: %d\n",0
00007f  6572723a
000083  2025640a
000087  00      
                  |L12.136|
                          DCD      tcp_echoclient_recv
                  |L12.140|
                          DCD      tcp_echoclient_poll
                  |L12.144|
000090  b6ccc1ac          DCB      182,204,193,172,189,211,"structure es",183,214,197,228,202
000094  bdd37374
000098  72756374
00009c  75726520
0000a0  6573b7d6
0000a4  c5e4ca  
0000a7  a7b0dc00          DCB      167,176,220,0
0000ab  00                DCB      0
                  |L12.172|
0000ac  25730a00          DCB      "%s\n",0

                          AREA ||i.tcp_echoclient_connection_close||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tcp_echoclient_connection_close PROC
;;;816      */
;;;817    static void tcp_echoclient_connection_close(struct tcp_pcb *tpcb, struct echoclient * es )
000000  b510              PUSH     {r4,lr}
;;;818    {
000002  4604              MOV      r4,r0
000004  b149              CBZ      r1,|L13.26|
;;;819    	
;;;820    	if (es != NULL)
;;;821    	{
;;;822    		mem_free(es);
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       mem_free
;;;823    		echoclient_es = NULL;
00000c  4911              LDR      r1,|L13.84|
00000e  2000              MOVS     r0,#0
;;;824    		USART_PRINTF_S("free echoclient_es\n");
000010  6148              STR      r0,[r1,#0x14]  ; echoclient_es
000012  a111              ADR      r1,|L13.88|
000014  a015              ADR      r0,|L13.108|
000016  f7fffffe          BL       __2printf
                  |L13.26|
;;;825    	}
;;;826    	
;;;827    	if(tpcb != NULL)
00001a  b1ac              CBZ      r4,|L13.72|
;;;828    	{
;;;829    		/* remove callbacks */
;;;830    		tcp_arg(tpcb,NULL);  
00001c  2100              MOVS     r1,#0
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       tcp_arg
;;;831    		tcp_recv(tpcb,NULL);
000024  2100              MOVS     r1,#0
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       tcp_recv
;;;832    		tcp_err(tpcb,NULL);
00002c  2100              MOVS     r1,#0
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       tcp_err
;;;833    		//tcp_sent(tpcb, NULL);
;;;834    		tcp_poll(tpcb, NULL,0);
000034  2200              MOVS     r2,#0
000036  4611              MOV      r1,r2
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       tcp_poll
;;;835    		//tcp_abort(tpcb);//终止连接,删除pcb控制块	
;;;836    		/* close tcp connection */
;;;837    		tcp_close(tpcb);
00003e  4620              MOV      r0,r4
000040  e8bd4010          POP      {r4,lr}
000044  f7ffbffe          B.W      tcp_close
                  |L13.72|
;;;838    	}
;;;839    	else
;;;840    	{
;;;841    		USART_PRINTF_S("echoclient_pcb == NULL");
000048  e8bd4010          POP      {r4,lr}
00004c  a108              ADR      r1,|L13.112|
00004e  a007              ADR      r0,|L13.108|
000050  f7ffbffe          B.W      __2printf
;;;842    	}
;;;843    }
;;;844    
                          ENDP

                  |L13.84|
                          DCD      ||.data||
                  |L13.88|
000058  66726565          DCB      "free echoclient_es\n",0
00005c  20656368
000060  6f636c69
000064  656e745f
000068  65730a00
                  |L13.108|
00006c  25730a00          DCB      "%s\n",0
                  |L13.112|
000070  6563686f          DCB      "echoclient_pcb == NULL",0
000074  636c6965
000078  6e745f70
00007c  6362203d
000080  3d204e55
000084  4c4c00  
000087  00                DCB      0

                          AREA ||i.tcp_echoclient_poll||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  tcp_echoclient_poll PROC
;;;791      */
;;;792    static err_t tcp_echoclient_poll(void *arg, struct tcp_pcb *tpcb)
000000  b510              PUSH     {r4,lr}
;;;793    {
000002  0002              MOVS     r2,r0
000004  460c              MOV      r4,r1
;;;794    	err_t ret_err;
;;;795    	struct echoclient *es;
;;;796    	ret_err = ERR_OK;
000006  f04f0000          MOV      r0,#0
00000a  d108              BNE      |L14.30|
;;;797    	es = (struct echoclient*)arg;
;;;798    	if (es == NULL)
;;;799    	{
;;;800    		USART_PRINTF_S("short connection tcp_poll 回调函数 ret_err = ERR_ABRT");
00000c  a104              ADR      r1,|L14.32|
00000e  a012              ADR      r0,|L14.88|
000010  f7fffffe          BL       __2printf
;;;801    		//if(tpcb != NULL)
;;;802    		{
;;;803    			tcp_abort(tpcb);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       tcp_abort
;;;804    		}
;;;805    		ret_err = ERR_ABRT;
00001a  f06f0009          MVN      r0,#9
                  |L14.30|
;;;806    	}
;;;807    	return ret_err;
;;;808    }
00001e  bd10              POP      {r4,pc}
;;;809    
                          ENDP

                  |L14.32|
000020  73686f72          DCB      "short connection tcp_poll ",187,216,181,247,186,175,202
000024  7420636f
000028  6e6e6563
00002c  74696f6e
000030  20746370
000034  5f706f6c
000038  6c20bbd8
00003c  b5f7baaf
000040  ca      
000041  fd207265          DCB      253," ret_err = ERR_ABRT",0
000045  745f6572
000049  72203d20
00004d  4552525f
000051  41425254
000055  00      
000056  00                DCB      0
000057  00                DCB      0
                  |L14.88|
000058  25730a00          DCB      "%s\n",0

                          AREA ||i.tcp_echoclient_recv||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tcp_echoclient_recv PROC
;;;713      */
;;;714    static err_t tcp_echoclient_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;715    { 
000004  461e              MOV      r6,r3
000006  4614              MOV      r4,r2
000008  460f              MOV      r7,r1
00000a  0005              MOVS     r5,r0
00000c  d102              BNE      |L15.20|
;;;716    	struct echoclient *es;
;;;717    	err_t ret_err;
;;;718    	u16_t Le_w_i;
;;;719    	char *position;
;;;720    	u16_t Le_w_temp;
;;;721    	LWIP_ASSERT("arg != NULL",arg != NULL);
00000e  a02b              ADR      r0,|L15.188|
000010  f7fffffe          BL       __2printf
                  |L15.20|
;;;722    
;;;723    	es = (struct echoclient *)arg;
;;;724    
;;;725    	/* if we receive an empty tcp frame from server => close connection */
;;;726    	if (p == NULL)
000014  b174              CBZ      r4,|L15.52|
;;;727    	{//接收到空的数据包，则为服务端断开连接了
;;;728    		USART_PRINTF_S("短连接接收函数：p==NULL");
;;;729    		ret_err = ERR_OK;
;;;730    	}   
;;;731    	/* else : a non empty frame was received from echo server but for some reason err != ERR_OK */
;;;732    	else if(err != ERR_OK)
000016  b196              CBZ      r6,|L15.62|
;;;733    	{
;;;734    		USART_PRINTF_S("短连接接收函数：err!=ERR_OK");
000018  a12b              ADR      r1,|L15.200|
00001a  a032              ADR      r0,|L15.228|
00001c  f7fffffe          BL       __2printf
;;;735    		/* Acknowledge data reception */
;;;736    		tcp_recved(tpcb, p->tot_len);
000020  8921              LDRH     r1,[r4,#8]
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       tcp_recved
;;;737    		/* free received pbuf*/
;;;738    		pbuf_free(p);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       pbuf_free
;;;739    
;;;740    		ret_err = err;
00002e  4630              MOV      r0,r6
                  |L15.48|
;;;741    	}
;;;742    	else if(es->state == ES_CONNECTED)
;;;743    	{
;;;744    		/* increment message count */
;;;745    		//client_TxFlag.EchoFlag = 2U;//得到服务器响应
;;;746    		/* Acknowledge data reception */
;;;747    		tcp_recved(tpcb, p->tot_len);// 必须调用，否则会引起发送窗口为0导致数据不能发送 
;;;748    		if(CLIENT_SHORTCNNT_REMOTEPORT == tpcb->remote_port)
;;;749    		{//从http报文中解析出数据体
;;;750    			memset(ShortRecev_buf,0,sizeof(ShortRecev_buf));//清0
;;;751    			position = strchr(p->payload, '\{');//首次出现'\{'的地址
;;;752    			Le_w_temp = position - (char*)p->payload;//'\{'位置的下标
;;;753    			if((p->tot_len - Le_w_temp) < sizeof(ShortRecev_buf))
;;;754    			{
;;;755    				for(Le_w_i = Le_w_temp;Le_w_i < p->tot_len;Le_w_i++)
;;;756    				{
;;;757    					ShortRecev_buf[Le_w_i - Le_w_temp] = ((char*)p->payload)[Le_w_i];
;;;758    				}
;;;759    				USART_PRINTF_S(ShortRecev_buf);
;;;760    				
;;;761    				tcp_ShortConnect_parseJson(ShortRecev_buf);
;;;762    			}
;;;763    			else
;;;764    			{
;;;765    				/*接收数据溢出*/
;;;766    			}
;;;767    		}
;;;768    		/* free received pbuf*/
;;;769    		pbuf_free(p);
;;;770    		ret_err = ERR_OK;
;;;771    	}
;;;772    	/* data received when connection already closed */
;;;773    	else
;;;774    	{
;;;775    		USART_PRINTF_S("短连接接收到未知数据");
;;;776    		/* Acknowledge data reception */
;;;777    		tcp_recved(tpcb, p->tot_len);
;;;778    		/* free pbuf and do nothing */
;;;779    		pbuf_free(p);
;;;780    		ret_err = ERR_OK;
;;;781    	}
;;;782    	return ret_err;
;;;783    }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L15.52|
000034  a12c              ADR      r1,|L15.232|
000036  a02b              ADR      r0,|L15.228|
000038  f7fffffe          BL       __2printf
00003c  e03b              B        |L15.182|
                  |L15.62|
00003e  7828              LDRB     r0,[r5,#0]            ;742
000040  2801              CMP      r0,#1                 ;742
000042  d008              BEQ      |L15.86|
000044  a12e              ADR      r1,|L15.256|
000046  a027              ADR      r0,|L15.228|
000048  f7fffffe          BL       __2printf
00004c  8921              LDRH     r1,[r4,#8]            ;777
00004e  4638              MOV      r0,r7                 ;777
000050  f7fffffe          BL       tcp_recved
000054  e02c              B        |L15.176|
                  |L15.86|
000056  8921              LDRH     r1,[r4,#8]            ;747
000058  4638              MOV      r0,r7                 ;747
00005a  f7fffffe          BL       tcp_recved
00005e  8bb8              LDRH     r0,[r7,#0x1c]         ;748
000060  f5a051f8          SUB      r1,r0,#0x1f00         ;748
000064  399a              SUBS     r1,r1,#0x9a           ;748
000066  d123              BNE      |L15.176|
000068  f24055b4          MOV      r5,#0x5b4             ;750
00006c  4629              MOV      r1,r5                 ;750
00006e  482a              LDR      r0,|L15.280|
000070  f7fffffe          BL       __aeabi_memclr4
000074  217b              MOVS     r1,#0x7b              ;751
000076  6860              LDR      r0,[r4,#4]            ;751
000078  f7fffffe          BL       strchr
00007c  88a1              LDRH     r1,[r4,#4]            ;752
00007e  1a40              SUBS     r0,r0,r1              ;752
000080  b282              UXTH     r2,r0                 ;752
000082  8920              LDRH     r0,[r4,#8]            ;753
000084  1a80              SUBS     r0,r0,r2              ;753
000086  42a8              CMP      r0,r5                 ;753
000088  d212              BCS      |L15.176|
00008a  4610              MOV      r0,r2                 ;755
00008c  4922              LDR      r1,|L15.280|
00008e  e005              B        |L15.156|
                  |L15.144|
000090  6863              LDR      r3,[r4,#4]            ;757
000092  1a85              SUBS     r5,r0,r2              ;757
000094  5c1b              LDRB     r3,[r3,r0]            ;757
000096  1c40              ADDS     r0,r0,#1              ;757
000098  554b              STRB     r3,[r1,r5]            ;757
00009a  b280              UXTH     r0,r0                 ;755
                  |L15.156|
00009c  8923              LDRH     r3,[r4,#8]            ;755
00009e  4283              CMP      r3,r0                 ;755
0000a0  d8f6              BHI      |L15.144|
0000a2  491d              LDR      r1,|L15.280|
0000a4  a00f              ADR      r0,|L15.228|
0000a6  f7fffffe          BL       __2printf
0000aa  481b              LDR      r0,|L15.280|
0000ac  f7fffffe          BL       tcp_ShortConnect_parseJson
                  |L15.176|
0000b0  4620              MOV      r0,r4                 ;769
0000b2  f7fffffe          BL       pbuf_free
                  |L15.182|
0000b6  2000              MOVS     r0,#0                 ;729
0000b8  e7ba              B        |L15.48|
;;;784    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L15.188|
0000bc  61726720          DCB      "arg != NULL",0
0000c0  213d204e
0000c4  554c4c00
                  |L15.200|
0000c8  b6ccc1ac          DCB      182,204,193,172,189,211,189,211,202,213,186,175,202,253,163
0000cc  bdd3bdd3
0000d0  cad5baaf
0000d4  cafda3  
0000d7  ba657272          DCB      186,"err!=ERR_OK",0
0000db  213d4552
0000df  525f4f4b
0000e3  00      
                  |L15.228|
0000e4  25730a00          DCB      "%s\n",0
                  |L15.232|
0000e8  b6ccc1ac          DCB      182,204,193,172,189,211,189,211,202,213,186,175,202,253,163
0000ec  bdd3bdd3
0000f0  cad5baaf
0000f4  cafda3  
0000f7  ba703d3d          DCB      186,"p==NULL",0
0000fb  4e554c4c
0000ff  00      
                  |L15.256|
000100  b6ccc1ac          DCB      182,204,193,172,189,211,189,211,202,213,181,189,206,180,214
000104  bdd3bdd3
000108  cad5b5bd
00010c  ceb4d6  
00010f  aacafdbe          DCB      170,202,253,190,221,0
000113  dd00    
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0
                  |L15.280|
                          DCD      ||.bss||+0x3e8

                          AREA ||i.tcp_shortConnect_StrToHex||, CODE, READONLY, ALIGN=1

                  tcp_shortConnect_StrToHex PROC
;;;1091   */
;;;1092   static void tcp_shortConnect_StrToHex(char* Le_in, uint8_t* Le_out)
000000  b510              PUSH     {r4,lr}
;;;1093   {
;;;1094   	uint8_t Le_u_i;
;;;1095   	for(Le_u_i = 0U;Le_u_i < 4U;Le_u_i++)
000002  2200              MOVS     r2,#0
                  |L16.4|
;;;1096   	{
;;;1097   		if((Le_in[2*Le_u_i] >= '0') && (Le_in[2*Le_u_i] <= '9'))
000004  f8103012          LDRB     r3,[r0,r2,LSL #1]
000008  f1a30430          SUB      r4,r3,#0x30
00000c  2c09              CMP      r4,#9
;;;1098   		{
;;;1099   			Le_out[Le_u_i] = ((Le_in[2*Le_u_i]-0x30) << 4U);
;;;1100   		}
;;;1101   		else
;;;1102   		{
;;;1103   			Le_out[Le_u_i] = ((Le_in[2*Le_u_i]-0x37) << 4U);
00000e  ea4f1303          LSL      r3,r3,#4
000012  d901              BLS      |L16.24|
000014  f5a3735c          SUB      r3,r3,#0x370          ;1097
                  |L16.24|
000018  548b              STRB     r3,[r1,r2]
;;;1104   		}
;;;1105   		
;;;1106   		if((Le_in[2*Le_u_i+1] >= '0') && (Le_in[2*Le_u_i+1] <= '9'))
00001a  eb000342          ADD      r3,r0,r2,LSL #1
00001e  785c              LDRB     r4,[r3,#1]
000020  f1a40330          SUB      r3,r4,#0x30
000024  2b09              CMP      r3,#9
000026  d805              BHI      |L16.52|
;;;1107   		{
;;;1108   			Le_out[Le_u_i] |= ((Le_in[2*Le_u_i + 1] -0x30) & 0x0f);
000028  5c8c              LDRB     r4,[r1,r2]
00002a  f003030f          AND      r3,r3,#0xf
00002e  431c              ORRS     r4,r4,r3
000030  548c              STRB     r4,[r1,r2]
000032  e005              B        |L16.64|
                  |L16.52|
;;;1109   		}
;;;1110   		else
;;;1111   		{
;;;1112   			Le_out[Le_u_i] |= ((Le_in[2*Le_u_i + 1] -0x37) & 0x0f);
000034  5c8b              LDRB     r3,[r1,r2]
000036  1fe4              SUBS     r4,r4,#7
000038  f004040f          AND      r4,r4,#0xf
00003c  4323              ORRS     r3,r3,r4
00003e  548b              STRB     r3,[r1,r2]
                  |L16.64|
000040  1c52              ADDS     r2,r2,#1
000042  b2d2              UXTB     r2,r2                 ;1095
000044  2a04              CMP      r2,#4                 ;1095
000046  d3dd              BCC      |L16.4|
;;;1113   		}
;;;1114   	}
;;;1115   }
000048  bd10              POP      {r4,pc}
;;;1116   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  Setcp_u_shortCnntTxbuf
                          %        1000
                  ShortRecev_buf
                          %        1460
                  TxTempBuf
                          %        1004
                  client_TxFlag
                          %        16
                  Setcp_h_OpenLog
                          %        328
                  BListPull
                          %        80
                  DeviceInit
                          %        71
                  Se_h_doorSt
                          %        41
                  Se_h_UpdateBList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  Setcp_client_u_cnntSt
000000  00                DCB      0x00
                  Setcp_client_u_TxBusyFlg
000001  00                DCB      0x00
                  Setcp_client_u_TimeoutCnt
000002  0000              DCB      0x00,0x00
                  Setcp_client_w_TxTimer
000004  0000              DCW      0x0000
                  Setcp_client_w_ConntTimer
000006  0000              DCW      0x0000
                  Setcp_client_w_HeartTimer
000008  0000              DCW      0x0000
                  Setcp_client_w_DoorStTimer
00000a  0000              DCW      0x0000
                  Se_w_OpenDoorLogTimer
00000c  0000              DCW      0x0000
00000e  0000              DCB      0x00,0x00
                  echoclient_pcb
                          DCD      0x00000000
                  echoclient_es
                          DCD      0x00000000
                  ShortConnect_LocalIPaddr
                          DCD      0x00000000
                  ShortConnect_DestIPaddr
                          DCD      0x00000000
                  Se_dw_BListPullTimer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Lwip\\App\\tcp_client_ShortConnect.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___25_tcp_client_ShortConnect_c_057c249b____REV16|
#line 138 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___25_tcp_client_ShortConnect_c_057c249b____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___25_tcp_client_ShortConnect_c_057c249b____REVSH|
#line 153
|__asm___25_tcp_client_ShortConnect_c_057c249b____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___25_tcp_client_ShortConnect_c_057c249b____RRX|
#line 328
|__asm___25_tcp_client_ShortConnect_c_057c249b____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
